
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000257e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f3c  08025970  08025970  00035970  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a8ac  0802a8ac  00040444  2**0
                  CONTENTS
  4 .ARM          00000008  0802a8ac  0802a8ac  0003a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a8b4  0802a8b4  00040444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a8b4  0802a8b4  0003a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a8bc  0802a8bc  0003a8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  0802a8c0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040444  2**0
                  CONTENTS
 10 .bss          000021ec  20000444  20000444  00040444  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002630  20002630  00040444  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040444  2**0
                  CONTENTS, READONLY
 13 .debug_info   0010eecf  00000000  00000000  00040474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001158b  00000000  00000000  0014f343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004f38  00000000  00000000  001608d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004cd8  00000000  00000000  00165808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033e68  00000000  00000000  0016a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00057195  00000000  00000000  0019e348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018e27f  00000000  00000000  001f54dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0038375c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000180d0  00000000  00000000  003837ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000444 	.word	0x20000444
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08025958 	.word	0x08025958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000448 	.word	0x20000448
 80001cc:	08025958 	.word	0x08025958

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f008 f97b 	bl	80093c0 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f00a f927 	bl	800b326 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f00a f920 	bl	800b326 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f008 f968 	bl	80093c0 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	20000460 	.word	0x20000460

08001100 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:
}


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 800110e:	2258      	movs	r2, #88	; 0x58
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4855      	ldr	r0, [pc, #340]	; (8001268 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 8001114:	f021 fbe0 	bl	80228d8 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	b2da      	uxtb	r2, r3
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	4313      	orrs	r3, r2
 8001126:	b2db      	uxtb	r3, r3
 8001128:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	b2da      	uxtb	r2, r3
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	4313      	orrs	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 800113c:	f107 030f 	add.w	r3, r7, #15
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	2020      	movs	r0, #32
 8001146:	f7ff ffb1 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001156:	b2da      	uxtb	r2, r3
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4313      	orrs	r3, r2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001168:	b2da      	uxtb	r2, r3
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	4313      	orrs	r3, r2
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8001172:	f107 030f 	add.w	r3, r7, #15
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	2024      	movs	r0, #36	; 0x24
 800117c:	f7ff ff96 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001188:	2388      	movs	r3, #136	; 0x88
 800118a:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 800118c:	f107 030f 	add.w	r3, r7, #15
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	2023      	movs	r0, #35	; 0x23
 8001196:	f7ff ff89 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	2b20      	cmp	r3, #32
 80011a0:	d858      	bhi.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	0800122d 	.word	0x0800122d
 80011ac:	08001255 	.word	0x08001255
 80011b0:	08001255 	.word	0x08001255
 80011b4:	08001255 	.word	0x08001255
 80011b8:	08001255 	.word	0x08001255
 80011bc:	08001255 	.word	0x08001255
 80011c0:	08001255 	.word	0x08001255
 80011c4:	08001255 	.word	0x08001255
 80011c8:	08001235 	.word	0x08001235
 80011cc:	08001255 	.word	0x08001255
 80011d0:	08001255 	.word	0x08001255
 80011d4:	08001255 	.word	0x08001255
 80011d8:	08001255 	.word	0x08001255
 80011dc:	08001255 	.word	0x08001255
 80011e0:	08001255 	.word	0x08001255
 80011e4:	08001255 	.word	0x08001255
 80011e8:	0800123d 	.word	0x0800123d
 80011ec:	08001255 	.word	0x08001255
 80011f0:	08001255 	.word	0x08001255
 80011f4:	08001255 	.word	0x08001255
 80011f8:	08001255 	.word	0x08001255
 80011fc:	08001255 	.word	0x08001255
 8001200:	08001255 	.word	0x08001255
 8001204:	08001255 	.word	0x08001255
 8001208:	08001245 	.word	0x08001245
 800120c:	08001255 	.word	0x08001255
 8001210:	08001255 	.word	0x08001255
 8001214:	08001255 	.word	0x08001255
 8001218:	08001255 	.word	0x08001255
 800121c:	08001255 	.word	0x08001255
 8001220:	08001255 	.word	0x08001255
 8001224:	08001255 	.word	0x08001255
 8001228:	0800124d 	.word	0x0800124d
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 8001230:	601a      	str	r2, [r3, #0]
			break;
 8001232:	e00f      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 8001238:	601a      	str	r2, [r3, #0]
			break;
 800123a:	e00b      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 8001240:	601a      	str	r2, [r3, #0]
			break;
 8001242:	e007      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 8001246:	4a0d      	ldr	r2, [pc, #52]	; (800127c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 8001248:	601a      	str	r2, [r3, #0]
			break;
 800124a:	e003      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 8001250:	601a      	str	r2, [r3, #0]
			break;
 8001252:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8001254:	2201      	movs	r2, #1
 8001256:	2108      	movs	r1, #8
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 800125a:	f008 f8b1 	bl	80093c0 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000460 	.word	0x20000460
 800126c:	20000000 	.word	0x20000000
 8001270:	3d75c28f 	.word	0x3d75c28f
 8001274:	3df5c28f 	.word	0x3df5c28f
 8001278:	3e3851ec 	.word	0x3e3851ec
 800127c:	3e75c28f 	.word	0x3e75c28f
 8001280:	3f3ae148 	.word	0x3f3ae148
 8001284:	40021000 	.word	0x40021000

08001288 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001292:	edd7 7a01 	vldr	s15, [r7, #4]
 8001296:	eef0 7ae7 	vabs.f32	s15, s15
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	f1c3 031f 	rsb	r3, r3, #31
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80012fe:	2137      	movs	r1, #55	; 0x37
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001302:	f021 fa6f 	bl	80227e4 <__assert_func>

	if(align && size)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01f      	beq.n	800134c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01c      	beq.n	800134c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	2101      	movs	r1, #1
 8001320:	4618      	mov	r0, r3
 8001322:	f018 fe49 	bl	8019fb8 <_Z9ei_callocjj>
 8001326:	60f8      	str	r0, [r7, #12]

		if(p)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00e      	beq.n	800134c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	425b      	negs	r3, r3
 800133a:	4013      	ands	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1ad2      	subs	r2, r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3b02      	subs	r3, #2
 8001348:	b292      	uxth	r2, r2
 800134a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800134c:	697b      	ldr	r3, [r7, #20]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	08025990 	.word	0x08025990
 800135c:	080259ac 	.word	0x080259ac
 8001360:	080259e4 	.word	0x080259e4

08001364 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d105      	bne.n	800137e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001376:	215a      	movs	r1, #90	; 0x5a
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800137a:	f021 fa33 	bl	80227e4 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001384:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	425b      	negs	r3, r3
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001390:	68b8      	ldr	r0, [r7, #8]
 8001392:	f018 fe1f 	bl	8019fd4 <_Z7ei_freePv>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08025a60 	.word	0x08025a60
 80013a4:	08025a64 	.word	0x08025a64
 80013a8:	080259e4 	.word	0x080259e4

080013ac <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bf14      	ite	ne
 80013ea:	2301      	movne	r3, #1
 80013ec:	2300      	moveq	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e009      	b.n	8001436 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	43da      	mvns	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	400a      	ands	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
      return *this;
 8001436:	687b      	ldr	r3, [r7, #4]
    }
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da00      	bge.n	800148a <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001488:	331f      	adds	r3, #31
 800148a:	115b      	asrs	r3, r3, #5
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	441a      	add	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	425a      	negs	r2, r3
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	f002 021f 	and.w	r2, r2, #31
 80014a0:	bf58      	it	pl
 80014a2:	4253      	negpl	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da07      	bge.n	80014bc <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3320      	adds	r3, #32
 80014b0:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1f1a      	subs	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	605a      	str	r2, [r3, #4]
    }
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ffb1 	bl	8001444 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ffa0 	bl	8001444 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	461a      	mov	r2, r3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff3f 	bl	80013ac <_ZNSt14_Bit_referenceC1EPmm>
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff90 	bl	800146a <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 800154a:	687b      	ldr	r3, [r7, #4]
    }
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZStplRKSt13_Bit_iteratori>:
    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001568:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ffe1 	bl	8001536 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001574:	bf00      	nop
    }
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	4798      	blx	r3
    }
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	731a      	strb	r2, [r3, #12]
 800162e:	e00e      	b.n	800164e <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	2101      	movs	r1, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f018 fcbb 	bl	8019fb8 <_Z9ei_callocjj>
 8001642:	4602      	mov	r2, r0
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7b1b      	ldrb	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d004      	beq.n	8001686 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f018 fca7 	bl	8019fd4 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
    }
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	731a      	strb	r2, [r3, #12]
 80016d8:	e00d      	b.n	80016f6 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	2101      	movs	r1, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	f018 fc67 	bl	8019fb8 <_Z9ei_callocjj>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f018 fc53 	bl	8019fd4 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
 800173c:	e7fe      	b.n	800173c <_ZSt25__throw_bad_function_callv+0x4>

0800173e <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	ed87 0a01 	vstr	s0, [r7, #4]
 8001748:	ed97 0a01 	vldr	s0, [r7, #4]
 800174c:	f01e fdce 	bl	80202ec <expf>
 8001750:	eef0 7a40 	vmov.f32	s15, s0
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	ed87 0a01 	vstr	s0, [r7, #4]
 8001768:	ed97 0a01 	vldr	s0, [r7, #4]
 800176c:	f01e fcfe 	bl	802016c <roundf>
 8001770:	eef0 7a40 	vmov.f32	s15, s0
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	ed87 0a01 	vstr	s0, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001792:	edd7 7a05 	vldr	s15, [r7, #20]
 8001796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	db09      	blt.n	80017b4 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80017a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80017a4:	f01e fe06 	bl	80203b4 <sqrtf>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80017b2:	e004      	b.n	80017be <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80017bc:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b096      	sub	sp, #88	; 0x58
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6852      	ldr	r2, [r2, #4]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 80017ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017ec:	1c59      	adds	r1, r3, #1
 80017ee:	2300      	movs	r3, #0
 80017f0:	77fb      	strb	r3, [r7, #31]
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	f107 021f 	add.w	r2, r7, #31
 80017fa:	f107 0008 	add.w	r0, r7, #8
 80017fe:	f004 fbf8 	bl	8005ff2 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001802:	2301      	movs	r3, #1
 8001804:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 8001806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001808:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001822:	fb01 f202 	mul.w	r2, r1, r2
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001842:	4413      	add	r3, r2
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001860:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001864:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	f107 0108 	add.w	r1, r7, #8
 800186e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001870:	4618      	mov	r0, r3
 8001872:	f004 fbe6 	bl	8006042 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fdbd 	bl	80013fc <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001884:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001886:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188a:	429a      	cmp	r2, r3
 800188c:	d000      	beq.n	8001890 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc2>
            do
 800188e:	e7c3      	b.n	8001818 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	653b      	str	r3, [r7, #80]	; 0x50
 8001894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001898:	f107 0108 	add.w	r1, r7, #8
 800189c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fbcf 	bl	8006042 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd92 	bl	80013d2 <_ZNKSt14_Bit_referencecvbEv>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0a8      	beq.n	8001806 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                all_done_mark++; // move the high water mark so we don't look again
 80018b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b6:	3301      	adds	r3, #1
 80018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 80018ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018be:	429a      	cmp	r2, r3
 80018c0:	d203      	bcs.n	80018ca <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 80018c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c4:	3301      	adds	r3, #1
 80018c6:	653b      	str	r3, [r7, #80]	; 0x50
 80018c8:	e7e4      	b.n	8001894 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
                if(i>=size) { goto LOOP_END; }
 80018ca:	bf00      	nop
            }
        }
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1d1a      	adds	r2, r3, #4
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3308      	adds	r3, #8
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f004 fbde 	bl	8006098 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
        ei_vector<bool> done(size+1,false);
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 fba1 	bl	8006028 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
    }
 80018e6:	bf00      	nop
 80018e8:	3758      	adds	r7, #88	; 0x58
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4619      	mov	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	461a      	mov	r2, r3
 8001906:	f000 f817 	bl	8001938 <_ZN2ei5numpy9transposeEPfii>
 800190a:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	e00c      	b.n	8001930 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001922:	893a      	ldrh	r2, [r7, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001928:	897a      	ldrh	r2, [r7, #10]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 800192e:	2300      	movs	r3, #0
    }
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08f      	sub	sp, #60	; 0x3c
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800194c:	2300      	movs	r3, #0
 800194e:	f7ff fe5e 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <_ZN2ei5numpy9transposeEPfii+0x24>
 8001958:	4c23      	ldr	r4, [pc, #140]	; (80019e8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 800195a:	e03b      	b.n	80019d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001962:	4c21      	ldr	r4, [pc, #132]	; (80019e8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001964:	e036      	b.n	80019d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	da03      	bge.n	8001976 <_ZN2ei5numpy9transposeEPfii+0x3e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	db01      	blt.n	800197a <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001976:	4c1d      	ldr	r4, [pc, #116]	; (80019ec <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001978:	e02c      	b.n	80019d4 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	b29b      	uxth	r3, r3
 800197e:	83bb      	strh	r3, [r7, #28]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	b29b      	uxth	r3, r3
 8001984:	83fb      	strh	r3, [r7, #30]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	b29b      	uxth	r3, r3
 800198e:	82bb      	strh	r3, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	b29b      	uxth	r3, r3
 8001994:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001998:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 800199a:	f107 0214 	add.w	r2, r7, #20
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00d fb11 	bl	800efcc <arm_mat_trans_f32>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 80019b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 80019b8:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 80019bc:	e00a      	b.n	80019d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 80019be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	461a      	mov	r2, r3
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f020 ff83 	bl	80228d8 <memcpy>

        return EIDSP_OK;
 80019d2:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fe43 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 80019de:	4623      	mov	r3, r4
 80019e0:	4618      	mov	r0, r3
 80019e2:	373c      	adds	r7, #60	; 0x3c
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	fffffc16 	.word	0xfffffc16
 80019ec:	fffffc0c 	.word	0xfffffc0c

080019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 80019fc:	edd7 7a00 	vldr	s15, [r7]
 8001a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a04:	eef4 7a47 	vcmp.f32	s15, s14
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	d101      	bne.n	8001a12 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e033      	b.n	8001a7a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d204      	bcs.n	8001a26 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d301      	bcc.n	8001a2a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001a28:	e027      	b.n	8001a7a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	82bb      	strh	r3, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	82fb      	strh	r3, [r7, #22]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	81bb      	strh	r3, [r7, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	81fb      	strh	r3, [r7, #14]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001a56:	f107 020c 	add.w	r2, r7, #12
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4611      	mov	r1, r2
 8001a60:	ed97 0a00 	vldr	s0, [r7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00d fa7b 	bl	800ef60 <arm_mat_scale_f32>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	e000      	b.n	8001a7a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001a78:	2300      	movs	r3, #0
    }
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	fffffc0c 	.word	0xfffffc0c

08001a88 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6892      	ldr	r2, [r2, #8]
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d215      	bcs.n	8001ad6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	ed93 7a00 	vldr	s14, [r3]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	edd7 7a00 	vldr	s15, [r7]
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e7e0      	b.n	8001a98 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001ad6:	2300      	movs	r3, #0
    }
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001afa:	4c26      	ldr	r4, [pc, #152]	; (8001b94 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001afc:	e045      	b.n	8001b8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b06:	4c23      	ldr	r4, [pc, #140]	; (8001b94 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001b08:	e03f      	b.n	8001b8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d237      	bcs.n	8001b88 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa4>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689d      	ldr	r5, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	69f9      	ldr	r1, [r7, #28]
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f107 0008 	add.w	r0, r7, #8
 8001b32:	462a      	mov	r2, r5
 8001b34:	2101      	movs	r1, #1
 8001b36:	f7ff fd6a 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 8001b40:	4c15      	ldr	r4, [pc, #84]	; (8001b98 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001b42:	2500      	movs	r5, #0
 8001b44:	e015      	b.n	8001b72 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff93 	bl	8001a88 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001b62:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8c>
                EIDSP_ERR(ret);
 8001b6a:	69bc      	ldr	r4, [r7, #24]
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	e000      	b.n	8001b72 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
 8001b70:	2501      	movs	r5, #1
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fd74 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8001b7c:	2d01      	cmp	r5, #1
 8001b7e:	d104      	bne.n	8001b8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	3301      	adds	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e7c2      	b.n	8001b0e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001b88:	2400      	movs	r4, #0
    }
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdb0      	pop	{r4, r5, r7, pc}
 8001b94:	fffffc14 	.word	0xfffffc14
 8001b98:	fffffc16 	.word	0xfffffc16

08001b9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001bb4:	e028      	b.n	8001c08 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001bc0:	e022      	b.n	8001c08 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d21a      	bcs.n	8001c06 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	18d0      	adds	r0, r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f107 0208 	add.w	r2, r7, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	f00d fa5e 	bl	800f0ac <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3301      	adds	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e7df      	b.n	8001bc6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001c06:	2300      	movs	r3, #0
    }
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	fffffc14 	.word	0xfffffc14

08001c14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d001      	beq.n	8001c2e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001c2c:	e028      	b.n	8001c80 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001c38:	e022      	b.n	8001c80 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d21a      	bcs.n	8001c7e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	18d0      	adds	r0, r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f107 0208 	add.w	r2, r7, #8
 8001c62:	4619      	mov	r1, r3
 8001c64:	f00d f9f3 	bl	800f04e <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e7df      	b.n	8001c3e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001c7e:	2300      	movs	r3, #0
    }
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	fffffc14 	.word	0xfffffc14

08001c8c <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001c8c:	b5b0      	push	{r4, r5, r7, lr}
 8001c8e:	b098      	sub	sp, #96	; 0x60
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001caa:	4c65      	ldr	r4, [pc, #404]	; (8001e40 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001cac:	e0c2      	b.n	8001e34 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d901      	bls.n	8001cba <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001cba:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	f7ff fca3 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001cce:	4c5d      	ldr	r4, [pc, #372]	; (8001e44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001cd0:	e0ab      	b.n	8001e2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001cd8:	4c5a      	ldr	r4, [pc, #360]	; (8001e44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001cda:	e0a6      	b.n	8001e2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001cdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	f020 fdf7 	bl	80228d8 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001cea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	18d0      	adds	r0, r2, r3
 8001cf2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f020 fe13 	bl	8022928 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d025      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d022      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	2b80      	cmp	r3, #128	; 0x80
 8001d12:	d01f      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1a:	d01b      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d22:	d017      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2a:	d013      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d32:	d00f      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3a:	d00b      	beq.n	8001d54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001d3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f000 fa4e 	bl	80021e4 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001d48:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d068      	beq.n	8001e22 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001d50:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001d52:	e06a      	b.n	8001e2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fada 	bl	8002314 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001d60:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001d68:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001d6a:	e05d      	b.n	8001e28 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001d6c:	f107 0014 	add.w	r0, r7, #20
 8001d70:	2300      	movs	r3, #0
 8001d72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d74:	2101      	movs	r1, #1
 8001d76:	f7ff fc4a 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001d80:	4c30      	ldr	r4, [pc, #192]	; (8001e44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001d82:	2500      	movs	r5, #0
 8001d84:	e045      	b.n	8001e12 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001d8c:	4c2d      	ldr	r4, [pc, #180]	; (8001e44 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001d8e:	2500      	movs	r5, #0
 8001d90:	e03f      	b.n	8001e12 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001d92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f00f fcb4 	bl	8011708 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001db0:	3b01      	subs	r3, #1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	440b      	add	r3, r1
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d220      	bcs.n	8001e10 <_ZN2ei5numpy4rfftEPKfjPfjj+0x184>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f107 0210 	add.w	r2, r7, #16
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00d f965 	bl	800f0ac <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001de2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001de6:	f7ff fcca 	bl	800177e <_ZN2ei5numpy4sqrtEf>
 8001dea:	eeb0 7a40 	vmov.f32	s14, s0
 8001dee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8001e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e04:	3302      	adds	r3, #2
 8001e06:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e0e:	e7d9      	b.n	8001dc4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>
 8001e10:	2501      	movs	r5, #1
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fc24 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8001e1c:	2d01      	cmp	r5, #1
 8001e1e:	d103      	bne.n	8001e28 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8001e20:	e000      	b.n	8001e24 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
            }
 8001e22:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001e24:	2400      	movs	r4, #0
 8001e26:	e000      	b.n	8001e2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8001e28:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001e2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fc18 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 8001e34:	4623      	mov	r3, r4
 8001e36:	4618      	mov	r0, r3
 8001e38:	3760      	adds	r7, #96	; 0x60
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	fffffc11 	.word	0xfffffc11
 8001e44:	fffffc16 	.word	0xfffffc16

08001e48 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b098      	sub	sp, #96	; 0x60
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001e66:	4c6f      	ldr	r4, [pc, #444]	; (8002024 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8001e68:	e0d6      	b.n	8002018 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d901      	bls.n	8001e76 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8001e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e74:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d101      	bne.n	8001e86 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001e86:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e8e:	2101      	movs	r1, #1
 8001e90:	f7ff fbbd 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001e9a:	4c63      	ldr	r4, [pc, #396]	; (8002028 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001e9c:	e0b7      	b.n	800200e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ea4:	4c60      	ldr	r4, [pc, #384]	; (8002028 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001ea6:	e0b2      	b.n	800200e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8001ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d112      	bne.n	8001ed4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001eae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	f020 fd0e 	bl	80228d8 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	18d0      	adds	r0, r2, r3
 8001ec4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f020 fd2a 	bl	8022928 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d025      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001edc:	2b40      	cmp	r3, #64	; 0x40
 8001ede:	d022      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d01f      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eec:	d01b      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef4:	d017      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efc:	d013      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f04:	d00f      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0c:	d00b      	beq.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	f000 f9d7 	bl	80022c8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8001f1a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8001f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d071      	beq.n	8002006 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8001f22:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001f24:	e073      	b.n	800200e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f9f1 	bl	8002314 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001f32:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8001f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 8001f3a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001f3c:	e066      	b.n	800200c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001f3e:	f107 0010 	add.w	r0, r7, #16
 8001f42:	2300      	movs	r3, #0
 8001f44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f46:	2101      	movs	r1, #1
 8001f48:	f7ff fb61 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8001f52:	4c35      	ldr	r4, [pc, #212]	; (8002028 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001f54:	2500      	movs	r5, #0
 8001f56:	e04e      	b.n	8001ff6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f5e:	4c32      	ldr	r4, [pc, #200]	; (8002028 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001f60:	2500      	movs	r5, #0
 8001f62:	e048      	b.n	8001ff6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001f64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	f107 0020 	add.w	r0, r7, #32
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f00f fbcb 	bl	8011708 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f86:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	440b      	add	r3, r1
 8001f92:	6852      	ldr	r2, [r2, #4]
 8001f94:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8001f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fae:	2301      	movs	r3, #1
 8001fb0:	657b      	str	r3, [r7, #84]	; 0x54
 8001fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d21b      	bcs.n	8001ff4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ac>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	441a      	add	r2, r3
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	440b      	add	r3, r1
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	441a      	add	r2, r3
 8001fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	440b      	add	r3, r1
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8001fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe8:	3302      	adds	r3, #2
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	3301      	adds	r3, #1
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ff2:	e7de      	b.n	8001fb2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16a>
 8001ff4:	2501      	movs	r5, #1
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fb32 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8002000:	2d01      	cmp	r5, #1
 8002002:	d103      	bne.n	800200c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002004:	e000      	b.n	8002008 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
            }
 8002006:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002008:	2400      	movs	r4, #0
 800200a:	e000      	b.n	800200e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 800200c:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800200e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fb26 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 8002018:	4623      	mov	r3, r4
 800201a:	4618      	mov	r0, r3
 800201c:	3760      	adds	r7, #96	; 0x60
 800201e:	46bd      	mov	sp, r7
 8002020:	bdb0      	pop	{r4, r5, r7, pc}
 8002022:	bf00      	nop
 8002024:	fffffc11 	.word	0xfffffc11
 8002028:	fffffc16 	.word	0xfffffc16

0800202c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	ed87 0a03 	vstr	s0, [r7, #12]
 8002036:	edc7 0a02 	vstr	s1, [r7, #8]
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 800204c:	e03f      	b.n	80020ce <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d104      	bne.n	800205e <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e037      	b.n	80020ce <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800205e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002062:	edd7 7a03 	vldr	s15, [r7, #12]
 8002066:	ee77 6a67 	vsub.f32	s13, s14, s15
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3b01      	subs	r3, #1
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3b01      	subs	r3, #1
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	d216      	bcs.n	80020ba <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002096:	edd7 7a04 	vldr	s15, [r7, #16]
 800209a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e7e3      	b.n	8002082 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020c0:	3b01      	subs	r3, #1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80020cc:	2300      	movs	r3, #0
    }
 80020ce:	4618      	mov	r0, r3
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	fffffc10 	.word	0xfffffc10

080020e0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6892      	ldr	r2, [r2, #8]
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d263      	bcs.n	80021c6 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe6>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6811      	ldr	r1, [r2, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	188c      	adds	r4, r1, r2
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 800211a:	edd7 7a05 	vldr	s15, [r7, #20]
 800211e:	eef0 7ae7 	vabs.f32	s15, s15
 8002122:	f107 0308 	add.w	r3, r7, #8
 8002126:	4618      	mov	r0, r3
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	f01d fff8 	bl	8020120 <frexpf>
 8002130:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 8002136:	60fb      	str	r3, [r7, #12]
        y *= f;
 8002138:	ed97 7a03 	vldr	s14, [r7, #12]
 800213c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 8002148:	edd7 7a03 	vldr	s15, [r7, #12]
 800214c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80021d4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002150:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002154:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002158:	ed97 7a03 	vldr	s14, [r7, #12]
 800215c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002164:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 8002168:	edd7 7a03 	vldr	s15, [r7, #12]
 800216c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021d8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002174:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002178:	ed97 7a03 	vldr	s14, [r7, #12]
 800217c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002184:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 8002188:	edd7 7a03 	vldr	s15, [r7, #12]
 800218c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80021dc <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 8002190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002194:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80021a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021aa:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 80021ae:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 80021b2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80021e0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 80021b6:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80021ba:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	e792      	b.n	80020ec <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 80021c6:	2300      	movs	r3, #0
    }
 80021c8:	4618      	mov	r0, r3
 80021ca:	3724      	adds	r7, #36	; 0x24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	3f9da1a8 	.word	0x3f9da1a8
 80021d4:	4083caf5 	.word	0x4083caf5
 80021d8:	40c0b3fb 	.word	0x40c0b3fb
 80021dc:	404892e0 	.word	0x404892e0
 80021e0:	3e9a209b 	.word	0x3e9a209b

080021e4 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f017 fed2 	bl	8019fa0 <_Z9ei_mallocj>
 80021fc:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002206:	e058      	b.n	80022ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	f017 fb1b 	bl	8019850 <kiss_fftr_alloc>
 800221a:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002222:	69b8      	ldr	r0, [r7, #24]
 8002224:	f017 fed6 	bl	8019fd4 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002228:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800222a:	e046      	b.n	80022ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	6978      	ldr	r0, [r7, #20]
 8002232:	f017 fc2d 	bl	8019a90 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d234      	bcs.n	80022ac <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4413      	add	r3, r2
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	2002      	movs	r0, #2
 8002250:	eeb0 0a67 	vmov.f32	s0, s15
 8002254:	f003 ff3f 	bl	80060d6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002258:	ec55 4b10 	vmov	r4, r5, d0
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	edd3 7a01 	vldr	s15, [r3, #4]
 8002268:	2002      	movs	r0, #2
 800226a:	eeb0 0a67 	vmov.f32	s0, s15
 800226e:	f003 ff32 	bl	80060d6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002272:	ec53 2b10 	vmov	r2, r3, d0
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe f811 	bl	80002a0 <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fcb9 	bl	8000bfc <__aeabi_d2f>
 800228a:	4601      	mov	r1, r0
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	18d4      	adds	r4, r2, r3
 8002294:	ee00 1a10 	vmov	s0, r1
 8002298:	f7ff fa71 	bl	800177e <_ZN2ei5numpy4sqrtEf>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	3301      	adds	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e7c6      	b.n	800223a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80022ac:	6978      	ldr	r0, [r7, #20]
 80022ae:	f017 fe91 	bl	8019fd4 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80022b2:	69b8      	ldr	r0, [r7, #24]
 80022b4:	f017 fe8e 	bl	8019fd4 <_Z7ei_freePv>

        return EIDSP_OK;
 80022b8:	2300      	movs	r3, #0
    }
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bdb0      	pop	{r4, r5, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	fffffc16 	.word	0xfffffc16

080022c8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	f017 fab4 	bl	8019850 <kiss_fftr_alloc>
 80022e8:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 80022f2:	e008      	b.n	8002306 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f017 fbc9 	bl	8019a90 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80022fe:	6978      	ldr	r0, [r7, #20]
 8002300:	f017 fe68 	bl	8019fd4 <_Z7ei_freePv>

        return EIDSP_OK;
 8002304:	2300      	movs	r3, #0
    }
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	fffffc16 	.word	0xfffffc16

08002314 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 800231e:	4b03      	ldr	r3, [pc, #12]	; (800232c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x18>)

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	fffffc08 	.word	0xfffffc08

08002330 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800233e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	b29b      	uxth	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4293      	cmp	r3, r2
 800234c:	d001      	beq.n	8002352 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002350:	e050      	b.n	80023f4 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002352:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7ff fc95 	bl	8001c8c <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002362:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	e042      	b.n	80023f4 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d23b      	bcs.n	80023f2 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800237a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002384:	ee17 0a90 	vmov	r0, s15
 8002388:	f7fe f8e8 	bl	800055c <__aeabi_f2d>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	f04f 0000 	mov.w	r0, #0
 8002394:	491a      	ldr	r1, [pc, #104]	; (8002400 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 8002396:	f7fe fa63 	bl	8000860 <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4614      	mov	r4, r2
 80023a0:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023be:	ee17 0a90 	vmov	r0, s15
 80023c2:	f7fe f8cb 	bl	800055c <__aeabi_f2d>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fe f91d 	bl	800060c <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	18d4      	adds	r4, r2, r3
 80023e2:	f7fe fc0b 	bl	8000bfc <__aeabi_d2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e7bf      	b.n	8002372 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x42>
        }

        return EIDSP_OK;
 80023f2:	2300      	movs	r3, #0
    }
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	fffffc14 	.word	0xfffffc14
 8002400:	3ff00000 	.word	0x3ff00000

08002404 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b093      	sub	sp, #76	; 0x4c
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3301      	adds	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002426:	4b4f      	ldr	r3, [pc, #316]	; (8002564 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	f107 0218 	add.w	r2, r7, #24
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fe80 	bl	800613a <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243e:	429a      	cmp	r2, r3
 8002440:	d20b      	bcs.n	800245a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002442:	2104      	movs	r1, #4
 8002444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002446:	f017 fdb7 	bl	8019fb8 <_Z9ei_callocjj>
 800244a:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fea7 	bl	80061a6 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002458:	e00b      	b.n	8002472 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 800245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 800246c:	2301      	movs	r3, #1
 800246e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002472:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	461a      	mov	r2, r3
 800247c:	2100      	movs	r1, #0
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f020 fa52 	bl	8022928 <memset>
        int input_ix = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248c:	429a      	cmp	r2, r3
 800248e:	da5e      	bge.n	800254e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14a>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002494:	4413      	add	r3, r2
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	429a      	cmp	r2, r3
 800249a:	d203      	bcs.n	80024a4 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa0>
                                                                        : input_size - input_ix;
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	e000      	b.n	80024a6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa2>
 80024a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a6:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	18d0      	adds	r0, r2, r3
 80024b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024c0:	6a39      	ldr	r1, [r7, #32]
 80024c2:	f7ff ff35 	bl	8002330 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 80024c6:	61f8      	str	r0, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xce>
 80024ce:	69fc      	ldr	r4, [r7, #28]
 80024d0:	e03e      	b.n	8002550 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	429a      	cmp	r2, r3
 80024e0:	d218      	bcs.n	8002514 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x110>
                output[j] = std::max(output[j], fft_out[i]);
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	18d0      	adds	r0, r2, r3
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f0:	4413      	add	r3, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f003 fe6b 	bl	80061ce <_ZSt3maxIfERKT_S2_S2_>
 80024f8:	4601      	mov	r1, r0
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	680a      	ldr	r2, [r1, #0]
 8002504:	601a      	str	r2, [r3, #0]
                j++;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	3301      	adds	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	3301      	adds	r3, #1
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
 8002512:	e7e2      	b.n	80024da <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd6>
            }
            if (do_overlap) {
 8002514:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x140>
                if (do_saved_point) {
 800251c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x134>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002530:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 8002538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253a:	085a      	lsrs	r2, r3, #1
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	4413      	add	r3, r2
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	e7a1      	b.n	8002488 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
            else {
                input_ix += fft_points;
 8002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002548:	4413      	add	r3, r2
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 800254c:	e79c      	b.n	8002488 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
        }

        return EIDSP_OK;
 800254e:	2400      	movs	r4, #0
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fe05 	bl	8006164 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }
 800255a:	4623      	mov	r3, r4
 800255c:	4618      	mov	r0, r3
 800255e:	3744      	adds	r7, #68	; 0x44
 8002560:	46bd      	mov	sp, r7
 8002562:	bd90      	pop	{r4, r7, pc}
 8002564:	08019fd5 	.word	0x08019fd5

08002568 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d214      	bcs.n	80025a8 <_ZN2ei5numpy13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	d105      	bne.n	80025a0 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <_ZN2ei5numpy13zero_handlingEPfj+0x4c>)
 800259e:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e7e6      	b.n	8002576 <_ZN2ei5numpy13zero_handlingEPfj+0xe>
            }
        }
    }
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	2edbe6ff 	.word	0x2edbe6ff

080025b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80025b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025bc:	b095      	sub	sp, #84	; 0x54
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6178      	str	r0, [r7, #20]
 80025c2:	ed87 0a04 	vstr	s0, [r7, #16]
 80025c6:	edc7 0a03 	vstr	s1, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	0fda      	lsrs	r2, r3, #31
 80025d4:	4413      	add	r3, r2
 80025d6:	105b      	asrs	r3, r3, #1
 80025d8:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7fd ffbe 	bl	800055c <__aeabi_f2d>
 80025e0:	a3f5      	add	r3, pc, #980	; (adr r3, 80029b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fe f811 	bl	800060c <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4690      	mov	r8, r2
 80025f0:	4699      	mov	r9, r3
 80025f2:	6938      	ldr	r0, [r7, #16]
 80025f4:	f7fd ffb2 	bl	800055c <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4640      	mov	r0, r8
 80025fe:	4649      	mov	r1, r9
 8002600:	f7fe f92e 	bl	8000860 <__aeabi_ddiv>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	ec43 2b17 	vmov	d7, r2, r3
 800260c:	eeb0 0a47 	vmov.f32	s0, s14
 8002610:	eef0 0a67 	vmov.f32	s1, s15
 8002614:	f01d fd50 	bl	80200b8 <tan>
 8002618:	ec53 2b10 	vmov	r2, r3, d0
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe faec 	bl	8000bfc <__aeabi_d2f>
 8002624:	4603      	mov	r3, r0
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002628:	2002      	movs	r0, #2
 800262a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800262e:	f003 fd52 	bl	80060d6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002632:	ec53 2b10 	vmov	r2, r3, d0
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe fadf 	bl	8000bfc <__aeabi_d2f>
 800263e:	4603      	mov	r3, r0
 8002640:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002644:	2104      	movs	r1, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f017 fcb6 	bl	8019fb8 <_Z9ei_callocjj>
 800264c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 800264e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002650:	2104      	movs	r1, #4
 8002652:	4618      	mov	r0, r3
 8002654:	f017 fcb0 	bl	8019fb8 <_Z9ei_callocjj>
 8002658:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 800265a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800265c:	2104      	movs	r1, #4
 800265e:	4618      	mov	r0, r3
 8002660:	f017 fcaa 	bl	8019fb8 <_Z9ei_callocjj>
 8002664:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002668:	2104      	movs	r1, #4
 800266a:	4618      	mov	r0, r3
 800266c:	f017 fca4 	bl	8019fb8 <_Z9ei_callocjj>
 8002670:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002674:	2104      	movs	r1, #4
 8002676:	4618      	mov	r0, r3
 8002678:	f017 fc9e 	bl	8019fb8 <_Z9ei_callocjj>
 800267c:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 800267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002680:	2104      	movs	r1, #4
 8002682:	4618      	mov	r0, r3
 8002684:	f017 fc98 	bl	8019fb8 <_Z9ei_callocjj>
 8002688:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 800268a:	2300      	movs	r3, #0
 800268c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800268e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002692:	429a      	cmp	r2, r3
 8002694:	f280 80e5 	bge.w	8002862 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002698:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800269a:	f7fd ff4d 	bl	8000538 <__aeabi_i2d>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	f7fd fdfd 	bl	80002a0 <__adddf3>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4bc3      	ldr	r3, [pc, #780]	; (80029c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 80026b4:	f7fd fdf4 	bl	80002a0 <__adddf3>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	a3bd      	add	r3, pc, #756	; (adr r3, 80029b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fd ffa1 	bl	800060c <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4690      	mov	r8, r2
 80026d0:	4699      	mov	r9, r3
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7fd ff30 	bl	8000538 <__aeabi_i2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	f7fd fde0 	bl	80002a0 <__adddf3>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4640      	mov	r0, r8
 80026e6:	4649      	mov	r1, r9
 80026e8:	f7fe f8ba 	bl	8000860 <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	ec43 2b17 	vmov	d7, r2, r3
 80026f4:	eeb0 0a47 	vmov.f32	s0, s14
 80026f8:	eef0 0a67 	vmov.f32	s1, s15
 80026fc:	f01d fc84 	bl	8020008 <sin>
 8002700:	ec53 2b10 	vmov	r2, r3, d0
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f7fe fa78 	bl	8000bfc <__aeabi_d2f>
 800270c:	4603      	mov	r3, r0
 800270e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002712:	f7fd ff23 	bl	800055c <__aeabi_f2d>
 8002716:	4680      	mov	r8, r0
 8002718:	4689      	mov	r9, r1
 800271a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800271c:	f7fd ff1e 	bl	800055c <__aeabi_f2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	f7fd fdbc 	bl	80002a0 <__adddf3>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4692      	mov	sl, r2
 800272e:	469b      	mov	fp, r3
 8002730:	69f8      	ldr	r0, [r7, #28]
 8002732:	f7fd ff13 	bl	800055c <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4650      	mov	r0, sl
 800273c:	4659      	mov	r1, fp
 800273e:	f7fd ff65 	bl	800060c <__aeabi_dmul>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4640      	mov	r0, r8
 8002748:	4649      	mov	r1, r9
 800274a:	f7fd fda9 	bl	80002a0 <__adddf3>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4b99      	ldr	r3, [pc, #612]	; (80029c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 800275c:	f7fd fda0 	bl	80002a0 <__adddf3>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa48 	bl	8000bfc <__aeabi_d2f>
 800276c:	4603      	mov	r3, r0
 800276e:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8002770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002776:	4413      	add	r3, r2
 8002778:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800277c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002784:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800278c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002794:	ee17 0a90 	vmov	r0, s15
 8002798:	f7fd fee0 	bl	800055c <__aeabi_f2d>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	f7fd fd7e 	bl	80002a0 <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4690      	mov	r8, r2
 80027aa:	4699      	mov	r9, r3
 80027ac:	6938      	ldr	r0, [r7, #16]
 80027ae:	f7fd fed5 	bl	800055c <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4640      	mov	r0, r8
 80027b8:	4649      	mov	r1, r9
 80027ba:	f7fe f851 	bl	8000860 <__aeabi_ddiv>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027cc:	18d6      	adds	r6, r2, r3
 80027ce:	f7fe fa15 	bl	8000bfc <__aeabi_d2f>
 80027d2:	4603      	mov	r3, r0
 80027d4:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 80027d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027d8:	f7fd fec0 	bl	800055c <__aeabi_f2d>
 80027dc:	4680      	mov	r8, r0
 80027de:	4689      	mov	r9, r1
 80027e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027e2:	f7fd febb 	bl	800055c <__aeabi_f2d>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	f7fd fd59 	bl	80002a0 <__adddf3>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4692      	mov	sl, r2
 80027f4:	469b      	mov	fp, r3
 80027f6:	69f8      	ldr	r0, [r7, #28]
 80027f8:	f7fd feb0 	bl	800055c <__aeabi_f2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4650      	mov	r0, sl
 8002802:	4659      	mov	r1, fp
 8002804:	f7fd ff02 	bl	800060c <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4640      	mov	r0, r8
 800280e:	4649      	mov	r1, r9
 8002810:	f7fd fd44 	bl	800029c <__aeabi_dsub>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8002822:	f7fd fd3d 	bl	80002a0 <__adddf3>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4614      	mov	r4, r2
 800282c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002830:	6938      	ldr	r0, [r7, #16]
 8002832:	f7fd fe93 	bl	800055c <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	f7fe f80f 	bl	8000860 <__aeabi_ddiv>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	18d6      	adds	r6, r2, r3
 8002852:	f7fe f9d3 	bl	8000bfc <__aeabi_d2f>
 8002856:	4603      	mov	r3, r0
 8002858:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285c:	3301      	adds	r3, #1
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002860:	e715      	b.n	800268e <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002862:	2300      	movs	r3, #0
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48
 8002866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	f080 80aa 	bcs.w	80029c4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	441a      	add	r2, r3
 8002878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	440b      	add	r3, r1
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002884:	2300      	movs	r3, #0
 8002886:	647b      	str	r3, [r7, #68]	; 0x44
 8002888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800288a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288c:	429a      	cmp	r2, r3
 800288e:	f280 808e 	bge.w	80029ae <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002898:	4413      	add	r3, r2
 800289a:	ed93 7a00 	vldr	s14, [r3]
 800289e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	4413      	add	r3, r2
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b4:	4413      	add	r3, r2
 80028b6:	edd3 6a00 	vldr	s13, [r3]
 80028ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	6a3a      	ldr	r2, [r7, #32]
 80028c0:	4413      	add	r3, r2
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e0:	4413      	add	r3, r2
 80028e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e6:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 80028ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f0:	4413      	add	r3, r2
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe31 	bl	800055c <__aeabi_f2d>
 80028fa:	4604      	mov	r4, r0
 80028fc:	460d      	mov	r5, r1
 80028fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002904:	4413      	add	r3, r2
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe27 	bl	800055c <__aeabi_f2d>
 800290e:	4680      	mov	r8, r0
 8002910:	4689      	mov	r9, r1
 8002912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	4413      	add	r3, r2
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe1d 	bl	800055c <__aeabi_f2d>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	f7fd fcbb 	bl	80002a0 <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4640      	mov	r0, r8
 8002930:	4649      	mov	r1, r9
 8002932:	f7fd fcb5 	bl	80002a0 <__adddf3>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4690      	mov	r8, r2
 800293c:	4699      	mov	r9, r3
 800293e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	4413      	add	r3, r2
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fe07 	bl	800055c <__aeabi_f2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4640      	mov	r0, r8
 8002954:	4649      	mov	r1, r9
 8002956:	f7fd fca3 	bl	80002a0 <__adddf3>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fe53 	bl	800060c <__aeabi_dmul>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	18d4      	adds	r4, r2, r3
 8002976:	f7fe f941 	bl	8000bfc <__aeabi_d2f>
 800297a:	4603      	mov	r3, r0
 800297c:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 800297e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	441a      	add	r2, r3
 8002986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	6a39      	ldr	r1, [r7, #32]
 800298c:	440b      	add	r3, r1
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002998:	441a      	add	r2, r3
 800299a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a0:	440b      	add	r3, r1
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80029a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a8:	3301      	adds	r3, #1
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
 80029ac:	e76c      	b.n	8002888 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 80029ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b0:	3301      	adds	r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b4:	e757      	b.n	8002866 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 80029b6:	bf00      	nop
 80029b8:	54442d18 	.word	0x54442d18
 80029bc:	400921fb 	.word	0x400921fb
 80029c0:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 80029c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029c6:	f017 fb05 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(d1);
 80029ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029cc:	f017 fb02 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(d2);
 80029d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029d2:	f017 faff 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(w0);
 80029d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d8:	f017 fafc 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(w1);
 80029dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029de:	f017 faf9 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(w2);
 80029e2:	6a38      	ldr	r0, [r7, #32]
 80029e4:	f017 faf6 	bl	8019fd4 <_Z7ei_freePv>
    }
 80029e8:	bf00      	nop
 80029ea:	3754      	adds	r7, #84	; 0x54
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f2:	bf00      	nop
 80029f4:	0000      	movs	r0, r0
	...

080029f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80029f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029fc:	b095      	sub	sp, #84	; 0x54
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6178      	str	r0, [r7, #20]
 8002a02:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a06:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	0fda      	lsrs	r2, r3, #31
 8002a14:	4413      	add	r3, r2
 8002a16:	105b      	asrs	r3, r3, #1
 8002a18:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7fd fd9e 	bl	800055c <__aeabi_f2d>
 8002a20:	a3f5      	add	r3, pc, #980	; (adr r3, 8002df8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fdf1 	bl	800060c <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4690      	mov	r8, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	6938      	ldr	r0, [r7, #16]
 8002a34:	f7fd fd92 	bl	800055c <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4640      	mov	r0, r8
 8002a3e:	4649      	mov	r1, r9
 8002a40:	f7fd ff0e 	bl	8000860 <__aeabi_ddiv>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	ec43 2b17 	vmov	d7, r2, r3
 8002a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a50:	eef0 0a67 	vmov.f32	s1, s15
 8002a54:	f01d fb30 	bl	80200b8 <tan>
 8002a58:	ec53 2b10 	vmov	r2, r3, d0
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7fe f8cc 	bl	8000bfc <__aeabi_d2f>
 8002a64:	4603      	mov	r3, r0
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002a68:	2002      	movs	r0, #2
 8002a6a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002a6e:	f003 fb32 	bl	80060d6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a72:	ec53 2b10 	vmov	r2, r3, d0
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7fe f8bf 	bl	8000bfc <__aeabi_d2f>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a84:	2104      	movs	r1, #4
 8002a86:	4618      	mov	r0, r3
 8002a88:	f017 fa96 	bl	8019fb8 <_Z9ei_callocjj>
 8002a8c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a90:	2104      	movs	r1, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f017 fa90 	bl	8019fb8 <_Z9ei_callocjj>
 8002a98:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f017 fa8a 	bl	8019fb8 <_Z9ei_callocjj>
 8002aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f017 fa84 	bl	8019fb8 <_Z9ei_callocjj>
 8002ab0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f017 fa7e 	bl	8019fb8 <_Z9ei_callocjj>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f017 fa78 	bl	8019fb8 <_Z9ei_callocjj>
 8002ac8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ace:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	f280 80e5 	bge.w	8002ca2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002ad8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ada:	f7fd fd2d 	bl	8000538 <__aeabi_i2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	f7fd fbdd 	bl	80002a0 <__adddf3>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	4bc3      	ldr	r3, [pc, #780]	; (8002e00 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002af4:	f7fd fbd4 	bl	80002a0 <__adddf3>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	a3bd      	add	r3, pc, #756	; (adr r3, 8002df8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fd81 	bl	800060c <__aeabi_dmul>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4690      	mov	r8, r2
 8002b10:	4699      	mov	r9, r3
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7fd fd10 	bl	8000538 <__aeabi_i2d>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	f7fd fbc0 	bl	80002a0 <__adddf3>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4640      	mov	r0, r8
 8002b26:	4649      	mov	r1, r9
 8002b28:	f7fd fe9a 	bl	8000860 <__aeabi_ddiv>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	ec43 2b17 	vmov	d7, r2, r3
 8002b34:	eeb0 0a47 	vmov.f32	s0, s14
 8002b38:	eef0 0a67 	vmov.f32	s1, s15
 8002b3c:	f01d fa64 	bl	8020008 <sin>
 8002b40:	ec53 2b10 	vmov	r2, r3, d0
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7fe f858 	bl	8000bfc <__aeabi_d2f>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b52:	f7fd fd03 	bl	800055c <__aeabi_f2d>
 8002b56:	4680      	mov	r8, r0
 8002b58:	4689      	mov	r9, r1
 8002b5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b5c:	f7fd fcfe 	bl	800055c <__aeabi_f2d>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	f7fd fb9c 	bl	80002a0 <__adddf3>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4692      	mov	sl, r2
 8002b6e:	469b      	mov	fp, r3
 8002b70:	69f8      	ldr	r0, [r7, #28]
 8002b72:	f7fd fcf3 	bl	800055c <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4650      	mov	r0, sl
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	f7fd fd45 	bl	800060c <__aeabi_dmul>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4640      	mov	r0, r8
 8002b88:	4649      	mov	r1, r9
 8002b8a:	f7fd fb89 	bl	80002a0 <__adddf3>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4b99      	ldr	r3, [pc, #612]	; (8002e00 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002b9c:	f7fd fb80 	bl	80002a0 <__adddf3>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f7fe f828 	bl	8000bfc <__aeabi_d2f>
 8002bac:	4603      	mov	r3, r0
 8002bae:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb6:	4413      	add	r3, r2
 8002bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bcc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd4:	ee17 0a90 	vmov	r0, s15
 8002bd8:	f7fd fcc0 	bl	800055c <__aeabi_f2d>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	f7fd fb5e 	bl	80002a0 <__adddf3>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4690      	mov	r8, r2
 8002bea:	4699      	mov	r9, r3
 8002bec:	6938      	ldr	r0, [r7, #16]
 8002bee:	f7fd fcb5 	bl	800055c <__aeabi_f2d>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	f7fd fe31 	bl	8000860 <__aeabi_ddiv>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0c:	18d6      	adds	r6, r2, r3
 8002c0e:	f7fd fff5 	bl	8000bfc <__aeabi_d2f>
 8002c12:	4603      	mov	r3, r0
 8002c14:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002c16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c18:	f7fd fca0 	bl	800055c <__aeabi_f2d>
 8002c1c:	4680      	mov	r8, r0
 8002c1e:	4689      	mov	r9, r1
 8002c20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c22:	f7fd fc9b 	bl	800055c <__aeabi_f2d>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	f7fd fb39 	bl	80002a0 <__adddf3>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4692      	mov	sl, r2
 8002c34:	469b      	mov	fp, r3
 8002c36:	69f8      	ldr	r0, [r7, #28]
 8002c38:	f7fd fc90 	bl	800055c <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4650      	mov	r0, sl
 8002c42:	4659      	mov	r1, fp
 8002c44:	f7fd fce2 	bl	800060c <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4640      	mov	r0, r8
 8002c4e:	4649      	mov	r1, r9
 8002c50:	f7fd fb24 	bl	800029c <__aeabi_dsub>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	4b67      	ldr	r3, [pc, #412]	; (8002e00 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002c62:	f7fd fb1d 	bl	80002a0 <__adddf3>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4614      	mov	r4, r2
 8002c6c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002c70:	6938      	ldr	r0, [r7, #16]
 8002c72:	f7fd fc73 	bl	800055c <__aeabi_f2d>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	f7fd fdef 	bl	8000860 <__aeabi_ddiv>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c90:	18d6      	adds	r6, r2, r3
 8002c92:	f7fd ffb3 	bl	8000bfc <__aeabi_d2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 8002c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca0:	e715      	b.n	8002ace <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	f080 80aa 	bcs.w	8002e04 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	440b      	add	r3, r1
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f280 808e 	bge.w	8002dee <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd8:	4413      	add	r3, r2
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	4413      	add	r3, r2
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edd3 6a00 	vldr	s13, [r3]
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	6a3a      	ldr	r2, [r7, #32]
 8002d00:	4413      	add	r3, r2
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d20:	4413      	add	r3, r2
 8002d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d26:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 8002d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d30:	4413      	add	r3, r2
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc11 	bl	800055c <__aeabi_f2d>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc07 	bl	800055c <__aeabi_f2d>
 8002d4e:	4680      	mov	r8, r0
 8002d50:	4689      	mov	r9, r1
 8002d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	4413      	add	r3, r2
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fbfd 	bl	800055c <__aeabi_f2d>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	f7fd fa9b 	bl	80002a0 <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4640      	mov	r0, r8
 8002d70:	4649      	mov	r1, r9
 8002d72:	f7fd fa93 	bl	800029c <__aeabi_dsub>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4690      	mov	r8, r2
 8002d7c:	4699      	mov	r9, r3
 8002d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	4413      	add	r3, r2
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fbe7 	bl	800055c <__aeabi_f2d>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4640      	mov	r0, r8
 8002d94:	4649      	mov	r1, r9
 8002d96:	f7fd fa83 	bl	80002a0 <__adddf3>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4620      	mov	r0, r4
 8002da0:	4629      	mov	r1, r5
 8002da2:	f7fd fc33 	bl	800060c <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	18d4      	adds	r4, r2, r3
 8002db6:	f7fd ff21 	bl	8000bfc <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	441a      	add	r2, r3
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	6a39      	ldr	r1, [r7, #32]
 8002dcc:	440b      	add	r3, r1
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd8:	441a      	add	r2, r3
 8002dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de0:	440b      	add	r3, r1
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de8:	3301      	adds	r3, #1
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
 8002dec:	e76c      	b.n	8002cc8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df0:	3301      	adds	r3, #1
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df4:	e757      	b.n	8002ca6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8002df6:	bf00      	nop
 8002df8:	54442d18 	.word	0x54442d18
 8002dfc:	400921fb 	.word	0x400921fb
 8002e00:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002e04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e06:	f017 f8e5 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(d1);
 8002e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e0c:	f017 f8e2 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(d2);
 8002e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e12:	f017 f8df 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(w0);
 8002e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e18:	f017 f8dc 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(w1);
 8002e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e1e:	f017 f8d9 	bl	8019fd4 <_Z7ei_freePv>
        ei_free(w2);
 8002e22:	6a38      	ldr	r0, [r7, #32]
 8002e24:	f017 f8d6 	bl	8019fd4 <_Z7ei_freePv>
    }
 8002e28:	bf00      	nop
 8002e2a:	3754      	adds	r7, #84	; 0x54
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop

08002e34 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e40:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d21f      	bcs.n	8002e96 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8002e56:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	6979      	ldr	r1, [r7, #20]
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 8002e7a:	441a      	add	r2, r3
                matrix->cols);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 8002e80:	4621      	mov	r1, r4
 8002e82:	edd7 0a01 	vldr	s1, [r7, #4]
 8002e86:	ed97 0a02 	vldr	s0, [r7, #8]
 8002e8a:	f7ff fb95 	bl	80025b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e7da      	b.n	8002e4c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8002e96:	2300      	movs	r3, #0
    }
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd90      	pop	{r4, r7, pc}

08002ea0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002eac:	edc7 0a01 	vstr	s1, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d21f      	bcs.n	8002f02 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 8002ec2:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	6979      	ldr	r1, [r7, #20]
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8002ee6:	441a      	add	r2, r3
                matrix->cols);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 8002eec:	4621      	mov	r1, r4
 8002eee:	edd7 0a01 	vldr	s1, [r7, #4]
 8002ef2:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ef6:	f7ff fd7f 	bl	80029f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e7da      	b.n	8002eb8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8002f02:	2300      	movs	r3, #0
    }
 8002f04:	4618      	mov	r0, r3
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}

08002f0c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8002f0c:	b480      	push	{r7}
 8002f0e:	b091      	sub	sp, #68	; 0x44
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f1a:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d001      	beq.n	8002f28 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f24:	4b60      	ldr	r3, [pc, #384]	; (80030a8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002f26:	e0b9      	b.n	800309c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f30:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002f32:	e0b3      	b.n	800309c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8002f50:	4b56      	ldr	r3, [pc, #344]	; (80030ac <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	3b01      	subs	r3, #1
 8002f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d229      	bcs.n	8002fbc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	4413      	add	r3, r2
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	dd05      	ble.n	8002f8e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	6a3a      	ldr	r2, [r7, #32]
 8002f88:	4413      	add	r3, r2
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	4413      	add	r3, r2
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	d505      	bpl.n	8002fb4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	4413      	add	r3, r2
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fba:	e7d0      	b.n	8002f5e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d261      	bcs.n	8003094 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	d549      	bpl.n	800307e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	6a3a      	ldr	r2, [r7, #32]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	ed93 7a00 	vldr	s14, [r3]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	4413      	add	r3, r2
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	dd37      	ble.n	800307e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	4413      	add	r3, r2
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800301e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	6a3a      	ldr	r2, [r7, #32]
 8003028:	4413      	add	r3, r2
 800302a:	edd3 6a00 	vldr	s13, [r3]
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	3301      	adds	r3, #1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	4413      	add	r3, r2
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003044:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003048:	ed97 7a05 	vldr	s14, [r7, #20]
 800304c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003058:	dd11      	ble.n	800307e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 800305a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4413      	add	r3, r2
 8003062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003064:	ee07 2a90 	vmov	s15, r2
 8003068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306c:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 8003070:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003072:	3301      	adds	r3, #1
 8003074:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 8003076:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	429a      	cmp	r2, r3
 800307c:	d009      	beq.n	8003092 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	4413      	add	r3, r2
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	3301      	adds	r3, #1
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003090:	e799      	b.n	8002fc6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 8003092:	bf00      	nop
        }

        *peaks_found = out_ix;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003098:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 800309a:	2300      	movs	r3, #0
    }
 800309c:	4618      	mov	r0, r3
 800309e:	3744      	adds	r7, #68	; 0x44
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	fffffc14 	.word	0xfffffc14
 80030ac:	7f7fffff 	.word	0x7f7fffff

080030b0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 f8e0 	bl	8006280 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ffeb 	bl	80030b0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80030fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003104:	bfcc      	ite	gt
 8003106:	2301      	movgt	r3, #1
 8003108:	2300      	movle	r3, #0
 800310a:	b2db      	uxtb	r3, r3
        });
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	ed2d 8b02 	vpush	{d8}
 800311e:	b09c      	sub	sp, #112	; 0x70
 8003120:	af00      	add	r7, sp, #0
 8003122:	6178      	str	r0, [r7, #20]
 8003124:	6139      	str	r1, [r7, #16]
 8003126:	ed87 0a03 	vstr	s0, [r7, #12]
 800312a:	edc7 0a02 	vstr	s1, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800313a:	4c95      	ldr	r4, [pc, #596]	; (8003390 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 800313c:	e120      	b.n	8003380 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->cols != 2) {
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d001      	beq.n	800314a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003146:	4c92      	ldr	r4, [pc, #584]	; (8003390 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003148:	e11a      	b.n	8003380 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->rows == 0) {
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003152:	2400      	movs	r4, #0
 8003154:	e114      	b.n	8003380 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        int N = static_cast<int>(fft_length);
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 800315a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003166:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003172:	2300      	movs	r3, #0
 8003174:	2101      	movs	r1, #1
 8003176:	f7fe fa4a 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 800317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8003180:	4c84      	ldr	r4, [pc, #528]	; (8003394 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003182:	e0f8      	b.n	8003376 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8003184:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800318c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003190:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003196:	0fda      	lsrs	r2, r3, #31
 8003198:	4413      	add	r3, r2
 800319a:	105b      	asrs	r3, r3, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f003 f85d 	bl	800625c <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80031a2:	ec53 2b10 	vmov	r2, r3, d0
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fd07 	bl	8000bbc <__aeabi_d2uiz>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	eef0 0a48 	vmov.f32	s1, s16
 80031ba:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8003398 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 80031be:	f7fe ff35 	bl	800202c <_ZN2ei5numpy8linspaceEffmPf>
 80031c2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 80031c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb6>
            EIDSP_ERR(ret);
 80031ca:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80031cc:	e0d3      	b.n	8003376 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4619      	mov	r1, r3
 80031dc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80031e0:	2300      	movs	r3, #0
 80031e2:	2201      	movs	r2, #1
 80031e4:	f7fe fa13 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xda>
 80031ee:	4c69      	ldr	r4, [pc, #420]	; (8003394 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 80031f0:	e0bc      	b.n	800336c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 80031f2:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80031f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031fa:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8003398 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 80031fe:	4619      	mov	r1, r3
 8003200:	6978      	ldr	r0, [r7, #20]
 8003202:	f7ff fe83 	bl	8002f0c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003206:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfa>
            EIDSP_ERR(ret);
 800320e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003210:	e0ac      	b.n	800336c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ei_vector<freq_peak_t> peaks;
 8003212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff57 	bl	80030ca <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 800321c:	2300      	movs	r3, #0
 800321e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003226:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003228:	4293      	cmp	r3, r2
 800322a:	da3d      	bge.n	80032a8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x190>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800322c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800322e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003230:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003240:	ee17 3a90 	vmov	r3, s15
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003252:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003262:	ee17 3a90 	vmov	r3, s15
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 800326e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003272:	ed97 7a02 	vldr	s14, [r7, #8]
 8003276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	dd05      	ble.n	800328c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x174>
                d.freq = 0.0f;
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 800328c:	f107 0220 	add.w	r2, r7, #32
 8003290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f003 f82f 	bl	80062fa <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 800329c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80032a0:	3301      	adds	r3, #1
 80032a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80032a6:	e7bc      	b.n	8003222 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10a>
        sort(peaks.begin(), peaks.end(),
 80032a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 f84a 	bl	8006346 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 80032b2:	4604      	mov	r4, r0
 80032b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 f854 	bl	8006366 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 80032be:	4603      	mov	r3, r0
 80032c0:	462a      	mov	r2, r5
 80032c2:	4619      	mov	r1, r3
 80032c4:	4620      	mov	r0, r4
 80032c6:	f003 f85f 	bl	8006388 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80032ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 f86c 	bl	80063ac <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 80032d4:	66b8      	str	r0, [r7, #104]	; 0x68
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032dc:	429a      	cmp	r2, r3
 80032de:	d211      	bcs.n	8003304 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1ec>
            freq_peak_t d;
            d.freq = 0;
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 80032ec:	f107 0218 	add.w	r2, r7, #24
 80032f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f002 ffff 	bl	80062fa <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80032fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032fe:	3301      	adds	r3, #1
 8003300:	66bb      	str	r3, [r7, #104]	; 0x68
 8003302:	e7e8      	b.n	80032d6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1be>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003304:	2300      	movs	r3, #0
 8003306:	667b      	str	r3, [r7, #100]	; 0x64
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800330e:	429a      	cmp	r2, r3
 8003310:	d226      	bcs.n	8003360 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003316:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003318:	4618      	mov	r0, r3
 800331a:	f003 f857 	bl	80063cc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	6802      	ldr	r2, [r0, #0]
 8003332:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003338:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800333a:	4618      	mov	r0, r3
 800333c:	f003 f846 	bl	80063cc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	3301      	adds	r3, #1
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	6842      	ldr	r2, [r0, #4]
 8003356:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335a:	3301      	adds	r3, #1
 800335c:	667b      	str	r3, [r7, #100]	; 0x64
 800335e:	e7d3      	b.n	8003308 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f0>
        }

        return EIDSP_OK;
 8003360:	2400      	movs	r4, #0
        ei_vector<freq_peak_t> peaks;
 8003362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003366:	4618      	mov	r0, r3
 8003368:	f002 ffac 	bl	80062c4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 800336c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe f977 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003376:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f972 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 8003380:	4623      	mov	r3, r4
 8003382:	4618      	mov	r0, r3
 8003384:	3770      	adds	r7, #112	; 0x70
 8003386:	46bd      	mov	sp, r7
 8003388:	ecbd 8b02 	vpop	{d8}
 800338c:	bdb0      	pop	{r4, r5, r7, pc}
 800338e:	bf00      	nop
 8003390:	fffffc14 	.word	0xfffffc14
 8003394:	fffffc16 	.word	0xfffffc16
 8003398:	00000000 	.word	0x00000000

0800339c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b093      	sub	sp, #76	; 0x4c
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6178      	str	r0, [r7, #20]
 80033a4:	6139      	str	r1, [r7, #16]
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d103      	bne.n	80033be <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033be:	4c7b      	ldr	r4, [pc, #492]	; (80035ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80033c0:	e0ef      	b.n	80035a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d001      	beq.n	80033ce <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033ca:	4c78      	ldr	r4, [pc, #480]	; (80035ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80033cc:	e0e9      	b.n	80035a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	429a      	cmp	r2, r3
 80033da:	d105      	bne.n	80033e8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033e8:	4c70      	ldr	r4, [pc, #448]	; (80035ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80033ea:	e0da      	b.n	80035a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033f8:	4c6c      	ldr	r4, [pc, #432]	; (80035ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80033fa:	e0d2      	b.n	80035a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003406:	2300      	movs	r3, #0
 8003408:	2101      	movs	r1, #1
 800340a:	f7fe f900 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003414:	4c66      	ldr	r4, [pc, #408]	; (80035b0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003416:	e0bf      	b.n	8003598 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	f107 0018 	add.w	r0, r7, #24
 8003422:	2300      	movs	r3, #0
 8003424:	2101      	movs	r1, #1
 8003426:	f7fe f8f2 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003430:	4c5f      	ldr	r4, [pc, #380]	; (80035b0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003432:	e0ac      	b.n	800358e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003434:	2300      	movs	r3, #0
 8003436:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800343a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d264      	bcs.n	8003510 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003466:	2300      	movs	r3, #0
 8003468:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800346c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	3b01      	subs	r3, #1
 8003476:	429a      	cmp	r2, r3
 8003478:	d244      	bcs.n	8003504 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800348e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	db2f      	blt.n	80034f8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034a0:	3301      	adds	r3, #1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80034ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	d51f      	bpl.n	80034f8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 80034b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	ed93 7a00 	vldr	s14, [r3]
 80034c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80034d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d8:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034f2:	edc3 7a00 	vstr	s15, [r3]
                    break;
 80034f6:	e005      	b.n	8003504 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 80034f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034fc:	3301      	adds	r3, #1
 80034fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003502:	e7b3      	b.n	800346c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003504:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003508:	3301      	adds	r3, #1
 800350a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800350e:	e794      	b.n	800343a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003510:	2300      	movs	r3, #0
 8003512:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003516:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	429a      	cmp	r2, r3
 8003522:	d233      	bcs.n	800358c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353a:	d109      	bne.n	8003550 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e017      	b.n	8003580 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003552:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	edd3 6a00 	vldr	s13, [r3]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	ed93 7a00 	vldr	s14, [r3]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800357c:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003580:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003584:	3301      	adds	r3, #1
 8003586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800358a:	e7c4      	b.n	8003516 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 800358c:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 800358e:	f107 0318 	add.w	r3, r7, #24
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe f866 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8003598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe f861 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 80035a2:	4623      	mov	r3, r4
 80035a4:	4618      	mov	r0, r3
 80035a6:	374c      	adds	r7, #76	; 0x4c
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	fffffc14 	.word	0xfffffc14
 80035b0:	fffffc16 	.word	0xfffffc16

080035b4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	ed2d 8b02 	vpush	{d8}
 80035ba:	b09b      	sub	sp, #108	; 0x6c
 80035bc:	af02      	add	r7, sp, #8
 80035be:	6178      	str	r0, [r7, #20]
 80035c0:	6139      	str	r1, [r7, #16]
 80035c2:	60fa      	str	r2, [r7, #12]
 80035c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80035c8:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035d2:	4c80      	ldr	r4, [pc, #512]	; (80037d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 80035d4:	e192      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	0852      	lsrs	r2, r2, #1
 80035e6:	b292      	uxth	r2, r2
 80035e8:	3201      	adds	r2, #1
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d001      	beq.n	80035f2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035ee:	4c79      	ldr	r4, [pc, #484]	; (80037d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 80035f0:	e184      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	b292      	uxth	r2, r2
 8003604:	3201      	adds	r2, #1
 8003606:	4293      	cmp	r3, r2
 8003608:	d001      	beq.n	800360e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800360a:	4c72      	ldr	r4, [pc, #456]	; (80037d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 800360c:	e176      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003616:	4c70      	ldr	r4, [pc, #448]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003618:	e170      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003622:	4c6d      	ldr	r4, [pc, #436]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003624:	e16a      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800362e:	4c6a      	ldr	r4, [pc, #424]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003630:	e164      	b.n	80038fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003642:	f7fd ffe4 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 800364c:	4c62      	ldr	r4, [pc, #392]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 800364e:	e150      	b.n	80038f2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	d904      	bls.n	800366a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003668:	e006      	b.n	8003678 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d201      	bcs.n	8003678 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003678:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800367c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003680:	2300      	movs	r3, #0
 8003682:	2101      	movs	r1, #1
 8003684:	f7fd ffc3 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 800368e:	4c52      	ldr	r4, [pc, #328]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003690:	e12a      	b.n	80038e8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003692:	2300      	movs	r3, #0
 8003694:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003698:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800369c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d20d      	bcs.n	80036c0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 80036a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80036b2:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80036b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80036b8:	3301      	adds	r3, #1
 80036ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80036be:	e7eb      	b.n	8003698 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 80036c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036dc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d826      	bhi.n	8003742 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x18e>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 80036f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800370a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800370e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003712:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003716:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800371a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800371e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003736:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800373a:	3301      	adds	r3, #1
 800373c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003740:	e7d1      	b.n	80036e6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8003742:	f107 001c 	add.w	r0, r7, #28
 8003746:	2300      	movs	r3, #0
 8003748:	2201      	movs	r2, #1
 800374a:	2101      	movs	r1, #1
 800374c:	f7fd ff5f 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 8003756:	4c20      	ldr	r4, [pc, #128]	; (80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003758:	e0c1      	b.n	80038de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 800375a:	f107 021c 	add.w	r2, r7, #28
 800375e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fa55 	bl	8001c14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 800376a:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 800376c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 8003772:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003774:	e0b3      	b.n	80038de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 8003776:	f107 021c 	add.w	r2, r7, #28
 800377a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe f9af 	bl	8001ae4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003786:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 800378e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003790:	e0a5      	b.n	80038de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f016 fc0a 	bl	8019fb8 <_Z9ei_callocjj>
 80037a4:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80037a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	461a      	mov	r2, r3
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037bc:	f7fe fb44 	bl	8001e48 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 80037c0:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80037c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80037c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037ca:	f016 fc03 	bl	8019fd4 <_Z7ei_freePv>
            EIDSP_ERR(ret);
 80037ce:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80037d0:	e085      	b.n	80038de <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
 80037d2:	bf00      	nop
 80037d4:	fffffc14 	.word	0xfffffc14
 80037d8:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80037dc:	2300      	movs	r3, #0
 80037de:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d872      	bhi.n	80038d6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x322>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 80037f0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f8:	4413      	add	r3, r2
 80037fa:	ed93 7a00 	vldr	s14, [r3]
 80037fe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003806:	4413      	add	r3, r2
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8003810:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003818:	4413      	add	r3, r2
 800381a:	ed93 7a01 	vldr	s14, [r3, #4]
 800381e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003826:	4413      	add	r3, r2
 8003828:	edd3 7a01 	vldr	s15, [r3, #4]
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	f7fd fd28 	bl	8001288 <_ZSt3absf>
 8003838:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 800383c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003844:	4413      	add	r3, r2
 8003846:	ee78 7a27 	vadd.f32	s15, s16, s15
 800384a:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 800384e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003856:	4413      	add	r3, r2
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 800385e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003866:	4413      	add	r3, r2
 8003868:	ed93 7a00 	vldr	s14, [r3]
 800386c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003874:	4413      	add	r3, r2
 8003876:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800388c:	429a      	cmp	r2, r3
 800388e:	d00f      	beq.n	80038b0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2fc>
                fft_output[ix].r *= 2;
 8003890:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003898:	4413      	add	r3, r2
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a6:	4413      	add	r3, r2
 80038a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038ac:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 80038b0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038b8:	441a      	add	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80038ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80038ce:	3301      	adds	r3, #1
 80038d0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80038d4:	e785      	b.n	80037e2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22e>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80038d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80038d8:	f016 fb7c 	bl	8019fd4 <_Z7ei_freePv>

        return EIDSP_OK;
 80038dc:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 80038de:	f107 031c 	add.w	r3, r7, #28
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd febe 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 80038e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd feb9 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 80038f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd feb4 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 80038fc:	4623      	mov	r3, r4
 80038fe:	4618      	mov	r0, r3
 8003900:	3764      	adds	r7, #100	; 0x64
 8003902:	46bd      	mov	sp, r7
 8003904:	ecbd 8b02 	vpop	{d8}
 8003908:	bd90      	pop	{r4, r7, pc}
 800390a:	bf00      	nop

0800390c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	f107 000c 	add.w	r0, r7, #12
 800391c:	2300      	movs	r3, #0
 800391e:	2201      	movs	r2, #1
 8003920:	f7fd fe75 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 800392a:	4c12      	ldr	r4, [pc, #72]	; (8003974 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 800392c:	e018      	b.n	8003960 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fe f96d 	bl	8001c14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 800393a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003942:	4c0d      	ldr	r4, [pc, #52]	; (8003978 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003944:	e00c      	b.n	8003960 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8003946:	f107 030c 	add.w	r3, r7, #12
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fe f8c9 	bl	8001ae4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003952:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800395a:	4c07      	ldr	r4, [pc, #28]	; (8003978 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 800395c:	e000      	b.n	8003960 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 800395e:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fe7d 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 800396a:	4623      	mov	r3, r4
 800396c:	4618      	mov	r0, r3
 800396e:	3724      	adds	r7, #36	; 0x24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	fffffc16 	.word	0xfffffc16
 8003978:	fffffc14 	.word	0xfffffc14

0800397c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	b0b0      	sub	sp, #192	; 0xc0
 8003980:	af02      	add	r7, sp, #8
 8003982:	6178      	str	r0, [r7, #20]
 8003984:	6139      	str	r1, [r7, #16]
 8003986:	ed87 0a03 	vstr	s0, [r7, #12]
 800398a:	4611      	mov	r1, r2
 800398c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003990:	461a      	mov	r2, r3
 8003992:	ed87 1a00 	vstr	s2, [r7]
 8003996:	460b      	mov	r3, r1
 8003998:	72fb      	strb	r3, [r7, #11]
 800399a:	4613      	mov	r3, r2
 800399c:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d001      	beq.n	80039ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039aa:	4caf      	ldr	r4, [pc, #700]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 80039ac:	e227      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	689d      	ldr	r5, [r3, #8]
 80039b2:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 80039b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	461a      	mov	r2, r3
 80039be:	2001      	movs	r0, #1
 80039c0:	f000 fa22 	bl	8003e08 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80039c4:	4603      	mov	r3, r0
 80039c6:	429d      	cmp	r5, r3
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039d4:	4ca4      	ldr	r4, [pc, #656]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 80039d6:	e212      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 80039d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039e2:	4ca1      	ldr	r4, [pc, #644]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 80039e4:	e20b      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 80039ee:	6938      	ldr	r0, [r7, #16]
 80039f0:	f7ff ff8c 	bl	800390c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 80039f4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80039f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8003a00:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003a04:	e1fb      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d110      	bne.n	8003a2e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 8003a0c:	7abb      	ldrb	r3, [r7, #10]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	edd7 0a01 	vldr	s1, [r7, #4]
 8003a14:	ed97 0a03 	vldr	s0, [r7, #12]
 8003a18:	6938      	ldr	r0, [r7, #16]
 8003a1a:	f7ff fa0b 	bl	8002e34 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8003a1e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003a22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d015      	beq.n	8003a56 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a2a:	4c8f      	ldr	r4, [pc, #572]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003a2c:	e1e7      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d110      	bne.n	8003a56 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8003a34:	7abb      	ldrb	r3, [r7, #10]
 8003a36:	4619      	mov	r1, r3
 8003a38:	edd7 0a01 	vldr	s1, [r7, #4]
 8003a3c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003a40:	6938      	ldr	r0, [r7, #16]
 8003a42:	f7ff fa2d 	bl	8002ea0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003a46:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003a4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a52:	4c85      	ldr	r4, [pc, #532]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003a54:	e1d3      	b.n	8003dfe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003a56:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a62:	f7fd fdd4 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 8003a6e:	4c7f      	ldr	r4, [pc, #508]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003a70:	e1c0      	b.n	8003df4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8003a72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a76:	4619      	mov	r1, r3
 8003a78:	6938      	ldr	r0, [r7, #16]
 8003a7a:	f7fe f88f 	bl	8001b9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8003a7e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8003a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a8a:	4c77      	ldr	r4, [pc, #476]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003a8c:	e1b2      	b.n	8003df4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003a8e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	461a      	mov	r2, r3
 8003a96:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aa0:	f7fd fdb5 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 8003aaa:	4c70      	ldr	r4, [pc, #448]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003aac:	e19d      	b.n	8003dea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f080 8193 	bcs.w	8003de8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46c>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	689d      	ldr	r5, [r3, #8]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003ade:	462a      	mov	r2, r5
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	f7fd fd94 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x176>
 8003aec:	4c5f      	ldr	r4, [pc, #380]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003aee:	2500      	movs	r5, #0
 8003af0:	e16d      	b.n	8003dce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 8003af2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	461a      	mov	r2, r3
 8003afe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003b02:	2300      	movs	r3, #0
 8003b04:	2101      	movs	r1, #1
 8003b06:	f7fd fd82 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x19a>
 8003b10:	4c56      	ldr	r4, [pc, #344]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003b12:	2500      	movs	r5, #0
 8003b14:	e151      	b.n	8003dba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 8003b16:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003b18:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b1c:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8003b1e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462b      	mov	r3, r5
 8003b26:	f7fe f8b1 	bl	8001c8c <_ZN2ei5numpy4rfftEPKfjPfjj>
 8003b2a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8003b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1c0>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003b36:	4c4c      	ldr	r4, [pc, #304]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003b38:	2500      	movs	r5, #0
 8003b3a:	e13e      	b.n	8003dba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003b3c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b54:	eeb0 0a47 	vmov.f32	s0, s14
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd ff49 	bl	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003b5e:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003b62:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003b66:	2300      	movs	r3, #0
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f7fd fd50 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1fe>
 8003b74:	4c3d      	ldr	r4, [pc, #244]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003b76:	2500      	movs	r5, #0
 8003b78:	e115      	b.n	8003da6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 8003b7a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8003b7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003b82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b86:	edd7 0a00 	vldr	s1, [r7]
 8003b8a:	ed97 0a03 	vldr	s0, [r7, #12]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fac2 	bl	8003118 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8003b94:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 8003b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x22a>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003ba0:	4c31      	ldr	r4, [pc, #196]	; (8003c68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003ba2:	2500      	movs	r5, #0
 8003ba4:	e0ff      	b.n	8003da6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8003ba6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2101      	movs	r1, #1
 8003bba:	f7fd fd28 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x24e>
 8003bc4:	4c29      	ldr	r4, [pc, #164]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003bc6:	2500      	movs	r5, #0
 8003bc8:	e0e3      	b.n	8003d92 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003bca:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2101      	movs	r1, #1
 8003bde:	f7fd fd16 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x272>
 8003be8:	4c20      	ldr	r4, [pc, #128]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003bea:	2500      	movs	r5, #0
 8003bec:	e0c7      	b.n	8003d7e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            ret = spectral::processing::periodogram(&axis_matrix,
 8003bee:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003bf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bf6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003bfa:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003bfe:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c02:	f7ff fcd7 	bl	80035b4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 8003c06:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 8003c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x29e>
                EIDSP_ERR(ret);
 8003c12:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003c16:	2500      	movs	r5, #0
 8003c18:	e0b1      	b.n	8003d7e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003c1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	1e59      	subs	r1, r3, #1
 8003c22:	f107 0018 	add.w	r0, r7, #24
 8003c26:	2300      	movs	r3, #0
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f7fd fcf0 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2be>
 8003c34:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003c36:	2500      	movs	r5, #0
 8003c38:	e097      	b.n	8003d6a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
            ret = spectral::processing::spectral_power_edges(
 8003c3a:	f107 0318 	add.w	r3, r7, #24
 8003c3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c42:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003c46:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c4e:	f7ff fba5 	bl	800339c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8003c52:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f4>
                EIDSP_ERR(ret);
 8003c5e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003c62:	2500      	movs	r5, #0
 8003c64:	e081      	b.n	8003d6a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
 8003c66:	bf00      	nop
 8003c68:	fffffc14 	.word	0xfffffc14
 8003c6c:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8003c8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c9e:	1c59      	adds	r1, r3, #1
 8003ca0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003caa:	440b      	add	r3, r1
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d22c      	bcs.n	8003d1a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39e>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8003cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cd4:	1c59      	adds	r1, r3, #1
 8003cd6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003ce0:	440b      	add	r3, r1
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 8003ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cea:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	441a      	add	r2, r3
 8003cf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cfc:	1c59      	adds	r1, r3, #1
 8003cfe:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003d08:	440b      	add	r3, r1
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d12:	3301      	adds	r3, #1
 8003d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d18:	e7cd      	b.n	8003cb6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33a>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d21e      	bcs.n	8003d68 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ec>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	ed93 7a00 	vldr	s14, [r3]
 8003d3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003d4e:	4413      	add	r3, r2
 8003d50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d58:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d60:	3301      	adds	r3, #1
 8003d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d66:	e7db      	b.n	8003d20 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3a4>
 8003d68:	2501      	movs	r5, #1
 8003d6a:	f107 0318 	add.w	r3, r7, #24
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fc78 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003d74:	2d01      	cmp	r5, #1
 8003d76:	d001      	beq.n	8003d7c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x400>
 8003d78:	2500      	movs	r5, #0
 8003d7a:	e000      	b.n	8003d7e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
 8003d7c:	2501      	movs	r5, #1
 8003d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fc6e 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003d88:	2d01      	cmp	r5, #1
 8003d8a:	d001      	beq.n	8003d90 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x414>
 8003d8c:	2500      	movs	r5, #0
 8003d8e:	e000      	b.n	8003d92 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
 8003d90:	2501      	movs	r5, #1
 8003d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fc64 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003d9c:	2d01      	cmp	r5, #1
 8003d9e:	d001      	beq.n	8003da4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x428>
 8003da0:	2500      	movs	r5, #0
 8003da2:	e000      	b.n	8003da6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
 8003da4:	2501      	movs	r5, #1
 8003da6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd fc5a 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003db0:	2d01      	cmp	r5, #1
 8003db2:	d001      	beq.n	8003db8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43c>
 8003db4:	2500      	movs	r5, #0
 8003db6:	e000      	b.n	8003dba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
 8003db8:	2501      	movs	r5, #1
 8003dba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fd fc50 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003dc4:	2d01      	cmp	r5, #1
 8003dc6:	d001      	beq.n	8003dcc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
 8003dc8:	2500      	movs	r5, #0
 8003dca:	e000      	b.n	8003dce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
 8003dcc:	2501      	movs	r5, #1
 8003dce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd fc46 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8003dd8:	2d01      	cmp	r5, #1
 8003dda:	d106      	bne.n	8003dea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003de0:	3301      	adds	r3, #1
 8003de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003de6:	e665      	b.n	8003ab4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x138>
            }
        }

        return EIDSP_OK;
 8003de8:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003dea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd fc38 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003df4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fc33 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 8003dfe:	4623      	mov	r3, r4
 8003e00:	4618      	mov	r0, r3
 8003e02:	37b8      	adds	r7, #184	; 0xb8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bdb0      	pop	{r4, r5, r7, pc}

08003e08 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3301      	adds	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8003e40:	697b      	ldr	r3, [r7, #20]
    }
 8003e42:	4618      	mov	r0, r3
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8003e50:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8003e54:	b0b3      	sub	sp, #204	; 0xcc
 8003e56:	af04      	add	r7, sp, #16
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e68:	eeb0 0a67 	vmov.f32	s0, s15
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7fd fdbf 	bl	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8003e72:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8003e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 8003e7e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003e82:	488c      	ldr	r0, [pc, #560]	; (80040b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 8003e84:	f001 feba 	bl	8005bfc <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8003e88:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8003e8c:	e10b      	b.n	80040a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7fd fd2d 	bl	80018ee <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8003e94:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8003e98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8003ea0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003ea4:	4884      	ldr	r0, [pc, #528]	; (80040b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 8003ea6:	f001 fea9 	bl	8005bfc <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8003eaa:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8003eae:	e0fa      	b.n	80040a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 8003eb0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	2140      	movs	r1, #64	; 0x40
 8003eba:	f7fd fba8 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	f107 0318 	add.w	r3, r7, #24
 8003ecc:	227c      	movs	r2, #124	; 0x7c
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f01e fd29 	bl	8022928 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc f9d2 	bl	8000284 <strlen>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee4:	d901      	bls.n	8003eea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8003ee6:	4c75      	ldr	r4, [pc, #468]	; (80040bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 8003ee8:	e0d8      	b.n	800409c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        memcpy(
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc f9c6 	bl	8000284 <strlen>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f107 0314 	add.w	r3, r7, #20
 8003efe:	4621      	mov	r1, r4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f01e fce9 	bl	80228d8 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 8003f0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d03f      	beq.n	8003f96 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
            while ((*spectral_ptr) == ' ') {
 8003f16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d105      	bne.n	8003f2c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xdc>
                spectral_ptr++;
 8003f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f24:	3301      	adds	r3, #1
 8003f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 8003f2a:	e7f4      	b.n	8003f16 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc6>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8003f2c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003f30:	f01e fc76 	bl	8022820 <atof>
 8003f34:	ec59 8b10 	vmov	r8, r9, d0
 8003f38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f40:	1c59      	adds	r1, r3, #1
 8003f42:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	18d4      	adds	r4, r2, r3
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	f7fc fe55 	bl	8000bfc <__aeabi_d2f>
 8003f52:	4603      	mov	r3, r0
 8003f54:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 8003f56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b2c      	cmp	r3, #44	; 0x2c
 8003f5e:	d00b      	beq.n	8003f78 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                spectral_ptr++;
 8003f60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f64:	3301      	adds	r3, #1
 8003f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 8003f6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d000      	beq.n	8003f76 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x126>
            while ((*spectral_ptr != ',')) {
 8003f74:	e7ef      	b.n	8003f56 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                    break;
 8003f76:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8003f78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
                spectral_ptr = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f88:	e7c1      	b.n	8003f0e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
            else {
                spectral_ptr++;
 8003f8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 8003f94:	e7bb      	b.n	8003f0e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 8003f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8003fa2:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 8003fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2001      	movs	r0, #1
 8003fac:	f7ff ff2c 	bl	8003e08 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8003fb0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d001      	beq.n	8003fd6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003fd2:	4c3b      	ldr	r4, [pc, #236]	; (80040c0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 8003fd4:	e062      	b.n	800409c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003fdc:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4935      	ldr	r1, [pc, #212]	; (80040c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc f93e 	bl	8000270 <strcmp>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8004000:	e00f      	b.n	8004022 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4930      	ldr	r1, [pc, #192]	; (80040c8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc f931 	bl	8000270 <strcmp>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 8004014:	2302      	movs	r3, #2
 8004016:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800401a:	e002      	b.n	8004022 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 800401c:	2300      	movs	r3, #0
 800401e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	edd3 7a04 	vldr	s15, [r3, #16]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
        ret = spectral::feature::spectral_analysis(
 800402c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 8004032:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6a12      	ldr	r2, [r2, #32]
        ret = spectral::feature::spectral_analysis(
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004040:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8004044:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8004048:	9102      	str	r1, [sp, #8]
 800404a:	9201      	str	r2, [sp, #4]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	eeb0 1a47 	vmov.f32	s2, s14
 8004052:	4623      	mov	r3, r4
 8004054:	eef0 0a67 	vmov.f32	s1, s15
 8004058:	4602      	mov	r2, r0
 800405a:	ed97 0a00 	vldr	s0, [r7]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	68b8      	ldr	r0, [r7, #8]
 8004062:	f7ff fc8b 	bl	800397c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8004066:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800406a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8004072:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004076:	4815      	ldr	r0, [pc, #84]	; (80040cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8004078:	f001 fdc0 	bl	8005bfc <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800407c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8004080:	e00c      	b.n	800409c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	461a      	mov	r2, r3
 8004088:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800408c:	fb03 f202 	mul.w	r2, r3, r2
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2201      	movs	r2, #1
 8004098:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 800409a:	2400      	movs	r4, #0
        matrix_t edges_matrix_in(64, 1);
 800409c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd fadf 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
    }
 80040a6:	4623      	mov	r3, r4
 80040a8:	4618      	mov	r0, r3
 80040aa:	37bc      	adds	r7, #188	; 0xbc
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80040b2:	bf00      	nop
 80040b4:	08025a90 	.word	0x08025a90
 80040b8:	08025ab4 	.word	0x08025ab4
 80040bc:	fffffc10 	.word	0xfffffc10
 80040c0:	fffffc14 	.word	0xfffffc14
 80040c4:	08025adc 	.word	0x08025adc
 80040c8:	08025ae0 	.word	0x08025ae0
 80040cc:	08025ae8 	.word	0x08025ae8

080040d0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80040da:	6138      	str	r0, [r7, #16]
 80040dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        float bin = filter_cutoff * fft_length / sampling_freq;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80040f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80040f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80040fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004100:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d021      	beq.n	800414e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x7e>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 800410a:	69f8      	ldr	r0, [r7, #28]
 800410c:	f7fc fa26 	bl	800055c <__aeabi_f2d>
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004116:	f7fc f8c1 	bl	800029c <__aeabi_dsub>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc fd4b 	bl	8000bbc <__aeabi_d2uiz>
 8004126:	4603      	mov	r3, r0
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6c>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e000      	b.n	800413e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6e>
 800413c:	2301      	movs	r3, #1
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 800414c:	e014      	b.n	8004178 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = 1;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 8004154:	69f8      	ldr	r0, [r7, #28]
 8004156:	f7fc fa01 	bl	800055c <__aeabi_f2d>
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004160:	f7fc f89e 	bl	80002a0 <__adddf3>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	f7fc fd26 	bl	8000bbc <__aeabi_d2uiz>
 8004170:	4603      	mov	r3, r0
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	601a      	str	r2, [r3, #0]
    }
 8004178:	bf00      	nop
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	3fe00000 	.word	0x3fe00000

08004184 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 8004184:	b5b0      	push	{r4, r5, r7, lr}
 8004186:	b0a8      	sub	sp, #160	; 0xa0
 8004188:	af04      	add	r7, sp, #16
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7fd fb1a 	bl	80017ce <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	edd3 7a02 	vldr	s15, [r3, #8]
 80041a0:	eeb0 0a67 	vmov.f32	s0, s15
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7fd fc23 	bl	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80041aa:	6738      	str	r0, [r7, #112]	; 0x70
 80041ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 80041b2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80041b4:	e19e      	b.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        bool do_filter = false;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	49ab      	ldr	r1, [pc, #684]	; (8004470 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2ec>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f854 	bl	8000270 <strcmp>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11e      	bne.n	800420c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x88>
            if( config->filter_order ) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d013      	beq.n	80041fe <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	4619      	mov	r1, r3
 80041e4:	eef0 0a67 	vmov.f32	s1, s15
 80041e8:	ed97 0a00 	vldr	s0, [r7]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7fe fe21 	bl	8002e34 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 80041f2:	66b8      	str	r0, [r7, #104]	; 0x68
 80041f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
 80041fa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80041fc:	e17a      	b.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = false;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800420a:	e026      	b.n	800425a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4998      	ldr	r1, [pc, #608]	; (8004474 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f0>)
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f82c 	bl	8000270 <strcmp>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d11d      	bne.n	800425a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
            if( config->filter_order ) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d013      	beq.n	800424e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	edd3 7a04 	vldr	s15, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4619      	mov	r1, r3
 8004234:	eef0 0a67 	vmov.f32	s1, s15
 8004238:	ed97 0a00 	vldr	s0, [r7]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7fe fe2f 	bl	8002ea0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8004242:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
 800424a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800424c:	e152      	b.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = true;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff fb56 	bl	800390c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8004260:	6678      	str	r0, [r7, #100]	; 0x64
 8004262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe8>
 8004268:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800426a:	e143      	b.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 800426c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x116>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
            get_start_stop_bin(
 8004278:	4618      	mov	r0, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004280:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8004284:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004288:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800428c:	eef0 0a67 	vmov.f32	s1, s15
 8004290:	ed97 0a00 	vldr	s0, [r7]
 8004294:	f7ff ff1c 	bl	80040d0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 8004298:	e008      	b.n	80042ac <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 800429a:	2301      	movs	r3, #1
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
            stop_bin = config->fft_length / 2 + 1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	0fda      	lsrs	r2, r3, #31
 80042a4:	4413      	add	r3, r2
 80042a6:	105b      	asrs	r3, r3, #1
 80042a8:	3301      	adds	r3, #1
 80042aa:	647b      	str	r3, [r7, #68]	; 0x44
        }
        size_t num_bins = stop_bin - start_bin;
 80042ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	663b      	str	r3, [r7, #96]	; 0x60

        float *feature_out = output_matrix->buffer;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80042ca:	429a      	cmp	r2, r3
 80042cc:	f080 8111 	bcs.w	80044f2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36e>
            float *data_window = input_matrix->get_row_ptr(row);
 80042d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7fd f9db 	bl	8001690 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80042da:	65f8      	str	r0, [r7, #92]	; 0x5c
            size_t data_size = input_matrix->cols;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	65bb      	str	r3, [r7, #88]	; 0x58

            matrix_t rms_in_matrix(1, data_size, data_window);
 80042e2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80042e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042ea:	2101      	movs	r1, #1
 80042ec:	f7fd f98f 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 80042f0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f8:	2201      	movs	r2, #1
 80042fa:	2101      	movs	r1, #1
 80042fc:	f7fd f987 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 8004300:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fc46 	bl	8001b9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8004310:	6578      	str	r0, [r7, #84]	; 0x54
 8004312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19a>
 8004318:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800431a:	2500      	movs	r5, #0
 800431c:	e0d2      	b.n	80044c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>

            feature_out++;
 800431e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004322:	3304      	adds	r3, #4
 8004324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 8004328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800432c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (stddev == 0.0f) {
 8004334:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004338:	eef5 7a40 	vcmp.f32	s15, #0.0
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	d102      	bne.n	8004348 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1c4>
                stddev = 1e-10f;
 8004342:	4b4d      	ldr	r3, [pc, #308]	; (8004478 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f4>)
 8004344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	67fb      	str	r3, [r7, #124]	; 0x7c
            float k_sum = 0;
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	67bb      	str	r3, [r7, #120]	; 0x78
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 8004354:	2300      	movs	r3, #0
 8004356:	677b      	str	r3, [r7, #116]	; 0x74
 8004358:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800435a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800435c:	429a      	cmp	r2, r3
 800435e:	d233      	bcs.n	80043c8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x244>
                temp = data_window[i] * data_window[i] * data_window[i];
 8004360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004366:	4413      	add	r3, r2
 8004368:	ed93 7a00 	vldr	s14, [r3]
 800436c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004372:	4413      	add	r3, r2
 8004374:	edd3 7a00 	vldr	s15, [r3]
 8004378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800437c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004382:	4413      	add	r3, r2
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                s_sum += temp;
 8004390:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8004394:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800439c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                k_sum += temp * data_window[i];
 80043a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043a6:	4413      	add	r3, r2
 80043a8:	ed93 7a00 	vldr	s14, [r3]
 80043ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80043b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80043b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043bc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (size_t i = 0; i < data_size; i++) {
 80043c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c2:	3301      	adds	r3, #1
 80043c4:	677b      	str	r3, [r7, #116]	; 0x74
 80043c6:	e7c7      	b.n	8004358 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d4>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 80043c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80043cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80043d0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80043d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            *feature_out++ = (s_sum / data_size) / temp;
 80043dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80043ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043f2:	1d1a      	adds	r2, r3, #4
 80043f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043f8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80043fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004400:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8004404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8004412:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004416:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800441a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800441e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004430:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004438:	edc3 7a00 	vstr	s15, [r3]

            EI_TRY(numpy::welch_max_hold(
 800443c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800443e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	69d2      	ldr	r2, [r2, #28]
 8004444:	4610      	mov	r0, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800444c:	9202      	str	r2, [sp, #8]
 800444e:	9001      	str	r0, [sp, #4]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	460b      	mov	r3, r1
 8004454:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004458:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800445a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800445c:	f7fd ffd2 	bl	8002404 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8004460:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d009      	beq.n	800447c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f8>
 8004468:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800446a:	2500      	movs	r5, #0
 800446c:	e02a      	b.n	80044c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>
 800446e:	bf00      	nop
 8004470:	08025adc 	.word	0x08025adc
 8004474:	08025ae0 	.word	0x08025ae0
 8004478:	2edbe6ff 	.word	0x2edbe6ff
                feature_out,
                start_bin,
                stop_bin,
                config->fft_length,
                config->do_fft_overlap));
            if (config->do_log) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x330>
                numpy::zero_handling(feature_out, num_bins);
 8004486:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004488:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800448c:	f7fe f86c 	bl	8002568 <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 8004490:	f107 0014 	add.w	r0, r7, #20
 8004494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004498:	2201      	movs	r2, #1
 800449a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800449c:	f7fd f8b7 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 80044a0:	f107 0314 	add.w	r3, r7, #20
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd fe1b 	bl	80020e0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
                ei_matrix temp(num_bins, 1, feature_out);
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fd f8d8 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
            }
            feature_out += num_bins;
 80044b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80044bc:	4413      	add	r3, r2
 80044be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c2:	2501      	movs	r5, #1
 80044c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fd f8cb 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 80044ce:	2d01      	cmp	r5, #1
 80044d0:	d001      	beq.n	80044d6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x352>
 80044d2:	2500      	movs	r5, #0
 80044d4:	e000      	b.n	80044d8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x354>
 80044d6:	2501      	movs	r5, #1
 80044d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd f8c1 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 80044e2:	2d01      	cmp	r5, #1
 80044e4:	d106      	bne.n	80044f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80044e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ea:	3301      	adds	r3, #1
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f0:	e6e7      	b.n	80042c2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
        }
        return EIDSP_OK;
 80044f2:	2400      	movs	r4, #0
    }
 80044f4:	4623      	mov	r3, r4
 80044f6:	4618      	mov	r0, r3
 80044f8:	3790      	adds	r7, #144	; 0x90
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bdb0      	pop	{r4, r5, r7, pc}
 80044fe:	bf00      	nop

08004500 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fd f85b 	bl	80015c6 <_ZNSt14_Function_baseD1Ev>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4618      	mov	r0, r3
 8004526:	f001 ff61 	bl	80063ec <_ZNSt8functionIFijjPfEEC1Ev>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZN2ei11ei_signal_tD1Ev>:
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ffde 	bl	8004500 <_ZNSt8functionIFijjPfEED1Ev>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b08b      	sub	sp, #44	; 0x2c
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	6852      	ldr	r2, [r2, #4]
 800456c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	461a      	mov	r2, r3
 8004576:	f107 0014 	add.w	r0, r7, #20
 800457a:	2300      	movs	r3, #0
 800457c:	f7fd f847 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004586:	4c1b      	ldr	r4, [pc, #108]	; (80045f4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa4>)
 8004588:	e02a      	b.n	80045e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2100      	movs	r1, #0
 8004594:	f001 fe34 	bl	8006200 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4916      	ldr	r1, [pc, #88]	; (80045f8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa8>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fb fe66 	bl	8000270 <strcmp>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d119      	bne.n	80045de <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8e>
        if (config->implementation_version == 1) {
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d10a      	bne.n	80045c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	ed97 0a00 	vldr	s0, [r7]
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fc46 	bl	8003e50 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80045c4:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80045c6:	e00b      	b.n	80045e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	ed97 0a00 	vldr	s0, [r7]
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fdd5 	bl	8004184 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80045da:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80045dc:	e000      	b.n	80045e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80045de:	4c07      	ldr	r4, [pc, #28]	; (80045fc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>)
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd f83d 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
}
 80045ea:	4623      	mov	r3, r4
 80045ec:	4618      	mov	r0, r3
 80045ee:	372c      	adds	r7, #44	; 0x2c
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd90      	pop	{r4, r7, pc}
 80045f4:	fffffc16 	.word	0xfffffc16
 80045f8:	08025b34 	.word	0x08025b34
 80045fc:	fffffc0a 	.word	0xfffffc0a

08004600 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8004600:	b5b0      	push	{r4, r5, r7, lr}
 8004602:	b098      	sub	sp, #96	; 0x60
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004616:	ca07      	ldmia	r2, {r0, r1, r2}
 8004618:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	4967      	ldr	r1, [pc, #412]	; (80047bc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb fe25 	bl	8000270 <strcmp>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8004630:	2303      	movs	r3, #3
 8004632:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800463a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004646:	2300      	movs	r3, #0
 8004648:	65bb      	str	r3, [r7, #88]	; 0x58
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004650:	429a      	cmp	r2, r3
 8004652:	f080 80ac 	bcs.w	80047ae <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465c:	d803      	bhi.n	8004666 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 800465e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	e001      	b.n	800466a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8004666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	461a      	mov	r2, r3
 8004670:	f107 0014 	add.w	r0, r7, #20
 8004674:	2300      	movs	r3, #0
 8004676:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004678:	f7fc ffc9 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004682:	4d4f      	ldr	r5, [pc, #316]	; (80047c0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 8004684:	2400      	movs	r4, #0
 8004686:	e086      	b.n	8004796 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800468e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004690:	f001 fdb6 	bl	8006200 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004694:	2300      	movs	r3, #0
 8004696:	657b      	str	r3, [r7, #84]	; 0x54
 8004698:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469c:	429a      	cmp	r2, r3
 800469e:	d275      	bcs.n	800478c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 3a90 	vmov	r3, s15
 80046b4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80046b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80047c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80046c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80046d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046de:	eddf 6a39 	vldr	s13, [pc, #228]	; 80047c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80046e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046e6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80046ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80047c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80046fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046fe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8004702:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004706:	2b03      	cmp	r3, #3
 8004708:	d11b      	bne.n	8004742 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004710:	1c59      	adds	r1, r3, #1
 8004712:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800471a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004722:	1c59      	adds	r1, r3, #1
 8004724:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800472c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e020      	b.n	8004784 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004742:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004746:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80047c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 800474a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800474e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004752:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80047cc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8004756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800475a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800475e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004762:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80047d0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8004766:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800476a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	1c59      	adds	r1, r3, #1
 800477a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004782:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004786:	3301      	adds	r3, #1
 8004788:	657b      	str	r3, [r7, #84]	; 0x54
 800478a:	e785      	b.n	8004698 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	2401      	movs	r4, #1
 8004796:	f107 0314 	add.w	r3, r7, #20
 800479a:	4618      	mov	r0, r3
 800479c:	f7fc ff62 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 80047a0:	2c01      	cmp	r4, #1
 80047a2:	d105      	bne.n	80047b0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80047a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80047ac:	e74d      	b.n	800464a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 80047ae:	2500      	movs	r5, #0
}
 80047b0:	462b      	mov	r3, r5
 80047b2:	4618      	mov	r0, r3
 80047b4:	3760      	adds	r7, #96	; 0x60
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08025d64 	.word	0x08025d64
 80047c0:	fffffc16 	.word	0xfffffc16
 80047c4:	437f0000 	.word	0x437f0000
 80047c8:	3e991687 	.word	0x3e991687
 80047cc:	3f1645a2 	.word	0x3f1645a2
 80047d0:	3de978d5 	.word	0x3de978d5

080047d4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 80047d4:	b5b0      	push	{r4, r5, r7, lr}
 80047d6:	b0a6      	sub	sp, #152	; 0x98
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6178      	str	r0, [r7, #20]
 80047dc:	6139      	str	r1, [r7, #16]
 80047de:	60fa      	str	r2, [r7, #12]
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80047ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	49ab      	ldr	r1, [pc, #684]	; (8004aa4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fd3a 	bl	8000270 <strcmp>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8004806:	2303      	movs	r3, #3
 8004808:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8004812:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8004816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 800481a:	f249 6345 	movw	r3, #38469	; 0x9645
 800481e:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8004820:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8004824:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8004826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004832:	2300      	movs	r3, #0
 8004834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004840:	429a      	cmp	r2, r3
 8004842:	f080 821d 	bcs.w	8004c80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d803      	bhi.n	8004856 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 800484e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	e001      	b.n	800485a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8004856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800485a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	461a      	mov	r2, r3
 8004860:	f107 0018 	add.w	r0, r7, #24
 8004864:	2300      	movs	r3, #0
 8004866:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004868:	f7fc fed1 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004872:	4d8d      	ldr	r5, [pc, #564]	; (8004aa8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8004874:	2400      	movs	r4, #0
 8004876:	e1f5      	b.n	8004c64 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004878:	6938      	ldr	r0, [r7, #16]
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800487e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004882:	f001 fcbd 	bl	8006200 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800488c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004892:	429a      	cmp	r2, r3
 8004894:	f080 81e1 	bcs.w	8004c5a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	edd3 7a00 	vldr	s15, [r3]
 80048a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048aa:	ee17 3a90 	vmov	r3, s15
 80048ae:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 80048b0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	f040 8105 	bne.w	8004ac4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80048c0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004aac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 80048c4:	eef4 7a47 	vcmp.f32	s15, s14
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048cc:	d160      	bne.n	8004990 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80048d4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004ab0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 80048d8:	eef4 7a47 	vcmp.f32	s15, s14
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	d156      	bne.n	8004990 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 80048f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004914:	1c59      	adds	r1, r3, #1
 8004916:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800491a:	4413      	add	r3, r2
 800491c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004920:	edc7 7a00 	vstr	s15, [r7]
 8004924:	783a      	ldrb	r2, [r7, #0]
 8004926:	b252      	sxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 800492a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800493a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800494c:	4413      	add	r3, r2
 800494e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004952:	edc7 7a00 	vstr	s15, [r7]
 8004956:	783a      	ldrb	r2, [r7, #0]
 8004958:	b252      	sxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 800495c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800496c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800497e:	4413      	add	r3, r2
 8004980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004984:	edc7 7a00 	vstr	s15, [r7]
 8004988:	783a      	ldrb	r2, [r7, #0]
 800498a:	b252      	sxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e15e      	b.n	8004c4e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004992:	0c1b      	lsrs	r3, r3, #16
 8004994:	b2db      	uxtb	r3, r3
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800499e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 80049a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049b8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 80049bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 80049c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049d0:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 80049d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80049e2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80049e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80049ea:	eeb0 0a66 	vmov.f32	s0, s13
 80049ee:	f7fc feb6 	bl	800175e <_ZSt5roundf>
 80049f2:	eeb0 7a40 	vmov.f32	s14, s0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80049fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a08:	1c59      	adds	r1, r3, #1
 8004a0a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a0e:	4413      	add	r3, r2
 8004a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a14:	edc7 7a00 	vstr	s15, [r7]
 8004a18:	783a      	ldrb	r2, [r7, #0]
 8004a1a:	b252      	sxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a24:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a2c:	eeb0 0a66 	vmov.f32	s0, s13
 8004a30:	f7fc fe95 	bl	800175e <_ZSt5roundf>
 8004a34:	eeb0 7a40 	vmov.f32	s14, s0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a50:	4413      	add	r3, r2
 8004a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a56:	edc7 7a00 	vstr	s15, [r7]
 8004a5a:	783a      	ldrb	r2, [r7, #0]
 8004a5c:	b252      	sxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004a6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a6e:	eeb0 0a66 	vmov.f32	s0, s13
 8004a72:	f7fc fe74 	bl	800175e <_ZSt5roundf>
 8004a76:	eeb0 7a40 	vmov.f32	s14, s0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a92:	4413      	add	r3, r2
 8004a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a98:	edc7 7a00 	vstr	s15, [r7]
 8004a9c:	783a      	ldrb	r2, [r7, #0]
 8004a9e:	b252      	sxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e0d4      	b.n	8004c4e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8004aa4:	08025d64 	.word	0x08025d64
 8004aa8:	fffffc16 	.word	0xfffffc16
 8004aac:	3b808081 	.word	0x3b808081
 8004ab0:	c3000000 	.word	0xc3000000
 8004ab4:	437f0000 	.word	0x437f0000
 8004ab8:	3e991687 	.word	0x3e991687
 8004abc:	3f1645a2 	.word	0x3f1645a2
 8004ac0:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004aca:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8004aac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004ace:	eef4 7a47 	vcmp.f32	s15, s14
 8004ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad6:	d15b      	bne.n	8004b90 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004ade:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8004ab0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004ae2:	eef4 7a47 	vcmp.f32	s15, s14
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	d151      	bne.n	8004b90 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8004b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b04:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8004b08:	fb03 f202 	mul.w	r2, r3, r2
 8004b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b0e:	f249 6145 	movw	r1, #38469	; 0x9645
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	441a      	add	r2, r3
 8004b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1a:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8004b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b2c:	141b      	asrs	r3, r3, #16
 8004b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8004b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b4c:	ee17 3a90 	vmov	r3, s15
 8004b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8004b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b58:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004b5c:	da04      	bge.n	8004b68 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8004b5e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b66:	e006      	b.n	8004b76 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8004b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6e:	dd02      	ble.n	8004b76 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8004b70:	237f      	movs	r3, #127	; 0x7f
 8004b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004b84:	4413      	add	r3, r2
 8004b86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004b8a:	b252      	sxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e05e      	b.n	8004c4e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b9e:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ba6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	0a1b      	lsrs	r3, r3, #8
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bb8:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bc0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bd0:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8004ab4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004bd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bd8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004bdc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004be0:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8004ab8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8004be4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004be8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004bec:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8004abc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8004bf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bf8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004bfc:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8004ac0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8004c00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c08:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004c12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004c16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c1a:	eeb0 0a66 	vmov.f32	s0, s13
 8004c1e:	f7fc fd9e 	bl	800175e <_ZSt5roundf>
 8004c22:	eeb0 7a40 	vmov.f32	s14, s0
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c38:	1c59      	adds	r1, r3, #1
 8004c3a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c3e:	4413      	add	r3, r2
 8004c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c44:	edc7 7a00 	vstr	s15, [r7]
 8004c48:	783a      	ldrb	r2, [r7, #0]
 8004c4a:	b252      	sxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c52:	3301      	adds	r3, #1
 8004c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c58:	e618      	b.n	800488c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8004c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c62:	2401      	movs	r4, #1
 8004c64:	f107 0318 	add.w	r3, r7, #24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fc fcfb 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 8004c6e:	2c01      	cmp	r4, #1
 8004c70:	d107      	bne.n	8004c82 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c7e:	e5db      	b.n	8004838 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8004c80:	2500      	movs	r5, #0
}
 8004c82:	462b      	mov	r3, r5
 8004c84:	4618      	mov	r0, r3
 8004c86:	3798      	adds	r7, #152	; 0x98
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bdb0      	pop	{r4, r5, r7, pc}

08004c8c <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3310      	adds	r3, #16
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fc2f 	bl	800451a <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	f000 f832 	bl	8004d46 <_ZN14SignalWithAxes8get_dataEjjPf>
 8004ce2:	4603      	mov	r3, r0
        };
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d102      	bne.n	8004d08 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	e01a      	b.n	8004d3e <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	fb03 f202 	mul.w	r2, r3, r2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	621a      	str	r2, [r3, #32]
        };
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f103 0210 	add.w	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f001 fb86 	bl	8006446 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3310      	adds	r3, #16
    }
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b08a      	sub	sp, #40	; 0x28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	6992      	ldr	r2, [r2, #24]
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	68d2      	ldr	r2, [r2, #12]
 8004d78:	6992      	ldr	r2, [r2, #24]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d22b      	bcs.n	8004dec <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d21d      	bcs.n	8004dde <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	18d1      	adds	r1, r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f001 fa1b 	bl	8006200 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004dca:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	e00b      	b.n	8004dee <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e7dc      	b.n	8004d98 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	4413      	add	r3, r2
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	e7cd      	b.n	8004d88 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 8004dec:	2300      	movs	r3, #0
    }
 8004dee:	4618      	mov	r0, r3
 8004df0:	3728      	adds	r7, #40	; 0x28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8004df6:	b480      	push	{r7}
 8004df8:	b085      	sub	sp, #20
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004e04:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6178      	str	r0, [r7, #20]
 8004e1c:	6139      	str	r1, [r7, #16]
 8004e1e:	60fa      	str	r2, [r7, #12]
 8004e20:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e24:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004e2a:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6178      	str	r0, [r7, #20]
 8004e44:	6139      	str	r1, [r7, #16]
 8004e46:	60fa      	str	r2, [r7, #12]
 8004e48:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e4c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e50:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d23f      	bcs.n	8004ee2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f993 3000 	ldrsb.w	r3, [r3]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e84:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d011      	beq.n	8004eb2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4813      	ldr	r0, [pc, #76]	; (8004eec <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 8004ea0:	f000 feac 	bl	8005bfc <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004ea4:	ed97 0a06 	vldr	s0, [r7, #24]
 8004ea8:	f014 ff6a 	bl	8019d80 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004eac:	4810      	ldr	r0, [pc, #64]	; (8004ef0 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 8004eae:	f000 fea5 	bl	8005bfc <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	3201      	adds	r2, #1
 8004ec6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e7b9      	b.n	8004e56 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	08025d70 	.word	0x08025d70
 8004ef0:	08025d78 	.word	0x08025d78

08004ef4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d232      	bcs.n	8004f78 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	613b      	str	r3, [r7, #16]

        if (debug) {
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d011      	beq.n	8004f48 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	4813      	ldr	r0, [pc, #76]	; (8004f84 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8004f36:	f000 fe61 	bl	8005bfc <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004f3a:	ed97 0a04 	vldr	s0, [r7, #16]
 8004f3e:	f014 ff1f 	bl	8019d80 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004f42:	4811      	ldr	r0, [pc, #68]	; (8004f88 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8004f44:	f000 fe5a 	bl	8005bfc <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	6819      	ldr	r1, [r3, #0]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	3201      	adds	r2, #1
 8004f5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	3301      	adds	r3, #1
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4413      	add	r3, r2
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3301      	adds	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e7c6      	b.n	8004f06 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	08025d70 	.word	0x08025d70
 8004f88:	08025d78 	.word	0x08025d78

08004f8c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 8004f9a:	f014 fedd 	bl	8019d58 <_Z16ei_read_timer_usv>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8004fa8:	486e      	ldr	r0, [pc, #440]	; (8005164 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 8004faa:	f019 fe9b 	bl	801ece4 <_Z18trained_model_initPFPvjjE>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	486a      	ldr	r0, [pc, #424]	; (8005168 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 8004fbe:	f000 fe1d 	bl	8005bfc <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8004fc2:	f06f 0305 	mvn.w	r3, #5
 8004fc6:	e0c8      	b.n	800515a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fce:	2000      	movs	r0, #0
 8004fd0:	4798      	blx	r3
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	2000      	movs	r0, #0
 8004fe0:	4798      	blx	r3
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d115      	bne.n	800501e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8004ffe:	4610      	mov	r0, r2
 8005000:	4798      	blx	r3
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8005014:	4610      	mov	r0, r2
 8005016:	4798      	blx	r3
 8005018:	4602      	mov	r2, r0
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 800501e:	4b53      	ldr	r3, [pc, #332]	; (800516c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8098 	beq.w	8005158 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005034:	429a      	cmp	r2, r3
 8005036:	d005      	beq.n	8005044 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8005038:	4b4d      	ldr	r3, [pc, #308]	; (8005170 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 800503a:	4a4e      	ldr	r2, [pc, #312]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800503c:	2159      	movs	r1, #89	; 0x59
 800503e:	484e      	ldr	r0, [pc, #312]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005040:	f01d fbd0 	bl	80227e4 <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005050:	429a      	cmp	r2, r3
 8005052:	d005      	beq.n	8005060 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8005054:	4b49      	ldr	r3, [pc, #292]	; (800517c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8005056:	4a47      	ldr	r2, [pc, #284]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005058:	215a      	movs	r1, #90	; 0x5a
 800505a:	4847      	ldr	r0, [pc, #284]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800505c:	f01d fbc2 	bl	80227e4 <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005066:	2b01      	cmp	r3, #1
 8005068:	d11b      	bne.n	80050a2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005076:	429a      	cmp	r2, r3
 8005078:	d005      	beq.n	8005086 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 800507c:	4a3d      	ldr	r2, [pc, #244]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800507e:	215c      	movs	r1, #92	; 0x5c
 8005080:	483d      	ldr	r0, [pc, #244]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005082:	f01d fbaf 	bl	80227e4 <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005092:	429a      	cmp	r2, r3
 8005094:	d005      	beq.n	80050a2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 8005096:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 8005098:	4a36      	ldr	r2, [pc, #216]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800509a:	215d      	movs	r1, #93	; 0x5d
 800509c:	4836      	ldr	r0, [pc, #216]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800509e:	f01d fba1 	bl	80227e4 <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d026      	beq.n	80050fa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80050ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	d005      	beq.n	80050d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80050c4:	4b30      	ldr	r3, [pc, #192]	; (8005188 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80050c6:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80050c8:	2160      	movs	r1, #96	; 0x60
 80050ca:	482b      	ldr	r0, [pc, #172]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80050cc:	f01d fb8a 	bl	80227e4 <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80050e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80050e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ec:	d005      	beq.n	80050fa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 80050ee:	4b27      	ldr	r3, [pc, #156]	; (800518c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 80050f0:	4a20      	ldr	r2, [pc, #128]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80050f2:	2161      	movs	r1, #97	; 0x61
 80050f4:	4820      	ldr	r0, [pc, #128]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80050f6:	f01d fb75 	bl	80227e4 <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005100:	2b00      	cmp	r3, #0
 8005102:	d026      	beq.n	8005152 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	ed93 7a03 	vldr	s14, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8005112:	eeb4 7a67 	vcmp.f32	s14, s15
 8005116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511a:	d005      	beq.n	8005128 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005120:	2164      	movs	r1, #100	; 0x64
 8005122:	4815      	ldr	r0, [pc, #84]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005124:	f01d fb5e 	bl	80227e4 <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800513c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005144:	d005      	beq.n	8005152 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8005148:	4a0a      	ldr	r2, [pc, #40]	; (8005174 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800514a:	2165      	movs	r1, #101	; 0x65
 800514c:	480a      	ldr	r0, [pc, #40]	; (8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800514e:	f01d fb49 	bl	80227e4 <__assert_func>
        }
        tflite_first_run = false;
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	080012e1 	.word	0x080012e1
 8005168:	08025d7c 	.word	0x08025d7c
 800516c:	2000005c 	.word	0x2000005c
 8005170:	08025db0 	.word	0x08025db0
 8005174:	08025de4 	.word	0x08025de4
 8005178:	08025e80 	.word	0x08025e80
 800517c:	08025f08 	.word	0x08025f08
 8005180:	08025f3c 	.word	0x08025f3c
 8005184:	08025f78 	.word	0x08025f78
 8005188:	08025fb4 	.word	0x08025fb4
 800518c:	08025fec 	.word	0x08025fec
 8005190:	0802602c 	.word	0x0802602c
 8005194:	08026064 	.word	0x08026064

08005198 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8005198:	b5b0      	push	{r4, r5, r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80051a4:	f01a f802 	bl	801f1ac <_Z20trained_model_invokev>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80051b8:	f06f 0302 	mvn.w	r3, #2
 80051bc:	e0ea      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80051be:	f014 fdcb 	bl	8019d58 <_Z16ei_read_timer_usv>
 80051c2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80051c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80051ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ce:	1a84      	subs	r4, r0, r2
 80051d0:	eb61 0503 	sbc.w	r5, r1, r3
 80051d4:	4622      	mov	r2, r4
 80051d6:	462b      	mov	r3, r5
 80051d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051da:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 80051de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e0:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80051e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	f7fb fd56 	bl	8000c9c <__aeabi_ldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 80051fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d006      	beq.n	8005210 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8005202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005208:	4619      	mov	r1, r3
 800520a:	4864      	ldr	r0, [pc, #400]	; (800539c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 800520c:	f000 fcf6 	bl	8005bfc <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d072      	beq.n	8005306 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005226:	3b01      	subs	r3, #1
 8005228:	2b04      	cmp	r3, #4
 800522a:	d862      	bhi.n	80052f2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	080052bf 	.word	0x080052bf
 8005238:	08005249 	.word	0x08005249
 800523c:	080052cb 	.word	0x080052cb
 8005240:	080052df 	.word	0x080052df
 8005244:	080052cb 	.word	0x080052cb
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b09      	cmp	r3, #9
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8005256:	7dbb      	ldrb	r3, [r7, #22]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01e      	beq.n	800529a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	6899      	ldr	r1, [r3, #8]
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	460b      	mov	r3, r1
 8005282:	eef0 0a47 	vmov.f32	s1, s14
 8005286:	eeb0 0a67 	vmov.f32	s0, s15
 800528a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff fdc1 	bl	8004e14 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8005292:	4603      	mov	r3, r0
 8005294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 8005298:	e063      	b.n	8005362 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	6899      	ldr	r1, [r3, #8]
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	460b      	mov	r3, r1
 80052ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff fda0 	bl	8004df6 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80052bc:	e051      	b.n	8005362 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80052be:	4838      	ldr	r0, [pc, #224]	; (80053a0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80052c0:	f000 fc9c 	bl	8005bfc <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80052c4:	f06f 0309 	mvn.w	r3, #9
 80052c8:	e064      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 80052d0:	4619      	mov	r1, r3
 80052d2:	4834      	ldr	r0, [pc, #208]	; (80053a4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 80052d4:	f000 fc92 	bl	8005bfc <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80052d8:	f06f 0309 	mvn.w	r3, #9
 80052dc:	e05a      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 80052e4:	4619      	mov	r1, r3
 80052e6:	4830      	ldr	r0, [pc, #192]	; (80053a8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 80052e8:	f000 fc88 	bl	8005bfc <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80052ec:	f06f 0309 	mvn.w	r3, #9
 80052f0:	e050      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 80052f8:	4619      	mov	r1, r3
 80052fa:	482c      	ldr	r0, [pc, #176]	; (80053ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 80052fc:	f000 fc7e 	bl	8005bfc <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005300:	f06f 0309 	mvn.w	r3, #9
 8005304:	e046      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b09      	cmp	r3, #9
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d018      	beq.n	800534c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005330:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005334:	eef0 0a47 	vmov.f32	s1, s14
 8005338:	eeb0 0a67 	vmov.f32	s0, s15
 800533c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff fd7c 	bl	8004e3c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800534a:	e00a      	b.n	8005362 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005354:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fdcc 	bl	8004ef4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 8005362:	4813      	ldr	r0, [pc, #76]	; (80053b0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 8005364:	f019 ff58 	bl	801f218 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8005368:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 8005370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005374:	e00e      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005376:	f014 fce7 	bl	8019d48 <_Z29ei_run_impulse_check_canceledv>
 800537a:	4603      	mov	r3, r0
 800537c:	f113 0f02 	cmn.w	r3, #2
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 800538c:	f06f 0301 	mvn.w	r3, #1
 8005390:	e000      	b.n	8005394 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3728      	adds	r7, #40	; 0x28
 8005398:	46bd      	mov	sp, r7
 800539a:	bdb0      	pop	{r4, r5, r7, pc}
 800539c:	080260a8 	.word	0x080260a8
 80053a0:	080260c8 	.word	0x080260c8
 80053a4:	08026120 	.word	0x08026120
 80053a8:	08026170 	.word	0x08026170
 80053ac:	080261c0 	.word	0x080261c0
 80053b0:	08001365 	.word	0x08001365

080053b4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80053b4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80053b8:	b09e      	sub	sp, #120	; 0x78
 80053ba:	af06      	add	r7, sp, #24
 80053bc:	6178      	str	r0, [r7, #20]
 80053be:	6139      	str	r1, [r7, #16]
 80053c0:	60fa      	str	r2, [r7, #12]
 80053c2:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80053c4:	f014 fcc8 	bl	8019d58 <_Z16ei_read_timer_usv>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80053d0:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80053d8:	f107 0318 	add.w	r3, r7, #24
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 feab 	bl	800613a <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 80053e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80053e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053ec:	f107 0120 	add.w	r1, r7, #32
 80053f0:	f107 0318 	add.w	r3, r7, #24
 80053f4:	9302      	str	r3, [sp, #8]
 80053f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	4603      	mov	r3, r0
 8005404:	6978      	ldr	r0, [r7, #20]
 8005406:	f7ff fdc1 	bl	8004f8c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8005410:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8005418:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800541c:	e0c5      	b.n	80055aa <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 800541e:	f107 0318 	add.w	r3, r7, #24
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f82e 	bl	8006484 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005428:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b09      	cmp	r3, #9
 8005430:	d022      	beq.n	8005478 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 8005432:	2b09      	cmp	r3, #9
 8005434:	f300 8083 	bgt.w	800553e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8005438:	2b01      	cmp	r3, #1
 800543a:	d002      	beq.n	8005442 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 800543c:	2b03      	cmp	r3, #3
 800543e:	d051      	beq.n	80054e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8005440:	e07d      	b.n	800553e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005442:	2300      	movs	r3, #0
 8005444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005454:	429a      	cmp	r2, r3
 8005456:	d27b      	bcs.n	8005550 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	6859      	ldr	r1, [r3, #4]
 8005466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005472:	3301      	adds	r3, #1
 8005474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005476:	e7e6      	b.n	8005446 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005478:	2300      	movs	r3, #0
 800547a:	65bb      	str	r3, [r7, #88]	; 0x58
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	6892      	ldr	r2, [r2, #8]
 8005484:	fb02 f303 	mul.w	r3, r2, r3
 8005488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800548a:	429a      	cmp	r2, r3
 800548c:	d262      	bcs.n	8005554 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	edd3 7a03 	vldr	s15, [r3, #12]
 80054a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80054a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80054aa:	eeb0 0a66 	vmov.f32	s0, s13
 80054ae:	f7fc f956 	bl	800175e <_ZSt5roundf>
 80054b2:	eeb0 7a40 	vmov.f32	s14, s0
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054cc:	4413      	add	r3, r2
 80054ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80054d6:	793a      	ldrb	r2, [r7, #4]
 80054d8:	b252      	sxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80054dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054de:	3301      	adds	r3, #1
 80054e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054e2:	e7cb      	b.n	800547c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80054e4:	2300      	movs	r3, #0
 80054e6:	657b      	str	r3, [r7, #84]	; 0x54
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	6892      	ldr	r2, [r2, #8]
 80054f0:	fb02 f303 	mul.w	r3, r2, r3
 80054f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d221      	bcs.n	800553e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800550e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800551c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005526:	4413      	add	r3, r2
 8005528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800552c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005530:	793a      	ldrb	r2, [r7, #4]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005538:	3301      	adds	r3, #1
 800553a:	657b      	str	r3, [r7, #84]	; 0x54
 800553c:	e7d4      	b.n	80054e8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	481f      	ldr	r0, [pc, #124]	; (80055c4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 8005546:	f000 fb59 	bl	8005bfc <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 800554a:	f06f 040c 	mvn.w	r4, #12
 800554e:	e02c      	b.n	80055aa <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 8005554:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 8005556:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 800555a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800555c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800555e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005560:	7afb      	ldrb	r3, [r7, #11]
 8005562:	9305      	str	r3, [sp, #20]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556a:	9303      	str	r3, [sp, #12]
 800556c:	9602      	str	r6, [sp, #8]
 800556e:	9001      	str	r0, [sp, #4]
 8005570:	9100      	str	r1, [sp, #0]
 8005572:	465a      	mov	r2, fp
 8005574:	4663      	mov	r3, ip
 8005576:	6978      	ldr	r0, [r7, #20]
 8005578:	f7ff fe0e 	bl	8005198 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005582:	f014 fbe9 	bl	8019d58 <_Z16ei_read_timer_usv>
 8005586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800558a:	1a84      	subs	r4, r0, r2
 800558c:	eb61 0503 	sbc.w	r5, r1, r3
 8005590:	4622      	mov	r2, r4
 8005592:	462b      	mov	r3, r5
 8005594:	68f9      	ldr	r1, [r7, #12]
 8005596:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 800559a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80055a2:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80055a6:	e000      	b.n	80055aa <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80055a8:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80055aa:	f107 0318 	add.w	r3, r7, #24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fdd8 	bl	8006164 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80055b4:	4623      	mov	r3, r4
 80055b6:	4618      	mov	r0, r3
 80055b8:	3760      	adds	r7, #96	; 0x60
 80055ba:	46bd      	mov	sp, r7
 80055bc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80055c0:	08001365 	.word	0x08001365
 80055c4:	080261f4 	.word	0x080261f4

080055c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80055c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055cc:	b0a1      	sub	sp, #132	; 0x84
 80055ce:	af06      	add	r7, sp, #24
 80055d0:	6178      	str	r0, [r7, #20]
 80055d2:	6139      	str	r1, [r7, #16]
 80055d4:	60fa      	str	r2, [r7, #12]
 80055d6:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 80055d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055dc:	2100      	movs	r1, #0
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f01d f9a2 	bl	8022928 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80055e4:	4b7b      	ldr	r3, [pc, #492]	; (80057d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 80055e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80055ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fda1 	bl	800613a <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 80055f8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80055fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005600:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800560e:	9301      	str	r3, [sp, #4]
 8005610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	4603      	mov	r3, r0
 8005618:	6978      	ldr	r0, [r7, #20]
 800561a:	f7ff fcb7 	bl	8004f8c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8005624:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 800562c:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8005630:	e0c4      	b.n	80057bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8005632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b09      	cmp	r3, #9
 8005638:	d002      	beq.n	8005640 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800563a:	f06f 0408 	mvn.w	r4, #8
 800563e:	e0bd      	b.n	80057bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8005640:	f014 fb8a 	bl	8019d58 <_Z16ei_read_timer_usv>
 8005644:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f107 0018 	add.w	r0, r7, #24
 8005654:	2101      	movs	r1, #1
 8005656:	f7fc f82f 	bl	80016b8 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 800565a:	4b5f      	ldr	r3, [pc, #380]	; (80057d8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 800565c:	6899      	ldr	r1, [r3, #8]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005664:	f107 0218 	add.w	r2, r7, #24
 8005668:	eeb0 0a67 	vmov.f32	s0, s15
 800566c:	460b      	mov	r3, r1
 800566e:	6939      	ldr	r1, [r7, #16]
 8005670:	6978      	ldr	r0, [r7, #20]
 8005672:	f7ff f8af 	bl	80047d4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 8005676:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8005678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567a:	2b00      	cmp	r3, #0
 800567c:	d006      	beq.n	800568c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800567e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005680:	4856      	ldr	r0, [pc, #344]	; (80057dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 8005682:	f000 fabb 	bl	8005bfc <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8005686:	f06f 0404 	mvn.w	r4, #4
 800568a:	e092      	b.n	80057b2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800568c:	f014 fb5c 	bl	8019d48 <_Z29ei_run_impulse_check_canceledv>
 8005690:	4603      	mov	r3, r0
 8005692:	f113 0f02 	cmn.w	r3, #2
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 80056a2:	f06f 0401 	mvn.w	r4, #1
 80056a6:	e084      	b.n	80057b2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80056a8:	f014 fb56 	bl	8019d58 <_Z16ei_read_timer_usv>
 80056ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056b0:	ebb0 0802 	subs.w	r8, r0, r2
 80056b4:	eb61 0903 	sbc.w	r9, r1, r3
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	68f9      	ldr	r1, [r7, #12]
 80056be:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80056c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	f7fb fae4 	bl	8000c9c <__aeabi_ldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02d      	beq.n	8005740 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056ea:	4619      	mov	r1, r3
 80056ec:	483c      	ldr	r0, [pc, #240]	; (80057e0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 80056ee:	f000 fa85 	bl	8005bfc <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80056f2:	2300      	movs	r3, #0
 80056f4:	667b      	str	r3, [r7, #100]	; 0x64
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d21d      	bcs.n	800573a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005702:	4413      	add	r3, r2
 8005704:	f993 3000 	ldrsb.w	r3, [r3]
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005724:	eeb0 0a67 	vmov.f32	s0, s15
 8005728:	f014 fb2a 	bl	8019d80 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800572c:	482d      	ldr	r0, [pc, #180]	; (80057e4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 800572e:	f000 fa65 	bl	8005bfc <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005734:	3301      	adds	r3, #1
 8005736:	667b      	str	r3, [r7, #100]	; 0x64
 8005738:	e7dd      	b.n	80056f6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 800573a:	482b      	ldr	r0, [pc, #172]	; (80057e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 800573c:	f000 fa5e 	bl	8005bfc <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8005740:	f014 fb0a 	bl	8019d58 <_Z16ei_read_timer_usv>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 800574c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005750:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005758:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 800575a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fe90 	bl	8006484 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005764:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	9305      	str	r3, [sp, #20]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	9203      	str	r2, [sp, #12]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	9202      	str	r2, [sp, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	9600      	str	r6, [sp, #0]
 800577a:	4642      	mov	r2, r8
 800577c:	464b      	mov	r3, r9
 800577e:	6978      	ldr	r0, [r7, #20]
 8005780:	f7ff fd0a 	bl	8005198 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 800578a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 8005792:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8005796:	e00c      	b.n	80057b2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005798:	f014 fade 	bl	8019d58 <_Z16ei_read_timer_usv>
 800579c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057a0:	1a84      	subs	r4, r0, r2
 80057a2:	eb61 0503 	sbc.w	r5, r1, r3
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 80057b0:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 80057b2:	f107 0318 	add.w	r3, r7, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fb ffa8 	bl	800170c <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80057bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fccf 	bl	8006164 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80057c6:	4623      	mov	r3, r4
 80057c8:	4618      	mov	r0, r3
 80057ca:	376c      	adds	r7, #108	; 0x6c
 80057cc:	46bd      	mov	sp, r7
 80057ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057d2:	bf00      	nop
 80057d4:	08001365 	.word	0x08001365
 80057d8:	20000048 	.word	0x20000048
 80057dc:	08026218 	.word	0x08026218
 80057e0:	08026240 	.word	0x08026240
 80057e4:	08026254 	.word	0x08026254
 80057e8:	08025d78 	.word	0x08025d78

080057ec <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fdd7 	bl	80053b4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 800580a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <run_inference+0x2c>
        return nn_res;
 8005812:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005816:	e00e      	b.n	8005836 <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005818:	f014 fa96 	bl	8019d48 <_Z29ei_run_impulse_check_canceledv>
 800581c:	4603      	mov	r3, r0
 800581e:	f113 0f02 	cmn.w	r3, #2
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 800582e:	f06f 0301 	mvn.w	r3, #1
 8005832:	e000      	b.n	8005836 <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3310      	adds	r3, #16
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fe72 	bl	8004534 <_ZN2ei11ei_signal_tD1Ev>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 800585c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005860:	b0a5      	sub	sp, #148	; 0x94
 8005862:	af02      	add	r7, sp, #8
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	70fb      	strb	r3, [r7, #3]
 800586c:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 f928 	bl	8005ac4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f954 	bl	8005b38 <run_classifier_image_quantized>
 8005890:	4603      	mov	r3, r0
 8005892:	461e      	mov	r6, r3
 8005894:	e0ef      	b.n	8005a76 <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800589a:	2100      	movs	r1, #0
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f01d f843 	bl	8022928 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80058aa:	2300      	movs	r3, #0
 80058ac:	2101      	movs	r1, #1
 80058ae:	f7fb feae 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 80058b2:	f014 fa51 	bl	8019d58 <_Z16ei_read_timer_usv>
 80058b6:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 80058c0:	2300      	movs	r3, #0
 80058c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d27c      	bcs.n	80059cc <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80058d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80058e8:	461d      	mov	r5, r3
 80058ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 80058f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f8:	441a      	add	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d905      	bls.n	800590e <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8005902:	4860      	ldr	r0, [pc, #384]	; (8005a84 <process_impulse+0x228>)
 8005904:	f000 f97a 	bl	8005bfc <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005908:	f06f 0604 	mvn.w	r6, #4
 800590c:	e0ad      	b.n	8005a6a <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 800590e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800591e:	460a      	mov	r2, r1
 8005920:	2101      	movs	r1, #1
 8005922:	f7fb fe74 	bl	800160e <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8005926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005928:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800592a:	f107 0014 	add.w	r0, r7, #20
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	460b      	mov	r3, r1
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	f7ff f9a9 	bl	8004c8c <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 800593a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff f9d3 	bl	8004cec <_ZN14SignalWithAxes10get_signalEv>
 8005946:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800594e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005952:	eeb0 0a67 	vmov.f32	s0, s15
 8005956:	4619      	mov	r1, r3
 8005958:	47a0      	blx	r4
 800595a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 800595c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005962:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005964:	4848      	ldr	r0, [pc, #288]	; (8005a88 <process_impulse+0x22c>)
 8005966:	f000 f949 	bl	8005bfc <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800596a:	f06f 0604 	mvn.w	r6, #4
 800596e:	2400      	movs	r4, #0
 8005970:	e015      	b.n	800599e <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005972:	f014 f9e9 	bl	8019d48 <_Z29ei_run_impulse_check_canceledv>
 8005976:	4603      	mov	r3, r0
 8005978:	f113 0f02 	cmn.w	r3, #2
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8005988:	f06f 0601 	mvn.w	r6, #1
 800598c:	2400      	movs	r4, #0
 800598e:	e006      	b.n	800599e <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005996:	4413      	add	r3, r2
 8005998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800599c:	2401      	movs	r4, #1
 800599e:	f107 0314 	add.w	r3, r7, #20
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff ff4b 	bl	800583e <_ZN14SignalWithAxesD1Ev>
 80059a8:	2c01      	cmp	r4, #1
 80059aa:	d001      	beq.n	80059b0 <process_impulse+0x154>
 80059ac:	2400      	movs	r4, #0
 80059ae:	e000      	b.n	80059b2 <process_impulse+0x156>
 80059b0:	2401      	movs	r4, #1
 80059b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fb fe54 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>
 80059bc:	2c01      	cmp	r4, #1
 80059be:	d154      	bne.n	8005a6a <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 80059c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059c4:	3301      	adds	r3, #1
 80059c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ca:	e77c      	b.n	80058c6 <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80059cc:	f014 f9c4 	bl	8019d58 <_Z16ei_read_timer_usv>
 80059d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80059d4:	ebb0 0802 	subs.w	r8, r0, r2
 80059d8:	eb61 0903 	sbc.w	r9, r1, r3
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80059ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	f7fb f952 	bl	8000c9c <__aeabi_ldivmod>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d020      	beq.n	8005a4a <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a0e:	4619      	mov	r1, r3
 8005a10:	481e      	ldr	r0, [pc, #120]	; (8005a8c <process_impulse+0x230>)
 8005a12:	f000 f8f3 	bl	8005bfc <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005a16:	2300      	movs	r3, #0
 8005a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d210      	bcs.n	8005a44 <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8005a22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	edd3 7a00 	vldr	s15, [r3]
 8005a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a32:	f014 f9a5 	bl	8019d80 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005a36:	4816      	ldr	r0, [pc, #88]	; (8005a90 <process_impulse+0x234>)
 8005a38:	f000 f8e0 	bl	8005bfc <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a3e:	3301      	adds	r3, #1
 8005a40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a42:	e7ea      	b.n	8005a1a <process_impulse+0x1be>
        }
        ei_printf("\n");
 8005a44:	4813      	ldr	r0, [pc, #76]	; (8005a94 <process_impulse+0x238>)
 8005a46:	f000 f8d9 	bl	8005bfc <_Z9ei_printfPKcz>
    }

    if (debug) {
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8005a50:	4811      	ldr	r0, [pc, #68]	; (8005a98 <process_impulse+0x23c>)
 8005a52:	f000 f8d3 	bl	8005bfc <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff fec4 	bl	80057ec <run_inference>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461e      	mov	r6, r3
 8005a68:	e000      	b.n	8005a6c <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8005a6a:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005a6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fb fdf7 	bl	8001664 <_ZN2ei9ei_matrixD1Ev>

}
 8005a76:	4633      	mov	r3, r6
 8005a78:	4618      	mov	r0, r3
 8005a7a:	378c      	adds	r7, #140	; 0x8c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a82:	bf00      	nop
 8005a84:	08026258 	.word	0x08026258
 8005a88:	08026218 	.word	0x08026218
 8005a8c:	08026240 	.word	0x08026240
 8005a90:	08026254 	.word	0x08026254
 8005a94:	08025d78 	.word	0x08025d78
 8005a98:	08026284 	.word	0x08026284

08005a9c <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a06      	ldr	r2, [pc, #24]	; (8005ac0 <ei_construct_impulse+0x24>)
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	4611      	mov	r1, r2
 8005aac:	23a4      	movs	r3, #164	; 0xa4
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f01c ff12 	bl	80228d8 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8005ab4:	bf00      	nop
}
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	080262fc 	.word	0x080262fc

08005ac4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d00a      	beq.n	8005aea <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d006      	beq.n	8005aea <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae0:	2b07      	cmp	r3, #7
 8005ae2:	d002      	beq.n	8005aea <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005ae4:	f06f 0309 	mvn.w	r3, #9
 8005ae8:	e01d      	b.n	8005b26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d102      	bne.n	8005afa <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005af4:	f06f 0308 	mvn.w	r3, #8
 8005af8:	e015      	b.n	8005b26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d002      	beq.n	8005b0a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005b04:	f06f 0308 	mvn.w	r3, #8
 8005b08:	e00d      	b.n	8005b26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d105      	bne.n	8005b1e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a06      	ldr	r2, [pc, #24]	; (8005b34 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d002      	beq.n	8005b24 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005b1e:	f06f 0308 	mvn.w	r3, #8
 8005b22:	e000      	b.n	8005b26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	08004601 	.word	0x08004601

08005b38 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff ffbc 	bl	8005ac4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8005b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <run_classifier_image_quantized+0x26>
        return verify_res;
 8005b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b5c:	e00d      	b.n	8005b7a <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b62:	2100      	movs	r1, #0
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f01c fedf 	bl	8022928 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff fd29 	bl	80055c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8005b76:	4603      	mov	r3, r0
 8005b78:	bf00      	nop

}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b0ae      	sub	sp, #184	; 0xb8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff ff81 	bl	8005a9c <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f107 0014 	add.w	r0, r7, #20
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f7ff fe5a 	bl	800585c <process_impulse>
 8005ba8:	4603      	mov	r3, r0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	37b8      	adds	r7, #184	; 0xb8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <_Z6vprintPKcSt9__va_list>:
#include <stdio.h>
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b0b4      	sub	sp, #208	; 0xd0
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8005bbc:	f107 0308 	add.w	r3, r7, #8
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f01e f947 	bl	8023e58 <vsiprintf>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bfcc      	ite	gt
 8005bd0:	2301      	movgt	r3, #1
 8005bd2:	2300      	movle	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fa fb50 	bl	8000284 <strlen>
 8005be4:	4603      	mov	r3, r0
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	f107 0308 	add.w	r3, r7, #8
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f019 fc38 	bl	801f464 <CDC_Transmit_FS>
    }
}
 8005bf4:	bf00      	nop
 8005bf6:	37d0      	adds	r7, #208	; 0xd0
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8005bfc:	b40f      	push	{r0, r1, r2, r3}
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	6938      	ldr	r0, [r7, #16]
 8005c0e:	f7ff ffd0 	bl	8005bb2 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c1c:	b004      	add	sp, #16
 8005c1e:	4770      	bx	lr

08005c20 <_Z16get_feature_datajjPf>:
// paste the raw features here
static const float features[] = {
		62.7696, 274.2238, 977.4350, 44.4099, 272.2316, 954.3890, 43.9338, 279.4861, 1000.4509, 48.5794, 284.6754, 1021.0234, 49.9986, 262.4164, 925.3803, 53.4160, 256.5754, 995.3500, 53.2018, 270.2816, 1013.0352, 58.0016, 275.9256, 982.4595, 51.3040, 261.1593, 978.8506, 33.8247, 253.5767, 988.5790, 44.0391, 273.9583, 1015.5619, 62.4446, 284.3173, 969.5360, 69.4376, 270.7308, 961.8876, 52.6199, 246.2795, 981.5153, 47.1355, 248.2528, 994.6685, 62.9289, 268.1930, 974.5379, 69.3730, 269.6208, 983.6705, 55.3671, 259.1133, 933.0867, 48.5962, 267.7228, 966.0709, 58.7824, 287.6990, 1046.5303, 58.0060, 276.6897, 951.3242, 53.2151, 245.6644, 946.8672, 55.5205, 247.5138, 1000.0807, 65.2742, 278.7254, 1018.5125, 64.8473, 273.3761, 1006.3750, 55.5422, 253.1673, 956.0126, 41.3339, 250.5001, 957.7790, 44.0285, 272.0671, 1044.2145, 61.9079, 288.5978, 996.8458, 70.6980, 271.2311, 947.6078, 66.6663, 243.9581, 979.0302, 53.0954, 237.0214, 992.7516, 48.0031, 255.5595, 988.0784, 52.1791, 268.2204, 948.0222, 56.8338, 271.9079, 924.5325, 55.5771, 280.8598, 1010.8745, 48.8784, 287.0335, 1017.0202, 41.1604, 264.8747, 920.6288, 49.3164, 246.6785, 973.7262, 63.7772, 256.7230, 1009.2999, 71.4126, 275.6615, 1013.7691, 58.9435, 268.0266, 1000.2008, 40.5729, 254.7412, 970.2779, 31.6853, 249.7508, 986.8333, 44.5931, 267.9601, 1011.5146, 70.2750, 284.8119, 972.6128, 85.5848, 269.1437, 953.7636, 75.5714, 237.8995, 981.4068, 54.6453, 229.7022, 992.8535, 41.3266, 239.6315, 989.6325, 50.5071, 260.2717, 946.8853, 56.4962, 274.2599, 953.6528, 61.2171, 286.9142, 1044.0893, 49.5500, 282.9898, 1001.0449, 40.0177, 249.4318, 928.3822, 48.7304, 236.5211, 995.4940, 59.0110, 268.4267, 1003.4425, 67.1732, 294.0712, 1016.1661, 44.6878, 260.6060, 991.7519, 30.9083, 233.5691, 937.2975, 34.4812, 253.3423, 994.5505, 64.8499, 286.7211, 971.2279, 81.8768, 281.1886, 941.5849, 69.3192, 250.7490, 945.1527, 54.5540, 233.1971, 968.0634, 45.0395, 241.3844, 983.5242, 49.6163, 261.4706, 956.9186, 52.3654, 275.2350, 925.2181, 51.9404, 291.1986, 1006.0782, 56.3230, 301.8494, 1047.7727, 34.3351, 276.3330, 937.6742, 31.2511, 246.0866, 946.6304, 43.7656, 255.1465, 1028.9135, 72.4468, 286.9922, 1004.7000, 76.6733, 284.8810, 1013.7395, 40.2407, 247.8084, 939.5768, 13.6463, 233.7725, 979.2096, 34.2254, 262.0151, 965.4363, 87.8144, 294.3233, 938.8941, 95.1189, 271.9198, 945.3270, 63.5840, 238.4634, 937.9017, 45.4748, 238.1579, 972.6434, 54.9264, 258.9292, 967.3169, 71.6631, 273.0557, 976.7905, 53.3446, 264.1496, 932.4913, 45.5227, 278.8197, 1015.4032, 49.2644, 300.8009, 1045.4084, 38.6361, 273.4262, 924.3860, 42.9049, 245.5021, 963.4132, 62.2400, 266.7462, 1000.8128, 84.8431, 299.0609, 1014.0900, 67.1587, 275.9664, 995.0847, 21.2626, 226.8041, 951.1829, 11.7628, 225.1371, 977.5475, 49.3792, 264.3468, 958.6920, 99.5537, 293.0794, 932.5049, 105.0795, 269.3810, 937.5603, 68.3984, 241.2073, 958.7810, 44.6663, 239.7000, 977.4122, 53.9366, 256.5192, 954.6288, 70.4378, 262.9238, 963.3889, 65.5375, 263.7361, 953.6485, 54.0695, 291.6573, 1050.7104, 34.2344, 290.9258, 973.1800, 25.3267, 247.7840, 907.1249, 54.4504, 246.4404, 1000.0976, 89.1756, 290.2648, 1030.8770, 88.9277, 303.3308, 1007.9543, 40.2852, 245.5941, 960.3672, 3.1895, 207.4492, 977.1516, 10.1270, 238.6420, 975.0842, 56.6492, 281.2156, 936.1427, 94.4192, 282.6204, 885.6834, 91.1507, 260.9305, 949.2505, 68.0371, 252.6441, 986.1260, 46.1694, 246.3595, 954.4587, 36.7610, 239.4068, 975.2249, 54.1404, 249.8586, 936.6621, 83.1866, 288.2781, 1013.5798, 68.6686, 308.1932, 1045.9939, 25.6820, 277.9115, 901.7345, 12.0775, 240.2016, 920.7190, 45.0544, 253.0645, 1020.8363, 98.2485, 304.8860, 1040.2464, 90.2001, 298.1508, 1001.5660, 30.3663, 233.7500, 963.6846, -9.4887, 204.0537, 965.8080, 9.2484, 233.8236, 969.0621, 79.0867, 281.8962, 934.5395, 111.8088, 290.1738, 882.4327, 96.7415, 261.5343, 961.3991, 68.2490, 244.6962, 977.4946, 51.9224, 248.5708, 982.2818, 42.5941, 252.7641, 1008.7930, 38.6483, 247.6703, 900.2038, 66.3782, 274.5487, 1061.4165, 75.2929, 310.5118, 1012.8646, 50.8610, 293.9640, 914.0143, 20.7287, 254.8111, 947.9200, 37.5664, 259.0263, 998.0466, 82.9815, 296.7628, 1057.7683, 81.2394, 278.4194, 999.4131, 35.5368, 230.7054, 960.4266, -4.1510, 221.0026, 976.4551, 17.5333, 250.2051, 914.2525, 86.1286, 285.1839, 954.6480, 114.6953, 281.5572, 909.7074, 98.8590, 264.4294, 959.7767, 46.3616, 233.4362, 994.0767, 26.3547, 228.3972, 901.1771, 53.5538, 250.7643, 986.4711, 69.8369, 280.5042, 1036.8215, 61.6947, 290.3522, 954.5726, 44.2462, 250.9250, 870.3169, 35.9806, 261.5443, 1003.3795, 44.1343, 326.1253, 1122.1794, 62.3860, 316.9201, 951.9552, 72.2009, 222.0909, 911.5935, 46.0553, 183.2250, 968.8839, 22.6742, 244.9171, 991.1517, 58.6293, 312.5210, 1031.2033, 88.3068, 302.4728, 930.9887, 79.3910, 229.4289, 922.5375, 54.1620, 197.8046, 932.2975, 57.3010, 235.1581, 892.2025, 73.9771, 284.5675, 967.2647, 66.9425, 286.9463, 939.5338, 64.5798, 273.4495, 993.1996, 47.6242, 278.6155, 1041.4400, 52.2950, 282.6383, 1003.4258, 54.0180, 242.7606, 989.6841, 40.0258, 217.6384, 1007.4374, 38.8828, 246.2114, 967.9076, 62.8342, 275.2627, 929.2927, 80.6636, 296.5731, 955.9052, 64.1824, 306.5338, 945.6924, 41.9253, 290.1817, 944.4144, 49.5606, 256.4944, 949.0385, 56.8857, 231.1184, 1000.5936, 47.8978, 230.7478, 985.7517, 51.8888, 233.6976, 952.9709, 60.8310, 243.0572, 959.8809, 67.0994, 275.2679, 951.3526, 61.9657, 307.2525, 958.3980, 43.7327, 304.4538, 957.1192, 37.7197, 288.0334, 972.5544, 42.2838, 278.1495, 994.1877, 44.4100, 269.9932, 1009.2006, 38.7042, 249.7428, 998.2360, 42.0009, 228.3284, 996.5731, 58.4135, 232.3012, 987.9076, 70.2795, 250.8897, 957.4878, 70.4000, 262.5584, 943.1739, 60.6071, 262.7508, 922.1628, 62.2729, 274.9443, 919.0510, 67.2288, 293.2346, 937.6478, 62.3427, 294.8699, 968.1882, 49.2389, 274.9867, 959.9994, 33.5603, 254.8472, 1010.4877, 38.2716, 258.9836, 1044.6019, 56.5047, 259.9398, 1006.1863, 64.7732, 250.0843, 1038.5856, 52.7918, 256.3679, 1003.5126, 52.0809, 270.5601, 961.2026, 68.5195, 266.2420, 938.2108, 74.4138, 257.7856, 907.2243, 67.2636, 260.8290, 917.9918, 56.4633, 263.4242, 905.8229, 58.6281, 269.4611, 957.3559, 63.2300, 258.7316, 954.4419, 66.8603, 252.6260, 980.2852, 52.1441, 266.8534, 1009.6732, 33.5329, 281.0002, 1006.0480, 40.1672, 281.4859, 1026.7818, 54.8974, 268.0195, 998.1476, 61.9513, 265.4193, 995.8802, 52.9771, 268.3614, 979.2798, 38.5290, 265.4196, 962.8928, 50.4158, 256.5460, 948.4131, 74.8185, 249.9308, 936.3863, 82.7095, 258.9022, 944.8291, 58.9877, 261.7862, 946.4510, 39.5382, 254.9083, 941.2473, 54.8706, 255.0609, 936.1969, 68.7049, 270.0448, 954.1092, 62.8476, 285.7408, 970.0709, 39.7382, 281.8565, 1000.9737, 24.6668, 264.8288, 1010.2218, 40.3109, 265.2703, 1019.2161, 61.9323, 286.8965, 1016.6927, 66.6476, 290.8539, 979.5602, 47.7527, 267.9268, 1001.8489, 34.3125, 244.0122, 1000.1635, 51.9987, 246.4672, 950.5549, 70.2385, 257.3343, 948.3270, 74.6766, 261.6845, 955.8616, 66.5505, 252.3224, 913.9140, 58.8732, 237.0974, 936.0291, 56.3979, 243.2510, 973.4928, 60.0250, 263.7343, 975.0999, 63.8397, 287.3132, 1014.4053, 44.9308, 289.7103, 986.4009, 36.0143, 275.9852, 984.3142, 41.5221, 274.7600, 1036.0070, 53.9078, 287.8165, 1027.2791, 51.3366, 281.3640, 1012.2981, 27.2653, 250.7287, 975.9485, 35.0596, 235.7814, 979.5926, 65.8753, 250.3413, 961.4195, 84.8683, 261.8447, 964.6871, 74.1578, 253.4535, 945.6249, 48.9180, 233.7979, 922.4474, 49.1083, 236.6478, 955.0969, 64.5950, 257.9208, 947.8190, 75.0738, 276.7796, 993.6545, 51.9973, 278.2911, 942.9552, 30.3526, 269.7075, 948.5874, 35.0147, 274.5829, 1033.9362, 52.8264, 286.3450, 1048.7691, 55.9572, 285.0820, 1043.8506, 26.9351, 255.3714, 980.3163, 23.9907, 239.9006, 1008.4611, 52.2661, 259.4678, 993.3574, 80.1332, 275.2533, 1006.1902, 75.0348, 266.7989, 983.8305, 48.2751, 247.8604, 887.0780, 43.5545, 246.1553, 927.2292, 59.7585, 255.1310, 974.2854, 76.5569, 268.7604, 1029.7903, 69.0733, 268.5720, 949.2487, 41.5946, 252.0330, 967.9357, 30.1264, 255.1987, 995.6269, 55.9882, 277.8629, 994.1988, 71.2156, 293.0389, 1056.6219, 39.5516, 268.7458, 957.2478, 28.3100, 251.3509, 1008.1118, 35.5512, 258.1606, 1016.6531, 64.8781, 275.5008, 1031.9221, 65.0259, 272.4878, 976.3576, 47.2895, 254.7804, 923.2201, 48.1973, 246.5318, 965.6325, 67.9063, 253.6037, 933.6979, 84.4889, 272.5729, 990.9627, 56.8213, 258.6018, 981.6220, 44.3844, 243.1869, 1007.2210, 48.3391, 250.1943, 1011.3589, 59.4697, 276.9299, 994.6256, 63.6014, 297.4223, 1008.2175, 45.3647, 284.0480, 973.1656, 43.7447, 266.8231, 981.2446, 54.0113, 261.2409, 979.8832, 63.9873, 270.8399, 1013.7019, 50.5010, 262.9401, 1014.9183, 36.1686, 246.3977, 1013.9694, 43.1126, 244.2822, 985.0492, 58.7716, 257.5815, 960.7518, 70.4610, 278.4408, 979.8109, 63.2467, 272.6544, 934.3050, 54.9325, 259.8282, 947.4226, 47.8818, 252.4349, 966.2876, 53.8275, 261.1058, 1009.2242, 55.8024, 273.1914, 1032.6705, 48.2904, 271.8417, 1025.3503, 47.0648, 264.8764, 985.5342, 48.8622, 262.6448, 976.2160, 54.5981, 275.3204, 1005.4635, 54.6826, 271.8012, 958.3352, 58.4834, 263.4560, 994.1123, 51.8859, 253.3143, 985.5828, 56.8481, 256.4987, 1014.1388, 51.0988, 261.5505, 1004.8166, 47.0334, 260.7553, 962.1155, 57.9613, 263.8702, 942.6727, 66.8679, 267.3339, 970.7217, 73.7099, 278.2260, 994.1650, 53.4047, 264.9593, 956.7124, 40.9081, 252.2144, 987.4955, 47.1592, 252.6040, 950.1663, 77.0572, 279.5235, 1011.3257, 65.0994, 283.3305, 967.4319, 40.0819, 258.8640, 950.5793, 33.9617, 253.2720, 997.7037, 46.5836, 265.4158, 990.9223, 74.3996, 282.1810, 1007.2416, 66.3490, 269.4273, 952.1182, 48.0128, 249.7684, 965.7709, 30.0343, 240.1675, 996.5370, 36.5814, 253.8799, 1026.1225, 57.5236, 274.0276, 1010.3923, 66.8472, 278.6481, 979.7122, 73.7636, 283.5096, 977.6965, 65.9792, 275.3045, 971.7971, 47.1112, 268.3244, 988.0206, 30.8975, 258.1400, 997.3950, 37.2194, 253.9738, 1033.6468, 54.5074, 265.0170, 1026.9947, 63.8381, 271.3281, 996.0683, 50.2049, 269.3011, 951.5098, 38.7670, 267.8502, 968.4920, 52.6407, 275.8875, 976.2946, 75.4630, 278.8953, 1022.2603, 64.6165, 265.3509, 1002.0955, 34.4908, 242.5357, 970.7237, 28.9781, 243.4767, 983.7535, 55.7523, 263.9988, 965.1180, 78.8430, 275.5979, 952.2537, 64.5250, 269.4800, 944.4484, 48.1606, 266.6734, 962.2049, 54.6625, 264.0077, 987.7008, 63.7924, 257.3805, 988.5681, 50.3446, 249.1660, 966.7252, 41.5174, 251.8676, 1003.6426, 55.6303, 268.8175, 965.6195, 61.0776, 264.5524, 940.8043, 42.3305, 251.3703, 943.7494, 39.2196, 266.6541, 989.6954, 66.3107, 294.0013, 986.3201, 90.3013, 290.0921, 991.0908, 60.9763, 251.3444, 974.1892, 23.0919, 220.5362, 959.5262, 17.9849, 233.7930, 996.8178, 36.4419, 270.9705, 967.7943, 64.1694, 289.7807, 969.2979, 73.2985, 280.2363, 947.6773, 78.0103, 272.6365, 955.9635, 70.7259, 268.9408, 1026.4015, 48.7367, 252.0767, 1014.1173, 27.1663, 237.4817, 962.5748, 38.1876, 241.4084, 989.8251, 62.1896, 267.1088, 962.6676, 59.1960, 280.0675, 960.7120, 39.3882, 278.6024, 959.4094, 38.2220, 282.0201, 932.8121, 81.9698, 298.6955, 994.9772, 100.4294, 293.4376, 1013.8652, 56.4992, 258.2332, 1009.5536, -1.3516, 222.2250, 974.2269, 0.8722, 221.9902, 958.9726, 44.7806, 262.9557, 930.0144, 87.4964, 303.5784, 968.8017, 92.3093, 312.1746, 974.4986, 76.5104, 284.4683, 998.1891, 57.8024, 252.9514, 995.3812, 44.4130, 237.0817, 959.1941, 34.4700, 234.4256, 997.1618, 36.2873, 252.0870, 1041.9184, 48.4735, 263.3804, 946.3461, 56.9318, 267.2003, 932.1809, 48.9439, 287.1533, 954.4156, 59.8864, 304.0358, 975.3304, 90.1401, 300.9802, 1079.4145, 84.8758, 270.1565, 1058.9319, 41.0128, 226.4653, 983.0225, 2.6506, 201.2761, 960.3403, 7.0833, 221.1034, 965.8764, 44.1910, 271.8464, 993.1922, 93.4589, 317.1386, 970.7543, 110.9871, 320.3955, 919.4326, 93.0775, 281.5176, 998.2390, 60.6416, 243.4437, 1058.7135, 26.4244, 224.2869, 1016.7776, 23.8384, 228.4845, 1008.8854, 38.3473, 237.5383, 956.2480, 53.2581, 250.6584, 951.8713, 53.7135, 281.6932, 972.8496, 52.9624, 316.0365, 946.6652, 64.6003, 312.0366, 970.8991, 83.4446, 280.1429, 1044.9844, 63.2918, 244.7194, 1041.0232, 10.4546, 211.0171, 1000.3116, -7.2170, 209.0537, 940.3079, 20.9991, 239.8519, 955.7646, 69.2013, 283.7647, 983.3461, 103.1816, 311.3325, 945.8495, 90.1118, 296.0128, 894.5185, 67.1780, 259.6937, 988.5474, 46.7951, 238.1064, 1031.1245, 37.4715, 233.4590, 1017.2732, 31.5252, 239.8599, 976.3510, 37.2231, 248.7356, 917.5952, 50.4883, 265.9761, 1000.9315, 55.5248, 294.5623, 1001.1014, 61.2334, 323.6087, 937.2450, 72.7409, 319.7653, 981.1439, 87.1546, 287.7303, 1052.1643, 61.8568, 243.7275, 1054.0722, 12.5959, 207.4314, 995.4555, -6.5302, 210.5566, 939.9650, 22.1405, 241.7735, 940.7647, 78.0772, 282.0866, 962.2021, 115.9158, 313.4407, 944.6866, 109.6623, 312.0127, 970.9557, 76.4124, 273.2432, 979.9558, 39.4937, 228.6384, 963.5895, 20.9054, 219.1020, 1020.1960, 32.3340, 240.1147, 998.7261, 44.9106, 255.0607, 959.7438, 51.5875, 273.6604, 971.6293, 55.2255, 311.4710, 943.3498, 62.7646, 326.6869, 980.1698, 68.9551, 306.1263, 1015.2280, 75.3378, 267.5028, 1031.4809, 42.0472, 224.5734, 1006.1961, 3.7082, 208.8296, 972.1847, 11.3851, 223.3983, 940.0766, 55.9985, 254.4274, 950.5423, 95.7639, 290.1730, 956.8826, 104.8239, 309.9732, 936.8015, 81.2049, 288.7731, 958.8943, 64.1724, 246.1653, 965.6014, 39.6349, 217.5844, 1018.2794, 30.3969, 232.1036, 1031.2778, 30.5505, 253.5956, 956.7271, 45.9764, 253.7348, 930.1207, 57.1833, 270.7179, 948.4159, 58.6360, 304.3513, 966.9074, 62.2661, 324.5172, 1013.1306, 72.0629, 306.1990, 1016.7692, 62.0224, 248.7718, 998.3593, 28.6278, 202.8341, 1005.6618, 6.4249, 199.1177, 998.1361, 15.9171, 230.2600, 966.5584, 57.2475, 277.0908, 917.0708, 93.5032, 307.8031, 932.7659, 102.7773, 308.7378, 976.3674, 97.9066, 288.4368, 1005.5453, 67.2755, 236.2826, 986.1131, 36.2274, 201.1022, 989.6567, 25.8724, 217.3271, 1030.4201, 26.7162, 231.9610, 981.7709, 47.2592, 253.3341, 969.2754, 59.5488, 287.4492, 951.5600, 68.4041, 315.7926, 966.3516, 65.9145, 320.1080, 1018.4752, 71.2847, 287.0172, 1017.9321, 57.1886, 237.7715, 1027.2988, 17.8294, 209.5106, 1002.1483, 9.8935, 218.2964, 961.8959, 37.8271, 240.3083, 924.7719, 84.1019, 270.5942, 922.6999, 104.9939, 302.3431, 960.8723, 88.4909, 309.8118, 945.5184, 66.9627, 268.6757, 990.8245, 42.1349, 215.2541, 971.7616, 40.4464, 219.8111, 1036.7828, 39.4150, 247.8411, 1000.5043, 45.6597, 252.3834, 951.7270, 48.6526, 256.3890, 930.1576, 60.2773, 292.2154, 944.9708, 71.9277, 327.8971, 977.3776, 80.0364, 318.0492, 1021.0570, 68.2310, 259.1377, 1033.7698, 31.5885, 205.7803, 995.5692, 6.0235, 195.1031, 964.6286, 13.8692, 223.2500, 979.2053, 52.3746, 265.5771, 945.6904, 92.8201, 292.7844, 935.8717, 105.1797, 306.0863, 952.7629, 98.3625, 302.2857, 976.1505, 72.6917, 263.3914, 1020.1696, 41.9635, 221.4885, 1025.2492, 32.4222, 214.0171, 1028.2603, 31.3003, 226.4647, 976.4282, 45.3505, 248.6651, 958.3608, 56.4878, 279.5697, 965.1250, 65.8456, 315.8894, 991.4112, 72.8504, 331.6886, 1002.5193, 73.2262, 310.1936, 1000.8223, 62.6740, 259.3154, 1021.3406, 28.6051, 212.1429, 1045.1589, 9.5146, 199.7325, 980.9578, 21.9860, 216.0885, 930.6348, 51.9629, 249.2814, 899.2464, 94.2362, 306.7063, 976.7981, 112.4060, 338.3580, 1002.5107, 92.9397, 306.9267, 972.0623, 62.1661, 243.8008, 945.2835, 41.9281, 213.1429, 1030.7679, 22.3208, 225.9226, 1058.2305, 24.2407, 237.9223, 952.3354, 42.8353, 240.5020, 945.8201, 59.0965, 271.2904, 923.1921, 81.9984, 323.6159, 1000.3373, 82.0815, 341.1427, 1037.3062, 61.1710, 295.4930, 993.0513, 34.9812, 226.7669, 963.6359, 16.6281, 207.4962, 990.4677, 25.4868, 259.3195, 1075.4405, 65.6482, 278.7367, 912.7312, 96.3986, 234.3647, 834.6381, 84.6680, 238.0720, 961.6071, 55.4001, 306.4885, 945.8312, 50.7128, 338.4584, 992.1617, 56.0323, 283.8274, 971.8344, 56.3672, 216.0940, 972.7882, 55.1739, 222.2649, 1036.1386, 50.6870, 263.3398, 929.6563, 49.8964, 267.8955, 981.4912, 37.1783, 262.5063, 1004.8457, 50.2176, 288.5627, 959.1385, 66.4685, 311.9728, 1013.4796, 60.7862, 293.0420, 980.9213, 56.8333, 242.7782, 958.2628, 41.1842, 201.0922, 1002.4050, 40.8502, 222.8872, 935.4664, 59.6810, 252.7808, 899.8801, 67.7893, 280.4295, 964.0178, 66.8271, 314.5981, 972.8807, 54.7914, 303.7158, 977.5522, 44.4593, 259.1903, 975.1798, 43.1989, 234.2682, 1008.4449, 37.1930, 233.3123, 1005.5375, 50.8854, 239.1048, 981.8234, 62.7779, 240.5269, 971.7587, 54.7312, 254.8712, 948.6662, 55.6097, 286.0325, 945.0639, 61.9984, 312.0663, 966.5396, 59.3293, 304.0716, 958.3357, 48.8894, 272.6384, 969.3930, 32.7243, 238.2309, 993.8079, 41.6492, 230.9674, 990.8529, 63.3918, 239.2488, 978.4368, 69.1461, 241.3553, 980.7691, 61.8862, 248.8986, 994.0278, 54.1707, 258.5441, 963.4837, 65.5872, 277.3484, 946.1794, 67.0217, 283.5290, 939.2487, 52.2271, 272.6504, 931.6585, 45.4509, 271.7149, 973.3465, 53.3747, 280.2650, 979.6095, 58.9925, 280.6587, 978.5019, 38.0326, 263.4295, 1007.9751, 31.4441, 253.0770, 1012.6568, 55.0261, 259.9539, 1018.6876, 67.6978, 263.9997, 986.6799, 57.2389, 252.8966, 949.0165, 49.5582, 242.4140, 942.3428, 62.2452, 246.5816, 913.9885, 71.8139, 259.3435, 929.7788, 58.2733, 267.5234, 928.7984, 50.7612, 279.9275, 932.6268, 57.9741, 283.6637, 955.4788, 66.5081, 281.5106, 995.8876, 49.0246, 270.2169, 1030.9286, 27.9626, 260.5009, 1016.1743, 36.9350, 265.6146, 1029.0762, 61.2515, 274.0036, 1024.1997, 58.4305, 267.8753, 1003.9280, 41.6259, 254.2582, 979.6513, 47.8003, 259.0594, 964.4441, 69.4478, 270.6554, 954.4547, 80.5248, 272.9087, 931.1246, 61.8309, 256.2881, 933.9288, 50.0283, 248.3783, 946.0334, 60.7827, 253.2198, 963.9055, 70.6501, 259.9795, 982.9225, 54.5582, 262.8501, 977.0414, 40.7783, 269.1388, 1001.8714, 48.7099, 279.8890, 1014.0692, 53.6520, 279.3777, 1016.4805, 42.9432, 266.9834, 1005.2106, 28.3739, 261.6079, 968.1419, 46.7104, 275.3216, 977.5914, 71.5503, 280.0802, 971.7869, 65.9745, 266.8508, 959.5866, 43.1938, 253.3290, 950.0567, 45.7019, 253.5545, 935.4281, 71.2286, 251.5473, 964.3221, 75.9238, 238.9574, 974.2664, 66.5312, 232.1287, 966.7229, 59.2159, 239.6931, 945.5661, 68.7718, 256.0583, 946.4366, 67.8089, 268.9943, 1002.2044, 47.4587, 278.6087, 975.7545, 42.2144, 286.9502, 980.6094, 48.0931, 288.3304, 994.8344, 51.4636, 280.1349, 1020.5686, 33.5570, 260.9244, 1018.1882, 28.0683, 252.5841, 1017.9347, 53.9035, 258.3097, 1002.0501, 69.0045, 253.8065, 991.4373, 61.2725, 247.8111, 985.4330, 57.8281, 247.8149, 964.1917, 62.1199, 251.0775, 961.1023, 70.3538, 252.0992, 941.6678, 68.2650, 249.0377, 942.8996, 60.8013, 253.7637, 952.5914, 59.9958, 267.4602, 980.9606, 55.9822, 276.5165, 1003.3375, 49.6752, 275.5466, 990.7053, 43.9886, 270.8017, 1010.6554, 42.4793, 274.1447, 1045.7172, 41.4632, 273.4403, 1050.5591, 39.7750, 266.2468, 1001.5777, 44.6638, 260.8712, 992.5501, 53.1938, 259.6173, 1001.3799, 64.3665, 257.4043, 978.9446, 66.2552, 255.7932, 953.7702, 65.2784, 259.1137, 933.8973, 71.4058, 258.7192, 955.6777, 73.0583, 253.1975, 944.6681, 70.7460, 248.1900, 949.0023, 60.7425, 260.4520, 962.4857, 58.4555, 274.5411, 983.0210, 61.2807, 271.9347, 988.8584, 49.4511, 258.5782, 967.3741, 37.2993, 268.1605, 1017.6031, 42.7748, 289.5266, 1033.1734, 59.8921, 285.2171, 1024.4125, 54.9448, 252.7464, 942.1027, 43.1264, 245.0156, 983.7278, 41.7185, 260.9160, 1002.9046, 57.9709, 264.2525, 992.7982, 60.1348, 246.3242, 914.6397, 62.7649, 240.0249, 922.5915, 63.7787, 257.6769, 984.0383, 70.0398, 266.8340, 1014.1808, 63.9465, 254.1359, 956.1970, 58.1319, 252.5279, 955.3063, 47.7459, 267.0518, 996.4293, 50.1728, 284.7133, 1051.1349, 43.5713, 281.0767, 1021.8019, 40.4375, 267.2481, 1007.6722, 47.8797, 272.1287, 1008.1344, 55.3561, 280.6781, 1062.1985, 51.2666, 259.4231, 1017.5693, 46.7061, 236.4673, 984.1277, 53.4926, 242.3232, 975.2447, 66.3932, 262.8013, 960.0874, 63.9882, 260.4398, 954.2973, 56.5070, 246.1348, 932.7144, 68.1648, 262.6201, 962.1625, 78.7036, 292.2724, 974.3908, 64.7726, 281.9009, 985.3032, 33.5896, 243.4885, 950.0575, 39.9455, 248.6263, 1014.8277, 61.3028, 283.9988, 1017.3420, 66.6617, 287.5380, 1001.6430, 37.1475, 245.6452, 933.9521, 36.3093, 247.2322, 972.5830, 56.0049, 283.4950, 1005.6636, 72.5253, 292.5620, 989.0773, 58.0418, 259.8989, 912.1962, 50.2796, 240.8738, 937.9967, 56.1189, 252.1230, 997.8818, 64.0498, 256.1916, 1009.9311, 56.4415, 243.6077, 952.7959, 57.4828, 247.6597, 951.2996, 61.7819, 270.3106, 1001.0774, 69.4419, 281.3801, 1060.2254, 58.5620, 272.8625, 997.0557, 41.2322, 262.4201, 975.7138, 41.8609, 265.0823, 991.2180, 52.3760, 273.5430, 1050.3815, 50.5458, 255.3521, 978.9683, 47.3169, 240.2877, 964.9868, 45.0940, 247.8577, 972.6521, 60.9599, 276.6122, 1006.3553, 58.3342, 277.0602, 986.6517, 49.6975, 261.1004, 974.6329, 48.6698, 255.2357, 987.5126, 54.5041, 260.6006, 982.9422, 53.9492, 258.7476, 988.7074, 40.6521, 249.4411, 953.3874, 44.5153, 265.5230, 995.8418, 61.7105, 292.6857, 1016.5710, 71.3933, 296.3672, 967.7370, 46.0498, 263.1085, 951.2638, 31.0274, 246.3813, 992.3211, 49.1173, 266.9140, 999.8621, 73.7146, 285.7686, 1015.7896, 54.3151, 256.5727, 947.0833, 30.4004, 234.1258, 950.9993, 43.8385, 255.4156, 993.2755, 78.3280, 295.3120, 1002.5028, 78.4020, 280.5033, 935.3527, 47.9327, 244.4768, 940.5137, 47.7118, 249.9217, 1013.1556, 59.5748, 271.7838, 1018.6647, 54.2746, 248.7877, 912.8481, 41.5025, 239.4156, 941.5039, 46.7437, 271.7452, 956.6451, 80.4491, 310.0142, 1017.1268, 72.2135, 291.3692, 970.7241, 33.8920, 249.1500, 957.3466, 18.5449, 241.4089, 974.4534, 59.1543, 270.2415, 1033.5983, 77.9538, 266.2348, 1002.4495, 49.6962, 238.0256, 925.0332, 25.5538, 242.5213, 965.3261, 51.6168, 282.9099, 996.1633, 83.0027, 298.9903, 928.1072, 75.3584, 267.3721, 919.0833, 52.0666, 254.4900, 984.5241, 52.4917, 272.9194, 995.1167, 53.2534, 260.2497, 964.5576, 33.1809, 231.9486, 940.8791, 25.6718, 242.1179, 982.4026, 51.7492, 284.4734, 994.3009, 93.9921, 317.7542, 1019.4263, 72.0824, 287.0954, 966.2044, 24.1497, 236.0492, 968.7059, 21.4042, 239.8859, 1062.8121, 53.6826, 270.2515, 981.1747, 69.0799, 257.0389, 919.9996, 53.5945, 232.4875, 924.0910, 53.1734, 263.5294, 987.5271, 71.9189, 305.5832, 975.3259, 82.9692, 302.9559, 958.5540, 51.2435, 259.1189, 938.7061, 39.4545, 245.8669, 1037.4823, 48.2254, 249.7187, 1037.3230, 62.2069, 248.4792, 971.5828, 41.8099, 227.6835, 894.7343, 47.1182, 245.6170, 1014.2536, 75.1457, 299.6745, 1050.2298, 83.2579, 308.5868, 954.8038, 55.9737, 257.2198, 898.2701, 32.9893, 236.9000, 956.7839, 51.6387, 270.2082, 998.6704, 82.5801, 288.6042, 1037.4381, 61.8740, 256.5867, 967.2419, 21.7023, 226.0899, 951.6349, 14.0674, 240.6895, 961.8053, 60.6800, 294.6440, 1032.9649, 100.8366, 313.6666, 981.5281, 89.7254, 276.1208, 974.0808, 51.2773, 239.7763, 1034.4642, 18.8188, 224.7748, 941.8058, 31.8952, 219.9464, 925.6997, 65.1218, 243.6964, 958.3151, 91.6062, 293.9583, 948.6305, 93.6816, 312.2363, 990.8286, 53.2372, 287.6582, 1006.2067, 6.2479, 252.7223, 979.7588, -2.5164, 238.2920, 994.7807, 45.8833, 269.1667, 1009.8075, 92.6149, 298.9981, 1021.6242, 83.2160, 272.4455, 966.6372, 54.0840, 239.8813, 1037.8968, 29.3437, 241.4232, 1023.2246, 32.0823, 250.0577, 890.7328, 61.2101, 251.6225, 895.2639, 94.6021, 275.6199, 949.7289, 105.5066, 295.5271, 972.3564, 74.2547, 273.1730, 985.7877, 25.4086, 245.6482, 955.1477, -6.3376, 234.4888, 958.5543, 19.2443, 257.6032, 1005.7333, 74.8223, 292.3703, 1051.8409, 101.8503, 296.2647, 1033.6707, 76.8543, 266.4612, 966.0137, 37.9996, 247.3998, 1044.2655, 12.3655, 247.7288, 993.9350, 37.2573, 246.6893, 865.5580, 73.2456, 256.9175, 917.7674, 101.2128, 290.7598, 963.2610, 99.1877, 301.3071, 956.5177, 55.5633, 266.9063, 974.6405, 5.6843, 230.6815, 979.8929, -3.1815, 228.8565, 980.9850, 37.6648, 266.6458, 1005.4463, 102.8466, 308.8168, 1034.9348, 100.7783, 287.2918, 997.8805, 59.3267, 252.6408, 1021.8890, 11.6047, 245.9721, 1072.6061, -6.8135, 247.2323, 920.3053, 43.7158, 257.6716, 855.4502, 89.0313, 278.1682, 965.0864, 116.9063, 310.5506, 1034.6951, 85.7163, 300.4409, 1023.2444, 30.7901, 252.7417, 957.3727, -4.1692, 218.9808, 943.1731, 0.7342, 229.0133, 985.8871, 63.5572, 285.8641, 1098.4830, 114.5363, 304.0833, 1026.2691, 107.7978, 283.3577, 974.6563, 57.7664, 246.8253, 1004.1485, -1.5560, 239.5991, 1021.2578, 8.1813, 238.9309, 883.1155

};
int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4a06      	ldr	r2, [pc, #24]	; (8005c4c <_Z16get_feature_datajjPf+0x2c>)
 8005c32:	1899      	adds	r1, r3, r2
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f01c fe4c 	bl	80228d8 <memcpy>
    return 0;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08027564 	.word	0x08027564

08005c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b0cc      	sub	sp, #304	; 0x130
 8005c54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c56:	f003 f853 	bl	8008d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c5a:	f000 f89f 	bl	8005d9c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c5e:	f000 f965 	bl	8005f2c <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8005c62:	f019 fb41 	bl	801f2e8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8005c66:	f000 f925 	bl	8005eb4 <_ZL12MX_SPI1_Initv>
  MX_CRC_Init();
 8005c6a:	f000 f90b 	bl	8005e84 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 8005c6e:	4b43      	ldr	r3, [pc, #268]	; (8005d7c <main+0x12c>)
 8005c70:	2240      	movs	r2, #64	; 0x40
 8005c72:	701a      	strb	r2, [r3, #0]
  	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8005c74:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <main+0x12c>)
 8005c76:	2208      	movs	r2, #8
 8005c78:	705a      	strb	r2, [r3, #1]
  	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;//update rate
 8005c7a:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <main+0x12c>)
 8005c7c:	22c0      	movs	r2, #192	; 0xc0
 8005c7e:	709a      	strb	r2, [r3, #2]
  	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8005c80:	4b3e      	ldr	r3, [pc, #248]	; (8005d7c <main+0x12c>)
 8005c82:	2207      	movs	r2, #7
 8005c84:	70da      	strb	r2, [r3, #3]
  	myAccConfigDef.interruptEnable = false;
 8005c86:	4b3d      	ldr	r3, [pc, #244]	; (8005d7c <main+0x12c>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	711a      	strb	r2, [r3, #4]
  	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8005c8c:	493b      	ldr	r1, [pc, #236]	; (8005d7c <main+0x12c>)
 8005c8e:	483c      	ldr	r0, [pc, #240]	; (8005d80 <main+0x130>)
 8005c90:	f7fb fa36 	bl	8001100 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>
  	LIS3DSH_DataScaled myscaledata;
  /* USER CODE END 2 */
  	signal_t signal;
 8005c94:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fc3e 	bl	800451a <_ZN2ei11ei_signal_tC1Ev>
  	signal.total_length = sizeof(features) / sizeof(features[0]);
 8005c9e:	f640 139c 	movw	r3, #2460	; 0x99c
 8005ca2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	signal.get_data = &get_feature_data;
 8005ca6:	4b37      	ldr	r3, [pc, #220]	; (8005d84 <main+0x134>)
 8005ca8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cac:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8005cb0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fba5 	bl	8006406 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ei_impulse_result_t result = { 0 };
 8005cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2100      	movs	r1, #0
 8005cce:	f01c fe2b 	bl	8022928 <memset>
	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005cd8:	2201      	movs	r2, #1
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff ff51 	bl	8005b82 <run_classifier>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
	      ei_printf("run_classifier returned: %d\n", res);
 8005ce6:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8005cea:	4619      	mov	r1, r3
 8005cec:	4826      	ldr	r0, [pc, #152]	; (8005d88 <main+0x138>)
 8005cee:	f7ff ff85 	bl	8005bfc <_Z9ei_printfPKcz>

	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8005cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfa:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d16:	481d      	ldr	r0, [pc, #116]	; (8005d8c <main+0x13c>)
 8005d18:	f7ff ff70 	bl	8005bfc <_Z9ei_printfPKcz>
	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

	      // print the predictions
	      ei_printf("[");
 8005d1c:	481c      	ldr	r0, [pc, #112]	; (8005d90 <main+0x140>)
 8005d1e:	f7ff ff6d 	bl	8005bfc <_Z9ei_printfPKcz>
	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005d22:	2300      	movs	r3, #0
 8005d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d81c      	bhi.n	8005d6a <main+0x11a>
	    	  ei_printf_float(result.classification[ix].value);
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8005d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4413      	add	r3, r2
 8005d42:	3304      	adds	r3, #4
 8005d44:	edd3 7a00 	vldr	s15, [r3]
 8005d48:	eeb0 0a67 	vmov.f32	s0, s15
 8005d4c:	f014 f818 	bl	8019d80 <_Z15ei_printf_floatf>
	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	          ei_printf(", ");
	  #else
	          if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8005d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d002      	beq.n	8005d5e <main+0x10e>
	              ei_printf(", ");
 8005d58:	480e      	ldr	r0, [pc, #56]	; (8005d94 <main+0x144>)
 8005d5a:	f7ff ff4f 	bl	8005bfc <_Z9ei_printfPKcz>
	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d62:	3301      	adds	r3, #1
 8005d64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005d68:	e7de      	b.n	8005d28 <main+0xd8>
	  #endif
	      }
	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	      ei_printf_float(result.anomaly);
	  #endif
	      ei_printf("]\n\n\n");
 8005d6a:	480b      	ldr	r0, [pc, #44]	; (8005d98 <main+0x148>)
 8005d6c:	f7ff ff46 	bl	8005bfc <_Z9ei_printfPKcz>

	    HAL_Delay(5000);
 8005d70:	f241 3088 	movw	r0, #5000	; 0x1388
 8005d74:	f003 f836 	bl	8008de4 <HAL_Delay>
	 			  	    {
	     /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 			  	    }
  }
 8005d78:	e7a0      	b.n	8005cbc <main+0x6c>
 8005d7a:	bf00      	nop
 8005d7c:	200004b8 	.word	0x200004b8
 8005d80:	200004c8 	.word	0x200004c8
 8005d84:	08005c21 	.word	0x08005c21
 8005d88:	080263d4 	.word	0x080263d4
 8005d8c:	080263f4 	.word	0x080263f4
 8005d90:	0802643c 	.word	0x0802643c
 8005d94:	08026440 	.word	0x08026440
 8005d98:	08026444 	.word	0x08026444

08005d9c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b094      	sub	sp, #80	; 0x50
 8005da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005da2:	f107 0320 	add.w	r3, r7, #32
 8005da6:	2230      	movs	r2, #48	; 0x30
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f01c fdbc 	bl	8022928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005db0:	f107 030c 	add.w	r3, r7, #12
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	4b2d      	ldr	r3, [pc, #180]	; (8005e7c <_Z18SystemClock_Configv+0xe0>)
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	4a2c      	ldr	r2, [pc, #176]	; (8005e7c <_Z18SystemClock_Configv+0xe0>)
 8005dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dce:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <_Z18SystemClock_Configv+0xe0>)
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <_Z18SystemClock_Configv+0xe4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a26      	ldr	r2, [pc, #152]	; (8005e80 <_Z18SystemClock_Configv+0xe4>)
 8005de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <_Z18SystemClock_Configv+0xe4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e02:	2302      	movs	r3, #2
 8005e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005e10:	23a8      	movs	r3, #168	; 0xa8
 8005e12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e14:	2302      	movs	r3, #2
 8005e16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005e18:	2307      	movs	r3, #7
 8005e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e1c:	f107 0320 	add.w	r3, r7, #32
 8005e20:	4618      	mov	r0, r3
 8005e22:	f004 fd87 	bl	800a934 <HAL_RCC_OscConfig>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	bf14      	ite	ne
 8005e2c:	2301      	movne	r3, #1
 8005e2e:	2300      	moveq	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8005e36:	f000 f8d7 	bl	8005fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e3a:	230f      	movs	r3, #15
 8005e3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005e4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005e52:	f107 030c 	add.w	r3, r7, #12
 8005e56:	2105      	movs	r1, #5
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f004 ffe3 	bl	800ae24 <HAL_RCC_ClockConfig>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8005e6e:	f000 f8bb 	bl	8005fe8 <Error_Handler>
  }
}
 8005e72:	bf00      	nop
 8005e74:	3750      	adds	r7, #80	; 0x50
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40007000 	.word	0x40007000

08005e84 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005e88:	4b08      	ldr	r3, [pc, #32]	; (8005eac <_ZL11MX_CRC_Initv+0x28>)
 8005e8a:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <_ZL11MX_CRC_Initv+0x2c>)
 8005e8c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005e8e:	4807      	ldr	r0, [pc, #28]	; (8005eac <_ZL11MX_CRC_Initv+0x28>)
 8005e90:	f003 f8dd 	bl	800904e <HAL_CRC_Init>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bf14      	ite	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	2300      	moveq	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8005ea4:	f000 f8a0 	bl	8005fe8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005ea8:	bf00      	nop
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	200004c0 	.word	0x200004c0
 8005eb0:	40023000 	.word	0x40023000

08005eb4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005eba:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <_ZL12MX_SPI1_Initv+0x74>)
 8005ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005ebe:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005ec0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005ec6:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ecc:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ed2:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ed8:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005ede:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005eec:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005f00:	220a      	movs	r2, #10
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005f04:	4807      	ldr	r0, [pc, #28]	; (8005f24 <_ZL12MX_SPI1_Initv+0x70>)
 8005f06:	f005 f985 	bl	800b214 <HAL_SPI_Init>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8005f1a:	f000 f865 	bl	8005fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005f1e:	bf00      	nop
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	200004c8 	.word	0x200004c8
 8005f28:	40013000 	.word	0x40013000

08005f2c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f32:	f107 0314 	add.w	r3, r7, #20
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f4c:	f043 0310 	orr.w	r3, r3, #16
 8005f50:	6313      	str	r3, [r2, #48]	; 0x30
 8005f52:	4b23      	ldr	r3, [pc, #140]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6e:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	4a17      	ldr	r2, [pc, #92]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8a:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	607b      	str	r3, [r7, #4]
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	4a10      	ldr	r2, [pc, #64]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005fa0:	f043 0302 	orr.w	r3, r3, #2
 8005fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <_ZL12MX_GPIO_Initv+0xb4>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2109      	movs	r1, #9
 8005fb6:	480b      	ldr	r0, [pc, #44]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb8>)
 8005fb8:	f003 fa02 	bl	80093c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8005fbc:	2309      	movs	r3, #9
 8005fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4804      	ldr	r0, [pc, #16]	; (8005fe4 <_ZL12MX_GPIO_Initv+0xb8>)
 8005fd4:	f003 f858 	bl	8009088 <HAL_GPIO_Init>

}
 8005fd8:	bf00      	nop
 8005fda:	3728      	adds	r7, #40	; 0x28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40021000 	.word	0x40021000

08005fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005fec:	b672      	cpsid	i
}
 8005fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ff0:	e7fe      	b.n	8005ff0 <Error_Handler+0x8>

08005ff2 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fa4a 	bl	800649e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fa69 	bl	80064e4 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fab1 	bl	8006580 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fa4a 	bl	80064cc <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
      {
	return *iterator(this->_M_impl._M_start._M_p
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	681a      	ldr	r2, [r3, #0]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	009b      	lsls	r3, r3, #2
	return *iterator(this->_M_impl._M_start._M_p
 8006058:	18d1      	adds	r1, r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f003 021f 	and.w	r2, r3, #31
 8006060:	f107 0310 	add.w	r3, r7, #16
 8006064:	4618      	mov	r0, r3
 8006066:	f7fb fa41 	bl	80014ec <_ZNSt13_Bit_iteratorC1EPmj>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f107 0210 	add.w	r2, r7, #16
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f7fb fa4b 	bl	800150e <_ZNKSt13_Bit_iteratordeEv>
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 8006078:	bf00      	nop
      }
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff ffed 	bl	8006082 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80060a8:	4603      	mov	r3, r0
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80060ae:	6838      	ldr	r0, [r7, #0]
 80060b0:	f7ff ffe7 	bl	8006082 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80060b4:	4603      	mov	r3, r0
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80060bc:	f107 030c 	add.w	r3, r7, #12
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ffde 	bl	8006082 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80060c6:	4603      	mov	r3, r0
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	601a      	str	r2, [r3, #0]
    }
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80060d6:	b5b0      	push	{r4, r5, r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	ed87 0a01 	vstr	s0, [r7, #4]
 80060e0:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fa fa3a 	bl	800055c <__aeabi_f2d>
 80060e8:	4604      	mov	r4, r0
 80060ea:	460d      	mov	r5, r1
 80060ec:	6838      	ldr	r0, [r7, #0]
 80060ee:	f7fa fa23 	bl	8000538 <__aeabi_i2d>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	ec43 2b11 	vmov	d1, r2, r3
 80060fa:	ec45 4b10 	vmov	d0, r4, r5
 80060fe:	f01a f859 	bl	80201b4 <pow>
 8006102:	eeb0 7a40 	vmov.f32	s14, s0
 8006106:	eef0 7a60 	vmov.f32	s15, s1
    }
 800610a:	eeb0 0a47 	vmov.f32	s0, s14
 800610e:	eef0 0a67 	vmov.f32	s1, s15
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bdb0      	pop	{r4, r5, r7, pc}

08006118 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fa77 	bl	800661e <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 800613a:	b590      	push	{r4, r7, lr}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8006146:	68fc      	ldr	r4, [r7, #12]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fa5d 	bl	8006608 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 800614e:	4603      	mov	r3, r0
 8006150:	461a      	mov	r2, r3
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4620      	mov	r0, r4
 8006156:	f7ff ffdf 	bl	8006118 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}

08006164 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fa6b 	bl	800664a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006174:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00b      	beq.n	8006196 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa70 	bl	8006664 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8006184:	4603      	mov	r3, r0
 8006186:	681c      	ldr	r4, [r3, #0]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fa78 	bl	800667e <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 800618e:	4603      	mov	r3, r0
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	47a0      	blx	r4
	__ptr = pointer();
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
      }
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}

080061a6 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80061a6:	b590      	push	{r4, r7, lr}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80061b0:	687c      	ldr	r4, [r7, #4]
 80061b2:	463b      	mov	r3, r7
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fa62 	bl	800667e <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80061ba:	4603      	mov	r3, r0
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4619      	mov	r1, r3
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 fa67 	bl	8006694 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd90      	pop	{r4, r7, pc}

080061ce <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	ed93 7a00 	vldr	s14, [r3]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	edd3 7a00 	vldr	s15, [r3]
 80061e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	d501      	bpl.n	80061f2 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	e000      	b.n	80061f4 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80061f2:	687b      	ldr	r3, [r7, #4]
    }
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8006200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4618      	mov	r0, r3
 8006214:	f7fb f9ea 	bl	80015ec <_ZNKSt14_Function_base8_M_emptyEv>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 800621e:	f7fb fa8b 	bl	8001738 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	68dc      	ldr	r4, [r3, #12]
 8006226:	68fd      	ldr	r5, [r7, #12]
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fa50 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006232:	4606      	mov	r6, r0
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fa4b 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800623c:	4680      	mov	r8, r0
 800623e:	463b      	mov	r3, r7
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fa51 	bl	80066e8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006246:	4603      	mov	r3, r0
 8006248:	4642      	mov	r2, r8
 800624a:	4631      	mov	r1, r6
 800624c:	4628      	mov	r0, r5
 800624e:	47a0      	blx	r4
 8006250:	4603      	mov	r3, r0
    }
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800625c <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7fa f967 	bl	8000538 <__aeabi_i2d>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	ec43 2b17 	vmov	d7, r2, r3
 8006272:	eeb0 0a47 	vmov.f32	s0, s14
 8006276:	eef0 0a67 	vmov.f32	s1, s15
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fa37 	bl	80066fe <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80062b2:	461a      	mov	r2, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fa36 	bl	8006726 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4618      	mov	r0, r3
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80062c4:	b5b0      	push	{r4, r5, r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681c      	ldr	r4, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fa38 	bl	800674c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80062dc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80062de:	461a      	mov	r2, r3
 80062e0:	4629      	mov	r1, r5
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fa3d 	bl	8006762 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff ffd5 	bl	800629a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bdb0      	pop	{r4, r5, r7, pc}

080062fa <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	d00d      	beq.n	800632c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	f000 fa3c 	bl	8006796 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f103 0208 	add.w	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800632a:	e008      	b.n	800633e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f81a 	bl	8006366 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8006332:	4603      	mov	r3, r0
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fa55 	bl	80067e8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	f107 030c 	add.w	r3, r7, #12
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fb02 	bl	8006960 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	1d1a      	adds	r2, r3, #4
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	4611      	mov	r1, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f000 faf1 	bl	8006960 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006388:	b590      	push	{r4, r7, lr}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8006394:	4618      	mov	r0, r3
 8006396:	f000 faf3 	bl	8006980 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 800639a:	4622      	mov	r2, r4
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fb01 	bl	80069a6 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd90      	pop	{r4, r7, pc}

080063ac <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	10db      	asrs	r3, r3, #3
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	4413      	add	r3, r2
      }
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fb f8d7 	bl	80015aa <_ZNSt14_Function_baseC1Ev>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8006406:	b580      	push	{r7, lr}
 8006408:	b086      	sub	sp, #24
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8006410:	6838      	ldr	r0, [r7, #0]
 8006412:	f000 faf5 	bl	8006a00 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006416:	4603      	mov	r3, r0
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f000 faf9 	bl	8006a18 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8006426:	f107 0308 	add.w	r3, r7, #8
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f8ca 	bl	80065c6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8006432:	f107 0308 	add.w	r3, r7, #8
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe f862 	bl	8004500 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800643c:	687b      	ldr	r3, [r7, #4]
	}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8006446:	b580      	push	{r7, lr}
 8006448:	b086      	sub	sp, #24
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8006450:	6838      	ldr	r0, [r7, #0]
 8006452:	f000 fb0b 	bl	8006a6c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8006456:	4602      	mov	r2, r0
 8006458:	f107 0308 	add.w	r3, r7, #8
 800645c:	6811      	ldr	r1, [r2, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fb10 	bl	8006a84 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8006464:	f107 0308 	add.w	r3, r7, #8
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 f8ab 	bl	80065c6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8006470:	f107 0308 	add.w	r3, r7, #8
 8006474:	4618      	mov	r0, r3
 8006476:	f7fe f843 	bl	8004500 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800647a:	687b      	ldr	r3, [r7, #4]
	}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fb22 	bl	8006ad8 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006494:	4603      	mov	r3, r0
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 800649e:	b590      	push	{r4, r7, lr}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80064a8:	687c      	ldr	r4, [r7, #4]
 80064aa:	f107 030c 	add.w	r3, r7, #12
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fb1f 	bl	8006af4 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	4619      	mov	r1, r3
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fb25 	bl	8006b0c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}

080064cc <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fb27 	bl	8006b28 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b08b      	sub	sp, #44	; 0x2c
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d021      	beq.n	8006538 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x54>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fb3a 	bl	8006b72 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 80064fe:	6278      	str	r0, [r7, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 8006500:	68b8      	ldr	r0, [r7, #8]
 8006502:	f000 fb49 	bl	8006b98 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8006506:	4603      	mov	r3, r0
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	441a      	add	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
 8006512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006514:	f000 fb4d 	bl	8006bb2 <_ZSt11__addressofImEPT_RS0_>
 8006518:	4601      	mov	r1, r0
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	2200      	movs	r2, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f7fa ffe3 	bl	80014ec <_ZNSt13_Bit_iteratorC1EPmj>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	461a      	mov	r2, r3
 800652a:	f107 0314 	add.w	r3, r7, #20
 800652e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006532:	e882 0003 	stmia.w	r2, {r0, r1}
 8006536:	e011      	b.n	800655c <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x78>
	  }
	else
	  {
	    this->_M_impl._M_end_of_storage = _Bit_pointer();
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(0, 0);
 800653e:	f107 031c 	add.w	r3, r7, #28
 8006542:	2200      	movs	r2, #0
 8006544:	2100      	movs	r1, #0
 8006546:	4618      	mov	r0, r3
 8006548:	f7fa ffd0 	bl	80014ec <_ZNSt13_Bit_iteratorC1EPmj>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	461a      	mov	r2, r3
 8006550:	f107 031c 	add.w	r3, r7, #28
 8006554:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006558:	e882 0003 	stmia.w	r2, {r0, r1}
	  }
	this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
 800655c:	68f9      	ldr	r1, [r7, #12]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	68fc      	ldr	r4, [r7, #12]
 8006562:	463b      	mov	r3, r7
 8006564:	4618      	mov	r0, r3
 8006566:	f7fa fff5 	bl	8001554 <_ZStplRKSt13_Bit_iteratori>
 800656a:	f104 0308 	add.w	r3, r4, #8
 800656e:	463a      	mov	r2, r7
 8006570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006574:	e883 0003 	stmia.w	r3, {r0, r1}

      }
 8006578:	bf00      	nop
 800657a:	372c      	adds	r7, #44	; 0x2c
 800657c:	46bd      	mov	sp, r7
 800657e:	bd90      	pop	{r4, r7, pc}

08006580 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d012      	beq.n	80065be <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 800659e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065a2:	e000      	b.n	80065a6 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 80065a4:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fb0d 	bl	8006bc8 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 80065ae:	4602      	mov	r2, r0
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 80065b4:	461a      	mov	r2, r3
 80065b6:	4621      	mov	r1, r4
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f01c f9b5 	bl	8022928 <memset>
			   * sizeof(_Bit_type));
      }
 80065be:	bf00      	nop
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd90      	pop	{r4, r7, pc}

080065c6 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fb17 	bl	8006c0a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f103 0208 	add.w	r2, r3, #8
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	3308      	adds	r3, #8
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f000 fb40 	bl	8006c6e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f103 020c 	add.w	r2, r3, #12
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f000 fb61 	bl	8006cc2 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800661e:	b590      	push	{r4, r7, lr}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800662a:	68fc      	ldr	r4, [r7, #12]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fb67 	bl	8006d00 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006632:	4602      	mov	r2, r0
 8006634:	f107 0308 	add.w	r3, r7, #8
 8006638:	4619      	mov	r1, r3
 800663a:	4620      	mov	r0, r4
 800663c:	f000 fb6b 	bl	8006d16 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	bd90      	pop	{r4, r7, pc}

0800664a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fb77 	bl	8006d48 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800665a:	4603      	mov	r3, r0
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fb77 	bl	8006d62 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006674:	4603      	mov	r3, r0
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff ffd3 	bl	800664a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80066a4:	4603      	mov	r3, r0
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff ffcd 	bl	800664a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80066b0:	4602      	mov	r2, r0
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d006      	beq.n	80066ca <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fb50 	bl	8006d62 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 80066c2:	4603      	mov	r3, r0
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	4798      	blx	r3
      }
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	605a      	str	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	609a      	str	r2, [r3, #8]
	{ }
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
	if (__p)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fb1c 	bl	8006d7c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	429a      	cmp	r2, r3
 8006774:	d00b      	beq.n	800678e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x2c>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fb0f 	bl	8006d9a <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800677c:	4603      	mov	r3, r0
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fb15 	bl	8006db0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3308      	adds	r3, #8
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e7ef      	b.n	800676e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xc>
					      std::__addressof(*__first));
#endif
    }
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fb12 	bl	8006dcc <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fb17 	bl	8006de2 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 f805 	bl	80067d2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80067c8:	4603      	mov	r3, r0
      }
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80067da:	2301      	movs	r3, #1
      }
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80067e8:	b5b0      	push	{r4, r5, r7, lr}
 80067ea:	b08c      	sub	sp, #48	; 0x30
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80067f4:	4a59      	ldr	r2, [pc, #356]	; (800695c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 80067f6:	2101      	movs	r1, #1
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fb0b 	bl	8006e14 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 80067fe:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff fd9a 	bl	8006346 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8006812:	4603      	mov	r3, r0
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	f107 0214 	add.w	r2, r7, #20
 800681a:	f107 0308 	add.w	r3, r7, #8
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fb3e 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006826:	4603      	mov	r3, r0
 8006828:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fb4c 	bl	8006ecc <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 8006834:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800683a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	18d5      	adds	r5, r2, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fac1 	bl	8006dcc <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800684a:	4603      	mov	r3, r0
 800684c:	461a      	mov	r2, r3
 800684e:	4629      	mov	r1, r5
 8006850:	4620      	mov	r0, r4
 8006852:	f7ff ffa0 	bl	8006796 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006856:	2300      	movs	r3, #0
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800685a:	f7ff ffaf 	bl	80067bc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d027      	beq.n	80068b4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fb57 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800686e:	4603      	mov	r3, r0
 8006870:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff ff69 	bl	800674c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800687a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	4621      	mov	r1, r4
 8006880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006882:	f000 fb37 	bl	8006ef4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 8006886:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	3308      	adds	r3, #8
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800688e:	f107 0308 	add.w	r3, r7, #8
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fb42 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006898:	4603      	mov	r3, r0
 800689a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff ff54 	bl	800674c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80068a4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80068a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a8:	6a39      	ldr	r1, [r7, #32]
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fb22 	bl	8006ef4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 80068b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80068b2:	e026      	b.n	8006902 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80068b4:	f107 0308 	add.w	r3, r7, #8
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fb2f 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80068be:	4603      	mov	r3, r0
 80068c0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff ff41 	bl	800674c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80068ca:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4621      	mov	r1, r4
 80068d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068d2:	f000 fb2e 	bl	8006f32 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 80068d6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	3308      	adds	r3, #8
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80068de:	f107 0308 	add.w	r3, r7, #8
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fb1a 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80068e8:	4603      	mov	r3, r0
 80068ea:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff ff2c 	bl	800674c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80068f4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80068f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f8:	6a39      	ldr	r1, [r7, #32]
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 fb19 	bl	8006f32 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006900:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006902:	f7ff ff5b 	bl	80067bc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006906:	4603      	mov	r3, r0
 8006908:	f083 0301 	eor.w	r3, r3, #1
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d009      	beq.n	8006926 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff ff19 	bl	800674c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	6a39      	ldr	r1, [r7, #32]
 8006920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006922:	f7ff ff1e 	bl	8006762 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006926:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8006932:	461a      	mov	r2, r3
 8006934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006936:	f7ff fef6 	bl	8006726 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006944:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	609a      	str	r2, [r3, #8]
    }
 8006952:	bf00      	nop
 8006954:	3730      	adds	r7, #48	; 0x30
 8006956:	46bd      	mov	sp, r7
 8006958:	bdb0      	pop	{r4, r5, r7, pc}
 800695a:	bf00      	nop
 800695c:	0802644c 	.word	0x0802644c

08006960 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8006980:	b5b0      	push	{r4, r5, r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8006988:	1d3b      	adds	r3, r7, #4
 800698a:	4618      	mov	r0, r3
 800698c:	f000 faea 	bl	8006f64 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8006990:	f107 030c 	add.w	r3, r7, #12
 8006994:	4629      	mov	r1, r5
 8006996:	4618      	mov	r0, r3
 8006998:	f000 faef 	bl	8006f7a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 800699c:	bf00      	nop
 800699e:	4620      	mov	r0, r4
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bdb0      	pop	{r4, r5, r7, pc}

080069a6 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 80069b2:	f107 0208 	add.w	r2, r7, #8
 80069b6:	f107 030c 	add.w	r3, r7, #12
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 faea 	bl	8006f96 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d017      	beq.n	80069f8 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 80069c8:	f107 020c 	add.w	r2, r7, #12
 80069cc:	f107 0308 	add.w	r3, r7, #8
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fa65 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80069d8:	4603      	mov	r3, r0
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fa fc64 	bl	80012a8 <_ZSt4__lgi>
 80069e0:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 80069e2:	005a      	lsls	r2, r3, #1
 80069e4:	793b      	ldrb	r3, [r7, #4]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 faec 	bl	8006fc6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 80069ee:	793a      	ldrb	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fb1e 	bl	8007034 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
	...

08006a18 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fa fdc0 	bl	80015aa <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fb39 	bl	80070a4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00f      	beq.n	8006a58 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006a38:	687c      	ldr	r4, [r7, #4]
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fb41 	bl	80070c4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006a42:	4603      	mov	r3, r0
 8006a44:	4619      	mov	r1, r3
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 fb47 	bl	80070da <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a05      	ldr	r2, [pc, #20]	; (8006a64 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8006a50:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a04      	ldr	r2, [pc, #16]	; (8006a68 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8006a56:	609a      	str	r2, [r3, #8]
      }
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd90      	pop	{r4, r7, pc}
 8006a62:	bf00      	nop
 8006a64:	080070ff 	.word	0x080070ff
 8006a68:	08007141 	.word	0x08007141

08006a6c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fa fd8a 	bl	80015aa <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006a96:	463b      	mov	r3, r7
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fb70 	bl	800717e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00f      	beq.n	8006ac4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006aa4:	687c      	ldr	r4, [r7, #4]
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fb73 	bl	8007194 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 fb79 	bl	80071aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a05      	ldr	r2, [pc, #20]	; (8006ad0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8006abc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a04      	ldr	r2, [pc, #16]	; (8006ad4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8006ac2:	609a      	str	r2, [r3, #8]
      }
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd90      	pop	{r4, r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	080071cf 	.word	0x080071cf
 8006ad4:	08007211 	.word	0x08007211

08006ad8 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fbb3 	bl	800724e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	  _Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
	  : _Bit_alloc_type(__a)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fba5 	bl	8007268 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	  { }
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d018      	beq.n	8006b6a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f844 	bl	8006bc8 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 8006b40:	4602      	mov	r2, r0
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	109b      	asrs	r3, r3, #2
 8006b4a:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8006b4c:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8006b58:	4413      	add	r3, r2
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f000 fb98 	bl	8007292 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fba3 	bl	80072b0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006b72:	b590      	push	{r4, r7, lr}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 8006b7c:	687c      	ldr	r4, [r7, #4]
 8006b7e:	6838      	ldr	r0, [r7, #0]
 8006b80:	f000 f80a 	bl	8006b98 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8006b84:	4603      	mov	r3, r0
 8006b86:	4619      	mov	r1, r3
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fbb1 	bl	80072f0 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd90      	pop	{r4, r7, pc}

08006b98 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	331f      	adds	r3, #31
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	3b04      	subs	r3, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff ffe7 	bl	8006bb2 <_ZSt11__addressofImEPT_RS0_>
 8006be4:	4603      	mov	r3, r0
 8006be6:	3304      	adds	r3, #4
 8006be8:	e000      	b.n	8006bec <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8006bea:	2300      	movs	r3, #0
	}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ffed 	bl	8006bf4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	f107 0308 	add.w	r3, r7, #8
 8006c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c24:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006c28:	6838      	ldr	r0, [r7, #0]
 8006c2a:	f7ff ffe3 	bl	8006bf4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c36:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006c3a:	f107 0308 	add.w	r3, r7, #8
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff ffd8 	bl	8006bf4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006c44:	4602      	mov	r2, r0
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c4c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff ffed 	bl	8006c58 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006c84:	6838      	ldr	r0, [r7, #0]
 8006c86:	f7ff ffe7 	bl	8006c58 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006c92:	f107 030c 	add.w	r3, r7, #12
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff ffde 	bl	8006c58 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	601a      	str	r2, [r3, #0]
    }
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff ffed 	bl	8006cac <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006cd8:	6838      	ldr	r0, [r7, #0]
 8006cda:	f7ff ffe7 	bl	8006cac <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006ce6:	f107 030c 	add.w	r3, r7, #12
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff ffde 	bl	8006cac <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	601a      	str	r2, [r3, #0]
    }
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8006d16:	b5b0      	push	{r4, r5, r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8006d22:	68fc      	ldr	r4, [r7, #12]
 8006d24:	68b8      	ldr	r0, [r7, #8]
 8006d26:	f000 faf1 	bl	800730c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ffe7 	bl	8006d00 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	4629      	mov	r1, r5
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 faf2 	bl	8007322 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bdb0      	pop	{r4, r5, r7, pc}

08006d48 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fb03 	bl	800735e <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fb02 	bl	8007376 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8006d72:	4603      	mov	r3, r0
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 faff 	bl	8007390 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 8006dba:	2200      	movs	r2, #0
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 faf3 	bl	80073aa <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 8006dc4:	bf00      	nop
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 8006de2:	b590      	push	{r4, r7, lr}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ffec 	bl	8006dcc <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006df4:	4604      	mov	r4, r0
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	2008      	movs	r0, #8
 8006dfc:	f7fa fa63 	bl	80012c6 <_ZnwjPv>
 8006e00:	4603      	mov	r3, r0
 8006e02:	4622      	mov	r2, r4
 8006e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e08:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8006e0c:	bf00      	nop
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd90      	pop	{r4, r7, pc}

08006e14 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8006e14:	b590      	push	{r4, r7, lr}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fad1 	bl	80073c8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006e26:	4604      	mov	r4, r0
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff fabf 	bl	80063ac <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	1ae2      	subs	r2, r4, r3
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	bf34      	ite	cc
 8006e38:	2301      	movcc	r3, #1
 8006e3a:	2300      	movcs	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f018 ff7f 	bl	801fd46 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff faaf 	bl	80063ac <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006e4e:	4604      	mov	r4, r0
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff faab 	bl	80063ac <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006e56:	4603      	mov	r3, r0
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	f107 0208 	add.w	r2, r7, #8
 8006e5e:	f107 0310 	add.w	r3, r7, #16
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fac0 	bl	80073ea <_ZSt3maxIjERKT_S2_S2_>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4423      	add	r3, r4
 8006e70:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fa9a 	bl	80063ac <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d306      	bcc.n	8006e8e <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 faa1 	bl	80073c8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006e86:	4602      	mov	r2, r0
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d904      	bls.n	8006e98 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fa9a 	bl	80073c8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006e94:	4603      	mov	r3, r0
 8006e96:	e000      	b.n	8006e9a <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 8006e98:	697b      	ldr	r3, [r7, #20]
      }
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd90      	pop	{r4, r7, pc}

08006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006ea2:	b590      	push	{r4, r7, lr}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f835 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	681c      	ldr	r4, [r3, #0]
 8006eb6:	6838      	ldr	r0, [r7, #0]
 8006eb8:	f000 f830 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	1ae3      	subs	r3, r4, r3
 8006ec2:	10db      	asrs	r3, r3, #3
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd90      	pop	{r4, r7, pc}

08006ecc <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d006      	beq.n	8006eea <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fa96 	bl	8007412 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	e000      	b.n	8006eec <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 8006eea:	2300      	movs	r3, #0
      }
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006f02:	f88d 4000 	strb.w	r4, [sp]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 fa8e 	bl	800742e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 8006f12:	4603      	mov	r3, r0
      }
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd90      	pop	{r4, r7, pc}

08006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006f32:	b590      	push	{r4, r7, lr}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 fa86 	bl	8007452 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8006f46:	4604      	mov	r4, r0
 8006f48:	68b8      	ldr	r0, [r7, #8]
 8006f4a:	f000 fa82 	bl	8007452 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8006f4e:	4601      	mov	r1, r0
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 fa8b 	bl	8007470 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 8006f5a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd90      	pop	{r4, r7, pc}

08006f64 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8006f84:	463b      	mov	r3, r7
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff ffec 	bl	8006f64 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006f96:	b590      	push	{r4, r7, lr}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff ffbb 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	681c      	ldr	r4, [r3, #0]
 8006faa:	6838      	ldr	r0, [r7, #0]
 8006fac:	f7ff ffb6 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	429c      	cmp	r4, r3
 8006fb6:	bf14      	ite	ne
 8006fb8:	2301      	movne	r3, #1
 8006fba:	2300      	moveq	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd90      	pop	{r4, r7, pc}

08006fc6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8006fd4:	f107 020c 	add.w	r2, r7, #12
 8006fd8:	f107 0308 	add.w	r3, r7, #8
 8006fdc:	4611      	mov	r1, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff ff5f 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	bfcc      	ite	gt
 8006fea:	2301      	movgt	r3, #1
 8006fec:	2300      	movle	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01c      	beq.n	800702e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  if (__depth_limit == 0)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8006ffa:	783b      	ldrb	r3, [r7, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 fa66 	bl	80074d2 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 8007006:	e012      	b.n	800702e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3b01      	subs	r3, #1
 800700c:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800700e:	783a      	ldrb	r2, [r7, #0]
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 fa74 	bl	8007500 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 8007018:	4603      	mov	r3, r0
 800701a:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800701c:	783b      	ldrb	r3, [r7, #0]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	6978      	ldr	r0, [r7, #20]
 8007024:	f7ff ffcf 	bl	8006fc6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800702c:	e7d2      	b.n	8006fd4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xe>
    }
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8007040:	f107 020c 	add.w	r2, r7, #12
 8007044:	f107 0308 	add.w	r3, r7, #8
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff ff29 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007050:	4603      	mov	r3, r0
 8007052:	2b10      	cmp	r3, #16
 8007054:	bfcc      	ite	gt
 8007056:	2301      	movgt	r3, #1
 8007058:	2300      	movle	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d018      	beq.n	8007092 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8007060:	f107 030c 	add.w	r3, r7, #12
 8007064:	2110      	movs	r1, #16
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fa8c 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800706c:	4603      	mov	r3, r0
 800706e:	793a      	ldrb	r2, [r7, #4]
 8007070:	4619      	mov	r1, r3
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 fa9e 	bl	80075b4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8007078:	f107 030c 	add.w	r3, r7, #12
 800707c:	2110      	movs	r1, #16
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fa80 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007084:	4603      	mov	r3, r0
 8007086:	793a      	ldrb	r2, [r7, #4]
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fafe 	bl	800768c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 8007090:	e004      	b.n	800709c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8007092:	793a      	ldrb	r2, [r7, #4]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fa8c 	bl	80075b4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bf14      	ite	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	2300      	moveq	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80070da:	b590      	push	{r4, r7, lr}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80070e4:	6838      	ldr	r0, [r7, #0]
 80070e6:	f7ff ffed 	bl	80070c4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80070ea:	4603      	mov	r3, r0
 80070ec:	4622      	mov	r2, r4
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fb03 	bl	80076fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd90      	pop	{r4, r7, pc}

080070fe <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80070fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 fb0e 	bl	800772e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007112:	4604      	mov	r4, r0
 8007114:	68b8      	ldr	r0, [r7, #8]
 8007116:	f7ff fadc 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800711a:	4605      	mov	r5, r0
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff fad8 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007122:	4606      	mov	r6, r0
 8007124:	6838      	ldr	r0, [r7, #0]
 8007126:	f7ff fadf 	bl	80066e8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800712a:	4603      	mov	r3, r0
 800712c:	4632      	mov	r2, r6
 800712e:	4629      	mov	r1, r5
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fb0d 	bl	8007750 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007136:	4603      	mov	r3, r0
      }
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007140 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007140:	b590      	push	{r4, r7, lr}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d109      	bne.n	8007168 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fb20 	bl	800779a <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800715a:	4604      	mov	r4, r0
 800715c:	68b8      	ldr	r0, [r7, #8]
 800715e:	f000 fae6 	bl	800772e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007162:	4603      	mov	r3, r0
 8007164:	6023      	str	r3, [r4, #0]
	    break;
 8007166:	e005      	b.n	8007174 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	461a      	mov	r2, r3
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fb1f 	bl	80077b2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007174:	2300      	movs	r3, #0
      }
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	bd90      	pop	{r4, r7, pc}

0800717e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
	  { return true; }
 8007186:	2301      	movs	r3, #1
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80071aa:	b590      	push	{r4, r7, lr}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80071b4:	6838      	ldr	r0, [r7, #0]
 80071b6:	f7ff ffed 	bl	8007194 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80071ba:	4603      	mov	r3, r0
 80071bc:	4622      	mov	r2, r4
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fb21 	bl	8007808 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd90      	pop	{r4, r7, pc}

080071ce <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80071ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	607a      	str	r2, [r7, #4]
 80071da:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fb2c 	bl	800783a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80071e2:	4604      	mov	r4, r0
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	f7ff fa74 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80071ea:	4605      	mov	r5, r0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fa70 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80071f2:	4606      	mov	r6, r0
 80071f4:	6838      	ldr	r0, [r7, #0]
 80071f6:	f7ff fa77 	bl	80066e8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80071fa:	4603      	mov	r3, r0
 80071fc:	4632      	mov	r2, r6
 80071fe:	4629      	mov	r1, r5
 8007200:	4620      	mov	r0, r4
 8007202:	f000 fb2b 	bl	800785c <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007206:	4603      	mov	r3, r0
      }
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007210 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d109      	bne.n	8007238 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 fb3e 	bl	80078a6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800722a:	4604      	mov	r4, r0
 800722c:	68b8      	ldr	r0, [r7, #8]
 800722e:	f000 fb04 	bl	800783a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8007232:	4603      	mov	r3, r0
 8007234:	6023      	str	r3, [r4, #0]
	    break;
 8007236:	e005      	b.n	8007244 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	461a      	mov	r2, r3
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fb3d 	bl	80078be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007244:	2300      	movs	r3, #0
      }
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	bd90      	pop	{r4, r7, pc}

0800724e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fb5b 	bl	8007914 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800725e:	4603      	mov	r3, r0
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fa f92b 	bl	80014ce <_ZNSt13_Bit_iteratorC1Ev>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3308      	adds	r3, #8
 800727c:	4618      	mov	r0, r3
 800727e:	f7fa f926 	bl	80014ce <_ZNSt13_Bit_iteratorC1Ev>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	611a      	str	r2, [r3, #16]
	{ }
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fb42 	bl	800792c <_ZN2ei7EiAllocImE10deallocateEPmj>
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	  _M_start = _M_finish = _Bit_iterator();
 80072b8:	f107 0308 	add.w	r3, r7, #8
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fa f906 	bl	80014ce <_ZNSt13_Bit_iteratorC1Ev>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3308      	adds	r3, #8
 80072c6:	f107 0208 	add.w	r2, r7, #8
 80072ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f103 0208 	add.w	r2, r3, #8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072de:	e883 0003 	stmia.w	r3, {r0, r1}
	  _M_end_of_storage = _Bit_pointer();
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	611a      	str	r2, [r3, #16]
	}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fb22 	bl	8007946 <_ZN2ei7EiAllocImE8allocateEj>
 8007302:	4603      	mov	r3, r0
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8007322:	b590      	push	{r4, r7, lr}
 8007324:	b085      	sub	sp, #20
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800732e:	68fc      	ldr	r4, [r7, #12]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7ff fce5 	bl	8006d00 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007336:	4603      	mov	r3, r0
 8007338:	4619      	mov	r1, r3
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fb14 	bl	8007968 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	1d1c      	adds	r4, r3, #4
 8007344:	68b8      	ldr	r0, [r7, #8]
 8007346:	f7ff ffe1 	bl	800730c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800734a:	4603      	mov	r3, r0
 800734c:	4619      	mov	r1, r3
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fb1d 	bl	800798e <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}

0800735e <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fb22 	bl	80079b0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 800736c:	4603      	mov	r3, r0
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fb23 	bl	80079cc <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007386:	4603      	mov	r3, r0
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
        allocs[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = allocs.find(p);
        ei_dsp_free(p,size_p->second);
        allocs.erase(size_p);
#else
        ei_dsp_free(p,0);
 800739c:	68b8      	ldr	r0, [r7, #8]
 800739e:	f012 fe19 	bl	8019fd4 <_Z7ei_freePv>
#endif
    }
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 80073aa:	b40e      	push	{r1, r2, r3}
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 80073b4:	6978      	ldr	r0, [r7, #20]
 80073b6:	f000 fb15 	bl	80079e4 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073c4:	b003      	add	sp, #12
 80073c6:	4770      	bx	lr

080073c8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fb2a 	bl	8007a2c <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80073d8:	4603      	mov	r3, r0
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fb0c 	bl	80079f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 80073e0:	4603      	mov	r3, r0
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d201      	bcs.n	8007404 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	e000      	b.n	8007406 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007404:	687b      	ldr	r3, [r7, #4]
    }
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb0f 	bl	8007a42 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 8007424:	4603      	mov	r3, r0
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
 800743a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 fb0e 	bl	8007a64 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007448:	4603      	mov	r3, r0
      }
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800745a:	f107 030c 	add.w	r3, r7, #12
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fb1c 	bl	8007a9e <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007470:	b590      	push	{r4, r7, lr}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8007482:	f107 0208 	add.w	r2, r7, #8
 8007486:	f107 030c 	add.w	r3, r7, #12
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fb18 	bl	8007ac2 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d017      	beq.n	80074c8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x58>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 8007498:	6978      	ldr	r0, [r7, #20]
 800749a:	f7ff fc7e 	bl	8006d9a <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800749e:	4604      	mov	r4, r0
 80074a0:	f107 030c 	add.w	r3, r7, #12
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fb2e 	bl	8007b06 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
 80074ae:	4621      	mov	r1, r4
 80074b0:	6838      	ldr	r0, [r7, #0]
 80074b2:	f000 fb34 	bl	8007b1e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80074b6:	f107 030c 	add.w	r3, r7, #12
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fb12 	bl	8007ae4 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	3308      	adds	r3, #8
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e7dc      	b.n	8007482 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x12>
	  return __cur;
 80074c8:	697b      	ldr	r3, [r7, #20]
    }
 80074ca:	4618      	mov	r0, r3
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd90      	pop	{r4, r7, pc}

080074d2 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 80074e0:	783b      	ldrb	r3, [r7, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 fb2c 	bl	8007b44 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 80074ec:	463b      	mov	r3, r7
 80074ee:	461a      	mov	r2, r3
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fb58 	bl	8007ba8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 80074f8:	bf00      	nop
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8007500:	b590      	push	{r4, r7, lr}
 8007502:	b089      	sub	sp, #36	; 0x24
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800750c:	f107 020c 	add.w	r2, r7, #12
 8007510:	f107 0308 	add.w	r3, r7, #8
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fcc3 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800751c:	4603      	mov	r3, r0
 800751e:	0fda      	lsrs	r2, r3, #31
 8007520:	4413      	add	r3, r2
 8007522:	105b      	asrs	r3, r3, #1
 8007524:	461a      	mov	r2, r3
 8007526:	f107 030c 	add.w	r3, r7, #12
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f829 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007532:	4603      	mov	r3, r0
 8007534:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8007536:	f107 030c 	add.w	r3, r7, #12
 800753a:	2101      	movs	r1, #1
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f821 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007542:	4604      	mov	r4, r0
 8007544:	f107 0308 	add.w	r3, r7, #8
 8007548:	2101      	movs	r1, #1
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fb52 	bl	8007bf4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 8007550:	4602      	mov	r2, r0
 8007552:	793b      	ldrb	r3, [r7, #4]
 8007554:	f88d 3000 	strb.w	r3, [sp]
 8007558:	4613      	mov	r3, r2
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4621      	mov	r1, r4
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 fb7d 	bl	8007c5e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8007564:	f107 030c 	add.w	r3, r7, #12
 8007568:	2101      	movs	r1, #1
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f80a 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007570:	793b      	ldrb	r3, [r7, #4]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	68b9      	ldr	r1, [r7, #8]
 8007576:	f000 fbc7 	bl	8007d08 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 800757a:	4603      	mov	r3, r0
    }
 800757c:	4618      	mov	r0, r3
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	bd90      	pop	{r4, r7, pc}

08007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	4413      	add	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	f107 020c 	add.w	r2, r7, #12
 800759e:	f107 0308 	add.w	r3, r7, #8
 80075a2:	4611      	mov	r1, r2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff f9db 	bl	8006960 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 80075b4:	b5b0      	push	{r4, r5, r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 80075c0:	f107 0208 	add.w	r2, r7, #8
 80075c4:	f107 030c 	add.w	r3, r7, #12
 80075c8:	4611      	mov	r1, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fbe4 	bl	8007d98 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d156      	bne.n	8007684 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80075d6:	f107 030c 	add.w	r3, r7, #12
 80075da:	2101      	movs	r1, #1
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ffd1 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80075e2:	4603      	mov	r3, r0
 80075e4:	61fb      	str	r3, [r7, #28]
 80075e6:	f107 0208 	add.w	r2, r7, #8
 80075ea:	f107 031c 	add.w	r3, r7, #28
 80075ee:	4611      	mov	r1, r2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff fcd0 	bl	8006f96 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d044      	beq.n	8007686 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
	  if (__comp(__i, __first))
 80075fc:	1d3b      	adds	r3, r7, #4
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	69f9      	ldr	r1, [r7, #28]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fb0f 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d02d      	beq.n	800766a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 800760e:	f107 031c 	add.w	r3, r7, #28
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fbe9 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007618:	4603      	mov	r3, r0
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fbf1 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007620:	4602      	mov	r2, r0
 8007622:	f107 0314 	add.w	r3, r7, #20
 8007626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800762a:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800762e:	f107 031c 	add.w	r3, r7, #28
 8007632:	2101      	movs	r1, #1
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff ffa5 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	69f9      	ldr	r1, [r7, #28]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fbe9 	bl	8007e18 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 8007646:	f107 0314 	add.w	r3, r7, #20
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fbd9 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007650:	4604      	mov	r4, r0
 8007652:	f107 030c 	add.w	r3, r7, #12
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fbc7 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800765c:	4603      	mov	r3, r0
 800765e:	4622      	mov	r2, r4
 8007660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007664:	e883 0003 	stmia.w	r3, {r0, r1}
 8007668:	e006      	b.n	8007678 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 800766a:	7938      	ldrb	r0, [r7, #4]
 800766c:	f000 fbec 	bl	8007e48 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007670:	4629      	mov	r1, r5
 8007672:	69f8      	ldr	r0, [r7, #28]
 8007674:	f000 fbfc 	bl	8007e70 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8007678:	f107 031c 	add.w	r3, r7, #28
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fba3 	bl	8007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007682:	e7b0      	b.n	80075e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x32>
      if (__first == __last) return;
 8007684:	bf00      	nop
    }
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bdb0      	pop	{r4, r5, r7, pc}

0800768c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	f107 0208 	add.w	r2, r7, #8
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	4611      	mov	r1, r2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fc75 	bl	8006f96 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00c      	beq.n	80076cc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 80076b2:	7938      	ldrb	r0, [r7, #4]
 80076b4:	f000 fbc8 	bl	8007e48 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 80076b8:	4621      	mov	r1, r4
 80076ba:	6978      	ldr	r0, [r7, #20]
 80076bc:	f000 fbd8 	bl	8007e70 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80076c0:	f107 0314 	add.w	r3, r7, #20
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fb7f 	bl	8007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 80076ca:	e7e7      	b.n	800769c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x10>
    }
 80076cc:	bf00      	nop
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd90      	pop	{r4, r7, pc}

080076d4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d201      	bcs.n	80076ee <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	e000      	b.n	80076f0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80076ee:	687b      	ldr	r3, [r7, #4]
    }
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007708:	68b8      	ldr	r0, [r7, #8]
 800770a:	f7ff fcdb 	bl	80070c4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800770e:	4603      	mov	r3, r0
 8007710:	681c      	ldr	r4, [r3, #0]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7f9 ff33 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 8007718:	4603      	mov	r3, r0
 800771a:	4619      	mov	r1, r3
 800771c:	2004      	movs	r0, #4
 800771e:	f7f9 fdd2 	bl	80012c6 <_ZnwjPv>
 8007722:	4603      	mov	r3, r0
 8007724:	601c      	str	r4, [r3, #0]
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	bd90      	pop	{r4, r7, pc}

0800772e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fbef 	bl	8007f1a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800773c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fbf7 	bl	8007f32 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8007744:	4603      	mov	r3, r0
 8007746:	bf00      	nop
	}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007754:	b086      	sub	sp, #24
 8007756:	af02      	add	r7, sp, #8
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fbf1 	bl	8007f48 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007766:	4604      	mov	r4, r0
 8007768:	68b8      	ldr	r0, [r7, #8]
 800776a:	f7fe ffb2 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800776e:	4605      	mov	r5, r0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fe ffae 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007776:	4606      	mov	r6, r0
 8007778:	6838      	ldr	r0, [r7, #0]
 800777a:	f7fe ffb5 	bl	80066e8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800777e:	4603      	mov	r3, r0
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	4633      	mov	r3, r6
 8007784:	462a      	mov	r2, r5
 8007786:	4621      	mov	r1, r4
 8007788:	4640      	mov	r0, r8
 800778a:	f000 fbe8 	bl	8007f5e <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 800778e:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800779a <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7f9 feeb 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 80077a8:	4603      	mov	r3, r0
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80077b2:	b5b0      	push	{r4, r5, r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	4613      	mov	r3, r2
 80077be:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d016      	beq.n	80077f4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	dc19      	bgt.n	80077fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d002      	beq.n	80077d4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d00a      	beq.n	80077e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80077d2:	e014      	b.n	80077fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff ffe0 	bl	800779a <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80077da:	4604      	mov	r4, r0
 80077dc:	68b8      	ldr	r0, [r7, #8]
 80077de:	f7ff ffa6 	bl	800772e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80077e2:	4603      	mov	r3, r0
 80077e4:	6023      	str	r3, [r4, #0]
	      break;
 80077e6:	e00a      	b.n	80077fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80077e8:	462a      	mov	r2, r5
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 fbda 	bl	8007fa6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80077f2:	e004      	b.n	80077fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80077f4:	4621      	mov	r1, r4
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 fbee 	bl	8007fd8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80077fc:	bf00      	nop
	  return false;
 80077fe:	2300      	movs	r3, #0
	}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bdb0      	pop	{r4, r5, r7, pc}

08007808 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007808:	b590      	push	{r4, r7, lr}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007814:	68b8      	ldr	r0, [r7, #8]
 8007816:	f7ff fcbd 	bl	8007194 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 800781a:	4604      	mov	r4, r0
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f7f9 feae 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 8007822:	4603      	mov	r3, r0
 8007824:	4619      	mov	r1, r3
 8007826:	2004      	movs	r0, #4
 8007828:	f7f9 fd4d 	bl	80012c6 <_ZnwjPv>
 800782c:	4602      	mov	r2, r0
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	bd90      	pop	{r4, r7, pc}

0800783a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fbd4 	bl	8007ff0 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8007848:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fbdc 	bl	8008008 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8007850:	4603      	mov	r3, r0
 8007852:	bf00      	nop
	}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800785c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007860:	b086      	sub	sp, #24
 8007862:	af02      	add	r7, sp, #8
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
 800786a:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 fbd6 	bl	800801e <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8007872:	4604      	mov	r4, r0
 8007874:	68b8      	ldr	r0, [r7, #8]
 8007876:	f7fe ff2c 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800787a:	4605      	mov	r5, r0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fe ff28 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007882:	4606      	mov	r6, r0
 8007884:	6838      	ldr	r0, [r7, #0]
 8007886:	f7fe ff2f 	bl	80066e8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800788a:	4603      	mov	r3, r0
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	4633      	mov	r3, r6
 8007890:	462a      	mov	r2, r5
 8007892:	4621      	mov	r1, r4
 8007894:	4640      	mov	r0, r8
 8007896:	f000 fbcd 	bl	8008034 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800789a:	4603      	mov	r3, r0
    }
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078a6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7f9 fe65 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 80078b4:	4603      	mov	r3, r0
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80078be:	b5b0      	push	{r4, r5, r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	4613      	mov	r3, r2
 80078ca:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d016      	beq.n	8007900 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	dc19      	bgt.n	800790a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d002      	beq.n	80078e0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d00a      	beq.n	80078f4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80078de:	e014      	b.n	800790a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff ffe0 	bl	80078a6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 80078e6:	4604      	mov	r4, r0
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f7ff ffa6 	bl	800783a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80078ee:	4603      	mov	r3, r0
 80078f0:	6023      	str	r3, [r4, #0]
	      break;
 80078f2:	e00a      	b.n	800790a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80078f4:	462a      	mov	r2, r5
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fbbf 	bl	800807c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80078fe:	e004      	b.n	800790a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007900:	4621      	mov	r1, r4
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fbd3 	bl	80080ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007908:	bf00      	nop
	  return false;
 800790a:	2300      	movs	r3, #0
	}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bdb0      	pop	{r4, r5, r7, pc}

08007914 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fbd2 	bl	80080c6 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8007922:	4603      	mov	r3, r0
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 8007938:	68b8      	ldr	r0, [r7, #8]
 800793a:	f012 fb4b 	bl	8019fd4 <_Z7ei_freePv>
    }
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f012 fb22 	bl	8019fa0 <_Z9ei_mallocj>
 800795c:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800795e:	68bb      	ldr	r3, [r7, #8]
    }
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8007968:	b590      	push	{r4, r7, lr}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8007972:	687c      	ldr	r4, [r7, #4]
 8007974:	6838      	ldr	r0, [r7, #0]
 8007976:	f7ff f9c3 	bl	8006d00 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800797a:	4603      	mov	r3, r0
 800797c:	4619      	mov	r1, r3
 800797e:	4620      	mov	r0, r4
 8007980:	f000 fbaf 	bl	80080e2 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	bd90      	pop	{r4, r7, pc}

0800798e <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007998:	6838      	ldr	r0, [r7, #0]
 800799a:	f7ff fcb7 	bl	800730c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800799e:	4603      	mov	r3, r0
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fba1 	bl	8008104 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 80079c2:	4603      	mov	r3, r0
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fba0 	bl	800811a <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 80079da:	4603      	mov	r3, r0
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8007a00:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007a04:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fb94 	bl	8008134 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007a10:	f107 0208 	add.w	r2, r7, #8
 8007a14:	f107 030c 	add.w	r3, r7, #12
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fe5a 	bl	80076d4 <_ZSt3minIjERKT_S2_S2_>
 8007a20:	4603      	mov	r3, r0
 8007a22:	681b      	ldr	r3, [r3, #0]
      }
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f012 faa4 	bl	8019fa0 <_Z9ei_mallocj>
 8007a58:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
    }
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007a64:	b5b0      	push	{r4, r5, r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fb6b 	bl	800814e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	68b8      	ldr	r0, [r7, #8]
 8007a7c:	f000 fb67 	bl	800814e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007a80:	4605      	mov	r5, r0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fb63 	bl	800814e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fb68 	bl	8008164 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007a94:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bdb0      	pop	{r4, r5, r7, pc}

08007a9e <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fb80 	bl	80081b0 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb79 	bl	80081c6 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f083 0301 	eor.w	r3, r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f103 0208 	add.w	r2, r3, #8
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
	return *this;
 8007af8:	687b      	ldr	r3, [r7, #4]
      }
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fb61 	bl	80081f2 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007b30:	4603      	mov	r3, r0
 8007b32:	461a      	mov	r2, r3
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fb66 	bl	8008208 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8007b52:	463b      	mov	r3, r7
 8007b54:	461a      	mov	r2, r3
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fb6e 	bl	800823a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	1d3a      	adds	r2, r7, #4
 8007b64:	f107 0314 	add.w	r3, r7, #20
 8007b68:	4611      	mov	r1, r2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fbc4 	bl	80082f8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d014      	beq.n	8007ba0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x5c>
	if (__comp(__i, __first))
 8007b76:	463b      	mov	r3, r7
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	6979      	ldr	r1, [r7, #20]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f852 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8007b88:	463b      	mov	r3, r7
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fbca 	bl	8008328 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 f915 	bl	8007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007b9e:	e7e0      	b.n	8007b62 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x1e>
    }
 8007ba0:	bf00      	nop
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8007bb4:	f107 020c 	add.w	r2, r7, #12
 8007bb8:	f107 0308 	add.w	r3, r7, #8
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff f96f 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	bfcc      	ite	gt
 8007bca:	2301      	movgt	r3, #1
 8007bcc:	2300      	movle	r3, #0
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x44>
	{
	  --__last;
 8007bd4:	f107 0308 	add.w	r3, r7, #8
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fbf1 	bl	80083c0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fb9f 	bl	8008328 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 8007bea:	e7e3      	b.n	8007bb4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xc>
	}
    }
 8007bec:	bf00      	nop
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	425b      	negs	r3, r3
 8007c08:	4413      	add	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	f107 020c 	add.w	r2, r7, #12
 8007c10:	f107 0308 	add.w	r3, r7, #8
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe fea2 	bl	8006960 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8007c26:	b5b0      	push	{r4, r5, r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8007c32:	68fc      	ldr	r4, [r7, #12]
 8007c34:	f107 0308 	add.w	r3, r7, #8
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f8d6 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007c3e:	4605      	mov	r5, r0
 8007c40:	1d3b      	adds	r3, r7, #4
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f8d1 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7fb fa48 	bl	80030e4 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8007c54:	4603      	mov	r3, r0
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bdb0      	pop	{r4, r5, r7, pc}

08007c5e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	f107 0018 	add.w	r0, r7, #24
 8007c74:	f7ff ffd7 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d020      	beq.n	8007cc0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	f107 0018 	add.w	r0, r7, #24
 8007c86:	f7ff ffce 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fba5 	bl	80083e2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007c98:	e032      	b.n	8007d00 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	f107 0018 	add.w	r0, r7, #24
 8007ca2:	f7ff ffc0 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 fb97 	bl	80083e2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007cb4:	e024      	b.n	8007d00 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fb92 	bl	80083e2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007cbe:	e01f      	b.n	8007d00 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	f107 0018 	add.w	r0, r7, #24
 8007cc8:	f7ff ffad 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 fb84 	bl	80083e2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007cda:	e011      	b.n	8007d00 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	f107 0018 	add.w	r0, r7, #24
 8007ce4:	f7ff ff9f 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d004      	beq.n	8007cf8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fb76 	bl	80083e2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007cf6:	e003      	b.n	8007d00 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fb71 	bl	80083e2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8007d16:	463b      	mov	r3, r7
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff ff82 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x2c>
	    ++__first;
 8007d28:	f107 030c 	add.w	r3, r7, #12
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f84b 	bl	8007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 8007d32:	e7f0      	b.n	8007d16 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
	  --__last;
 8007d34:	f107 0308 	add.w	r3, r7, #8
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fb41 	bl	80083c0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8007d3e:	463b      	mov	r3, r7
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff ff6e 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x54>
	    --__last;
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fb33 	bl	80083c0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8007d5a:	e7f0      	b.n	8007d3e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x36>
	  if (!(__first < __last))
 8007d5c:	f107 0208 	add.w	r2, r7, #8
 8007d60:	f107 030c 	add.w	r3, r7, #12
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fac6 	bl	80082f8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f083 0301 	eor.w	r3, r3, #1
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	e009      	b.n	8007d90 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fb2f 	bl	80083e2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 8007d84:	f107 030c 	add.w	r3, r7, #12
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 f81d 	bl	8007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 8007d8e:	e7c2      	b.n	8007d16 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
    }
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007d98:	b590      	push	{r4, r7, lr}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff f8ba 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8007da8:	4603      	mov	r3, r0
 8007daa:	681c      	ldr	r4, [r3, #0]
 8007dac:	6838      	ldr	r0, [r7, #0]
 8007dae:	f7ff f8b5 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8007db2:	4603      	mov	r3, r0
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429c      	cmp	r4, r3
 8007db8:	bf0c      	ite	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	2300      	movne	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd90      	pop	{r4, r7, pc}

08007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f103 0208 	add.w	r2, r3, #8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
	return *this;
 8007ddc:	687b      	ldr	r3, [r7, #4]
      }
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 faf3 	bl	8008410 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	68b8      	ldr	r0, [r7, #8]
 8007e2e:	f000 faef 	bl	8008410 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8007e32:	4603      	mov	r3, r0
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	4619      	mov	r1, r3
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 faf4 	bl	8008426 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 8007e3e:	4603      	mov	r3, r0
    }
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd90      	pop	{r4, r7, pc}

08007e48 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8007e50:	1d3b      	adds	r3, r7, #4
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fb08 	bl	8008468 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	f107 030c 	add.w	r3, r7, #12
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fb0c 	bl	800847e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8007e66:	bf00      	nop
 8007e68:	4620      	mov	r0, r4
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd90      	pop	{r4, r7, pc}

08007e70 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8007e70:	b590      	push	{r4, r7, lr}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8007e7a:	1d3b      	adds	r3, r7, #4
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff ffb4 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007e82:	4603      	mov	r3, r0
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff ffbc 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	f107 0310 	add.w	r3, r7, #16
 8007e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e94:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]
      --__next;
 8007e9c:	f107 030c 	add.w	r3, r7, #12
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fa8d 	bl	80083c0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 8007ea6:	f107 0110 	add.w	r1, r7, #16
 8007eaa:	463b      	mov	r3, r7
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 faf3 	bl	800849a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01b      	beq.n	8007ef2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 8007eba:	f107 030c 	add.w	r3, r7, #12
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff ff93 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff ff9b 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007ecc:	4604      	mov	r4, r0
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7ff ff8a 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4622      	mov	r2, r4
 8007eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ede:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	607b      	str	r3, [r7, #4]
	  --__next;
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fa68 	bl	80083c0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 8007ef0:	e7d9      	b.n	8007ea6 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 8007ef2:	f107 0310 	add.w	r3, r7, #16
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff ff83 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007efc:	4604      	mov	r4, r0
 8007efe:	1d3b      	adds	r3, r7, #4
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff ff72 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4622      	mov	r2, r4
 8007f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd90      	pop	{r4, r7, pc}

08007f1a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7f9 fb36 	bl	8001594 <_ZNKSt9_Any_data9_M_accessEv>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8007f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f60:	b085      	sub	sp, #20
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	7338      	strb	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007f6c:	68b8      	ldr	r0, [r7, #8]
 8007f6e:	f7ff ffeb 	bl	8007f48 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007f72:	4603      	mov	r3, r0
 8007f74:	681c      	ldr	r4, [r3, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fe fbab 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	681d      	ldr	r5, [r3, #0]
 8007f80:	6838      	ldr	r0, [r7, #0]
 8007f82:	f7fe fba6 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007f86:	4603      	mov	r3, r0
 8007f88:	681e      	ldr	r6, [r3, #0]
 8007f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8c:	f7fe fbac 	bl	80066e8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007f90:	4603      	mov	r3, r0
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	4631      	mov	r1, r6
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47a0      	blx	r4
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fa6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8007fa6:	b590      	push	{r4, r7, lr}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8007fb2:	68b8      	ldr	r0, [r7, #8]
 8007fb4:	f7ff ffb1 	bl	8007f1a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	681c      	ldr	r4, [r3, #0]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7f9 fade 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	2004      	movs	r0, #4
 8007fc8:	f7f9 f97d 	bl	80012c6 <_ZnwjPv>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	601c      	str	r4, [r3, #0]
	}
 8007fd0:	bf00      	nop
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd90      	pop	{r4, r7, pc}

08007fd8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa6f 	bl	80084c6 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7f9 facb 	bl	8001594 <_ZNKSt9_Any_data9_M_accessEv>
 8007ffe:	4603      	mov	r3, r0
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4618      	mov	r0, r3
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	7338      	strb	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008042:	68b8      	ldr	r0, [r7, #8]
 8008044:	f7ff ffeb 	bl	800801e <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8008048:	4606      	mov	r6, r0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7fe fb41 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008050:	4603      	mov	r3, r0
 8008052:	681c      	ldr	r4, [r3, #0]
 8008054:	6838      	ldr	r0, [r7, #0]
 8008056:	f7fe fb3c 	bl	80066d2 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800805a:	4603      	mov	r3, r0
 800805c:	681d      	ldr	r5, [r3, #0]
 800805e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008060:	f7fe fb42 	bl	80066e8 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008064:	4603      	mov	r3, r0
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	462a      	mov	r2, r5
 800806a:	4621      	mov	r1, r4
 800806c:	4630      	mov	r0, r6
 800806e:	f7fc fe2a 	bl	8004cc6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8008072:	4603      	mov	r3, r0
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800807c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800807c:	b590      	push	{r4, r7, lr}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8008088:	68b8      	ldr	r0, [r7, #8]
 800808a:	f7ff ffb1 	bl	8007ff0 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800808e:	4604      	mov	r4, r0
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7f9 fa74 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 8008096:	4603      	mov	r3, r0
 8008098:	4619      	mov	r1, r3
 800809a:	2004      	movs	r0, #4
 800809c:	f7f9 f913 	bl	80012c6 <_ZnwjPv>
 80080a0:	4602      	mov	r2, r0
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	6013      	str	r3, [r2, #0]
	}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd90      	pop	{r4, r7, pc}

080080ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fa10 	bl	80084de <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fa0f 	bl	80084f6 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 80080d8:	4603      	mov	r3, r0
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80080ec:	6838      	ldr	r0, [r7, #0]
 80080ee:	f7fe fe07 	bl	8006d00 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80080f2:	4603      	mov	r3, r0
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f9f1 	bl	800850c <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800812a:	4603      	mov	r3, r0
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f9ef 	bl	8008522 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 8008144:	4603      	mov	r3, r0
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8008164:	b590      	push	{r4, r7, lr}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	429a      	cmp	r2, r3
 800817c:	d013      	beq.n	80081a6 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800817e:	6978      	ldr	r0, [r7, #20]
 8008180:	f7fe fe0b 	bl	8006d9a <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008184:	4604      	mov	r4, r0
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7fe fe07 	bl	8006d9a <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800818c:	4603      	mov	r3, r0
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	4619      	mov	r1, r3
 8008192:	4620      	mov	r0, r4
 8008194:	f000 f9d0 	bl	8008538 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3308      	adds	r3, #8
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	3308      	adds	r3, #8
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	e7e7      	b.n	8008176 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x12>
      return __cur;
 80081a6:	697b      	ldr	r3, [r7, #20]
    }
 80081a8:	4618      	mov	r0, r3
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd90      	pop	{r4, r7, pc}

080081b0 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 80081c6:	b590      	push	{r4, r7, lr}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f9cc 	bl	800856e <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 80081d6:	4604      	mov	r4, r0
 80081d8:	6838      	ldr	r0, [r7, #0]
 80081da:	f000 f9c8 	bl	800856e <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 80081de:	4603      	mov	r3, r0
 80081e0:	429c      	cmp	r4, r3
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	4618      	mov	r0, r3
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd90      	pop	{r4, r7, pc}

080081f2 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff ffec 	bl	80081f2 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800821a:	4604      	mov	r4, r0
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4619      	mov	r1, r3
 8008220:	2008      	movs	r0, #8
 8008222:	f7f9 f850 	bl	80012c6 <_ZnwjPv>
 8008226:	4603      	mov	r3, r0
 8008228:	4622      	mov	r2, r4
 800822a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800822e:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8008232:	bf00      	nop
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	bd90      	pop	{r4, r7, pc}

0800823a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800823a:	b580      	push	{r7, lr}
 800823c:	b08a      	sub	sp, #40	; 0x28
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8008246:	f107 020c 	add.w	r2, r7, #12
 800824a:	f107 0308 	add.w	r3, r7, #8
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fe26 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8008256:	4603      	mov	r3, r0
 8008258:	2b01      	cmp	r3, #1
 800825a:	bfd4      	ite	le
 800825c:	2301      	movle	r3, #1
 800825e:	2300      	movgt	r3, #0
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d142      	bne.n	80082ec <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 8008266:	f107 020c 	add.w	r2, r7, #12
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe fe16 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8008276:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	3b02      	subs	r3, #2
 800827c:	0fda      	lsrs	r2, r3, #31
 800827e:	4413      	add	r3, r2
 8008280:	105b      	asrs	r3, r3, #1
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8008284:	f107 030c 	add.w	r3, r7, #12
 8008288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff f97a 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008290:	4603      	mov	r3, r0
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	f107 031c 	add.w	r3, r7, #28
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fda6 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800829e:	4603      	mov	r3, r0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff fdae 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80082a6:	4602      	mov	r2, r0
 80082a8:	f107 0314 	add.w	r3, r7, #20
 80082ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082b0:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff fda2 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80082be:	4603      	mov	r3, r0
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	ed93 7a00 	vldr	s14, [r3]
 80082c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80082ca:	7813      	ldrb	r3, [r2, #0]
 80082cc:	eeb0 0a47 	vmov.f32	s0, s14
 80082d0:	eef0 0a67 	vmov.f32	s1, s15
 80082d4:	6a3a      	ldr	r2, [r7, #32]
 80082d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f954 	bl	8008586 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb6>
	  __parent--;
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	3b01      	subs	r3, #1
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 80082ea:	e7cb      	b.n	8008284 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4a>
	return;
 80082ec:	bf00      	nop
 80082ee:	e000      	b.n	80082f2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	    return;
 80082f0:	bf00      	nop
    }
 80082f2:	3728      	adds	r7, #40	; 0x28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 80082f8:	b590      	push	{r4, r7, lr}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fe fe0a 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008308:	4603      	mov	r3, r0
 800830a:	681c      	ldr	r4, [r3, #0]
 800830c:	6838      	ldr	r0, [r7, #0]
 800830e:	f7fe fe05 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008312:	4603      	mov	r3, r0
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429c      	cmp	r4, r3
 8008318:	bf34      	ite	cc
 800831a:	2301      	movcc	r3, #1
 800831c:	2300      	movcs	r3, #0
 800831e:	b2db      	uxtb	r3, r3
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	bd90      	pop	{r4, r7, pc}

08008328 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008328:	b590      	push	{r4, r7, lr}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8008336:	1d3b      	adds	r3, r7, #4
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fd56 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800833e:	4603      	mov	r3, r0
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fd5e 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008346:	4602      	mov	r2, r0
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008350:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fd46 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800835e:	4603      	mov	r3, r0
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff fd4e 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008366:	4604      	mov	r4, r0
 8008368:	1d3b      	adds	r3, r7, #4
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fd3d 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008370:	4603      	mov	r3, r0
 8008372:	4622      	mov	r2, r4
 8008374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008378:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 800837c:	f107 020c 	add.w	r2, r7, #12
 8008380:	f107 0308 	add.w	r3, r7, #8
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fd8b 	bl	8006ea2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800838c:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800838e:	f107 0310 	add.w	r3, r7, #16
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fd35 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008398:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	ed93 7a00 	vldr	s14, [r3]
 80083a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80083a4:	7813      	ldrb	r3, [r2, #0]
 80083a6:	eeb0 0a47 	vmov.f32	s0, s14
 80083aa:	eef0 0a67 	vmov.f32	s1, s15
 80083ae:	4622      	mov	r2, r4
 80083b0:	2100      	movs	r1, #0
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 f8e7 	bl	8008586 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 80083b8:	bf00      	nop
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd90      	pop	{r4, r7, pc}

080083c0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	--_M_current;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f1a3 0208 	sub.w	r2, r3, #8
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
	return *this;
 80083d4:	687b      	ldr	r3, [r7, #4]
      }
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80083e2:	b590      	push	{r4, r7, lr}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80083ec:	1d3b      	adds	r3, r7, #4
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff fcfb 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80083f4:	4604      	mov	r4, r0
 80083f6:	463b      	mov	r3, r7
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff fcf6 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80083fe:	4603      	mov	r3, r0
 8008400:	4619      	mov	r1, r3
 8008402:	4620      	mov	r0, r4
 8008404:	f000 f982 	bl	800870c <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	bd90      	pop	{r4, r7, pc}

08008410 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4618      	mov	r0, r3
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8008426:	b5b0      	push	{r4, r5, r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 f991 	bl	800875a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008438:	4604      	mov	r4, r0
 800843a:	68b8      	ldr	r0, [r7, #8]
 800843c:	f000 f98d 	bl	800875a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008440:	4605      	mov	r5, r0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f989 	bl	800875a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	4629      	mov	r1, r5
 800844e:	4620      	mov	r0, r4
 8008450:	f000 f991 	bl	8008776 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008454:	4603      	mov	r3, r0
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f99c 	bl	8008796 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 800845e:	4603      	mov	r3, r0
    }
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bdb0      	pop	{r4, r5, r7, pc}

08008468 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fd6a 	bl	8006f64 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 800849a:	b590      	push	{r4, r7, lr}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 80084a6:	68fc      	ldr	r4, [r7, #12]
 80084a8:	1d3b      	adds	r3, r7, #4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fc9d 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80084b0:	4603      	mov	r3, r0
 80084b2:	461a      	mov	r2, r3
 80084b4:	68b9      	ldr	r1, [r7, #8]
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7fa fe14 	bl	80030e4 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80084bc:	4603      	mov	r3, r0
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd90      	pop	{r4, r7, pc}

080084c6 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7f9 f855 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 80084d4:	4603      	mov	r3, r0
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7f9 f849 	bl	800157e <_ZNSt9_Any_data9_M_accessEv>
 80084ec:	4603      	mov	r3, r0
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 8008522:	b40f      	push	{r0, r1, r2, r3}
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 8008528:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 800852c:	4618      	mov	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	b004      	add	sp, #16
 8008536:	4770      	bx	lr

08008538 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8008544:	68b8      	ldr	r0, [r7, #8]
 8008546:	f7ff fc5c 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fae4 	bl	8007b1e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8008556:	68b8      	ldr	r0, [r7, #8]
 8008558:	f7fe fc1f 	bl	8006d9a <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800855c:	4603      	mov	r3, r0
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7fe fc25 	bl	8006db0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 8008566:	bf00      	nop
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 800856e:	b480      	push	{r7}
 8008570:	b083      	sub	sp, #12
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8008586:	b590      	push	{r4, r7, lr}
 8008588:	b08f      	sub	sp, #60	; 0x3c
 800858a:	af00      	add	r7, sp, #0
 800858c:	6178      	str	r0, [r7, #20]
 800858e:	6139      	str	r1, [r7, #16]
 8008590:	60fa      	str	r2, [r7, #12]
 8008592:	eeb0 7a40 	vmov.f32	s14, s0
 8008596:	eef0 7a60 	vmov.f32	s15, s1
 800859a:	703b      	strb	r3, [r7, #0]
 800859c:	ed87 7a01 	vstr	s14, [r7, #4]
 80085a0:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	0fda      	lsrs	r2, r3, #31
 80085b2:	4413      	add	r3, r2
 80085b4:	105b      	asrs	r3, r3, #1
 80085b6:	461a      	mov	r2, r3
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	4293      	cmp	r3, r2
 80085bc:	da46      	bge.n	800864c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 80085be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c0:	3301      	adds	r3, #1
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe ffd9 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80085d2:	4604      	mov	r4, r0
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	1e5a      	subs	r2, r3, #1
 80085d8:	f107 0314 	add.w	r3, r7, #20
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe ffd0 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80085e4:	4602      	mov	r2, r0
 80085e6:	463b      	mov	r3, r7
 80085e8:	4621      	mov	r1, r4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fb1b 	bl	8007c26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x76>
	    __secondChild--;
 80085f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f8:	3b01      	subs	r3, #1
 80085fa:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80085fc:	f107 0314 	add.w	r3, r7, #20
 8008600:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe ffbe 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008608:	4603      	mov	r3, r0
 800860a:	623b      	str	r3, [r7, #32]
 800860c:	f107 0320 	add.w	r3, r7, #32
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fbea 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008616:	4603      	mov	r3, r0
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff fbf2 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800861e:	4604      	mov	r4, r0
 8008620:	f107 0314 	add.w	r3, r7, #20
 8008624:	6939      	ldr	r1, [r7, #16]
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe ffac 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800862c:	4603      	mov	r3, r0
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
 8008630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fbd8 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800863a:	4603      	mov	r3, r0
 800863c:	4622      	mov	r2, r4
 800863e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008642:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800864a:	e7af      	b.n	80085ac <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d136      	bne.n	80086c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3b02      	subs	r3, #2
 800865a:	0fda      	lsrs	r2, r3, #31
 800865c:	4413      	add	r3, r2
 800865e:	105b      	asrs	r3, r3, #1
 8008660:	461a      	mov	r2, r3
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	4293      	cmp	r3, r2
 8008666:	d12d      	bne.n	80086c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	3301      	adds	r3, #1
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8008670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008672:	1e5a      	subs	r2, r3, #1
 8008674:	f107 0314 	add.w	r3, r7, #20
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe ff82 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008680:	4603      	mov	r3, r0
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28
 8008684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff fbae 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800868e:	4603      	mov	r3, r0
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fbb6 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008696:	4604      	mov	r4, r0
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	6939      	ldr	r1, [r7, #16]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe ff70 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80086a4:	4603      	mov	r3, r0
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fb9c 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80086b2:	4603      	mov	r3, r0
 80086b4:	4622      	mov	r2, r4
 80086b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086ba:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	3b01      	subs	r3, #1
 80086c2:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 80086c4:	463b      	mov	r3, r7
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff fece 	bl	8008468 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 80086cc:	4602      	mov	r2, r0
 80086ce:	f107 031c 	add.w	r3, r7, #28
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 f875 	bl	80087c4 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 80086da:	1d3b      	adds	r3, r7, #4
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fb90 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80086e2:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 80086e4:	f107 021c 	add.w	r2, r7, #28
 80086e8:	ed93 7a00 	vldr	s14, [r3]
 80086ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	eeb0 0a47 	vmov.f32	s0, s14
 80086f6:	eef0 0a67 	vmov.f32	s1, s15
 80086fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fc:	6939      	ldr	r1, [r7, #16]
 80086fe:	6978      	ldr	r0, [r7, #20]
 8008700:	f000 f86e 	bl	80087e0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 8008704:	bf00      	nop
 8008706:	373c      	adds	r7, #60	; 0x3c
 8008708:	46bd      	mov	sp, r7
 800870a:	bd90      	pop	{r4, r7, pc}

0800870c <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff fb73 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800871c:	4602      	mov	r2, r0
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008726:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800872a:	6838      	ldr	r0, [r7, #0]
 800872c:	f7ff fb69 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008730:	4602      	mov	r2, r0
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008738:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800873c:	f107 0308 	add.w	r3, r7, #8
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff fb5e 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008746:	4602      	mov	r2, r0
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800874e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8008762:	1d3b      	adds	r3, r7, #4
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe fbd9 	bl	8006f1c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800876a:	4603      	mov	r3, r0
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f8a1 	bl	80088ce <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800878c:	4603      	mov	r3, r0
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff ffda 	bl	800875a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 80087a6:	4602      	mov	r2, r0
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	10db      	asrs	r3, r3, #3
 80087ae:	461a      	mov	r2, r3
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fee5 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80087ba:	4603      	mov	r3, r0
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fbc7 	bl	8006f64 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 80087e0:	b590      	push	{r4, r7, lr}
 80087e2:	b08b      	sub	sp, #44	; 0x2c
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6178      	str	r0, [r7, #20]
 80087e8:	6139      	str	r1, [r7, #16]
 80087ea:	60fa      	str	r2, [r7, #12]
 80087ec:	eeb0 7a40 	vmov.f32	s14, s0
 80087f0:	eef0 7a60 	vmov.f32	s15, s1
 80087f4:	603b      	str	r3, [r7, #0]
 80087f6:	ed87 7a01 	vstr	s14, [r7, #4]
 80087fa:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	3b01      	subs	r3, #1
 8008802:	0fda      	lsrs	r2, r3, #31
 8008804:	4413      	add	r3, r2
 8008806:	105b      	asrs	r3, r3, #1
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	429a      	cmp	r2, r3
 8008810:	dd10      	ble.n	8008834 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008812:	f107 0314 	add.w	r3, r7, #20
 8008816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe feb3 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800881e:	4601      	mov	r1, r0
 8008820:	1d3b      	adds	r3, r7, #4
 8008822:	461a      	mov	r2, r3
 8008824:	6838      	ldr	r0, [r7, #0]
 8008826:	f000 f862 	bl	80088ee <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x56>
 8008834:	2300      	movs	r3, #0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d02d      	beq.n	8008896 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800883a:	f107 0314 	add.w	r3, r7, #20
 800883e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fe9f 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008846:	4603      	mov	r3, r0
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	f107 0318 	add.w	r3, r7, #24
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff facb 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008854:	4603      	mov	r3, r0
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff fad3 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800885c:	4604      	mov	r4, r0
 800885e:	f107 0314 	add.w	r3, r7, #20
 8008862:	6939      	ldr	r1, [r7, #16]
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe fe8d 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800886a:	4603      	mov	r3, r0
 800886c:	61fb      	str	r3, [r7, #28]
 800886e:	f107 031c 	add.w	r3, r7, #28
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fab9 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008878:	4603      	mov	r3, r0
 800887a:	4622      	mov	r2, r4
 800887c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008880:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	3b01      	subs	r3, #1
 800888c:	0fda      	lsrs	r2, r3, #31
 800888e:	4413      	add	r3, r2
 8008890:	105b      	asrs	r3, r3, #1
 8008892:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8008894:	e7b9      	b.n	800880a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8008896:	1d3b      	adds	r3, r7, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff fab2 	bl	8007e02 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800889e:	4604      	mov	r4, r0
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	6939      	ldr	r1, [r7, #16]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fe6c 	bl	8007584 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80088ac:	4603      	mov	r3, r0
 80088ae:	623b      	str	r3, [r7, #32]
 80088b0:	f107 0320 	add.w	r3, r7, #32
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fa98 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4622      	mov	r2, r4
 80088be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80088c6:	bf00      	nop
 80088c8:	372c      	adds	r7, #44	; 0x2c
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd90      	pop	{r4, r7, pc}

080088ce <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f81c 	bl	800891c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 80088e4:	4603      	mov	r3, r0
    }
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 80088ee:	b590      	push	{r4, r7, lr}
 80088f0:	b085      	sub	sp, #20
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80088fa:	68fc      	ldr	r4, [r7, #12]
 80088fc:	f107 0308 	add.w	r3, r7, #8
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fa72 	bl	8007dea <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008906:	4603      	mov	r3, r0
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4619      	mov	r1, r3
 800890c:	4620      	mov	r0, r4
 800890e:	f7fa fbe9 	bl	80030e4 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008912:	4603      	mov	r3, r0
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	bd90      	pop	{r4, r7, pc}

0800891c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	10db      	asrs	r3, r3, #3
 8008930:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	425b      	negs	r3, r3
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	18d0      	adds	r0, r2, r3
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	461a      	mov	r2, r3
 8008948:	68f9      	ldr	r1, [r7, #12]
 800894a:	f019 ffd3 	bl	80228f4 <memmove>
	  return __result - _Num;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	425b      	negs	r3, r3
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	4413      	add	r3, r2
	}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008966:	2300      	movs	r3, #0
 8008968:	607b      	str	r3, [r7, #4]
 800896a:	4b10      	ldr	r3, [pc, #64]	; (80089ac <HAL_MspInit+0x4c>)
 800896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896e:	4a0f      	ldr	r2, [pc, #60]	; (80089ac <HAL_MspInit+0x4c>)
 8008970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008974:	6453      	str	r3, [r2, #68]	; 0x44
 8008976:	4b0d      	ldr	r3, [pc, #52]	; (80089ac <HAL_MspInit+0x4c>)
 8008978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897e:	607b      	str	r3, [r7, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008982:	2300      	movs	r3, #0
 8008984:	603b      	str	r3, [r7, #0]
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <HAL_MspInit+0x4c>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	4a08      	ldr	r2, [pc, #32]	; (80089ac <HAL_MspInit+0x4c>)
 800898c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008990:	6413      	str	r3, [r2, #64]	; 0x40
 8008992:	4b06      	ldr	r3, [pc, #24]	; (80089ac <HAL_MspInit+0x4c>)
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800899e:	2007      	movs	r0, #7
 80089a0:	f000 fb14 	bl	8008fcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	40023800 	.word	0x40023800

080089b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a0b      	ldr	r2, [pc, #44]	; (80089ec <HAL_CRC_MspInit+0x3c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d10d      	bne.n	80089de <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <HAL_CRC_MspInit+0x40>)
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	4a09      	ldr	r2, [pc, #36]	; (80089f0 <HAL_CRC_MspInit+0x40>)
 80089cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089d0:	6313      	str	r3, [r2, #48]	; 0x30
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <HAL_CRC_MspInit+0x40>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40023000 	.word	0x40023000
 80089f0:	40023800 	.word	0x40023800

080089f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08a      	sub	sp, #40	; 0x28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	605a      	str	r2, [r3, #4]
 8008a06:	609a      	str	r2, [r3, #8]
 8008a08:	60da      	str	r2, [r3, #12]
 8008a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a19      	ldr	r2, [pc, #100]	; (8008a78 <HAL_SPI_MspInit+0x84>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d12b      	bne.n	8008a6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	4b18      	ldr	r3, [pc, #96]	; (8008a7c <HAL_SPI_MspInit+0x88>)
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1e:	4a17      	ldr	r2, [pc, #92]	; (8008a7c <HAL_SPI_MspInit+0x88>)
 8008a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a24:	6453      	str	r3, [r2, #68]	; 0x44
 8008a26:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <HAL_SPI_MspInit+0x88>)
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <HAL_SPI_MspInit+0x88>)
 8008a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3a:	4a10      	ldr	r2, [pc, #64]	; (8008a7c <HAL_SPI_MspInit+0x88>)
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	6313      	str	r3, [r2, #48]	; 0x30
 8008a42:	4b0e      	ldr	r3, [pc, #56]	; (8008a7c <HAL_SPI_MspInit+0x88>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008a4e:	23e0      	movs	r3, #224	; 0xe0
 8008a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a52:	2302      	movs	r3, #2
 8008a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008a5e:	2305      	movs	r3, #5
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a62:	f107 0314 	add.w	r3, r7, #20
 8008a66:	4619      	mov	r1, r3
 8008a68:	4805      	ldr	r0, [pc, #20]	; (8008a80 <HAL_SPI_MspInit+0x8c>)
 8008a6a:	f000 fb0d 	bl	8009088 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008a6e:	bf00      	nop
 8008a70:	3728      	adds	r7, #40	; 0x28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40013000 	.word	0x40013000
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	40020000 	.word	0x40020000

08008a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008a88:	e7fe      	b.n	8008a88 <NMI_Handler+0x4>

08008a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a8e:	e7fe      	b.n	8008a8e <HardFault_Handler+0x4>

08008a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a94:	e7fe      	b.n	8008a94 <MemManage_Handler+0x4>

08008a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a96:	b480      	push	{r7}
 8008a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a9a:	e7fe      	b.n	8008a9a <BusFault_Handler+0x4>

08008a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008aa0:	e7fe      	b.n	8008aa0 <UsageFault_Handler+0x4>

08008aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008aa6:	bf00      	nop
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ab4:	bf00      	nop
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ac2:	bf00      	nop
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ad0:	f000 f968 	bl	8008da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ad4:	bf00      	nop
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008adc:	2001      	movs	r0, #1
 8008ade:	f000 fc89 	bl	80093f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008ae2:	bf00      	nop
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008aec:	4802      	ldr	r0, [pc, #8]	; (8008af8 <OTG_FS_IRQHandler+0x10>)
 8008aee:	f000 fdf4 	bl	80096da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008af2:	bf00      	nop
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20001ef0 	.word	0x20001ef0

08008afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
	return 1;
 8008b00:	2301      	movs	r3, #1
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <_kill>:

int _kill(int pid, int sig)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008b16:	f019 fe8f 	bl	8022838 <__errno>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2216      	movs	r2, #22
 8008b1e:	601a      	str	r2, [r3, #0]
	return -1;
 8008b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <_exit>:

void _exit (int status)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7ff ffe7 	bl	8008b0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8008b3e:	e7fe      	b.n	8008b3e <_exit+0x12>

08008b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	e00a      	b.n	8008b68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008b52:	f3af 8000 	nop.w
 8008b56:	4601      	mov	r1, r0
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	60ba      	str	r2, [r7, #8]
 8008b5e:	b2ca      	uxtb	r2, r1
 8008b60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	3301      	adds	r3, #1
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	dbf0      	blt.n	8008b52 <_read+0x12>
	}

return len;
 8008b70:	687b      	ldr	r3, [r7, #4]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b086      	sub	sp, #24
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	60b9      	str	r1, [r7, #8]
 8008b84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	e009      	b.n	8008ba0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	60ba      	str	r2, [r7, #8]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	dbf1      	blt.n	8008b8c <_write+0x12>
	}
	return len;
 8008ba8:	687b      	ldr	r3, [r7, #4]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <_close>:

int _close(int file)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bda:	605a      	str	r2, [r3, #4]
	return 0;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <_isatty>:

int _isatty(int file)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8008bf2:	2301      	movs	r3, #1
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
	...

08008c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c24:	4a14      	ldr	r2, [pc, #80]	; (8008c78 <_sbrk+0x5c>)
 8008c26:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <_sbrk+0x60>)
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c30:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <_sbrk+0x64>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c38:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <_sbrk+0x64>)
 8008c3a:	4a12      	ldr	r2, [pc, #72]	; (8008c84 <_sbrk+0x68>)
 8008c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c3e:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <_sbrk+0x64>)
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4413      	add	r3, r2
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d207      	bcs.n	8008c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c4c:	f019 fdf4 	bl	8022838 <__errno>
 8008c50:	4603      	mov	r3, r0
 8008c52:	220c      	movs	r2, #12
 8008c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c5a:	e009      	b.n	8008c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c5c:	4b08      	ldr	r3, [pc, #32]	; (8008c80 <_sbrk+0x64>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c62:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <_sbrk+0x64>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4413      	add	r3, r2
 8008c6a:	4a05      	ldr	r2, [pc, #20]	; (8008c80 <_sbrk+0x64>)
 8008c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20020000 	.word	0x20020000
 8008c7c:	00000400 	.word	0x00000400
 8008c80:	20000520 	.word	0x20000520
 8008c84:	20002630 	.word	0x20002630

08008c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c8c:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <SystemInit+0x20>)
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c92:	4a05      	ldr	r2, [pc, #20]	; (8008ca8 <SystemInit+0x20>)
 8008c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008c9c:	bf00      	nop
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	e000ed00 	.word	0xe000ed00

08008cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008cb0:	480d      	ldr	r0, [pc, #52]	; (8008ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008cb2:	490e      	ldr	r1, [pc, #56]	; (8008cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008cb4:	4a0e      	ldr	r2, [pc, #56]	; (8008cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008cb8:	e002      	b.n	8008cc0 <LoopCopyDataInit>

08008cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cbe:	3304      	adds	r3, #4

08008cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008cc4:	d3f9      	bcc.n	8008cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008cc6:	4a0b      	ldr	r2, [pc, #44]	; (8008cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008cc8:	4c0b      	ldr	r4, [pc, #44]	; (8008cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ccc:	e001      	b.n	8008cd2 <LoopFillZerobss>

08008cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008cd0:	3204      	adds	r2, #4

08008cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008cd4:	d3fb      	bcc.n	8008cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008cd6:	f7ff ffd7 	bl	8008c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cda:	f019 fdc5 	bl	8022868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cde:	f7fc ffb7 	bl	8005c50 <main>
  bx  lr    
 8008ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008cec:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8008cf0:	0802a8c0 	.word	0x0802a8c0
  ldr r2, =_sbss
 8008cf4:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 8008cf8:	20002630 	.word	0x20002630

08008cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008cfc:	e7fe      	b.n	8008cfc <ADC_IRQHandler>
	...

08008d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d04:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <HAL_Init+0x40>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a0d      	ldr	r2, [pc, #52]	; (8008d40 <HAL_Init+0x40>)
 8008d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <HAL_Init+0x40>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a0a      	ldr	r2, [pc, #40]	; (8008d40 <HAL_Init+0x40>)
 8008d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d1c:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <HAL_Init+0x40>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a07      	ldr	r2, [pc, #28]	; (8008d40 <HAL_Init+0x40>)
 8008d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d28:	2003      	movs	r0, #3
 8008d2a:	f000 f94f 	bl	8008fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f000 f808 	bl	8008d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d34:	f7ff fe14 	bl	8008960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	40023c00 	.word	0x40023c00

08008d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d4c:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <HAL_InitTick+0x54>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <HAL_InitTick+0x58>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	4619      	mov	r1, r3
 8008d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f967 	bl	8009036 <HAL_SYSTICK_Config>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e00e      	b.n	8008d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b0f      	cmp	r3, #15
 8008d76:	d80a      	bhi.n	8008d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d78:	2200      	movs	r2, #0
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d80:	f000 f92f 	bl	8008fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d84:	4a06      	ldr	r2, [pc, #24]	; (8008da0 <HAL_InitTick+0x5c>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e000      	b.n	8008d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20000060 	.word	0x20000060
 8008d9c:	20000068 	.word	0x20000068
 8008da0:	20000064 	.word	0x20000064

08008da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <HAL_IncTick+0x20>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <HAL_IncTick+0x24>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4413      	add	r3, r2
 8008db4:	4a04      	ldr	r2, [pc, #16]	; (8008dc8 <HAL_IncTick+0x24>)
 8008db6:	6013      	str	r3, [r2, #0]
}
 8008db8:	bf00      	nop
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20000068 	.word	0x20000068
 8008dc8:	20000524 	.word	0x20000524

08008dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
  return uwTick;
 8008dd0:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <HAL_GetTick+0x14>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000524 	.word	0x20000524

08008de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008dec:	f7ff ffee 	bl	8008dcc <HAL_GetTick>
 8008df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dfc:	d005      	beq.n	8008e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <HAL_Delay+0x44>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e0a:	bf00      	nop
 8008e0c:	f7ff ffde 	bl	8008dcc <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d8f7      	bhi.n	8008e0c <HAL_Delay+0x28>
  {
  }
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000068 	.word	0x20000068

08008e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f003 0307 	and.w	r3, r3, #7
 8008e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <__NVIC_SetPriorityGrouping+0x44>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e48:	4013      	ands	r3, r2
 8008e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e5e:	4a04      	ldr	r2, [pc, #16]	; (8008e70 <__NVIC_SetPriorityGrouping+0x44>)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	60d3      	str	r3, [r2, #12]
}
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	e000ed00 	.word	0xe000ed00

08008e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e78:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <__NVIC_GetPriorityGrouping+0x18>)
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	0a1b      	lsrs	r3, r3, #8
 8008e7e:	f003 0307 	and.w	r3, r3, #7
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	e000ed00 	.word	0xe000ed00

08008e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	db0b      	blt.n	8008eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	f003 021f 	and.w	r2, r3, #31
 8008ea8:	4907      	ldr	r1, [pc, #28]	; (8008ec8 <__NVIC_EnableIRQ+0x38>)
 8008eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eae:	095b      	lsrs	r3, r3, #5
 8008eb0:	2001      	movs	r0, #1
 8008eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8008eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	e000e100 	.word	0xe000e100

08008ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	db0a      	blt.n	8008ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	490c      	ldr	r1, [pc, #48]	; (8008f18 <__NVIC_SetPriority+0x4c>)
 8008ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eea:	0112      	lsls	r2, r2, #4
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	440b      	add	r3, r1
 8008ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ef4:	e00a      	b.n	8008f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	4908      	ldr	r1, [pc, #32]	; (8008f1c <__NVIC_SetPriority+0x50>)
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	f003 030f 	and.w	r3, r3, #15
 8008f02:	3b04      	subs	r3, #4
 8008f04:	0112      	lsls	r2, r2, #4
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	440b      	add	r3, r1
 8008f0a:	761a      	strb	r2, [r3, #24]
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	e000e100 	.word	0xe000e100
 8008f1c:	e000ed00 	.word	0xe000ed00

08008f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b089      	sub	sp, #36	; 0x24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f003 0307 	and.w	r3, r3, #7
 8008f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f1c3 0307 	rsb	r3, r3, #7
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	bf28      	it	cs
 8008f3e:	2304      	movcs	r3, #4
 8008f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	3304      	adds	r3, #4
 8008f46:	2b06      	cmp	r3, #6
 8008f48:	d902      	bls.n	8008f50 <NVIC_EncodePriority+0x30>
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	3b03      	subs	r3, #3
 8008f4e:	e000      	b.n	8008f52 <NVIC_EncodePriority+0x32>
 8008f50:	2300      	movs	r3, #0
 8008f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5e:	43da      	mvns	r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	401a      	ands	r2, r3
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f72:	43d9      	mvns	r1, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f78:	4313      	orrs	r3, r2
         );
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3724      	adds	r7, #36	; 0x24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
	...

08008f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f98:	d301      	bcc.n	8008f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e00f      	b.n	8008fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f9e:	4a0a      	ldr	r2, [pc, #40]	; (8008fc8 <SysTick_Config+0x40>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008fa6:	210f      	movs	r1, #15
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fac:	f7ff ff8e 	bl	8008ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008fb0:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <SysTick_Config+0x40>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008fb6:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <SysTick_Config+0x40>)
 8008fb8:	2207      	movs	r2, #7
 8008fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	e000e010 	.word	0xe000e010

08008fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ff29 	bl	8008e2c <__NVIC_SetPriorityGrouping>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b086      	sub	sp, #24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	4603      	mov	r3, r0
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
 8008fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ff4:	f7ff ff3e 	bl	8008e74 <__NVIC_GetPriorityGrouping>
 8008ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	68b9      	ldr	r1, [r7, #8]
 8008ffe:	6978      	ldr	r0, [r7, #20]
 8009000:	f7ff ff8e 	bl	8008f20 <NVIC_EncodePriority>
 8009004:	4602      	mov	r2, r0
 8009006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800900a:	4611      	mov	r1, r2
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff ff5d 	bl	8008ecc <__NVIC_SetPriority>
}
 8009012:	bf00      	nop
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	4603      	mov	r3, r0
 8009022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff ff31 	bl	8008e90 <__NVIC_EnableIRQ>
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff ffa2 	bl	8008f88 <SysTick_Config>
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e00e      	b.n	800907e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	795b      	ldrb	r3, [r3, #5]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d105      	bne.n	8009076 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff fc9d 	bl	80089b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009088:	b480      	push	{r7}
 800908a:	b089      	sub	sp, #36	; 0x24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009092:	2300      	movs	r3, #0
 8009094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800909a:	2300      	movs	r3, #0
 800909c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
 80090a2:	e16b      	b.n	800937c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80090a4:	2201      	movs	r2, #1
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	4013      	ands	r3, r2
 80090b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	429a      	cmp	r2, r3
 80090be:	f040 815a 	bne.w	8009376 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d005      	beq.n	80090da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d130      	bne.n	800913c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	2203      	movs	r2, #3
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	43db      	mvns	r3, r3
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	4013      	ands	r3, r2
 80090f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68da      	ldr	r2, [r3, #12]
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	4313      	orrs	r3, r2
 8009102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009110:	2201      	movs	r2, #1
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	fa02 f303 	lsl.w	r3, r2, r3
 8009118:	43db      	mvns	r3, r3
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	4013      	ands	r3, r2
 800911e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	091b      	lsrs	r3, r3, #4
 8009126:	f003 0201 	and.w	r2, r3, #1
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	fa02 f303 	lsl.w	r3, r2, r3
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	4313      	orrs	r3, r2
 8009134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f003 0303 	and.w	r3, r3, #3
 8009144:	2b03      	cmp	r3, #3
 8009146:	d017      	beq.n	8009178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	2203      	movs	r2, #3
 8009154:	fa02 f303 	lsl.w	r3, r2, r3
 8009158:	43db      	mvns	r3, r3
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	4013      	ands	r3, r2
 800915e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	fa02 f303 	lsl.w	r3, r2, r3
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	4313      	orrs	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f003 0303 	and.w	r3, r3, #3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d123      	bne.n	80091cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	08da      	lsrs	r2, r3, #3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	3208      	adds	r2, #8
 800918c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	220f      	movs	r2, #15
 800919c:	fa02 f303 	lsl.w	r3, r2, r3
 80091a0:	43db      	mvns	r3, r3
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	4013      	ands	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	691a      	ldr	r2, [r3, #16]
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	fa02 f303 	lsl.w	r3, r2, r3
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	08da      	lsrs	r2, r3, #3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3208      	adds	r2, #8
 80091c6:	69b9      	ldr	r1, [r7, #24]
 80091c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	2203      	movs	r2, #3
 80091d8:	fa02 f303 	lsl.w	r3, r2, r3
 80091dc:	43db      	mvns	r3, r3
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	4013      	ands	r3, r2
 80091e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f003 0203 	and.w	r2, r3, #3
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	fa02 f303 	lsl.w	r3, r2, r3
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 80b4 	beq.w	8009376 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	4b60      	ldr	r3, [pc, #384]	; (8009394 <HAL_GPIO_Init+0x30c>)
 8009214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009216:	4a5f      	ldr	r2, [pc, #380]	; (8009394 <HAL_GPIO_Init+0x30c>)
 8009218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800921c:	6453      	str	r3, [r2, #68]	; 0x44
 800921e:	4b5d      	ldr	r3, [pc, #372]	; (8009394 <HAL_GPIO_Init+0x30c>)
 8009220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800922a:	4a5b      	ldr	r2, [pc, #364]	; (8009398 <HAL_GPIO_Init+0x310>)
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	089b      	lsrs	r3, r3, #2
 8009230:	3302      	adds	r3, #2
 8009232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	220f      	movs	r2, #15
 8009242:	fa02 f303 	lsl.w	r3, r2, r3
 8009246:	43db      	mvns	r3, r3
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	4013      	ands	r3, r2
 800924c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a52      	ldr	r2, [pc, #328]	; (800939c <HAL_GPIO_Init+0x314>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d02b      	beq.n	80092ae <HAL_GPIO_Init+0x226>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a51      	ldr	r2, [pc, #324]	; (80093a0 <HAL_GPIO_Init+0x318>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d025      	beq.n	80092aa <HAL_GPIO_Init+0x222>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a50      	ldr	r2, [pc, #320]	; (80093a4 <HAL_GPIO_Init+0x31c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d01f      	beq.n	80092a6 <HAL_GPIO_Init+0x21e>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a4f      	ldr	r2, [pc, #316]	; (80093a8 <HAL_GPIO_Init+0x320>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d019      	beq.n	80092a2 <HAL_GPIO_Init+0x21a>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a4e      	ldr	r2, [pc, #312]	; (80093ac <HAL_GPIO_Init+0x324>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d013      	beq.n	800929e <HAL_GPIO_Init+0x216>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a4d      	ldr	r2, [pc, #308]	; (80093b0 <HAL_GPIO_Init+0x328>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00d      	beq.n	800929a <HAL_GPIO_Init+0x212>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a4c      	ldr	r2, [pc, #304]	; (80093b4 <HAL_GPIO_Init+0x32c>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d007      	beq.n	8009296 <HAL_GPIO_Init+0x20e>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a4b      	ldr	r2, [pc, #300]	; (80093b8 <HAL_GPIO_Init+0x330>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d101      	bne.n	8009292 <HAL_GPIO_Init+0x20a>
 800928e:	2307      	movs	r3, #7
 8009290:	e00e      	b.n	80092b0 <HAL_GPIO_Init+0x228>
 8009292:	2308      	movs	r3, #8
 8009294:	e00c      	b.n	80092b0 <HAL_GPIO_Init+0x228>
 8009296:	2306      	movs	r3, #6
 8009298:	e00a      	b.n	80092b0 <HAL_GPIO_Init+0x228>
 800929a:	2305      	movs	r3, #5
 800929c:	e008      	b.n	80092b0 <HAL_GPIO_Init+0x228>
 800929e:	2304      	movs	r3, #4
 80092a0:	e006      	b.n	80092b0 <HAL_GPIO_Init+0x228>
 80092a2:	2303      	movs	r3, #3
 80092a4:	e004      	b.n	80092b0 <HAL_GPIO_Init+0x228>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e002      	b.n	80092b0 <HAL_GPIO_Init+0x228>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e000      	b.n	80092b0 <HAL_GPIO_Init+0x228>
 80092ae:	2300      	movs	r3, #0
 80092b0:	69fa      	ldr	r2, [r7, #28]
 80092b2:	f002 0203 	and.w	r2, r2, #3
 80092b6:	0092      	lsls	r2, r2, #2
 80092b8:	4093      	lsls	r3, r2
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	4313      	orrs	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80092c0:	4935      	ldr	r1, [pc, #212]	; (8009398 <HAL_GPIO_Init+0x310>)
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	089b      	lsrs	r3, r3, #2
 80092c6:	3302      	adds	r3, #2
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80092ce:	4b3b      	ldr	r3, [pc, #236]	; (80093bc <HAL_GPIO_Init+0x334>)
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	43db      	mvns	r3, r3
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	4013      	ands	r3, r2
 80092dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80092f2:	4a32      	ldr	r2, [pc, #200]	; (80093bc <HAL_GPIO_Init+0x334>)
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80092f8:	4b30      	ldr	r3, [pc, #192]	; (80093bc <HAL_GPIO_Init+0x334>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	43db      	mvns	r3, r3
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	4013      	ands	r3, r2
 8009306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	4313      	orrs	r3, r2
 800931a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800931c:	4a27      	ldr	r2, [pc, #156]	; (80093bc <HAL_GPIO_Init+0x334>)
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009322:	4b26      	ldr	r3, [pc, #152]	; (80093bc <HAL_GPIO_Init+0x334>)
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	43db      	mvns	r3, r3
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	4013      	ands	r3, r2
 8009330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	4313      	orrs	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009346:	4a1d      	ldr	r2, [pc, #116]	; (80093bc <HAL_GPIO_Init+0x334>)
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800934c:	4b1b      	ldr	r3, [pc, #108]	; (80093bc <HAL_GPIO_Init+0x334>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	43db      	mvns	r3, r3
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	4013      	ands	r3, r2
 800935a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009370:	4a12      	ldr	r2, [pc, #72]	; (80093bc <HAL_GPIO_Init+0x334>)
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	3301      	adds	r3, #1
 800937a:	61fb      	str	r3, [r7, #28]
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	2b0f      	cmp	r3, #15
 8009380:	f67f ae90 	bls.w	80090a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	3724      	adds	r7, #36	; 0x24
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40023800 	.word	0x40023800
 8009398:	40013800 	.word	0x40013800
 800939c:	40020000 	.word	0x40020000
 80093a0:	40020400 	.word	0x40020400
 80093a4:	40020800 	.word	0x40020800
 80093a8:	40020c00 	.word	0x40020c00
 80093ac:	40021000 	.word	0x40021000
 80093b0:	40021400 	.word	0x40021400
 80093b4:	40021800 	.word	0x40021800
 80093b8:	40021c00 	.word	0x40021c00
 80093bc:	40013c00 	.word	0x40013c00

080093c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	807b      	strh	r3, [r7, #2]
 80093cc:	4613      	mov	r3, r2
 80093ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80093d0:	787b      	ldrb	r3, [r7, #1]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093d6:	887a      	ldrh	r2, [r7, #2]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80093dc:	e003      	b.n	80093e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80093de:	887b      	ldrh	r3, [r7, #2]
 80093e0:	041a      	lsls	r2, r3, #16
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	619a      	str	r2, [r3, #24]
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4603      	mov	r3, r0
 80093fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80093fe:	4b08      	ldr	r3, [pc, #32]	; (8009420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009400:	695a      	ldr	r2, [r3, #20]
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	4013      	ands	r3, r2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d006      	beq.n	8009418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800940a:	4a05      	ldr	r2, [pc, #20]	; (8009420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009410:	88fb      	ldrh	r3, [r7, #6]
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f806 	bl	8009424 <HAL_GPIO_EXTI_Callback>
  }
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	40013c00 	.word	0x40013c00

08009424 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800943a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943c:	b08f      	sub	sp, #60	; 0x3c
 800943e:	af0a      	add	r7, sp, #40	; 0x28
 8009440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e10f      	b.n	800966c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d106      	bne.n	800946c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f016 f944 	bl	801f6f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2203      	movs	r2, #3
 8009470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f002 fa67 	bl	800b95e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	603b      	str	r3, [r7, #0]
 8009496:	687e      	ldr	r6, [r7, #4]
 8009498:	466d      	mov	r5, sp
 800949a:	f106 0410 	add.w	r4, r6, #16
 800949e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80094ae:	1d33      	adds	r3, r6, #4
 80094b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094b2:	6838      	ldr	r0, [r7, #0]
 80094b4:	f002 f93e 	bl	800b734 <USB_CoreInit>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d005      	beq.n	80094ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2202      	movs	r2, #2
 80094c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e0d0      	b.n	800966c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2100      	movs	r1, #0
 80094d0:	4618      	mov	r0, r3
 80094d2:	f002 fa55 	bl	800b980 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
 80094da:	e04a      	b.n	8009572 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80094dc:	7bfa      	ldrb	r2, [r7, #15]
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4613      	mov	r3, r2
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	4413      	add	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	333d      	adds	r3, #61	; 0x3d
 80094ec:	2201      	movs	r2, #1
 80094ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80094f0:	7bfa      	ldrb	r2, [r7, #15]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	333c      	adds	r3, #60	; 0x3c
 8009500:	7bfa      	ldrb	r2, [r7, #15]
 8009502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009504:	7bfa      	ldrb	r2, [r7, #15]
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	b298      	uxth	r0, r3
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	4613      	mov	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	3344      	adds	r3, #68	; 0x44
 8009518:	4602      	mov	r2, r0
 800951a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800951c:	7bfa      	ldrb	r2, [r7, #15]
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	3340      	adds	r3, #64	; 0x40
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009530:	7bfa      	ldrb	r2, [r7, #15]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	3348      	adds	r3, #72	; 0x48
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009544:	7bfa      	ldrb	r2, [r7, #15]
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	334c      	adds	r3, #76	; 0x4c
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009558:	7bfa      	ldrb	r2, [r7, #15]
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	4613      	mov	r3, r2
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	3354      	adds	r3, #84	; 0x54
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	3301      	adds	r3, #1
 8009570:	73fb      	strb	r3, [r7, #15]
 8009572:	7bfa      	ldrb	r2, [r7, #15]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	429a      	cmp	r2, r3
 800957a:	d3af      	bcc.n	80094dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
 8009580:	e044      	b.n	800960c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009582:	7bfa      	ldrb	r2, [r7, #15]
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009598:	7bfa      	ldrb	r2, [r7, #15]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80095aa:	7bfa      	ldrb	r2, [r7, #15]
 80095ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095ae:	7bfa      	ldrb	r2, [r7, #15]
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	440b      	add	r3, r1
 80095bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80095c0:	2200      	movs	r2, #0
 80095c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095c4:	7bfa      	ldrb	r2, [r7, #15]
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	4613      	mov	r3, r2
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80095d6:	2200      	movs	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095da:	7bfa      	ldrb	r2, [r7, #15]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	440b      	add	r3, r1
 80095e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095f0:	7bfa      	ldrb	r2, [r7, #15]
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	4613      	mov	r3, r2
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	3301      	adds	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	7bfa      	ldrb	r2, [r7, #15]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d3b5      	bcc.n	8009582 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	687e      	ldr	r6, [r7, #4]
 800961e:	466d      	mov	r5, sp
 8009620:	f106 0410 	add.w	r4, r6, #16
 8009624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800962a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800962c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009630:	e885 0003 	stmia.w	r5, {r0, r1}
 8009634:	1d33      	adds	r3, r6, #4
 8009636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009638:	6838      	ldr	r0, [r7, #0]
 800963a:	f002 f9ed 	bl	800ba18 <USB_DevInit>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e00d      	b.n	800966c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4618      	mov	r0, r3
 8009666:	f003 fb3c 	bl	800cce2 <USB_DevDisconnect>

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009674 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <HAL_PCD_Start+0x1c>
 800968c:	2302      	movs	r3, #2
 800968e:	e020      	b.n	80096d2 <HAL_PCD_Start+0x5e>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969c:	2b01      	cmp	r3, #1
 800969e:	d109      	bne.n	80096b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d005      	beq.n	80096b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f002 f93f 	bl	800b93c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f003 faec 	bl	800cca0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80096da:	b590      	push	{r4, r7, lr}
 80096dc:	b08d      	sub	sp, #52	; 0x34
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f003 fbaa 	bl	800ce4a <USB_GetMode>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f040 848a 	bne.w	800a012 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4618      	mov	r0, r3
 8009704:	f003 fb0e 	bl	800cd24 <USB_ReadInterrupts>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 8480 	beq.w	800a010 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	0a1b      	lsrs	r3, r3, #8
 800971a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4618      	mov	r0, r3
 800972a:	f003 fafb 	bl	800cd24 <USB_ReadInterrupts>
 800972e:	4603      	mov	r3, r0
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b02      	cmp	r3, #2
 8009736:	d107      	bne.n	8009748 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	695a      	ldr	r2, [r3, #20]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f002 0202 	and.w	r2, r2, #2
 8009746:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4618      	mov	r0, r3
 800974e:	f003 fae9 	bl	800cd24 <USB_ReadInterrupts>
 8009752:	4603      	mov	r3, r0
 8009754:	f003 0310 	and.w	r3, r3, #16
 8009758:	2b10      	cmp	r3, #16
 800975a:	d161      	bne.n	8009820 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	699a      	ldr	r2, [r3, #24]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0210 	bic.w	r2, r2, #16
 800976a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	f003 020f 	and.w	r2, r3, #15
 8009778:	4613      	mov	r3, r2
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	4413      	add	r3, r2
 8009788:	3304      	adds	r3, #4
 800978a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	0c5b      	lsrs	r3, r3, #17
 8009790:	f003 030f 	and.w	r3, r3, #15
 8009794:	2b02      	cmp	r3, #2
 8009796:	d124      	bne.n	80097e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800979e:	4013      	ands	r3, r2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d035      	beq.n	8009810 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	091b      	lsrs	r3, r3, #4
 80097ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80097ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	6a38      	ldr	r0, [r7, #32]
 80097b8:	f003 f920 	bl	800c9fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	091b      	lsrs	r3, r3, #4
 80097c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097c8:	441a      	add	r2, r3
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	6a1a      	ldr	r2, [r3, #32]
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	091b      	lsrs	r3, r3, #4
 80097d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097da:	441a      	add	r2, r3
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	621a      	str	r2, [r3, #32]
 80097e0:	e016      	b.n	8009810 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	0c5b      	lsrs	r3, r3, #17
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	2b06      	cmp	r3, #6
 80097ec:	d110      	bne.n	8009810 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097f4:	2208      	movs	r2, #8
 80097f6:	4619      	mov	r1, r3
 80097f8:	6a38      	ldr	r0, [r7, #32]
 80097fa:	f003 f8ff 	bl	800c9fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	6a1a      	ldr	r2, [r3, #32]
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	091b      	lsrs	r3, r3, #4
 8009806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800980a:	441a      	add	r2, r3
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f042 0210 	orr.w	r2, r2, #16
 800981e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4618      	mov	r0, r3
 8009826:	f003 fa7d 	bl	800cd24 <USB_ReadInterrupts>
 800982a:	4603      	mov	r3, r0
 800982c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009830:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009834:	f040 80a7 	bne.w	8009986 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f003 fa82 	bl	800cd4a <USB_ReadDevAllOutEpInterrupt>
 8009846:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009848:	e099      	b.n	800997e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 808e 	beq.w	8009972 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f003 faa6 	bl	800cdb2 <USB_ReadDevOutEPInterrupt>
 8009866:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00c      	beq.n	800988c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987e:	461a      	mov	r2, r3
 8009880:	2301      	movs	r3, #1
 8009882:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fec2 	bl	800a610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f003 0308 	and.w	r3, r3, #8
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00c      	beq.n	80098b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a2:	461a      	mov	r2, r3
 80098a4:	2308      	movs	r3, #8
 80098a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80098a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 ff98 	bl	800a7e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f003 0310 	and.w	r3, r3, #16
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d008      	beq.n	80098cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c6:	461a      	mov	r2, r3
 80098c8:	2310      	movs	r3, #16
 80098ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d030      	beq.n	8009938 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098de:	2b80      	cmp	r3, #128	; 0x80
 80098e0:	d109      	bne.n	80098f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	69fa      	ldr	r2, [r7, #28]
 80098ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80098f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f8:	4613      	mov	r3, r2
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	4413      	add	r3, r2
 8009908:	3304      	adds	r3, #4
 800990a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	78db      	ldrb	r3, [r3, #3]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d108      	bne.n	8009926 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2200      	movs	r2, #0
 8009918:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	b2db      	uxtb	r3, r3
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f015 ffed 	bl	801f900 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009932:	461a      	mov	r2, r3
 8009934:	2302      	movs	r3, #2
 8009936:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f003 0320 	and.w	r3, r3, #32
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	461a      	mov	r2, r3
 8009950:	2320      	movs	r3, #32
 8009952:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996a:	461a      	mov	r2, r3
 800996c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009970:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	3301      	adds	r3, #1
 8009976:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	085b      	lsrs	r3, r3, #1
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	f47f af62 	bne.w	800984a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f003 f9ca 	bl	800cd24 <USB_ReadInterrupts>
 8009990:	4603      	mov	r3, r0
 8009992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009996:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800999a:	f040 80db 	bne.w	8009b54 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f003 f9eb 	bl	800cd7e <USB_ReadDevAllInEpInterrupt>
 80099a8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80099ae:	e0cd      	b.n	8009b4c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 80c2 	beq.w	8009b40 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	4611      	mov	r1, r2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f003 fa11 	bl	800cdee <USB_ReadDevInEPInterrupt>
 80099cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d057      	beq.n	8009a88 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	2201      	movs	r2, #1
 80099e0:	fa02 f303 	lsl.w	r3, r2, r3
 80099e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	43db      	mvns	r3, r3
 80099f2:	69f9      	ldr	r1, [r7, #28]
 80099f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099f8:	4013      	ands	r3, r2
 80099fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d132      	bne.n	8009a7c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	440b      	add	r3, r1
 8009a24:	334c      	adds	r3, #76	; 0x4c
 8009a26:	6819      	ldr	r1, [r3, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	00db      	lsls	r3, r3, #3
 8009a30:	4413      	add	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4403      	add	r3, r0
 8009a36:	3348      	adds	r3, #72	; 0x48
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4419      	add	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a40:	4613      	mov	r3, r2
 8009a42:	00db      	lsls	r3, r3, #3
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4403      	add	r3, r0
 8009a4a:	334c      	adds	r3, #76	; 0x4c
 8009a4c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d113      	bne.n	8009a7c <HAL_PCD_IRQHandler+0x3a2>
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a58:	4613      	mov	r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	3354      	adds	r3, #84	; 0x54
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d108      	bne.n	8009a7c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6818      	ldr	r0, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a74:	461a      	mov	r2, r3
 8009a76:	2101      	movs	r1, #1
 8009a78:	f003 fa18 	bl	800ceac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f015 feb7 	bl	801f7f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	f003 0308 	and.w	r3, r3, #8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d008      	beq.n	8009aa4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f003 0310 	and.w	r3, r3, #16
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d008      	beq.n	8009ac0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aba:	461a      	mov	r2, r3
 8009abc:	2310      	movs	r3, #16
 8009abe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d008      	beq.n	8009adc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	2340      	movs	r3, #64	; 0x40
 8009ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d023      	beq.n	8009b2e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ae8:	6a38      	ldr	r0, [r7, #32]
 8009aea:	f002 f8f9 	bl	800bce0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af0:	4613      	mov	r3, r2
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	3338      	adds	r3, #56	; 0x38
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4413      	add	r3, r2
 8009afe:	3304      	adds	r3, #4
 8009b00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	78db      	ldrb	r3, [r3, #3]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d108      	bne.n	8009b1c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f015 ff04 	bl	801f924 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b28:	461a      	mov	r2, r3
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fcdb 	bl	800a4f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	3301      	adds	r3, #1
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	085b      	lsrs	r3, r3, #1
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f47f af2e 	bne.w	80099b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f003 f8e3 	bl	800cd24 <USB_ReadInterrupts>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b68:	d122      	bne.n	8009bb0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b78:	f023 0301 	bic.w	r3, r3, #1
 8009b7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d108      	bne.n	8009b9a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009b90:	2100      	movs	r1, #0
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fec2 	bl	800a91c <HAL_PCDEx_LPM_Callback>
 8009b98:	e002      	b.n	8009ba0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f015 fea2 	bl	801f8e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695a      	ldr	r2, [r3, #20]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f003 f8b5 	bl	800cd24 <USB_ReadInterrupts>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bc4:	d112      	bne.n	8009bec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d102      	bne.n	8009bdc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f015 fe5e 	bl	801f898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	695a      	ldr	r2, [r3, #20]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009bea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f003 f897 	bl	800cd24 <USB_ReadInterrupts>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c00:	f040 80b7 	bne.w	8009d72 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c12:	f023 0301 	bic.w	r3, r3, #1
 8009c16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2110      	movs	r1, #16
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f002 f85e 	bl	800bce0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c24:	2300      	movs	r3, #0
 8009c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c28:	e046      	b.n	8009cb8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c36:	461a      	mov	r2, r3
 8009c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	69fa      	ldr	r2, [r7, #28]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c82:	0151      	lsls	r1, r2, #5
 8009c84:	69fa      	ldr	r2, [r7, #28]
 8009c86:	440a      	add	r2, r1
 8009c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca2:	0151      	lsls	r1, r2, #5
 8009ca4:	69fa      	ldr	r2, [r7, #28]
 8009ca6:	440a      	add	r2, r1
 8009ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d3b3      	bcc.n	8009c2a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009cd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d016      	beq.n	8009d0c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ce8:	69fa      	ldr	r2, [r7, #28]
 8009cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cee:	f043 030b 	orr.w	r3, r3, #11
 8009cf2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfe:	69fa      	ldr	r2, [r7, #28]
 8009d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d04:	f043 030b 	orr.w	r3, r3, #11
 8009d08:	6453      	str	r3, [r2, #68]	; 0x44
 8009d0a:	e015      	b.n	8009d38 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009d1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009d22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	69fa      	ldr	r2, [r7, #28]
 8009d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d32:	f043 030b 	orr.w	r3, r3, #11
 8009d36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	69fa      	ldr	r2, [r7, #28]
 8009d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	f003 f8a5 	bl	800ceac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	695a      	ldr	r2, [r3, #20]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f002 ffd4 	bl	800cd24 <USB_ReadInterrupts>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d86:	d124      	bne.n	8009dd2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f003 f86a 	bl	800ce66 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f002 f81f 	bl	800bdda <USB_GetDevSpeed>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	461a      	mov	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681c      	ldr	r4, [r3, #0]
 8009da8:	f001 fa28 	bl	800b1fc <HAL_RCC_GetHCLKFreq>
 8009dac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	461a      	mov	r2, r3
 8009db6:	4620      	mov	r0, r4
 8009db8:	f001 fd1e 	bl	800b7f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f015 fd42 	bl	801f846 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	695a      	ldr	r2, [r3, #20]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f002 ffa4 	bl	800cd24 <USB_ReadInterrupts>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b08      	cmp	r3, #8
 8009de4:	d10a      	bne.n	8009dfc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f015 fd1f 	bl	801f82a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	695a      	ldr	r2, [r3, #20]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f002 0208 	and.w	r2, r2, #8
 8009dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f002 ff8f 	bl	800cd24 <USB_ReadInterrupts>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e0c:	2b80      	cmp	r3, #128	; 0x80
 8009e0e:	d122      	bne.n	8009e56 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e20:	e014      	b.n	8009e4c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e26:	4613      	mov	r3, r2
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	4413      	add	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	440b      	add	r3, r1
 8009e30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d105      	bne.n	8009e46 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fb27 	bl	800a494 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	3301      	adds	r3, #1
 8009e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d3e5      	bcc.n	8009e22 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f002 ff62 	bl	800cd24 <USB_ReadInterrupts>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e6a:	d13b      	bne.n	8009ee4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e70:	e02b      	b.n	8009eca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e86:	4613      	mov	r3, r2
 8009e88:	00db      	lsls	r3, r3, #3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	440b      	add	r3, r1
 8009e90:	3340      	adds	r3, #64	; 0x40
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d115      	bne.n	8009ec4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009e98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	da12      	bge.n	8009ec4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	00db      	lsls	r3, r3, #3
 8009ea6:	4413      	add	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	440b      	add	r3, r1
 8009eac:	333f      	adds	r3, #63	; 0x3f
 8009eae:	2201      	movs	r2, #1
 8009eb0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fae8 	bl	800a494 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d3ce      	bcc.n	8009e72 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	695a      	ldr	r2, [r3, #20]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 ff1b 	bl	800cd24 <USB_ReadInterrupts>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ef8:	d155      	bne.n	8009fa6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009efa:	2301      	movs	r3, #1
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
 8009efe:	e045      	b.n	8009f8c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f14:	4613      	mov	r3, r2
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	440b      	add	r3, r1
 8009f1e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d12e      	bne.n	8009f86 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009f28:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	da2b      	bge.n	8009f86 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009f3a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d121      	bne.n	8009f86 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f46:	4613      	mov	r3, r2
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	440b      	add	r3, r1
 8009f50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009f54:	2201      	movs	r2, #1
 8009f56:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009f64:	6a3b      	ldr	r3, [r7, #32]
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10a      	bne.n	8009f86 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f82:	6053      	str	r3, [r2, #4]
            break;
 8009f84:	e007      	b.n	8009f96 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	3301      	adds	r3, #1
 8009f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d3b4      	bcc.n	8009f00 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	695a      	ldr	r2, [r3, #20]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f002 feba 	bl	800cd24 <USB_ReadInterrupts>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fba:	d10a      	bne.n	8009fd2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f015 fcc3 	bl	801f948 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695a      	ldr	r2, [r3, #20]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f002 fea4 	bl	800cd24 <USB_ReadInterrupts>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f003 0304 	and.w	r3, r3, #4
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d115      	bne.n	800a012 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	f003 0304 	and.w	r3, r3, #4
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f015 fcb3 	bl	801f964 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6859      	ldr	r1, [r3, #4]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69ba      	ldr	r2, [r7, #24]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	605a      	str	r2, [r3, #4]
 800a00e:	e000      	b.n	800a012 <HAL_PCD_IRQHandler+0x938>
      return;
 800a010:	bf00      	nop
    }
  }
}
 800a012:	3734      	adds	r7, #52	; 0x34
 800a014:	46bd      	mov	sp, r7
 800a016:	bd90      	pop	{r4, r7, pc}

0800a018 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <HAL_PCD_SetAddress+0x1a>
 800a02e:	2302      	movs	r3, #2
 800a030:	e013      	b.n	800a05a <HAL_PCD_SetAddress+0x42>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	78fa      	ldrb	r2, [r7, #3]
 800a03e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f002 fe02 	bl	800cc54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	4608      	mov	r0, r1
 800a06c:	4611      	mov	r1, r2
 800a06e:	461a      	mov	r2, r3
 800a070:	4603      	mov	r3, r0
 800a072:	70fb      	strb	r3, [r7, #3]
 800a074:	460b      	mov	r3, r1
 800a076:	803b      	strh	r3, [r7, #0]
 800a078:	4613      	mov	r3, r2
 800a07a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a084:	2b00      	cmp	r3, #0
 800a086:	da0f      	bge.n	800a0a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	f003 020f 	and.w	r2, r3, #15
 800a08e:	4613      	mov	r3, r2
 800a090:	00db      	lsls	r3, r3, #3
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	3338      	adds	r3, #56	; 0x38
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	4413      	add	r3, r2
 800a09c:	3304      	adds	r3, #4
 800a09e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	705a      	strb	r2, [r3, #1]
 800a0a6:	e00f      	b.n	800a0c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	f003 020f 	and.w	r2, r3, #15
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	00db      	lsls	r3, r3, #3
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	3304      	adds	r3, #4
 800a0c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a0c8:	78fb      	ldrb	r3, [r7, #3]
 800a0ca:	f003 030f 	and.w	r3, r3, #15
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a0d4:	883a      	ldrh	r2, [r7, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	78ba      	ldrb	r2, [r7, #2]
 800a0de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	785b      	ldrb	r3, [r3, #1]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a0f2:	78bb      	ldrb	r3, [r7, #2]
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d102      	bne.n	800a0fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a104:	2b01      	cmp	r3, #1
 800a106:	d101      	bne.n	800a10c <HAL_PCD_EP_Open+0xaa>
 800a108:	2302      	movs	r3, #2
 800a10a:	e00e      	b.n	800a12a <HAL_PCD_EP_Open+0xc8>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68f9      	ldr	r1, [r7, #12]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f001 fe82 	bl	800be24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a128:	7afb      	ldrb	r3, [r7, #11]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	460b      	mov	r3, r1
 800a13c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a13e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a142:	2b00      	cmp	r3, #0
 800a144:	da0f      	bge.n	800a166 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a146:	78fb      	ldrb	r3, [r7, #3]
 800a148:	f003 020f 	and.w	r2, r3, #15
 800a14c:	4613      	mov	r3, r2
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	4413      	add	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	3338      	adds	r3, #56	; 0x38
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	4413      	add	r3, r2
 800a15a:	3304      	adds	r3, #4
 800a15c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2201      	movs	r2, #1
 800a162:	705a      	strb	r2, [r3, #1]
 800a164:	e00f      	b.n	800a186 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a166:	78fb      	ldrb	r3, [r7, #3]
 800a168:	f003 020f 	and.w	r2, r3, #15
 800a16c:	4613      	mov	r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	4413      	add	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	4413      	add	r3, r2
 800a17c:	3304      	adds	r3, #4
 800a17e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	f003 030f 	and.w	r3, r3, #15
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d101      	bne.n	800a1a0 <HAL_PCD_EP_Close+0x6e>
 800a19c:	2302      	movs	r3, #2
 800a19e:	e00e      	b.n	800a1be <HAL_PCD_EP_Close+0x8c>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68f9      	ldr	r1, [r7, #12]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 fec0 	bl	800bf34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b086      	sub	sp, #24
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	603b      	str	r3, [r7, #0]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1d6:	7afb      	ldrb	r3, [r7, #11]
 800a1d8:	f003 020f 	and.w	r2, r3, #15
 800a1dc:	4613      	mov	r3, r2
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2200      	movs	r2, #0
 800a200:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2200      	movs	r2, #0
 800a206:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a208:	7afb      	ldrb	r3, [r7, #11]
 800a20a:	f003 030f 	and.w	r3, r3, #15
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d102      	bne.n	800a222 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d109      	bne.n	800a240 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	461a      	mov	r2, r3
 800a238:	6979      	ldr	r1, [r7, #20]
 800a23a:	f002 f99f 	bl	800c57c <USB_EP0StartXfer>
 800a23e:	e008      	b.n	800a252 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	461a      	mov	r2, r3
 800a24c:	6979      	ldr	r1, [r7, #20]
 800a24e:	f001 ff4d 	bl	800c0ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	f003 020f 	and.w	r2, r3, #15
 800a26e:	6879      	ldr	r1, [r7, #4]
 800a270:	4613      	mov	r3, r2
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	4413      	add	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	440b      	add	r3, r1
 800a27a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a27e:	681b      	ldr	r3, [r3, #0]
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	607a      	str	r2, [r7, #4]
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	460b      	mov	r3, r1
 800a29a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	f003 020f 	and.w	r2, r3, #15
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	3338      	adds	r3, #56	; 0x38
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2cc:	7afb      	ldrb	r3, [r7, #11]
 800a2ce:	f003 030f 	and.w	r3, r3, #15
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d102      	bne.n	800a2e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a2e6:	7afb      	ldrb	r3, [r7, #11]
 800a2e8:	f003 030f 	and.w	r3, r3, #15
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d109      	bne.n	800a304 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	6979      	ldr	r1, [r7, #20]
 800a2fe:	f002 f93d 	bl	800c57c <USB_EP0StartXfer>
 800a302:	e008      	b.n	800a316 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	461a      	mov	r2, r3
 800a310:	6979      	ldr	r1, [r7, #20]
 800a312:	f001 feeb 	bl	800c0ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a32c:	78fb      	ldrb	r3, [r7, #3]
 800a32e:	f003 020f 	and.w	r2, r3, #15
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d901      	bls.n	800a33e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e050      	b.n	800a3e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a33e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a342:	2b00      	cmp	r3, #0
 800a344:	da0f      	bge.n	800a366 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	f003 020f 	and.w	r2, r3, #15
 800a34c:	4613      	mov	r3, r2
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	3338      	adds	r3, #56	; 0x38
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	4413      	add	r3, r2
 800a35a:	3304      	adds	r3, #4
 800a35c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	705a      	strb	r2, [r3, #1]
 800a364:	e00d      	b.n	800a382 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a366:	78fa      	ldrb	r2, [r7, #3]
 800a368:	4613      	mov	r3, r2
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	4413      	add	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	4413      	add	r3, r2
 800a378:	3304      	adds	r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2201      	movs	r2, #1
 800a386:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d101      	bne.n	800a3a2 <HAL_PCD_EP_SetStall+0x82>
 800a39e:	2302      	movs	r3, #2
 800a3a0:	e01e      	b.n	800a3e0 <HAL_PCD_EP_SetStall+0xc0>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68f9      	ldr	r1, [r7, #12]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f002 fb7b 	bl	800caac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a3b6:	78fb      	ldrb	r3, [r7, #3]
 800a3b8:	f003 030f 	and.w	r3, r3, #15
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	b2d9      	uxtb	r1, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	f002 fd6b 	bl	800ceac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	f003 020f 	and.w	r2, r3, #15
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d901      	bls.n	800a406 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e042      	b.n	800a48c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da0f      	bge.n	800a42e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	f003 020f 	and.w	r2, r3, #15
 800a414:	4613      	mov	r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	3338      	adds	r3, #56	; 0x38
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	3304      	adds	r3, #4
 800a424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	705a      	strb	r2, [r3, #1]
 800a42c:	e00f      	b.n	800a44e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	f003 020f 	and.w	r2, r3, #15
 800a434:	4613      	mov	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	4413      	add	r3, r2
 800a444:	3304      	adds	r3, #4
 800a446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	f003 030f 	and.w	r3, r3, #15
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a466:	2b01      	cmp	r3, #1
 800a468:	d101      	bne.n	800a46e <HAL_PCD_EP_ClrStall+0x86>
 800a46a:	2302      	movs	r3, #2
 800a46c:	e00e      	b.n	800a48c <HAL_PCD_EP_ClrStall+0xa4>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68f9      	ldr	r1, [r7, #12]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f002 fb83 	bl	800cb88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a4a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	da0c      	bge.n	800a4c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	f003 020f 	and.w	r2, r3, #15
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	3338      	adds	r3, #56	; 0x38
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	3304      	adds	r3, #4
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	e00c      	b.n	800a4dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4c2:	78fb      	ldrb	r3, [r7, #3]
 800a4c4:	f003 020f 	and.w	r2, r3, #15
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	00db      	lsls	r3, r3, #3
 800a4cc:	4413      	add	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	3304      	adds	r3, #4
 800a4da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68f9      	ldr	r1, [r7, #12]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f002 f9a2 	bl	800c82c <USB_EPStopXfer>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b08a      	sub	sp, #40	; 0x28
 800a4fa:	af02      	add	r7, sp, #8
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	3338      	adds	r3, #56	; 0x38
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	4413      	add	r3, r2
 800a51a:	3304      	adds	r3, #4
 800a51c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6a1a      	ldr	r2, [r3, #32]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	429a      	cmp	r2, r3
 800a528:	d901      	bls.n	800a52e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e06c      	b.n	800a608 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	429a      	cmp	r2, r3
 800a542:	d902      	bls.n	800a54a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	3303      	adds	r3, #3
 800a54e:	089b      	lsrs	r3, r3, #2
 800a550:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a552:	e02b      	b.n	800a5ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	699a      	ldr	r2, [r3, #24]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	69fa      	ldr	r2, [r7, #28]
 800a566:	429a      	cmp	r2, r3
 800a568:	d902      	bls.n	800a570 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	3303      	adds	r3, #3
 800a574:	089b      	lsrs	r3, r3, #2
 800a576:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6919      	ldr	r1, [r3, #16]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	4603      	mov	r3, r0
 800a58e:	6978      	ldr	r0, [r7, #20]
 800a590:	f002 f9f6 	bl	800c980 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	691a      	ldr	r2, [r3, #16]
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	441a      	add	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a1a      	ldr	r2, [r3, #32]
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	441a      	add	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d809      	bhi.n	800a5d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a1a      	ldr	r2, [r3, #32]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d203      	bcs.n	800a5d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1be      	bne.n	800a554 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	699a      	ldr	r2, [r3, #24]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d811      	bhi.n	800a606 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	43db      	mvns	r3, r3
 800a5fc:	6939      	ldr	r1, [r7, #16]
 800a5fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a602:	4013      	ands	r3, r2
 800a604:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3720      	adds	r7, #32
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	333c      	adds	r3, #60	; 0x3c
 800a628:	3304      	adds	r3, #4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d17b      	bne.n	800a73e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f003 0308 	and.w	r3, r3, #8
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d015      	beq.n	800a67c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	4a61      	ldr	r2, [pc, #388]	; (800a7d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a654:	4293      	cmp	r3, r2
 800a656:	f240 80b9 	bls.w	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 80b3 	beq.w	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a672:	461a      	mov	r2, r3
 800a674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a678:	6093      	str	r3, [r2, #8]
 800a67a:	e0a7      	b.n	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a692:	461a      	mov	r2, r3
 800a694:	2320      	movs	r3, #32
 800a696:	6093      	str	r3, [r2, #8]
 800a698:	e098      	b.n	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f040 8093 	bne.w	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	4a4b      	ldr	r2, [pc, #300]	; (800a7d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d90f      	bls.n	800a6ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ca:	6093      	str	r3, [r2, #8]
 800a6cc:	e07e      	b.n	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	4413      	add	r3, r2
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	69da      	ldr	r2, [r3, #28]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	0159      	lsls	r1, r3, #5
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	440b      	add	r3, r1
 800a6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d114      	bne.n	800a730 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a718:	461a      	mov	r2, r3
 800a71a:	2101      	movs	r1, #1
 800a71c:	f002 fbc6 	bl	800ceac <USB_EP0_OutStart>
 800a720:	e006      	b.n	800a730 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	441a      	add	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f015 f842 	bl	801f7c0 <HAL_PCD_DataOutStageCallback>
 800a73c:	e046      	b.n	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	4a26      	ldr	r2, [pc, #152]	; (800a7dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d124      	bne.n	800a790 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00a      	beq.n	800a766 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75c:	461a      	mov	r2, r3
 800a75e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a762:	6093      	str	r3, [r2, #8]
 800a764:	e032      	b.n	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f003 0320 	and.w	r3, r3, #32
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d008      	beq.n	800a782 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77c:	461a      	mov	r2, r3
 800a77e:	2320      	movs	r3, #32
 800a780:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f015 f819 	bl	801f7c0 <HAL_PCD_DataOutStageCallback>
 800a78e:	e01d      	b.n	800a7cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d114      	bne.n	800a7c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	4613      	mov	r3, r2
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d108      	bne.n	800a7c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	f002 fb76 	bl	800ceac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f014 fffa 	bl	801f7c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3720      	adds	r7, #32
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	4f54300a 	.word	0x4f54300a
 800a7dc:	4f54310a 	.word	0x4f54310a

0800a7e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	333c      	adds	r3, #60	; 0x3c
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4a15      	ldr	r2, [pc, #84]	; (800a868 <PCD_EP_OutSetupPacket_int+0x88>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d90e      	bls.n	800a834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d009      	beq.n	800a834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82c:	461a      	mov	r2, r3
 800a82e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f014 ffb1 	bl	801f79c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4a0a      	ldr	r2, [pc, #40]	; (800a868 <PCD_EP_OutSetupPacket_int+0x88>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d90c      	bls.n	800a85c <PCD_EP_OutSetupPacket_int+0x7c>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d108      	bne.n	800a85c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a854:	461a      	mov	r2, r3
 800a856:	2101      	movs	r1, #1
 800a858:	f002 fb28 	bl	800ceac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	4f54300a 	.word	0x4f54300a

0800a86c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
 800a878:	4613      	mov	r3, r2
 800a87a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a884:	78fb      	ldrb	r3, [r7, #3]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d107      	bne.n	800a89a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a88a:	883b      	ldrh	r3, [r7, #0]
 800a88c:	0419      	lsls	r1, r3, #16
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	430a      	orrs	r2, r1
 800a896:	629a      	str	r2, [r3, #40]	; 0x28
 800a898:	e028      	b.n	800a8ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a0:	0c1b      	lsrs	r3, r3, #16
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
 800a8ac:	e00d      	b.n	800a8ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	3340      	adds	r3, #64	; 0x40
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	0c1b      	lsrs	r3, r3, #16
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	73fb      	strb	r3, [r7, #15]
 800a8ca:	7bfa      	ldrb	r2, [r7, #15]
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d3ec      	bcc.n	800a8ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a8d4:	883b      	ldrh	r3, [r7, #0]
 800a8d6:	0418      	lsls	r0, r3, #16
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6819      	ldr	r1, [r3, #0]
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	4302      	orrs	r2, r0
 800a8e4:	3340      	adds	r3, #64	; 0x40
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	440b      	add	r3, r1
 800a8ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	887a      	ldrh	r2, [r7, #2]
 800a90c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e267      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d075      	beq.n	800aa3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a952:	4b88      	ldr	r3, [pc, #544]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f003 030c 	and.w	r3, r3, #12
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d00c      	beq.n	800a978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a95e:	4b85      	ldr	r3, [pc, #532]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a966:	2b08      	cmp	r3, #8
 800a968:	d112      	bne.n	800a990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a96a:	4b82      	ldr	r3, [pc, #520]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a976:	d10b      	bne.n	800a990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a978:	4b7e      	ldr	r3, [pc, #504]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d05b      	beq.n	800aa3c <HAL_RCC_OscConfig+0x108>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d157      	bne.n	800aa3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e242      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a998:	d106      	bne.n	800a9a8 <HAL_RCC_OscConfig+0x74>
 800a99a:	4b76      	ldr	r3, [pc, #472]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a75      	ldr	r2, [pc, #468]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	e01d      	b.n	800a9e4 <HAL_RCC_OscConfig+0xb0>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9b0:	d10c      	bne.n	800a9cc <HAL_RCC_OscConfig+0x98>
 800a9b2:	4b70      	ldr	r3, [pc, #448]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a6f      	ldr	r2, [pc, #444]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	4b6d      	ldr	r3, [pc, #436]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a6c      	ldr	r2, [pc, #432]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	e00b      	b.n	800a9e4 <HAL_RCC_OscConfig+0xb0>
 800a9cc:	4b69      	ldr	r3, [pc, #420]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a68      	ldr	r2, [pc, #416]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	4b66      	ldr	r3, [pc, #408]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a65      	ldr	r2, [pc, #404]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800a9de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d013      	beq.n	800aa14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ec:	f7fe f9ee 	bl	8008dcc <HAL_GetTick>
 800a9f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9f2:	e008      	b.n	800aa06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9f4:	f7fe f9ea 	bl	8008dcc <HAL_GetTick>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	2b64      	cmp	r3, #100	; 0x64
 800aa00:	d901      	bls.n	800aa06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aa02:	2303      	movs	r3, #3
 800aa04:	e207      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa06:	4b5b      	ldr	r3, [pc, #364]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d0f0      	beq.n	800a9f4 <HAL_RCC_OscConfig+0xc0>
 800aa12:	e014      	b.n	800aa3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa14:	f7fe f9da 	bl	8008dcc <HAL_GetTick>
 800aa18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa1c:	f7fe f9d6 	bl	8008dcc <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b64      	cmp	r3, #100	; 0x64
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e1f3      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa2e:	4b51      	ldr	r3, [pc, #324]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1f0      	bne.n	800aa1c <HAL_RCC_OscConfig+0xe8>
 800aa3a:	e000      	b.n	800aa3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0302 	and.w	r3, r3, #2
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d063      	beq.n	800ab12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa4a:	4b4a      	ldr	r3, [pc, #296]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f003 030c 	and.w	r3, r3, #12
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00b      	beq.n	800aa6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa56:	4b47      	ldr	r3, [pc, #284]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa5e:	2b08      	cmp	r3, #8
 800aa60:	d11c      	bne.n	800aa9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa62:	4b44      	ldr	r3, [pc, #272]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d116      	bne.n	800aa9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa6e:	4b41      	ldr	r3, [pc, #260]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d005      	beq.n	800aa86 <HAL_RCC_OscConfig+0x152>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d001      	beq.n	800aa86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e1c7      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa86:	4b3b      	ldr	r3, [pc, #236]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	4937      	ldr	r1, [pc, #220]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa9a:	e03a      	b.n	800ab12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d020      	beq.n	800aae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aaa4:	4b34      	ldr	r3, [pc, #208]	; (800ab78 <HAL_RCC_OscConfig+0x244>)
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaaa:	f7fe f98f 	bl	8008dcc <HAL_GetTick>
 800aaae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aab0:	e008      	b.n	800aac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aab2:	f7fe f98b 	bl	8008dcc <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d901      	bls.n	800aac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aac0:	2303      	movs	r3, #3
 800aac2:	e1a8      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aac4:	4b2b      	ldr	r3, [pc, #172]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0f0      	beq.n	800aab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aad0:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	4925      	ldr	r1, [pc, #148]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800aae0:	4313      	orrs	r3, r2
 800aae2:	600b      	str	r3, [r1, #0]
 800aae4:	e015      	b.n	800ab12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aae6:	4b24      	ldr	r3, [pc, #144]	; (800ab78 <HAL_RCC_OscConfig+0x244>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaec:	f7fe f96e 	bl	8008dcc <HAL_GetTick>
 800aaf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aaf2:	e008      	b.n	800ab06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aaf4:	f7fe f96a 	bl	8008dcc <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d901      	bls.n	800ab06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e187      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab06:	4b1b      	ldr	r3, [pc, #108]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0302 	and.w	r3, r3, #2
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f0      	bne.n	800aaf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0308 	and.w	r3, r3, #8
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d036      	beq.n	800ab8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d016      	beq.n	800ab54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab26:	4b15      	ldr	r3, [pc, #84]	; (800ab7c <HAL_RCC_OscConfig+0x248>)
 800ab28:	2201      	movs	r2, #1
 800ab2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab2c:	f7fe f94e 	bl	8008dcc <HAL_GetTick>
 800ab30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab32:	e008      	b.n	800ab46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab34:	f7fe f94a 	bl	8008dcc <HAL_GetTick>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d901      	bls.n	800ab46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e167      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab46:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <HAL_RCC_OscConfig+0x240>)
 800ab48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab4a:	f003 0302 	and.w	r3, r3, #2
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0f0      	beq.n	800ab34 <HAL_RCC_OscConfig+0x200>
 800ab52:	e01b      	b.n	800ab8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab54:	4b09      	ldr	r3, [pc, #36]	; (800ab7c <HAL_RCC_OscConfig+0x248>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab5a:	f7fe f937 	bl	8008dcc <HAL_GetTick>
 800ab5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab60:	e00e      	b.n	800ab80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab62:	f7fe f933 	bl	8008dcc <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d907      	bls.n	800ab80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e150      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
 800ab74:	40023800 	.word	0x40023800
 800ab78:	42470000 	.word	0x42470000
 800ab7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab80:	4b88      	ldr	r3, [pc, #544]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ab82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1ea      	bne.n	800ab62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 8097 	beq.w	800acc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab9e:	4b81      	ldr	r3, [pc, #516]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800aba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10f      	bne.n	800abca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abaa:	2300      	movs	r3, #0
 800abac:	60bb      	str	r3, [r7, #8]
 800abae:	4b7d      	ldr	r3, [pc, #500]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800abb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb2:	4a7c      	ldr	r2, [pc, #496]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800abb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abb8:	6413      	str	r3, [r2, #64]	; 0x40
 800abba:	4b7a      	ldr	r3, [pc, #488]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abc2:	60bb      	str	r3, [r7, #8]
 800abc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800abc6:	2301      	movs	r3, #1
 800abc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abca:	4b77      	ldr	r3, [pc, #476]	; (800ada8 <HAL_RCC_OscConfig+0x474>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d118      	bne.n	800ac08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800abd6:	4b74      	ldr	r3, [pc, #464]	; (800ada8 <HAL_RCC_OscConfig+0x474>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a73      	ldr	r2, [pc, #460]	; (800ada8 <HAL_RCC_OscConfig+0x474>)
 800abdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800abe2:	f7fe f8f3 	bl	8008dcc <HAL_GetTick>
 800abe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abe8:	e008      	b.n	800abfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abea:	f7fe f8ef 	bl	8008dcc <HAL_GetTick>
 800abee:	4602      	mov	r2, r0
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d901      	bls.n	800abfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e10c      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abfc:	4b6a      	ldr	r3, [pc, #424]	; (800ada8 <HAL_RCC_OscConfig+0x474>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0f0      	beq.n	800abea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d106      	bne.n	800ac1e <HAL_RCC_OscConfig+0x2ea>
 800ac10:	4b64      	ldr	r3, [pc, #400]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac14:	4a63      	ldr	r2, [pc, #396]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac16:	f043 0301 	orr.w	r3, r3, #1
 800ac1a:	6713      	str	r3, [r2, #112]	; 0x70
 800ac1c:	e01c      	b.n	800ac58 <HAL_RCC_OscConfig+0x324>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	2b05      	cmp	r3, #5
 800ac24:	d10c      	bne.n	800ac40 <HAL_RCC_OscConfig+0x30c>
 800ac26:	4b5f      	ldr	r3, [pc, #380]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2a:	4a5e      	ldr	r2, [pc, #376]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac2c:	f043 0304 	orr.w	r3, r3, #4
 800ac30:	6713      	str	r3, [r2, #112]	; 0x70
 800ac32:	4b5c      	ldr	r3, [pc, #368]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac36:	4a5b      	ldr	r2, [pc, #364]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac38:	f043 0301 	orr.w	r3, r3, #1
 800ac3c:	6713      	str	r3, [r2, #112]	; 0x70
 800ac3e:	e00b      	b.n	800ac58 <HAL_RCC_OscConfig+0x324>
 800ac40:	4b58      	ldr	r3, [pc, #352]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac44:	4a57      	ldr	r2, [pc, #348]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac46:	f023 0301 	bic.w	r3, r3, #1
 800ac4a:	6713      	str	r3, [r2, #112]	; 0x70
 800ac4c:	4b55      	ldr	r3, [pc, #340]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac50:	4a54      	ldr	r2, [pc, #336]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac52:	f023 0304 	bic.w	r3, r3, #4
 800ac56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d015      	beq.n	800ac8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac60:	f7fe f8b4 	bl	8008dcc <HAL_GetTick>
 800ac64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac66:	e00a      	b.n	800ac7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac68:	f7fe f8b0 	bl	8008dcc <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d901      	bls.n	800ac7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e0cb      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac7e:	4b49      	ldr	r3, [pc, #292]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ac80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac82:	f003 0302 	and.w	r3, r3, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0ee      	beq.n	800ac68 <HAL_RCC_OscConfig+0x334>
 800ac8a:	e014      	b.n	800acb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac8c:	f7fe f89e 	bl	8008dcc <HAL_GetTick>
 800ac90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac92:	e00a      	b.n	800acaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac94:	f7fe f89a 	bl	8008dcc <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d901      	bls.n	800acaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e0b5      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800acaa:	4b3e      	ldr	r3, [pc, #248]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800acac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acae:	f003 0302 	and.w	r3, r3, #2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1ee      	bne.n	800ac94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d105      	bne.n	800acc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800acbc:	4b39      	ldr	r3, [pc, #228]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800acbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc0:	4a38      	ldr	r2, [pc, #224]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800acc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 80a1 	beq.w	800ae14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800acd2:	4b34      	ldr	r3, [pc, #208]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f003 030c 	and.w	r3, r3, #12
 800acda:	2b08      	cmp	r3, #8
 800acdc:	d05c      	beq.n	800ad98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d141      	bne.n	800ad6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ace6:	4b31      	ldr	r3, [pc, #196]	; (800adac <HAL_RCC_OscConfig+0x478>)
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acec:	f7fe f86e 	bl	8008dcc <HAL_GetTick>
 800acf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acf2:	e008      	b.n	800ad06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acf4:	f7fe f86a 	bl	8008dcc <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d901      	bls.n	800ad06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e087      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad06:	4b27      	ldr	r3, [pc, #156]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1f0      	bne.n	800acf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	69da      	ldr	r2, [r3, #28]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	019b      	lsls	r3, r3, #6
 800ad22:	431a      	orrs	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	085b      	lsrs	r3, r3, #1
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	041b      	lsls	r3, r3, #16
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad34:	061b      	lsls	r3, r3, #24
 800ad36:	491b      	ldr	r1, [pc, #108]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad3c:	4b1b      	ldr	r3, [pc, #108]	; (800adac <HAL_RCC_OscConfig+0x478>)
 800ad3e:	2201      	movs	r2, #1
 800ad40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad42:	f7fe f843 	bl	8008dcc <HAL_GetTick>
 800ad46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad48:	e008      	b.n	800ad5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad4a:	f7fe f83f 	bl	8008dcc <HAL_GetTick>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d901      	bls.n	800ad5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e05c      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad5c:	4b11      	ldr	r3, [pc, #68]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0f0      	beq.n	800ad4a <HAL_RCC_OscConfig+0x416>
 800ad68:	e054      	b.n	800ae14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad6a:	4b10      	ldr	r3, [pc, #64]	; (800adac <HAL_RCC_OscConfig+0x478>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad70:	f7fe f82c 	bl	8008dcc <HAL_GetTick>
 800ad74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad76:	e008      	b.n	800ad8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad78:	f7fe f828 	bl	8008dcc <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d901      	bls.n	800ad8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e045      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad8a:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <HAL_RCC_OscConfig+0x470>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1f0      	bne.n	800ad78 <HAL_RCC_OscConfig+0x444>
 800ad96:	e03d      	b.n	800ae14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e038      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
 800ada4:	40023800 	.word	0x40023800
 800ada8:	40007000 	.word	0x40007000
 800adac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800adb0:	4b1b      	ldr	r3, [pc, #108]	; (800ae20 <HAL_RCC_OscConfig+0x4ec>)
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d028      	beq.n	800ae10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adc8:	429a      	cmp	r2, r3
 800adca:	d121      	bne.n	800ae10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800add6:	429a      	cmp	r2, r3
 800add8:	d11a      	bne.n	800ae10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ade0:	4013      	ands	r3, r2
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ade6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ade8:	4293      	cmp	r3, r2
 800adea:	d111      	bne.n	800ae10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf6:	085b      	lsrs	r3, r3, #1
 800adf8:	3b01      	subs	r3, #1
 800adfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d107      	bne.n	800ae10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d001      	beq.n	800ae14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e000      	b.n	800ae16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	40023800 	.word	0x40023800

0800ae24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e0cc      	b.n	800afd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae38:	4b68      	ldr	r3, [pc, #416]	; (800afdc <HAL_RCC_ClockConfig+0x1b8>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 0307 	and.w	r3, r3, #7
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d90c      	bls.n	800ae60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae46:	4b65      	ldr	r3, [pc, #404]	; (800afdc <HAL_RCC_ClockConfig+0x1b8>)
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	b2d2      	uxtb	r2, r2
 800ae4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae4e:	4b63      	ldr	r3, [pc, #396]	; (800afdc <HAL_RCC_ClockConfig+0x1b8>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0307 	and.w	r3, r3, #7
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d001      	beq.n	800ae60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e0b8      	b.n	800afd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d020      	beq.n	800aeae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d005      	beq.n	800ae84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae78:	4b59      	ldr	r3, [pc, #356]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	4a58      	ldr	r2, [pc, #352]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0308 	and.w	r3, r3, #8
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d005      	beq.n	800ae9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae90:	4b53      	ldr	r3, [pc, #332]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	4a52      	ldr	r2, [pc, #328]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae9c:	4b50      	ldr	r3, [pc, #320]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	494d      	ldr	r1, [pc, #308]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d044      	beq.n	800af44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d107      	bne.n	800aed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aec2:	4b47      	ldr	r3, [pc, #284]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d119      	bne.n	800af02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e07f      	b.n	800afd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d003      	beq.n	800aee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d107      	bne.n	800aef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aee2:	4b3f      	ldr	r3, [pc, #252]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d109      	bne.n	800af02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e06f      	b.n	800afd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aef2:	4b3b      	ldr	r3, [pc, #236]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0302 	and.w	r3, r3, #2
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e067      	b.n	800afd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af02:	4b37      	ldr	r3, [pc, #220]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f023 0203 	bic.w	r2, r3, #3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	4934      	ldr	r1, [pc, #208]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800af10:	4313      	orrs	r3, r2
 800af12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800af14:	f7fd ff5a 	bl	8008dcc <HAL_GetTick>
 800af18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af1a:	e00a      	b.n	800af32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af1c:	f7fd ff56 	bl	8008dcc <HAL_GetTick>
 800af20:	4602      	mov	r2, r0
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	f241 3288 	movw	r2, #5000	; 0x1388
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d901      	bls.n	800af32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800af2e:	2303      	movs	r3, #3
 800af30:	e04f      	b.n	800afd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af32:	4b2b      	ldr	r3, [pc, #172]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f003 020c 	and.w	r2, r3, #12
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	429a      	cmp	r2, r3
 800af42:	d1eb      	bne.n	800af1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af44:	4b25      	ldr	r3, [pc, #148]	; (800afdc <HAL_RCC_ClockConfig+0x1b8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d20c      	bcs.n	800af6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af52:	4b22      	ldr	r3, [pc, #136]	; (800afdc <HAL_RCC_ClockConfig+0x1b8>)
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	b2d2      	uxtb	r2, r2
 800af58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af5a:	4b20      	ldr	r3, [pc, #128]	; (800afdc <HAL_RCC_ClockConfig+0x1b8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	429a      	cmp	r2, r3
 800af66:	d001      	beq.n	800af6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e032      	b.n	800afd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0304 	and.w	r3, r3, #4
 800af74:	2b00      	cmp	r3, #0
 800af76:	d008      	beq.n	800af8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af78:	4b19      	ldr	r3, [pc, #100]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	4916      	ldr	r1, [pc, #88]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800af86:	4313      	orrs	r3, r2
 800af88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0308 	and.w	r3, r3, #8
 800af92:	2b00      	cmp	r3, #0
 800af94:	d009      	beq.n	800afaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af96:	4b12      	ldr	r3, [pc, #72]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	490e      	ldr	r1, [pc, #56]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800afaa:	f000 f821 	bl	800aff0 <HAL_RCC_GetSysClockFreq>
 800afae:	4602      	mov	r2, r0
 800afb0:	4b0b      	ldr	r3, [pc, #44]	; (800afe0 <HAL_RCC_ClockConfig+0x1bc>)
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	091b      	lsrs	r3, r3, #4
 800afb6:	f003 030f 	and.w	r3, r3, #15
 800afba:	490a      	ldr	r1, [pc, #40]	; (800afe4 <HAL_RCC_ClockConfig+0x1c0>)
 800afbc:	5ccb      	ldrb	r3, [r1, r3]
 800afbe:	fa22 f303 	lsr.w	r3, r2, r3
 800afc2:	4a09      	ldr	r2, [pc, #36]	; (800afe8 <HAL_RCC_ClockConfig+0x1c4>)
 800afc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800afc6:	4b09      	ldr	r3, [pc, #36]	; (800afec <HAL_RCC_ClockConfig+0x1c8>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fd feba 	bl	8008d44 <HAL_InitTick>

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	40023c00 	.word	0x40023c00
 800afe0:	40023800 	.word	0x40023800
 800afe4:	08029bd4 	.word	0x08029bd4
 800afe8:	20000060 	.word	0x20000060
 800afec:	20000064 	.word	0x20000064

0800aff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aff4:	b094      	sub	sp, #80	; 0x50
 800aff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aff8:	2300      	movs	r3, #0
 800affa:	647b      	str	r3, [r7, #68]	; 0x44
 800affc:	2300      	movs	r3, #0
 800affe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b000:	2300      	movs	r3, #0
 800b002:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b004:	2300      	movs	r3, #0
 800b006:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b008:	4b79      	ldr	r3, [pc, #484]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f003 030c 	and.w	r3, r3, #12
 800b010:	2b08      	cmp	r3, #8
 800b012:	d00d      	beq.n	800b030 <HAL_RCC_GetSysClockFreq+0x40>
 800b014:	2b08      	cmp	r3, #8
 800b016:	f200 80e1 	bhi.w	800b1dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <HAL_RCC_GetSysClockFreq+0x34>
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d003      	beq.n	800b02a <HAL_RCC_GetSysClockFreq+0x3a>
 800b022:	e0db      	b.n	800b1dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b024:	4b73      	ldr	r3, [pc, #460]	; (800b1f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b026:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b028:	e0db      	b.n	800b1e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b02a:	4b73      	ldr	r3, [pc, #460]	; (800b1f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800b02c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b02e:	e0d8      	b.n	800b1e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b030:	4b6f      	ldr	r3, [pc, #444]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b038:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b03a:	4b6d      	ldr	r3, [pc, #436]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d063      	beq.n	800b10e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b046:	4b6a      	ldr	r3, [pc, #424]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	099b      	lsrs	r3, r3, #6
 800b04c:	2200      	movs	r2, #0
 800b04e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b050:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b058:	633b      	str	r3, [r7, #48]	; 0x30
 800b05a:	2300      	movs	r3, #0
 800b05c:	637b      	str	r3, [r7, #52]	; 0x34
 800b05e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b062:	4622      	mov	r2, r4
 800b064:	462b      	mov	r3, r5
 800b066:	f04f 0000 	mov.w	r0, #0
 800b06a:	f04f 0100 	mov.w	r1, #0
 800b06e:	0159      	lsls	r1, r3, #5
 800b070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b074:	0150      	lsls	r0, r2, #5
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4621      	mov	r1, r4
 800b07c:	1a51      	subs	r1, r2, r1
 800b07e:	6139      	str	r1, [r7, #16]
 800b080:	4629      	mov	r1, r5
 800b082:	eb63 0301 	sbc.w	r3, r3, r1
 800b086:	617b      	str	r3, [r7, #20]
 800b088:	f04f 0200 	mov.w	r2, #0
 800b08c:	f04f 0300 	mov.w	r3, #0
 800b090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b094:	4659      	mov	r1, fp
 800b096:	018b      	lsls	r3, r1, #6
 800b098:	4651      	mov	r1, sl
 800b09a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b09e:	4651      	mov	r1, sl
 800b0a0:	018a      	lsls	r2, r1, #6
 800b0a2:	4651      	mov	r1, sl
 800b0a4:	ebb2 0801 	subs.w	r8, r2, r1
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	eb63 0901 	sbc.w	r9, r3, r1
 800b0ae:	f04f 0200 	mov.w	r2, #0
 800b0b2:	f04f 0300 	mov.w	r3, #0
 800b0b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b0ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b0be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b0c2:	4690      	mov	r8, r2
 800b0c4:	4699      	mov	r9, r3
 800b0c6:	4623      	mov	r3, r4
 800b0c8:	eb18 0303 	adds.w	r3, r8, r3
 800b0cc:	60bb      	str	r3, [r7, #8]
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	eb49 0303 	adc.w	r3, r9, r3
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	f04f 0300 	mov.w	r3, #0
 800b0de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	024b      	lsls	r3, r1, #9
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	024a      	lsls	r2, r1, #9
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b100:	f7f5 fe1c 	bl	8000d3c <__aeabi_uldivmod>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4613      	mov	r3, r2
 800b10a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b10c:	e058      	b.n	800b1c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b10e:	4b38      	ldr	r3, [pc, #224]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	099b      	lsrs	r3, r3, #6
 800b114:	2200      	movs	r2, #0
 800b116:	4618      	mov	r0, r3
 800b118:	4611      	mov	r1, r2
 800b11a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b11e:	623b      	str	r3, [r7, #32]
 800b120:	2300      	movs	r3, #0
 800b122:	627b      	str	r3, [r7, #36]	; 0x24
 800b124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b128:	4642      	mov	r2, r8
 800b12a:	464b      	mov	r3, r9
 800b12c:	f04f 0000 	mov.w	r0, #0
 800b130:	f04f 0100 	mov.w	r1, #0
 800b134:	0159      	lsls	r1, r3, #5
 800b136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b13a:	0150      	lsls	r0, r2, #5
 800b13c:	4602      	mov	r2, r0
 800b13e:	460b      	mov	r3, r1
 800b140:	4641      	mov	r1, r8
 800b142:	ebb2 0a01 	subs.w	sl, r2, r1
 800b146:	4649      	mov	r1, r9
 800b148:	eb63 0b01 	sbc.w	fp, r3, r1
 800b14c:	f04f 0200 	mov.w	r2, #0
 800b150:	f04f 0300 	mov.w	r3, #0
 800b154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b15c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b160:	ebb2 040a 	subs.w	r4, r2, sl
 800b164:	eb63 050b 	sbc.w	r5, r3, fp
 800b168:	f04f 0200 	mov.w	r2, #0
 800b16c:	f04f 0300 	mov.w	r3, #0
 800b170:	00eb      	lsls	r3, r5, #3
 800b172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b176:	00e2      	lsls	r2, r4, #3
 800b178:	4614      	mov	r4, r2
 800b17a:	461d      	mov	r5, r3
 800b17c:	4643      	mov	r3, r8
 800b17e:	18e3      	adds	r3, r4, r3
 800b180:	603b      	str	r3, [r7, #0]
 800b182:	464b      	mov	r3, r9
 800b184:	eb45 0303 	adc.w	r3, r5, r3
 800b188:	607b      	str	r3, [r7, #4]
 800b18a:	f04f 0200 	mov.w	r2, #0
 800b18e:	f04f 0300 	mov.w	r3, #0
 800b192:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b196:	4629      	mov	r1, r5
 800b198:	028b      	lsls	r3, r1, #10
 800b19a:	4621      	mov	r1, r4
 800b19c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	028a      	lsls	r2, r1, #10
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	61bb      	str	r3, [r7, #24]
 800b1ae:	61fa      	str	r2, [r7, #28]
 800b1b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1b4:	f7f5 fdc2 	bl	8000d3c <__aeabi_uldivmod>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4613      	mov	r3, r2
 800b1be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b1c0:	4b0b      	ldr	r3, [pc, #44]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	0c1b      	lsrs	r3, r3, #16
 800b1c6:	f003 0303 	and.w	r3, r3, #3
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	005b      	lsls	r3, r3, #1
 800b1ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b1d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b1da:	e002      	b.n	800b1e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b1dc:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b1de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b1e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3750      	adds	r7, #80	; 0x50
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1ee:	bf00      	nop
 800b1f0:	40023800 	.word	0x40023800
 800b1f4:	00f42400 	.word	0x00f42400
 800b1f8:	007a1200 	.word	0x007a1200

0800b1fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b200:	4b03      	ldr	r3, [pc, #12]	; (800b210 <HAL_RCC_GetHCLKFreq+0x14>)
 800b202:	681b      	ldr	r3, [r3, #0]
}
 800b204:	4618      	mov	r0, r3
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	20000060 	.word	0x20000060

0800b214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d101      	bne.n	800b226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e07b      	b.n	800b31e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d108      	bne.n	800b240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b236:	d009      	beq.n	800b24c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	61da      	str	r2, [r3, #28]
 800b23e:	e005      	b.n	800b24c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d106      	bne.n	800b26c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7fd fbc4 	bl	80089f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2202      	movs	r2, #2
 800b270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b282:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b294:	431a      	orrs	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	f003 0302 	and.w	r3, r3, #2
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d0:	ea42 0103 	orr.w	r1, r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	0c1b      	lsrs	r3, r3, #16
 800b2ea:	f003 0104 	and.w	r1, r3, #4
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f2:	f003 0210 	and.w	r2, r3, #16
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	69da      	ldr	r2, [r3, #28]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b30c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b088      	sub	sp, #32
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	603b      	str	r3, [r7, #0]
 800b332:	4613      	mov	r3, r2
 800b334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <HAL_SPI_Transmit+0x22>
 800b344:	2302      	movs	r3, #2
 800b346:	e126      	b.n	800b596 <HAL_SPI_Transmit+0x270>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b350:	f7fd fd3c 	bl	8008dcc <HAL_GetTick>
 800b354:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b356:	88fb      	ldrh	r3, [r7, #6]
 800b358:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b01      	cmp	r3, #1
 800b364:	d002      	beq.n	800b36c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b366:	2302      	movs	r3, #2
 800b368:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b36a:	e10b      	b.n	800b584 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d002      	beq.n	800b378 <HAL_SPI_Transmit+0x52>
 800b372:	88fb      	ldrh	r3, [r7, #6]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b37c:	e102      	b.n	800b584 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2203      	movs	r2, #3
 800b382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	88fa      	ldrh	r2, [r7, #6]
 800b396:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	88fa      	ldrh	r2, [r7, #6]
 800b39c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3c4:	d10f      	bne.n	800b3e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	d007      	beq.n	800b404 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b40c:	d14b      	bne.n	800b4a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <HAL_SPI_Transmit+0xf6>
 800b416:	8afb      	ldrh	r3, [r7, #22]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d13e      	bne.n	800b49a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b420:	881a      	ldrh	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	1c9a      	adds	r2, r3, #2
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b436:	b29b      	uxth	r3, r3
 800b438:	3b01      	subs	r3, #1
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b440:	e02b      	b.n	800b49a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d112      	bne.n	800b476 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b454:	881a      	ldrh	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b460:	1c9a      	adds	r2, r3, #2
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b29a      	uxth	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	86da      	strh	r2, [r3, #54]	; 0x36
 800b474:	e011      	b.n	800b49a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b476:	f7fd fca9 	bl	8008dcc <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	429a      	cmp	r2, r3
 800b484:	d803      	bhi.n	800b48e <HAL_SPI_Transmit+0x168>
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b48c:	d102      	bne.n	800b494 <HAL_SPI_Transmit+0x16e>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d102      	bne.n	800b49a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b494:	2303      	movs	r3, #3
 800b496:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b498:	e074      	b.n	800b584 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1ce      	bne.n	800b442 <HAL_SPI_Transmit+0x11c>
 800b4a4:	e04c      	b.n	800b540 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <HAL_SPI_Transmit+0x18e>
 800b4ae:	8afb      	ldrh	r3, [r7, #22]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d140      	bne.n	800b536 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	7812      	ldrb	r2, [r2, #0]
 800b4c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b4da:	e02c      	b.n	800b536 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	f003 0302 	and.w	r3, r3, #2
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d113      	bne.n	800b512 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	330c      	adds	r3, #12
 800b4f4:	7812      	ldrb	r2, [r2, #0]
 800b4f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b506:	b29b      	uxth	r3, r3
 800b508:	3b01      	subs	r3, #1
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b510:	e011      	b.n	800b536 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b512:	f7fd fc5b 	bl	8008dcc <HAL_GetTick>
 800b516:	4602      	mov	r2, r0
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d803      	bhi.n	800b52a <HAL_SPI_Transmit+0x204>
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b528:	d102      	bne.n	800b530 <HAL_SPI_Transmit+0x20a>
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d102      	bne.n	800b536 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b534:	e026      	b.n	800b584 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1cd      	bne.n	800b4dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 f8b3 	bl	800b6b0 <SPI_EndRxTxTransaction>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2220      	movs	r2, #32
 800b554:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b55e:	2300      	movs	r3, #0
 800b560:	613b      	str	r3, [r7, #16]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	613b      	str	r3, [r7, #16]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	613b      	str	r3, [r7, #16]
 800b572:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d002      	beq.n	800b582 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	77fb      	strb	r3, [r7, #31]
 800b580:	e000      	b.n	800b584 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b582:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b594:	7ffb      	ldrb	r3, [r7, #31]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3720      	adds	r7, #32
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
	...

0800b5a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	603b      	str	r3, [r7, #0]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b5b0:	f7fd fc0c 	bl	8008dcc <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	1a9b      	subs	r3, r3, r2
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	4413      	add	r3, r2
 800b5be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b5c0:	f7fd fc04 	bl	8008dcc <HAL_GetTick>
 800b5c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b5c6:	4b39      	ldr	r3, [pc, #228]	; (800b6ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	015b      	lsls	r3, r3, #5
 800b5cc:	0d1b      	lsrs	r3, r3, #20
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	fb02 f303 	mul.w	r3, r2, r3
 800b5d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5d6:	e054      	b.n	800b682 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5de:	d050      	beq.n	800b682 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b5e0:	f7fd fbf4 	bl	8008dcc <HAL_GetTick>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	69fa      	ldr	r2, [r7, #28]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d902      	bls.n	800b5f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d13d      	bne.n	800b672 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b60e:	d111      	bne.n	800b634 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b618:	d004      	beq.n	800b624 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b622:	d107      	bne.n	800b634 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b63c:	d10f      	bne.n	800b65e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b65c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e017      	b.n	800b6a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b678:	2300      	movs	r3, #0
 800b67a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	3b01      	subs	r3, #1
 800b680:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	4013      	ands	r3, r2
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	429a      	cmp	r2, r3
 800b690:	bf0c      	ite	eq
 800b692:	2301      	moveq	r3, #1
 800b694:	2300      	movne	r3, #0
 800b696:	b2db      	uxtb	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d19b      	bne.n	800b5d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3720      	adds	r7, #32
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20000060 	.word	0x20000060

0800b6b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b6bc:	4b1b      	ldr	r3, [pc, #108]	; (800b72c <SPI_EndRxTxTransaction+0x7c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a1b      	ldr	r2, [pc, #108]	; (800b730 <SPI_EndRxTxTransaction+0x80>)
 800b6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c6:	0d5b      	lsrs	r3, r3, #21
 800b6c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b6cc:	fb02 f303 	mul.w	r3, r2, r3
 800b6d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6da:	d112      	bne.n	800b702 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2180      	movs	r1, #128	; 0x80
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f7ff ff5a 	bl	800b5a0 <SPI_WaitFlagStateUntilTimeout>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d016      	beq.n	800b720 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f6:	f043 0220 	orr.w	r2, r3, #32
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e00f      	b.n	800b722 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00a      	beq.n	800b71e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b718:	2b80      	cmp	r3, #128	; 0x80
 800b71a:	d0f2      	beq.n	800b702 <SPI_EndRxTxTransaction+0x52>
 800b71c:	e000      	b.n	800b720 <SPI_EndRxTxTransaction+0x70>
        break;
 800b71e:	bf00      	nop
  }

  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	20000060 	.word	0x20000060
 800b730:	165e9f81 	.word	0x165e9f81

0800b734 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b734:	b084      	sub	sp, #16
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	f107 001c 	add.w	r0, r7, #28
 800b742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d122      	bne.n	800b792 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b750:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b776:	2b01      	cmp	r3, #1
 800b778:	d105      	bne.n	800b786 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f001 fbee 	bl	800cf68 <USB_CoreReset>
 800b78c:	4603      	mov	r3, r0
 800b78e:	73fb      	strb	r3, [r7, #15]
 800b790:	e01a      	b.n	800b7c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 fbe2 	bl	800cf68 <USB_CoreReset>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	639a      	str	r2, [r3, #56]	; 0x38
 800b7ba:	e005      	b.n	800b7c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d10b      	bne.n	800b7e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f043 0206 	orr.w	r2, r3, #6
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	f043 0220 	orr.w	r2, r3, #32
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7f2:	b004      	add	sp, #16
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	4613      	mov	r3, r2
 800b804:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b806:	79fb      	ldrb	r3, [r7, #7]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d165      	bne.n	800b8d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	4a41      	ldr	r2, [pc, #260]	; (800b914 <USB_SetTurnaroundTime+0x11c>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d906      	bls.n	800b822 <USB_SetTurnaroundTime+0x2a>
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	4a40      	ldr	r2, [pc, #256]	; (800b918 <USB_SetTurnaroundTime+0x120>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d202      	bcs.n	800b822 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b81c:	230f      	movs	r3, #15
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	e062      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	4a3c      	ldr	r2, [pc, #240]	; (800b918 <USB_SetTurnaroundTime+0x120>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d306      	bcc.n	800b838 <USB_SetTurnaroundTime+0x40>
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	4a3b      	ldr	r2, [pc, #236]	; (800b91c <USB_SetTurnaroundTime+0x124>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d202      	bcs.n	800b838 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b832:	230e      	movs	r3, #14
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	e057      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	4a38      	ldr	r2, [pc, #224]	; (800b91c <USB_SetTurnaroundTime+0x124>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d306      	bcc.n	800b84e <USB_SetTurnaroundTime+0x56>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	4a37      	ldr	r2, [pc, #220]	; (800b920 <USB_SetTurnaroundTime+0x128>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d202      	bcs.n	800b84e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b848:	230d      	movs	r3, #13
 800b84a:	617b      	str	r3, [r7, #20]
 800b84c:	e04c      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	4a33      	ldr	r2, [pc, #204]	; (800b920 <USB_SetTurnaroundTime+0x128>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d306      	bcc.n	800b864 <USB_SetTurnaroundTime+0x6c>
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	4a32      	ldr	r2, [pc, #200]	; (800b924 <USB_SetTurnaroundTime+0x12c>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d802      	bhi.n	800b864 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b85e:	230c      	movs	r3, #12
 800b860:	617b      	str	r3, [r7, #20]
 800b862:	e041      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	4a2f      	ldr	r2, [pc, #188]	; (800b924 <USB_SetTurnaroundTime+0x12c>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d906      	bls.n	800b87a <USB_SetTurnaroundTime+0x82>
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	4a2e      	ldr	r2, [pc, #184]	; (800b928 <USB_SetTurnaroundTime+0x130>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d802      	bhi.n	800b87a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b874:	230b      	movs	r3, #11
 800b876:	617b      	str	r3, [r7, #20]
 800b878:	e036      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	4a2a      	ldr	r2, [pc, #168]	; (800b928 <USB_SetTurnaroundTime+0x130>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d906      	bls.n	800b890 <USB_SetTurnaroundTime+0x98>
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	4a29      	ldr	r2, [pc, #164]	; (800b92c <USB_SetTurnaroundTime+0x134>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d802      	bhi.n	800b890 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b88a:	230a      	movs	r3, #10
 800b88c:	617b      	str	r3, [r7, #20]
 800b88e:	e02b      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	4a26      	ldr	r2, [pc, #152]	; (800b92c <USB_SetTurnaroundTime+0x134>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d906      	bls.n	800b8a6 <USB_SetTurnaroundTime+0xae>
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	4a25      	ldr	r2, [pc, #148]	; (800b930 <USB_SetTurnaroundTime+0x138>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d202      	bcs.n	800b8a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b8a0:	2309      	movs	r3, #9
 800b8a2:	617b      	str	r3, [r7, #20]
 800b8a4:	e020      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	4a21      	ldr	r2, [pc, #132]	; (800b930 <USB_SetTurnaroundTime+0x138>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d306      	bcc.n	800b8bc <USB_SetTurnaroundTime+0xc4>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	4a20      	ldr	r2, [pc, #128]	; (800b934 <USB_SetTurnaroundTime+0x13c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d802      	bhi.n	800b8bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b8b6:	2308      	movs	r3, #8
 800b8b8:	617b      	str	r3, [r7, #20]
 800b8ba:	e015      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	4a1d      	ldr	r2, [pc, #116]	; (800b934 <USB_SetTurnaroundTime+0x13c>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d906      	bls.n	800b8d2 <USB_SetTurnaroundTime+0xda>
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	4a1c      	ldr	r2, [pc, #112]	; (800b938 <USB_SetTurnaroundTime+0x140>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d202      	bcs.n	800b8d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b8cc:	2307      	movs	r3, #7
 800b8ce:	617b      	str	r3, [r7, #20]
 800b8d0:	e00a      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b8d2:	2306      	movs	r3, #6
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	e007      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d102      	bne.n	800b8e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b8de:	2309      	movs	r3, #9
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	e001      	b.n	800b8e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b8e4:	2309      	movs	r3, #9
 800b8e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	68da      	ldr	r2, [r3, #12]
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	029b      	lsls	r3, r3, #10
 800b8fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b900:	431a      	orrs	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	371c      	adds	r7, #28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	00d8acbf 	.word	0x00d8acbf
 800b918:	00e4e1c0 	.word	0x00e4e1c0
 800b91c:	00f42400 	.word	0x00f42400
 800b920:	01067380 	.word	0x01067380
 800b924:	011a499f 	.word	0x011a499f
 800b928:	01312cff 	.word	0x01312cff
 800b92c:	014ca43f 	.word	0x014ca43f
 800b930:	016e3600 	.word	0x016e3600
 800b934:	01a6ab1f 	.word	0x01a6ab1f
 800b938:	01e84800 	.word	0x01e84800

0800b93c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	f043 0201 	orr.w	r2, r3, #1
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b95e:	b480      	push	{r7}
 800b960:	b083      	sub	sp, #12
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	f023 0201 	bic.w	r2, r3, #1
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b98c:	2300      	movs	r3, #0
 800b98e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b99c:	78fb      	ldrb	r3, [r7, #3]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d115      	bne.n	800b9ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	f7fd fa18 	bl	8008de4 <HAL_Delay>
      ms++;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f001 fa45 	bl	800ce4a <USB_GetMode>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d01e      	beq.n	800ba04 <USB_SetCurrentMode+0x84>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b31      	cmp	r3, #49	; 0x31
 800b9ca:	d9f0      	bls.n	800b9ae <USB_SetCurrentMode+0x2e>
 800b9cc:	e01a      	b.n	800ba04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b9ce:	78fb      	ldrb	r3, [r7, #3]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d115      	bne.n	800ba00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9e0:	2001      	movs	r0, #1
 800b9e2:	f7fd f9ff 	bl	8008de4 <HAL_Delay>
      ms++;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 fa2c 	bl	800ce4a <USB_GetMode>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d005      	beq.n	800ba04 <USB_SetCurrentMode+0x84>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b31      	cmp	r3, #49	; 0x31
 800b9fc:	d9f0      	bls.n	800b9e0 <USB_SetCurrentMode+0x60>
 800b9fe:	e001      	b.n	800ba04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e005      	b.n	800ba10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b32      	cmp	r3, #50	; 0x32
 800ba08:	d101      	bne.n	800ba0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e000      	b.n	800ba10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba18:	b084      	sub	sp, #16
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b086      	sub	sp, #24
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ba26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba32:	2300      	movs	r3, #0
 800ba34:	613b      	str	r3, [r7, #16]
 800ba36:	e009      	b.n	800ba4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	3340      	adds	r3, #64	; 0x40
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4413      	add	r3, r2
 800ba42:	2200      	movs	r2, #0
 800ba44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	613b      	str	r3, [r7, #16]
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	2b0e      	cmp	r3, #14
 800ba50:	d9f2      	bls.n	800ba38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d11c      	bne.n	800ba92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba66:	f043 0302 	orr.w	r3, r3, #2
 800ba6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	639a      	str	r2, [r3, #56]	; 0x38
 800ba90:	e00b      	b.n	800baaa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bab0:	461a      	mov	r2, r3
 800bab2:	2300      	movs	r3, #0
 800bab4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800babc:	4619      	mov	r1, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac4:	461a      	mov	r2, r3
 800bac6:	680b      	ldr	r3, [r1, #0]
 800bac8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d10c      	bne.n	800baea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d104      	bne.n	800bae0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bad6:	2100      	movs	r1, #0
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f965 	bl	800bda8 <USB_SetDevSpeed>
 800bade:	e008      	b.n	800baf2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bae0:	2101      	movs	r1, #1
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f960 	bl	800bda8 <USB_SetDevSpeed>
 800bae8:	e003      	b.n	800baf2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800baea:	2103      	movs	r1, #3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f95b 	bl	800bda8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800baf2:	2110      	movs	r1, #16
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f8f3 	bl	800bce0 <USB_FlushTxFifo>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f91f 	bl	800bd48 <USB_FlushRxFifo>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb26:	461a      	mov	r2, r3
 800bb28:	2300      	movs	r3, #0
 800bb2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb32:	461a      	mov	r2, r3
 800bb34:	2300      	movs	r3, #0
 800bb36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	613b      	str	r3, [r7, #16]
 800bb3c:	e043      	b.n	800bbc6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	015a      	lsls	r2, r3, #5
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4413      	add	r3, r2
 800bb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb54:	d118      	bne.n	800bb88 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb68:	461a      	mov	r2, r3
 800bb6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	e013      	b.n	800bb9a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	e008      	b.n	800bb9a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb94:	461a      	mov	r2, r3
 800bb96:	2300      	movs	r3, #0
 800bb98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	015a      	lsls	r2, r3, #5
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	4413      	add	r3, r2
 800bba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba6:	461a      	mov	r2, r3
 800bba8:	2300      	movs	r3, #0
 800bbaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb8:	461a      	mov	r2, r3
 800bbba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bbbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	613b      	str	r3, [r7, #16]
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d3b7      	bcc.n	800bb3e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbce:	2300      	movs	r3, #0
 800bbd0:	613b      	str	r3, [r7, #16]
 800bbd2:	e043      	b.n	800bc5c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbea:	d118      	bne.n	800bc1e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10a      	bne.n	800bc08 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	e013      	b.n	800bc30 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc14:	461a      	mov	r2, r3
 800bc16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	e008      	b.n	800bc30 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	015a      	lsls	r2, r3, #5
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4413      	add	r3, r2
 800bc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	015a      	lsls	r2, r3, #5
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4413      	add	r3, r2
 800bc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	2300      	movs	r3, #0
 800bc40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	015a      	lsls	r2, r3, #5
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4413      	add	r3, r2
 800bc4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	613b      	str	r3, [r7, #16]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d3b7      	bcc.n	800bbd4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bc84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d105      	bne.n	800bc98 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	f043 0210 	orr.w	r2, r3, #16
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	699a      	ldr	r2, [r3, #24]
 800bc9c:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <USB_DevInit+0x2c4>)
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d005      	beq.n	800bcb6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	f043 0208 	orr.w	r2, r3, #8
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bcb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d107      	bne.n	800bccc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcc4:	f043 0304 	orr.w	r3, r3, #4
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bcd8:	b004      	add	sp, #16
 800bcda:	4770      	bx	lr
 800bcdc:	803c3800 	.word	0x803c3800

0800bce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4a13      	ldr	r2, [pc, #76]	; (800bd44 <USB_FlushTxFifo+0x64>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d901      	bls.n	800bd00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	e01b      	b.n	800bd38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	daf2      	bge.n	800bcee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	019b      	lsls	r3, r3, #6
 800bd10:	f043 0220 	orr.w	r2, r3, #32
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	4a08      	ldr	r2, [pc, #32]	; (800bd44 <USB_FlushTxFifo+0x64>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d901      	bls.n	800bd2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd26:	2303      	movs	r3, #3
 800bd28:	e006      	b.n	800bd38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	f003 0320 	and.w	r3, r3, #32
 800bd32:	2b20      	cmp	r3, #32
 800bd34:	d0f0      	beq.n	800bd18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	00030d40 	.word	0x00030d40

0800bd48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	3301      	adds	r3, #1
 800bd58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4a11      	ldr	r2, [pc, #68]	; (800bda4 <USB_FlushRxFifo+0x5c>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d901      	bls.n	800bd66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd62:	2303      	movs	r3, #3
 800bd64:	e018      	b.n	800bd98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	daf2      	bge.n	800bd54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2210      	movs	r2, #16
 800bd76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4a08      	ldr	r2, [pc, #32]	; (800bda4 <USB_FlushRxFifo+0x5c>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d901      	bls.n	800bd8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e006      	b.n	800bd98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	f003 0310 	and.w	r3, r3, #16
 800bd92:	2b10      	cmp	r3, #16
 800bd94:	d0f0      	beq.n	800bd78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3714      	adds	r7, #20
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr
 800bda4:	00030d40 	.word	0x00030d40

0800bda8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	78fb      	ldrb	r3, [r7, #3]
 800bdc2:	68f9      	ldr	r1, [r7, #12]
 800bdc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b087      	sub	sp, #28
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f003 0306 	and.w	r3, r3, #6
 800bdf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d102      	bne.n	800be00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	75fb      	strb	r3, [r7, #23]
 800bdfe:	e00a      	b.n	800be16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b02      	cmp	r3, #2
 800be04:	d002      	beq.n	800be0c <USB_GetDevSpeed+0x32>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2b06      	cmp	r3, #6
 800be0a:	d102      	bne.n	800be12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800be0c:	2302      	movs	r3, #2
 800be0e:	75fb      	strb	r3, [r7, #23]
 800be10:	e001      	b.n	800be16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800be12:	230f      	movs	r3, #15
 800be14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	371c      	adds	r7, #28
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	785b      	ldrb	r3, [r3, #1]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d13a      	bne.n	800beb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be46:	69da      	ldr	r2, [r3, #28]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	f003 030f 	and.w	r3, r3, #15
 800be50:	2101      	movs	r1, #1
 800be52:	fa01 f303 	lsl.w	r3, r1, r3
 800be56:	b29b      	uxth	r3, r3
 800be58:	68f9      	ldr	r1, [r7, #12]
 800be5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be5e:	4313      	orrs	r3, r2
 800be60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	015a      	lsls	r2, r3, #5
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be74:	2b00      	cmp	r3, #0
 800be76:	d155      	bne.n	800bf24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	791b      	ldrb	r3, [r3, #4]
 800be92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	059b      	lsls	r3, r3, #22
 800be9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be9c:	4313      	orrs	r3, r2
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	0151      	lsls	r1, r2, #5
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	440a      	add	r2, r1
 800bea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	e036      	b.n	800bf24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bebc:	69da      	ldr	r2, [r3, #28]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	f003 030f 	and.w	r3, r3, #15
 800bec6:	2101      	movs	r1, #1
 800bec8:	fa01 f303 	lsl.w	r3, r1, r3
 800becc:	041b      	lsls	r3, r3, #16
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bed4:	4313      	orrs	r3, r2
 800bed6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800beea:	2b00      	cmp	r3, #0
 800beec:	d11a      	bne.n	800bf24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	015a      	lsls	r2, r3, #5
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	4413      	add	r3, r2
 800bef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	791b      	ldrb	r3, [r3, #4]
 800bf08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf0a:	430b      	orrs	r3, r1
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	68ba      	ldr	r2, [r7, #8]
 800bf10:	0151      	lsls	r1, r2, #5
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	440a      	add	r2, r1
 800bf16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
	...

0800bf34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	785b      	ldrb	r3, [r3, #1]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d161      	bne.n	800c014 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	015a      	lsls	r2, r3, #5
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	4413      	add	r3, r2
 800bf58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf66:	d11f      	bne.n	800bfa8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	015a      	lsls	r2, r3, #5
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	0151      	lsls	r1, r2, #5
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	440a      	add	r2, r1
 800bf7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	015a      	lsls	r2, r3, #5
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	4413      	add	r3, r2
 800bf90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	0151      	lsls	r1, r2, #5
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	440a      	add	r2, r1
 800bf9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f003 030f 	and.w	r3, r3, #15
 800bfb8:	2101      	movs	r1, #1
 800bfba:	fa01 f303 	lsl.w	r3, r1, r3
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	43db      	mvns	r3, r3
 800bfc2:	68f9      	ldr	r1, [r7, #12]
 800bfc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfc8:	4013      	ands	r3, r2
 800bfca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd2:	69da      	ldr	r2, [r3, #28]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	f003 030f 	and.w	r3, r3, #15
 800bfdc:	2101      	movs	r1, #1
 800bfde:	fa01 f303 	lsl.w	r3, r1, r3
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	43db      	mvns	r3, r3
 800bfe6:	68f9      	ldr	r1, [r7, #12]
 800bfe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfec:	4013      	ands	r3, r2
 800bfee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	015a      	lsls	r2, r3, #5
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	4413      	add	r3, r2
 800bff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	0159      	lsls	r1, r3, #5
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	440b      	add	r3, r1
 800c006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c00a:	4619      	mov	r1, r3
 800c00c:	4b35      	ldr	r3, [pc, #212]	; (800c0e4 <USB_DeactivateEndpoint+0x1b0>)
 800c00e:	4013      	ands	r3, r2
 800c010:	600b      	str	r3, [r1, #0]
 800c012:	e060      	b.n	800c0d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	015a      	lsls	r2, r3, #5
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	4413      	add	r3, r2
 800c01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c02a:	d11f      	bne.n	800c06c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	015a      	lsls	r2, r3, #5
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	4413      	add	r3, r2
 800c034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	0151      	lsls	r1, r2, #5
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	440a      	add	r2, r1
 800c042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c046:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c04a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	015a      	lsls	r2, r3, #5
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4413      	add	r3, r2
 800c054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	0151      	lsls	r1, r2, #5
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	440a      	add	r2, r1
 800c062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c06a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	f003 030f 	and.w	r3, r3, #15
 800c07c:	2101      	movs	r1, #1
 800c07e:	fa01 f303 	lsl.w	r3, r1, r3
 800c082:	041b      	lsls	r3, r3, #16
 800c084:	43db      	mvns	r3, r3
 800c086:	68f9      	ldr	r1, [r7, #12]
 800c088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c08c:	4013      	ands	r3, r2
 800c08e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c096:	69da      	ldr	r2, [r3, #28]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	f003 030f 	and.w	r3, r3, #15
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0a6:	041b      	lsls	r3, r3, #16
 800c0a8:	43db      	mvns	r3, r3
 800c0aa:	68f9      	ldr	r1, [r7, #12]
 800c0ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	0159      	lsls	r1, r3, #5
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	440b      	add	r3, r1
 800c0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <USB_DeactivateEndpoint+0x1b4>)
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	ec337800 	.word	0xec337800
 800c0e8:	eff37800 	.word	0xeff37800

0800c0ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08a      	sub	sp, #40	; 0x28
 800c0f0:	af02      	add	r7, sp, #8
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	785b      	ldrb	r3, [r3, #1]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	f040 815c 	bne.w	800c3c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d132      	bne.n	800c17c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	015a      	lsls	r2, r3, #5
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	4413      	add	r3, r2
 800c11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	69ba      	ldr	r2, [r7, #24]
 800c126:	0151      	lsls	r1, r2, #5
 800c128:	69fa      	ldr	r2, [r7, #28]
 800c12a:	440a      	add	r2, r1
 800c12c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c130:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c134:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	015a      	lsls	r2, r3, #5
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	4413      	add	r3, r2
 800c142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c146:	691b      	ldr	r3, [r3, #16]
 800c148:	69ba      	ldr	r2, [r7, #24]
 800c14a:	0151      	lsls	r1, r2, #5
 800c14c:	69fa      	ldr	r2, [r7, #28]
 800c14e:	440a      	add	r2, r1
 800c150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	015a      	lsls	r2, r3, #5
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	4413      	add	r3, r2
 800c162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	0151      	lsls	r1, r2, #5
 800c16c:	69fa      	ldr	r2, [r7, #28]
 800c16e:	440a      	add	r2, r1
 800c170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c174:	0cdb      	lsrs	r3, r3, #19
 800c176:	04db      	lsls	r3, r3, #19
 800c178:	6113      	str	r3, [r2, #16]
 800c17a:	e074      	b.n	800c266 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	69ba      	ldr	r2, [r7, #24]
 800c18c:	0151      	lsls	r1, r2, #5
 800c18e:	69fa      	ldr	r2, [r7, #28]
 800c190:	440a      	add	r2, r1
 800c192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c196:	0cdb      	lsrs	r3, r3, #19
 800c198:	04db      	lsls	r3, r3, #19
 800c19a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	015a      	lsls	r2, r3, #5
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	0151      	lsls	r1, r2, #5
 800c1ae:	69fa      	ldr	r2, [r7, #28]
 800c1b0:	440a      	add	r2, r1
 800c1b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	6999      	ldr	r1, [r3, #24]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	440b      	add	r3, r1
 800c1d8:	1e59      	subs	r1, r3, #1
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	fbb1 f3f3 	udiv	r3, r1, r3
 800c1e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c1e4:	4b9d      	ldr	r3, [pc, #628]	; (800c45c <USB_EPStartXfer+0x370>)
 800c1e6:	400b      	ands	r3, r1
 800c1e8:	69b9      	ldr	r1, [r7, #24]
 800c1ea:	0148      	lsls	r0, r1, #5
 800c1ec:	69f9      	ldr	r1, [r7, #28]
 800c1ee:	4401      	add	r1, r0
 800c1f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c204:	691a      	ldr	r2, [r3, #16]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	699b      	ldr	r3, [r3, #24]
 800c20a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c20e:	69b9      	ldr	r1, [r7, #24]
 800c210:	0148      	lsls	r0, r1, #5
 800c212:	69f9      	ldr	r1, [r7, #28]
 800c214:	4401      	add	r1, r0
 800c216:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c21a:	4313      	orrs	r3, r2
 800c21c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	791b      	ldrb	r3, [r3, #4]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d11f      	bne.n	800c266 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	69ba      	ldr	r2, [r7, #24]
 800c236:	0151      	lsls	r1, r2, #5
 800c238:	69fa      	ldr	r2, [r7, #28]
 800c23a:	440a      	add	r2, r1
 800c23c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c240:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c244:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	015a      	lsls	r2, r3, #5
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	4413      	add	r3, r2
 800c24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	69ba      	ldr	r2, [r7, #24]
 800c256:	0151      	lsls	r1, r2, #5
 800c258:	69fa      	ldr	r2, [r7, #28]
 800c25a:	440a      	add	r2, r1
 800c25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c264:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c266:	79fb      	ldrb	r3, [r7, #7]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d14b      	bne.n	800c304 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	695b      	ldr	r3, [r3, #20]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d009      	beq.n	800c288 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	015a      	lsls	r2, r3, #5
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	4413      	add	r3, r2
 800c27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c280:	461a      	mov	r2, r3
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	695b      	ldr	r3, [r3, #20]
 800c286:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	791b      	ldrb	r3, [r3, #4]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d128      	bne.n	800c2e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d110      	bne.n	800c2c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	015a      	lsls	r2, r3, #5
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	69ba      	ldr	r2, [r7, #24]
 800c2b0:	0151      	lsls	r1, r2, #5
 800c2b2:	69fa      	ldr	r2, [r7, #28]
 800c2b4:	440a      	add	r2, r1
 800c2b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	e00f      	b.n	800c2e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	015a      	lsls	r2, r3, #5
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	0151      	lsls	r1, r2, #5
 800c2d4:	69fa      	ldr	r2, [r7, #28]
 800c2d6:	440a      	add	r2, r1
 800c2d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	015a      	lsls	r2, r3, #5
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	69ba      	ldr	r2, [r7, #24]
 800c2f2:	0151      	lsls	r1, r2, #5
 800c2f4:	69fa      	ldr	r2, [r7, #28]
 800c2f6:	440a      	add	r2, r1
 800c2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	e133      	b.n	800c56c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	015a      	lsls	r2, r3, #5
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	0151      	lsls	r1, r2, #5
 800c316:	69fa      	ldr	r2, [r7, #28]
 800c318:	440a      	add	r2, r1
 800c31a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c31e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c322:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	791b      	ldrb	r3, [r3, #4]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d015      	beq.n	800c358 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	699b      	ldr	r3, [r3, #24]
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 811b 	beq.w	800c56c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c33c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	f003 030f 	and.w	r3, r3, #15
 800c346:	2101      	movs	r1, #1
 800c348:	fa01 f303 	lsl.w	r3, r1, r3
 800c34c:	69f9      	ldr	r1, [r7, #28]
 800c34e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c352:	4313      	orrs	r3, r2
 800c354:	634b      	str	r3, [r1, #52]	; 0x34
 800c356:	e109      	b.n	800c56c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c364:	2b00      	cmp	r3, #0
 800c366:	d110      	bne.n	800c38a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	015a      	lsls	r2, r3, #5
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	4413      	add	r3, r2
 800c370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	69ba      	ldr	r2, [r7, #24]
 800c378:	0151      	lsls	r1, r2, #5
 800c37a:	69fa      	ldr	r2, [r7, #28]
 800c37c:	440a      	add	r2, r1
 800c37e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c382:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	e00f      	b.n	800c3aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	69ba      	ldr	r2, [r7, #24]
 800c39a:	0151      	lsls	r1, r2, #5
 800c39c:	69fa      	ldr	r2, [r7, #28]
 800c39e:	440a      	add	r2, r1
 800c3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	6919      	ldr	r1, [r3, #16]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	781a      	ldrb	r2, [r3, #0]
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	b298      	uxth	r0, r3
 800c3b8:	79fb      	ldrb	r3, [r7, #7]
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	4603      	mov	r3, r0
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f000 fade 	bl	800c980 <USB_WritePacket>
 800c3c4:	e0d2      	b.n	800c56c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	015a      	lsls	r2, r3, #5
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	69ba      	ldr	r2, [r7, #24]
 800c3d6:	0151      	lsls	r1, r2, #5
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	440a      	add	r2, r1
 800c3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3e0:	0cdb      	lsrs	r3, r3, #19
 800c3e2:	04db      	lsls	r3, r3, #19
 800c3e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	0151      	lsls	r1, r2, #5
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	440a      	add	r2, r1
 800c3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c408:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d126      	bne.n	800c460 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	015a      	lsls	r2, r3, #5
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	4413      	add	r3, r2
 800c41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c41e:	691a      	ldr	r2, [r3, #16]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c428:	69b9      	ldr	r1, [r7, #24]
 800c42a:	0148      	lsls	r0, r1, #5
 800c42c:	69f9      	ldr	r1, [r7, #28]
 800c42e:	4401      	add	r1, r0
 800c430:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c434:	4313      	orrs	r3, r2
 800c436:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	69ba      	ldr	r2, [r7, #24]
 800c448:	0151      	lsls	r1, r2, #5
 800c44a:	69fa      	ldr	r2, [r7, #28]
 800c44c:	440a      	add	r2, r1
 800c44e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c456:	6113      	str	r3, [r2, #16]
 800c458:	e03a      	b.n	800c4d0 <USB_EPStartXfer+0x3e4>
 800c45a:	bf00      	nop
 800c45c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	699a      	ldr	r2, [r3, #24]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	4413      	add	r3, r2
 800c46a:	1e5a      	subs	r2, r3, #1
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	fbb2 f3f3 	udiv	r3, r2, r3
 800c474:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	8afa      	ldrh	r2, [r7, #22]
 800c47c:	fb03 f202 	mul.w	r2, r3, r2
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	015a      	lsls	r2, r3, #5
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c490:	691a      	ldr	r2, [r3, #16]
 800c492:	8afb      	ldrh	r3, [r7, #22]
 800c494:	04d9      	lsls	r1, r3, #19
 800c496:	4b38      	ldr	r3, [pc, #224]	; (800c578 <USB_EPStartXfer+0x48c>)
 800c498:	400b      	ands	r3, r1
 800c49a:	69b9      	ldr	r1, [r7, #24]
 800c49c:	0148      	lsls	r0, r1, #5
 800c49e:	69f9      	ldr	r1, [r7, #28]
 800c4a0:	4401      	add	r1, r0
 800c4a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	015a      	lsls	r2, r3, #5
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b6:	691a      	ldr	r2, [r3, #16]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	69db      	ldr	r3, [r3, #28]
 800c4bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4c0:	69b9      	ldr	r1, [r7, #24]
 800c4c2:	0148      	lsls	r0, r1, #5
 800c4c4:	69f9      	ldr	r1, [r7, #28]
 800c4c6:	4401      	add	r1, r0
 800c4c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d10d      	bne.n	800c4f2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d009      	beq.n	800c4f2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	6919      	ldr	r1, [r3, #16]
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	015a      	lsls	r2, r3, #5
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ee:	460a      	mov	r2, r1
 800c4f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	791b      	ldrb	r3, [r3, #4]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d128      	bne.n	800c54c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c506:	2b00      	cmp	r3, #0
 800c508:	d110      	bne.n	800c52c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	015a      	lsls	r2, r3, #5
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	4413      	add	r3, r2
 800c512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	0151      	lsls	r1, r2, #5
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	440a      	add	r2, r1
 800c520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	e00f      	b.n	800c54c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	69ba      	ldr	r2, [r7, #24]
 800c53c:	0151      	lsls	r1, r2, #5
 800c53e:	69fa      	ldr	r2, [r7, #28]
 800c540:	440a      	add	r2, r1
 800c542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c54a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	015a      	lsls	r2, r3, #5
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	4413      	add	r3, r2
 800c554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	69ba      	ldr	r2, [r7, #24]
 800c55c:	0151      	lsls	r1, r2, #5
 800c55e:	69fa      	ldr	r2, [r7, #28]
 800c560:	440a      	add	r2, r1
 800c562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c56a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3720      	adds	r7, #32
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	1ff80000 	.word	0x1ff80000

0800c57c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b087      	sub	sp, #28
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	4613      	mov	r3, r2
 800c588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	785b      	ldrb	r3, [r3, #1]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	f040 80ce 	bne.w	800c73a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d132      	bne.n	800c60c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	015a      	lsls	r2, r3, #5
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	0151      	lsls	r1, r2, #5
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	440a      	add	r2, r1
 800c5bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c5c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c5c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	015a      	lsls	r2, r3, #5
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	0151      	lsls	r1, r2, #5
 800c5dc:	697a      	ldr	r2, [r7, #20]
 800c5de:	440a      	add	r2, r1
 800c5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	015a      	lsls	r2, r3, #5
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	0151      	lsls	r1, r2, #5
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	440a      	add	r2, r1
 800c600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c604:	0cdb      	lsrs	r3, r3, #19
 800c606:	04db      	lsls	r3, r3, #19
 800c608:	6113      	str	r3, [r2, #16]
 800c60a:	e04e      	b.n	800c6aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	015a      	lsls	r2, r3, #5
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	4413      	add	r3, r2
 800c614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	693a      	ldr	r2, [r7, #16]
 800c61c:	0151      	lsls	r1, r2, #5
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	440a      	add	r2, r1
 800c622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c626:	0cdb      	lsrs	r3, r3, #19
 800c628:	04db      	lsls	r3, r3, #19
 800c62a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	0151      	lsls	r1, r2, #5
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	440a      	add	r2, r1
 800c642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c646:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c64a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c64e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	699a      	ldr	r2, [r3, #24]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d903      	bls.n	800c664 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	68da      	ldr	r2, [r3, #12]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	015a      	lsls	r2, r3, #5
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	4413      	add	r3, r2
 800c66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	0151      	lsls	r1, r2, #5
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	440a      	add	r2, r1
 800c67a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c67e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c690:	691a      	ldr	r2, [r3, #16]
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c69a:	6939      	ldr	r1, [r7, #16]
 800c69c:	0148      	lsls	r0, r1, #5
 800c69e:	6979      	ldr	r1, [r7, #20]
 800c6a0:	4401      	add	r1, r0
 800c6a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c6aa:	79fb      	ldrb	r3, [r7, #7]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d11e      	bne.n	800c6ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	695b      	ldr	r3, [r3, #20]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d009      	beq.n	800c6cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	015a      	lsls	r2, r3, #5
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	4413      	add	r3, r2
 800c6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	0151      	lsls	r1, r2, #5
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	440a      	add	r2, r1
 800c6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6ea:	6013      	str	r3, [r2, #0]
 800c6ec:	e097      	b.n	800c81e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	015a      	lsls	r2, r3, #5
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	0151      	lsls	r1, r2, #5
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	440a      	add	r2, r1
 800c704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c708:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c70c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 8083 	beq.w	800c81e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c71e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	f003 030f 	and.w	r3, r3, #15
 800c728:	2101      	movs	r1, #1
 800c72a:	fa01 f303 	lsl.w	r3, r1, r3
 800c72e:	6979      	ldr	r1, [r7, #20]
 800c730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c734:	4313      	orrs	r3, r2
 800c736:	634b      	str	r3, [r1, #52]	; 0x34
 800c738:	e071      	b.n	800c81e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	015a      	lsls	r2, r3, #5
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	4413      	add	r3, r2
 800c742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	0151      	lsls	r1, r2, #5
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	440a      	add	r2, r1
 800c750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c754:	0cdb      	lsrs	r3, r3, #19
 800c756:	04db      	lsls	r3, r3, #19
 800c758:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	015a      	lsls	r2, r3, #5
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	4413      	add	r3, r2
 800c762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	0151      	lsls	r1, r2, #5
 800c76c:	697a      	ldr	r2, [r7, #20]
 800c76e:	440a      	add	r2, r1
 800c770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c77c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	68da      	ldr	r2, [r3, #12]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	68da      	ldr	r2, [r3, #12]
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	015a      	lsls	r2, r3, #5
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	0151      	lsls	r1, r2, #5
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	440a      	add	r2, r1
 800c7ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	015a      	lsls	r2, r3, #5
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	4413      	add	r3, r2
 800c7be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c2:	691a      	ldr	r2, [r3, #16]
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7cc:	6939      	ldr	r1, [r7, #16]
 800c7ce:	0148      	lsls	r0, r1, #5
 800c7d0:	6979      	ldr	r1, [r7, #20]
 800c7d2:	4401      	add	r1, r0
 800c7d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c7dc:	79fb      	ldrb	r3, [r7, #7]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d10d      	bne.n	800c7fe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d009      	beq.n	800c7fe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6919      	ldr	r1, [r3, #16]
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7fa:	460a      	mov	r2, r1
 800c7fc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	4413      	add	r3, r2
 800c806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	0151      	lsls	r1, r2, #5
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	440a      	add	r2, r1
 800c814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c818:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c81c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	371c      	adds	r7, #28
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b087      	sub	sp, #28
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	785b      	ldrb	r3, [r3, #1]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d14a      	bne.n	800c8e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	015a      	lsls	r2, r3, #5
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	4413      	add	r3, r2
 800c854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c85e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c862:	f040 8086 	bne.w	800c972 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	683a      	ldr	r2, [r7, #0]
 800c878:	7812      	ldrb	r2, [r2, #0]
 800c87a:	0151      	lsls	r1, r2, #5
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	440a      	add	r2, r1
 800c880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c884:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c888:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	015a      	lsls	r2, r3, #5
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	4413      	add	r3, r2
 800c894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	7812      	ldrb	r2, [r2, #0]
 800c89e:	0151      	lsls	r1, r2, #5
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	440a      	add	r2, r1
 800c8a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d902      	bls.n	800c8c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	75fb      	strb	r3, [r7, #23]
          break;
 800c8c2:	e056      	b.n	800c972 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	015a      	lsls	r2, r3, #5
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8dc:	d0e7      	beq.n	800c8ae <USB_EPStopXfer+0x82>
 800c8de:	e048      	b.n	800c972 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8f8:	d13b      	bne.n	800c972 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	015a      	lsls	r2, r3, #5
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	4413      	add	r3, r2
 800c904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	7812      	ldrb	r2, [r2, #0]
 800c90e:	0151      	lsls	r1, r2, #5
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	440a      	add	r2, r1
 800c914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c91c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	015a      	lsls	r2, r3, #5
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	4413      	add	r3, r2
 800c928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	7812      	ldrb	r2, [r2, #0]
 800c932:	0151      	lsls	r1, r2, #5
 800c934:	693a      	ldr	r2, [r7, #16]
 800c936:	440a      	add	r2, r1
 800c938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c93c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c940:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3301      	adds	r3, #1
 800c946:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c94e:	4293      	cmp	r3, r2
 800c950:	d902      	bls.n	800c958 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	75fb      	strb	r3, [r7, #23]
          break;
 800c956:	e00c      	b.n	800c972 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	015a      	lsls	r2, r3, #5
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	4413      	add	r3, r2
 800c962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c96c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c970:	d0e7      	beq.n	800c942 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c972:	7dfb      	ldrb	r3, [r7, #23]
}
 800c974:	4618      	mov	r0, r3
 800c976:	371c      	adds	r7, #28
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c980:	b480      	push	{r7}
 800c982:	b089      	sub	sp, #36	; 0x24
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	4611      	mov	r1, r2
 800c98c:	461a      	mov	r2, r3
 800c98e:	460b      	mov	r3, r1
 800c990:	71fb      	strb	r3, [r7, #7]
 800c992:	4613      	mov	r3, r2
 800c994:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c99e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d123      	bne.n	800c9ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c9a6:	88bb      	ldrh	r3, [r7, #4]
 800c9a8:	3303      	adds	r3, #3
 800c9aa:	089b      	lsrs	r3, r3, #2
 800c9ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61bb      	str	r3, [r7, #24]
 800c9b2:	e018      	b.n	800c9e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c9b4:	79fb      	ldrb	r3, [r7, #7]
 800c9b6:	031a      	lsls	r2, r3, #12
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	61bb      	str	r3, [r7, #24]
 800c9e6:	69ba      	ldr	r2, [r7, #24]
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d3e2      	bcc.n	800c9b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3724      	adds	r7, #36	; 0x24
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b08b      	sub	sp, #44	; 0x2c
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	4613      	mov	r3, r2
 800ca08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ca12:	88fb      	ldrh	r3, [r7, #6]
 800ca14:	089b      	lsrs	r3, r3, #2
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ca1a:	88fb      	ldrh	r3, [r7, #6]
 800ca1c:	f003 0303 	and.w	r3, r3, #3
 800ca20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ca22:	2300      	movs	r3, #0
 800ca24:	623b      	str	r3, [r7, #32]
 800ca26:	e014      	b.n	800ca52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	601a      	str	r2, [r3, #0]
    pDest++;
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	3301      	adds	r3, #1
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	3301      	adds	r3, #1
 800ca44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca48:	3301      	adds	r3, #1
 800ca4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	623b      	str	r3, [r7, #32]
 800ca52:	6a3a      	ldr	r2, [r7, #32]
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d3e6      	bcc.n	800ca28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ca5a:	8bfb      	ldrh	r3, [r7, #30]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01e      	beq.n	800ca9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f107 0310 	add.w	r3, r7, #16
 800ca70:	6812      	ldr	r2, [r2, #0]
 800ca72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	701a      	strb	r2, [r3, #0]
      i++;
 800ca86:	6a3b      	ldr	r3, [r7, #32]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	3301      	adds	r3, #1
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ca92:	8bfb      	ldrh	r3, [r7, #30]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ca98:	8bfb      	ldrh	r3, [r7, #30]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1ea      	bne.n	800ca74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	372c      	adds	r7, #44	; 0x2c
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	785b      	ldrb	r3, [r3, #1]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d12c      	bne.n	800cb22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	db12      	blt.n	800cb00 <USB_EPSetStall+0x54>
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00f      	beq.n	800cb00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	015a      	lsls	r2, r3, #5
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	4413      	add	r3, r2
 800cae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	0151      	lsls	r1, r2, #5
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	440a      	add	r2, r1
 800caf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cafa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cafe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	015a      	lsls	r2, r3, #5
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	4413      	add	r3, r2
 800cb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	0151      	lsls	r1, r2, #5
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	440a      	add	r2, r1
 800cb16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	e02b      	b.n	800cb7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	db12      	blt.n	800cb5a <USB_EPSetStall+0xae>
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00f      	beq.n	800cb5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	015a      	lsls	r2, r3, #5
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	0151      	lsls	r1, r2, #5
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	440a      	add	r2, r1
 800cb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cb58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	015a      	lsls	r2, r3, #5
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	4413      	add	r3, r2
 800cb62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	0151      	lsls	r1, r2, #5
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	440a      	add	r2, r1
 800cb70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	785b      	ldrb	r3, [r3, #1]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d128      	bne.n	800cbf6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	0151      	lsls	r1, r2, #5
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	440a      	add	r2, r1
 800cbba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	791b      	ldrb	r3, [r3, #4]
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d003      	beq.n	800cbd4 <USB_EPClearStall+0x4c>
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	791b      	ldrb	r3, [r3, #4]
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d138      	bne.n	800cc46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	0151      	lsls	r1, r2, #5
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	440a      	add	r2, r1
 800cbea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbf2:	6013      	str	r3, [r2, #0]
 800cbf4:	e027      	b.n	800cc46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	015a      	lsls	r2, r3, #5
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	0151      	lsls	r1, r2, #5
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	440a      	add	r2, r1
 800cc0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	791b      	ldrb	r3, [r3, #4]
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d003      	beq.n	800cc26 <USB_EPClearStall+0x9e>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	791b      	ldrb	r3, [r3, #4]
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d10f      	bne.n	800cc46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	015a      	lsls	r2, r3, #5
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	0151      	lsls	r1, r2, #5
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	440a      	add	r2, r1
 800cc3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3714      	adds	r7, #20
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	011b      	lsls	r3, r3, #4
 800cc84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cc88:	68f9      	ldr	r1, [r7, #12]
 800cc8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ccba:	f023 0303 	bic.w	r3, r3, #3
 800ccbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccce:	f023 0302 	bic.w	r3, r3, #2
 800ccd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3714      	adds	r7, #20
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cce2:	b480      	push	{r7}
 800cce4:	b085      	sub	sp, #20
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ccfc:	f023 0303 	bic.w	r3, r3, #3
 800cd00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd10:	f043 0302 	orr.w	r3, r3, #2
 800cd14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b085      	sub	sp, #20
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	695b      	ldr	r3, [r3, #20]
 800cd30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	4013      	ands	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b085      	sub	sp, #20
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd66:	69db      	ldr	r3, [r3, #28]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	4013      	ands	r3, r2
 800cd6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	0c1b      	lsrs	r3, r3, #16
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3714      	adds	r7, #20
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b085      	sub	sp, #20
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9a:	69db      	ldr	r3, [r3, #28]
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	4013      	ands	r3, r2
 800cda0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	b29b      	uxth	r3, r3
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr

0800cdb2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cdb2:	b480      	push	{r7}
 800cdb4:	b085      	sub	sp, #20
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	460b      	mov	r3, r1
 800cdbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cdc2:	78fb      	ldrb	r3, [r7, #3]
 800cdc4:	015a      	lsls	r2, r3, #5
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	4413      	add	r3, r2
 800cdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd8:	695b      	ldr	r3, [r3, #20]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	4013      	ands	r3, r2
 800cdde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cde0:	68bb      	ldr	r3, [r7, #8]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3714      	adds	r7, #20
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b087      	sub	sp, #28
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ce12:	78fb      	ldrb	r3, [r7, #3]
 800ce14:	f003 030f 	and.w	r3, r3, #15
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce1e:	01db      	lsls	r3, r3, #7
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	693a      	ldr	r2, [r7, #16]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ce28:	78fb      	ldrb	r3, [r7, #3]
 800ce2a:	015a      	lsls	r2, r3, #5
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	4413      	add	r3, r2
 800ce30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	4013      	ands	r3, r2
 800ce3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	371c      	adds	r7, #28
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b083      	sub	sp, #12
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	f003 0301 	and.w	r3, r3, #1
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	370c      	adds	r7, #12
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr

0800ce66 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ce66:	b480      	push	{r7}
 800ce68:	b085      	sub	sp, #20
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ce84:	f023 0307 	bic.w	r3, r3, #7
 800ce88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	333c      	adds	r3, #60	; 0x3c
 800cec2:	3304      	adds	r3, #4
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	4a26      	ldr	r2, [pc, #152]	; (800cf64 <USB_EP0_OutStart+0xb8>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d90a      	bls.n	800cee6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cedc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cee0:	d101      	bne.n	800cee6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	e037      	b.n	800cf56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceec:	461a      	mov	r2, r3
 800ceee:	2300      	movs	r3, #0
 800cef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf14:	f043 0318 	orr.w	r3, r3, #24
 800cf18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cf2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cf2e:	7afb      	ldrb	r3, [r7, #11]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d10f      	bne.n	800cf54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cf52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	371c      	adds	r7, #28
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	4f54300a 	.word	0x4f54300a

0800cf68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf70:	2300      	movs	r3, #0
 800cf72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3301      	adds	r3, #1
 800cf78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4a13      	ldr	r2, [pc, #76]	; (800cfcc <USB_CoreReset+0x64>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d901      	bls.n	800cf86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e01b      	b.n	800cfbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	daf2      	bge.n	800cf74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	f043 0201 	orr.w	r2, r3, #1
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4a09      	ldr	r2, [pc, #36]	; (800cfcc <USB_CoreReset+0x64>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d901      	bls.n	800cfb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cfac:	2303      	movs	r3, #3
 800cfae:	e006      	b.n	800cfbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d0f0      	beq.n	800cf9e <USB_CoreReset+0x36>

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	00030d40 	.word	0x00030d40

0800cfd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cfdc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cfe0:	f012 fe58 	bl	801fc94 <USBD_static_malloc>
 800cfe4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d109      	bne.n	800d000 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	32b0      	adds	r2, #176	; 0xb0
 800cff6:	2100      	movs	r1, #0
 800cff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cffc:	2302      	movs	r3, #2
 800cffe:	e0d4      	b.n	800d1aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d000:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d004:	2100      	movs	r1, #0
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f015 fc8e 	bl	8022928 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	32b0      	adds	r2, #176	; 0xb0
 800d016:	68f9      	ldr	r1, [r7, #12]
 800d018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	32b0      	adds	r2, #176	; 0xb0
 800d026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	7c1b      	ldrb	r3, [r3, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d138      	bne.n	800d0aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d038:	4b5e      	ldr	r3, [pc, #376]	; (800d1b4 <USBD_CDC_Init+0x1e4>)
 800d03a:	7819      	ldrb	r1, [r3, #0]
 800d03c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d040:	2202      	movs	r2, #2
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f012 fd03 	bl	801fa4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d048:	4b5a      	ldr	r3, [pc, #360]	; (800d1b4 <USBD_CDC_Init+0x1e4>)
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	f003 020f 	and.w	r2, r3, #15
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	4613      	mov	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4413      	add	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	440b      	add	r3, r1
 800d05c:	3324      	adds	r3, #36	; 0x24
 800d05e:	2201      	movs	r2, #1
 800d060:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d062:	4b55      	ldr	r3, [pc, #340]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d064:	7819      	ldrb	r1, [r3, #0]
 800d066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d06a:	2202      	movs	r2, #2
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f012 fcee 	bl	801fa4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d072:	4b51      	ldr	r3, [pc, #324]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	f003 020f 	and.w	r2, r3, #15
 800d07a:	6879      	ldr	r1, [r7, #4]
 800d07c:	4613      	mov	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	440b      	add	r3, r1
 800d086:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d08a:	2201      	movs	r2, #1
 800d08c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d08e:	4b4b      	ldr	r3, [pc, #300]	; (800d1bc <USBD_CDC_Init+0x1ec>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	f003 020f 	and.w	r2, r3, #15
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	4613      	mov	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	440b      	add	r3, r1
 800d0a2:	3326      	adds	r3, #38	; 0x26
 800d0a4:	2210      	movs	r2, #16
 800d0a6:	801a      	strh	r2, [r3, #0]
 800d0a8:	e035      	b.n	800d116 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d0aa:	4b42      	ldr	r3, [pc, #264]	; (800d1b4 <USBD_CDC_Init+0x1e4>)
 800d0ac:	7819      	ldrb	r1, [r3, #0]
 800d0ae:	2340      	movs	r3, #64	; 0x40
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f012 fccb 	bl	801fa4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d0b8:	4b3e      	ldr	r3, [pc, #248]	; (800d1b4 <USBD_CDC_Init+0x1e4>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	f003 020f 	and.w	r2, r3, #15
 800d0c0:	6879      	ldr	r1, [r7, #4]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4413      	add	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	440b      	add	r3, r1
 800d0cc:	3324      	adds	r3, #36	; 0x24
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d0d2:	4b39      	ldr	r3, [pc, #228]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d0d4:	7819      	ldrb	r1, [r3, #0]
 800d0d6:	2340      	movs	r3, #64	; 0x40
 800d0d8:	2202      	movs	r2, #2
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f012 fcb7 	bl	801fa4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d0e0:	4b35      	ldr	r3, [pc, #212]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	f003 020f 	and.w	r2, r3, #15
 800d0e8:	6879      	ldr	r1, [r7, #4]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	440b      	add	r3, r1
 800d0f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d0fc:	4b2f      	ldr	r3, [pc, #188]	; (800d1bc <USBD_CDC_Init+0x1ec>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	f003 020f 	and.w	r2, r3, #15
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	4613      	mov	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	440b      	add	r3, r1
 800d110:	3326      	adds	r3, #38	; 0x26
 800d112:	2210      	movs	r2, #16
 800d114:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d116:	4b29      	ldr	r3, [pc, #164]	; (800d1bc <USBD_CDC_Init+0x1ec>)
 800d118:	7819      	ldrb	r1, [r3, #0]
 800d11a:	2308      	movs	r3, #8
 800d11c:	2203      	movs	r2, #3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f012 fc95 	bl	801fa4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d124:	4b25      	ldr	r3, [pc, #148]	; (800d1bc <USBD_CDC_Init+0x1ec>)
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	f003 020f 	and.w	r2, r3, #15
 800d12c:	6879      	ldr	r1, [r7, #4]
 800d12e:	4613      	mov	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	4413      	add	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	440b      	add	r3, r1
 800d138:	3324      	adds	r3, #36	; 0x24
 800d13a:	2201      	movs	r2, #1
 800d13c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	33b0      	adds	r3, #176	; 0xb0
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d174:	2302      	movs	r3, #2
 800d176:	e018      	b.n	800d1aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	7c1b      	ldrb	r3, [r3, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d180:	4b0d      	ldr	r3, [pc, #52]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d182:	7819      	ldrb	r1, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d18a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f012 fd4c 	bl	801fc2c <USBD_LL_PrepareReceive>
 800d194:	e008      	b.n	800d1a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d196:	4b08      	ldr	r3, [pc, #32]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d198:	7819      	ldrb	r1, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1a0:	2340      	movs	r3, #64	; 0x40
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f012 fd42 	bl	801fc2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	200000f3 	.word	0x200000f3
 800d1b8:	200000f4 	.word	0x200000f4
 800d1bc:	200000f5 	.word	0x200000f5

0800d1c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d1cc:	4b3a      	ldr	r3, [pc, #232]	; (800d2b8 <USBD_CDC_DeInit+0xf8>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f012 fc61 	bl	801fa9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d1d8:	4b37      	ldr	r3, [pc, #220]	; (800d2b8 <USBD_CDC_DeInit+0xf8>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	f003 020f 	and.w	r2, r3, #15
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4413      	add	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	3324      	adds	r3, #36	; 0x24
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d1f2:	4b32      	ldr	r3, [pc, #200]	; (800d2bc <USBD_CDC_DeInit+0xfc>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f012 fc4e 	bl	801fa9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d1fe:	4b2f      	ldr	r3, [pc, #188]	; (800d2bc <USBD_CDC_DeInit+0xfc>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f003 020f 	and.w	r2, r3, #15
 800d206:	6879      	ldr	r1, [r7, #4]
 800d208:	4613      	mov	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	440b      	add	r3, r1
 800d212:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d216:	2200      	movs	r2, #0
 800d218:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d21a:	4b29      	ldr	r3, [pc, #164]	; (800d2c0 <USBD_CDC_DeInit+0x100>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f012 fc3a 	bl	801fa9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d226:	4b26      	ldr	r3, [pc, #152]	; (800d2c0 <USBD_CDC_DeInit+0x100>)
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	f003 020f 	and.w	r2, r3, #15
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	4613      	mov	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	440b      	add	r3, r1
 800d23a:	3324      	adds	r3, #36	; 0x24
 800d23c:	2200      	movs	r2, #0
 800d23e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d240:	4b1f      	ldr	r3, [pc, #124]	; (800d2c0 <USBD_CDC_DeInit+0x100>)
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	f003 020f 	and.w	r2, r3, #15
 800d248:	6879      	ldr	r1, [r7, #4]
 800d24a:	4613      	mov	r3, r2
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	4413      	add	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	440b      	add	r3, r1
 800d254:	3326      	adds	r3, #38	; 0x26
 800d256:	2200      	movs	r2, #0
 800d258:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	32b0      	adds	r2, #176	; 0xb0
 800d264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01f      	beq.n	800d2ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	33b0      	adds	r3, #176	; 0xb0
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	32b0      	adds	r2, #176	; 0xb0
 800d28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d28e:	4618      	mov	r0, r3
 800d290:	f012 fd0e 	bl	801fcb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	32b0      	adds	r2, #176	; 0xb0
 800d29e:	2100      	movs	r1, #0
 800d2a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	200000f3 	.word	0x200000f3
 800d2bc:	200000f4 	.word	0x200000f4
 800d2c0:	200000f5 	.word	0x200000f5

0800d2c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	32b0      	adds	r2, #176	; 0xb0
 800d2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	e0bf      	b.n	800d474 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d050      	beq.n	800d3a2 <USBD_CDC_Setup+0xde>
 800d300:	2b20      	cmp	r3, #32
 800d302:	f040 80af 	bne.w	800d464 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	88db      	ldrh	r3, [r3, #6]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d03a      	beq.n	800d384 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	b25b      	sxtb	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	da1b      	bge.n	800d350 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	33b0      	adds	r3, #176	; 0xb0
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d32e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	88d2      	ldrh	r2, [r2, #6]
 800d334:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	88db      	ldrh	r3, [r3, #6]
 800d33a:	2b07      	cmp	r3, #7
 800d33c:	bf28      	it	cs
 800d33e:	2307      	movcs	r3, #7
 800d340:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	89fa      	ldrh	r2, [r7, #14]
 800d346:	4619      	mov	r1, r3
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f001 fd89 	bl	800ee60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d34e:	e090      	b.n	800d472 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	785a      	ldrb	r2, [r3, #1]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	88db      	ldrh	r3, [r3, #6]
 800d35e:	2b3f      	cmp	r3, #63	; 0x3f
 800d360:	d803      	bhi.n	800d36a <USBD_CDC_Setup+0xa6>
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	88db      	ldrh	r3, [r3, #6]
 800d366:	b2da      	uxtb	r2, r3
 800d368:	e000      	b.n	800d36c <USBD_CDC_Setup+0xa8>
 800d36a:	2240      	movs	r2, #64	; 0x40
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d372:	6939      	ldr	r1, [r7, #16]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d37a:	461a      	mov	r2, r3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f001 fd9b 	bl	800eeb8 <USBD_CtlPrepareRx>
      break;
 800d382:	e076      	b.n	800d472 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	33b0      	adds	r3, #176	; 0xb0
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4413      	add	r3, r2
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	7850      	ldrb	r0, [r2, #1]
 800d39a:	2200      	movs	r2, #0
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	4798      	blx	r3
      break;
 800d3a0:	e067      	b.n	800d472 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	785b      	ldrb	r3, [r3, #1]
 800d3a6:	2b0b      	cmp	r3, #11
 800d3a8:	d851      	bhi.n	800d44e <USBD_CDC_Setup+0x18a>
 800d3aa:	a201      	add	r2, pc, #4	; (adr r2, 800d3b0 <USBD_CDC_Setup+0xec>)
 800d3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b0:	0800d3e1 	.word	0x0800d3e1
 800d3b4:	0800d45d 	.word	0x0800d45d
 800d3b8:	0800d44f 	.word	0x0800d44f
 800d3bc:	0800d44f 	.word	0x0800d44f
 800d3c0:	0800d44f 	.word	0x0800d44f
 800d3c4:	0800d44f 	.word	0x0800d44f
 800d3c8:	0800d44f 	.word	0x0800d44f
 800d3cc:	0800d44f 	.word	0x0800d44f
 800d3d0:	0800d44f 	.word	0x0800d44f
 800d3d4:	0800d44f 	.word	0x0800d44f
 800d3d8:	0800d40b 	.word	0x0800d40b
 800d3dc:	0800d435 	.word	0x0800d435
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d107      	bne.n	800d3fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d3ec:	f107 030a 	add.w	r3, r7, #10
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f001 fd33 	bl	800ee60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3fa:	e032      	b.n	800d462 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3fc:	6839      	ldr	r1, [r7, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f001 fcbd 	bl	800ed7e <USBD_CtlError>
            ret = USBD_FAIL;
 800d404:	2303      	movs	r3, #3
 800d406:	75fb      	strb	r3, [r7, #23]
          break;
 800d408:	e02b      	b.n	800d462 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d410:	b2db      	uxtb	r3, r3
 800d412:	2b03      	cmp	r3, #3
 800d414:	d107      	bne.n	800d426 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d416:	f107 030d 	add.w	r3, r7, #13
 800d41a:	2201      	movs	r2, #1
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f001 fd1e 	bl	800ee60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d424:	e01d      	b.n	800d462 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f001 fca8 	bl	800ed7e <USBD_CtlError>
            ret = USBD_FAIL;
 800d42e:	2303      	movs	r3, #3
 800d430:	75fb      	strb	r3, [r7, #23]
          break;
 800d432:	e016      	b.n	800d462 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	d00f      	beq.n	800d460 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d440:	6839      	ldr	r1, [r7, #0]
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f001 fc9b 	bl	800ed7e <USBD_CtlError>
            ret = USBD_FAIL;
 800d448:	2303      	movs	r3, #3
 800d44a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d44c:	e008      	b.n	800d460 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 fc94 	bl	800ed7e <USBD_CtlError>
          ret = USBD_FAIL;
 800d456:	2303      	movs	r3, #3
 800d458:	75fb      	strb	r3, [r7, #23]
          break;
 800d45a:	e002      	b.n	800d462 <USBD_CDC_Setup+0x19e>
          break;
 800d45c:	bf00      	nop
 800d45e:	e008      	b.n	800d472 <USBD_CDC_Setup+0x1ae>
          break;
 800d460:	bf00      	nop
      }
      break;
 800d462:	e006      	b.n	800d472 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d464:	6839      	ldr	r1, [r7, #0]
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 fc89 	bl	800ed7e <USBD_CtlError>
      ret = USBD_FAIL;
 800d46c:	2303      	movs	r3, #3
 800d46e:	75fb      	strb	r3, [r7, #23]
      break;
 800d470:	bf00      	nop
  }

  return (uint8_t)ret;
 800d472:	7dfb      	ldrb	r3, [r7, #23]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3718      	adds	r7, #24
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d48e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	32b0      	adds	r2, #176	; 0xb0
 800d49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e065      	b.n	800d572 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	32b0      	adds	r2, #176	; 0xb0
 800d4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d4b6:	78fb      	ldrb	r3, [r7, #3]
 800d4b8:	f003 020f 	and.w	r2, r3, #15
 800d4bc:	6879      	ldr	r1, [r7, #4]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	440b      	add	r3, r1
 800d4c8:	3318      	adds	r3, #24
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d02f      	beq.n	800d530 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	f003 020f 	and.w	r2, r3, #15
 800d4d6:	6879      	ldr	r1, [r7, #4]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	440b      	add	r3, r1
 800d4e2:	3318      	adds	r3, #24
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	78fb      	ldrb	r3, [r7, #3]
 800d4e8:	f003 010f 	and.w	r1, r3, #15
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	440b      	add	r3, r1
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4403      	add	r3, r0
 800d4f8:	3348      	adds	r3, #72	; 0x48
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800d500:	fb01 f303 	mul.w	r3, r1, r3
 800d504:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d506:	2b00      	cmp	r3, #0
 800d508:	d112      	bne.n	800d530 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d50a:	78fb      	ldrb	r3, [r7, #3]
 800d50c:	f003 020f 	and.w	r2, r3, #15
 800d510:	6879      	ldr	r1, [r7, #4]
 800d512:	4613      	mov	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	440b      	add	r3, r1
 800d51c:	3318      	adds	r3, #24
 800d51e:	2200      	movs	r2, #0
 800d520:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d522:	78f9      	ldrb	r1, [r7, #3]
 800d524:	2300      	movs	r3, #0
 800d526:	2200      	movs	r2, #0
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f012 fb5e 	bl	801fbea <USBD_LL_Transmit>
 800d52e:	e01f      	b.n	800d570 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2200      	movs	r2, #0
 800d534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	33b0      	adds	r3, #176	; 0xb0
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	4413      	add	r3, r2
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	691b      	ldr	r3, [r3, #16]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d010      	beq.n	800d570 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	33b0      	adds	r3, #176	; 0xb0
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	4413      	add	r3, r2
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d56c:	78fa      	ldrb	r2, [r7, #3]
 800d56e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b084      	sub	sp, #16
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	460b      	mov	r3, r1
 800d584:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	32b0      	adds	r2, #176	; 0xb0
 800d590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d594:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	32b0      	adds	r2, #176	; 0xb0
 800d5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d101      	bne.n	800d5ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e01a      	b.n	800d5e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d5ac:	78fb      	ldrb	r3, [r7, #3]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f012 fb5c 	bl	801fc6e <USBD_LL_GetRxDataSize>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	33b0      	adds	r3, #176	; 0xb0
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d5dc:	4611      	mov	r1, r2
 800d5de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	32b0      	adds	r2, #176	; 0xb0
 800d5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d608:	2303      	movs	r3, #3
 800d60a:	e025      	b.n	800d658 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	33b0      	adds	r3, #176	; 0xb0
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01a      	beq.n	800d656 <USBD_CDC_EP0_RxReady+0x6c>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d626:	2bff      	cmp	r3, #255	; 0xff
 800d628:	d015      	beq.n	800d656 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	33b0      	adds	r3, #176	; 0xb0
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4413      	add	r3, r2
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d642:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d64a:	b292      	uxth	r2, r2
 800d64c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	22ff      	movs	r2, #255	; 0xff
 800d652:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d668:	2182      	movs	r1, #130	; 0x82
 800d66a:	4818      	ldr	r0, [pc, #96]	; (800d6cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d66c:	f000 fd4f 	bl	800e10e <USBD_GetEpDesc>
 800d670:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d672:	2101      	movs	r1, #1
 800d674:	4815      	ldr	r0, [pc, #84]	; (800d6cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d676:	f000 fd4a 	bl	800e10e <USBD_GetEpDesc>
 800d67a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d67c:	2181      	movs	r1, #129	; 0x81
 800d67e:	4813      	ldr	r0, [pc, #76]	; (800d6cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d680:	f000 fd45 	bl	800e10e <USBD_GetEpDesc>
 800d684:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2210      	movs	r2, #16
 800d690:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d006      	beq.n	800d6a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6a0:	711a      	strb	r2, [r3, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d006      	beq.n	800d6ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6b4:	711a      	strb	r2, [r3, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2243      	movs	r2, #67	; 0x43
 800d6be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d6c0:	4b02      	ldr	r3, [pc, #8]	; (800d6cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3718      	adds	r7, #24
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	200000b0 	.word	0x200000b0

0800d6d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d6d8:	2182      	movs	r1, #130	; 0x82
 800d6da:	4818      	ldr	r0, [pc, #96]	; (800d73c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6dc:	f000 fd17 	bl	800e10e <USBD_GetEpDesc>
 800d6e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	4815      	ldr	r0, [pc, #84]	; (800d73c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6e6:	f000 fd12 	bl	800e10e <USBD_GetEpDesc>
 800d6ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d6ec:	2181      	movs	r1, #129	; 0x81
 800d6ee:	4813      	ldr	r0, [pc, #76]	; (800d73c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6f0:	f000 fd0d 	bl	800e10e <USBD_GetEpDesc>
 800d6f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d002      	beq.n	800d702 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	2210      	movs	r2, #16
 800d700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d006      	beq.n	800d716 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	2200      	movs	r2, #0
 800d70c:	711a      	strb	r2, [r3, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	f042 0202 	orr.w	r2, r2, #2
 800d714:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d006      	beq.n	800d72a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	711a      	strb	r2, [r3, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	f042 0202 	orr.w	r2, r2, #2
 800d728:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2243      	movs	r2, #67	; 0x43
 800d72e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d730:	4b02      	ldr	r3, [pc, #8]	; (800d73c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d732:	4618      	mov	r0, r3
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	200000b0 	.word	0x200000b0

0800d740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d748:	2182      	movs	r1, #130	; 0x82
 800d74a:	4818      	ldr	r0, [pc, #96]	; (800d7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d74c:	f000 fcdf 	bl	800e10e <USBD_GetEpDesc>
 800d750:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d752:	2101      	movs	r1, #1
 800d754:	4815      	ldr	r0, [pc, #84]	; (800d7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d756:	f000 fcda 	bl	800e10e <USBD_GetEpDesc>
 800d75a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d75c:	2181      	movs	r1, #129	; 0x81
 800d75e:	4813      	ldr	r0, [pc, #76]	; (800d7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d760:	f000 fcd5 	bl	800e10e <USBD_GetEpDesc>
 800d764:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	2210      	movs	r2, #16
 800d770:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d006      	beq.n	800d786 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d780:	711a      	strb	r2, [r3, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d006      	beq.n	800d79a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d794:	711a      	strb	r2, [r3, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2243      	movs	r2, #67	; 0x43
 800d79e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d7a0:	4b02      	ldr	r3, [pc, #8]	; (800d7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3718      	adds	r7, #24
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	200000b0 	.word	0x200000b0

0800d7b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	220a      	movs	r2, #10
 800d7bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d7be:	4b03      	ldr	r3, [pc, #12]	; (800d7cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	2000006c 	.word	0x2000006c

0800d7d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	e009      	b.n	800d7f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	33b0      	adds	r3, #176	; 0xb0
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	683a      	ldr	r2, [r7, #0]
 800d7f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d804:	b480      	push	{r7}
 800d806:	b087      	sub	sp, #28
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	32b0      	adds	r2, #176	; 0xb0
 800d81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d81e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d101      	bne.n	800d82a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d826:	2303      	movs	r3, #3
 800d828:	e008      	b.n	800d83c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	371c      	adds	r7, #28
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	32b0      	adds	r2, #176	; 0xb0
 800d85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d860:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d868:	2303      	movs	r3, #3
 800d86a:	e004      	b.n	800d876 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
	...

0800d884 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	32b0      	adds	r2, #176	; 0xb0
 800d896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d89a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d89c:	2301      	movs	r3, #1
 800d89e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	32b0      	adds	r2, #176	; 0xb0
 800d8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d101      	bne.n	800d8b6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	e025      	b.n	800d902 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d11f      	bne.n	800d900 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d8c8:	4b10      	ldr	r3, [pc, #64]	; (800d90c <USBD_CDC_TransmitPacket+0x88>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	f003 020f 	and.w	r2, r3, #15
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4403      	add	r3, r0
 800d8e2:	3318      	adds	r3, #24
 800d8e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d8e6:	4b09      	ldr	r3, [pc, #36]	; (800d90c <USBD_CDC_TransmitPacket+0x88>)
 800d8e8:	7819      	ldrb	r1, [r3, #0]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f012 f977 	bl	801fbea <USBD_LL_Transmit>

    ret = USBD_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d900:	7bfb      	ldrb	r3, [r7, #15]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	200000f3 	.word	0x200000f3

0800d910 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	32b0      	adds	r2, #176	; 0xb0
 800d922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d926:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	32b0      	adds	r2, #176	; 0xb0
 800d932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d93a:	2303      	movs	r3, #3
 800d93c:	e018      	b.n	800d970 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	7c1b      	ldrb	r3, [r3, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10a      	bne.n	800d95c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d946:	4b0c      	ldr	r3, [pc, #48]	; (800d978 <USBD_CDC_ReceivePacket+0x68>)
 800d948:	7819      	ldrb	r1, [r3, #0]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d950:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f012 f969 	bl	801fc2c <USBD_LL_PrepareReceive>
 800d95a:	e008      	b.n	800d96e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d95c:	4b06      	ldr	r3, [pc, #24]	; (800d978 <USBD_CDC_ReceivePacket+0x68>)
 800d95e:	7819      	ldrb	r1, [r3, #0]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d966:	2340      	movs	r3, #64	; 0x40
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f012 f95f 	bl	801fc2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d96e:	2300      	movs	r3, #0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	200000f4 	.word	0x200000f4

0800d97c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	4613      	mov	r3, r2
 800d988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d990:	2303      	movs	r3, #3
 800d992:	e01f      	b.n	800d9d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	79fa      	ldrb	r2, [r7, #7]
 800d9c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f011 ffd9 	bl	801f980 <USBD_LL_Init>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d101      	bne.n	800d9f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e025      	b.n	800da40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	32ae      	adds	r2, #174	; 0xae
 800da06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00f      	beq.n	800da30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	32ae      	adds	r2, #174	; 0xae
 800da1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da20:	f107 020e 	add.w	r2, r7, #14
 800da24:	4610      	mov	r0, r2
 800da26:	4798      	blx	r3
 800da28:	4602      	mov	r2, r0
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800da36:	1c5a      	adds	r2, r3, #1
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800da3e:	2300      	movs	r3, #0
}
 800da40:	4618      	mov	r0, r3
 800da42:	3710      	adds	r7, #16
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f011 ffe1 	bl	801fa18 <USBD_LL_Start>
 800da56:	4603      	mov	r3, r0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	370c      	adds	r7, #12
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	460b      	mov	r3, r1
 800da80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d009      	beq.n	800daa4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	78fa      	ldrb	r2, [r7, #3]
 800da9a:	4611      	mov	r1, r2
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	4798      	blx	r3
 800daa0:	4603      	mov	r3, r0
 800daa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b084      	sub	sp, #16
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	78fa      	ldrb	r2, [r7, #3]
 800dac8:	4611      	mov	r1, r2
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	4798      	blx	r3
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d001      	beq.n	800dad8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dad4:	2303      	movs	r3, #3
 800dad6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f001 f908 	bl	800ed0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800db08:	461a      	mov	r2, r3
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db16:	f003 031f 	and.w	r3, r3, #31
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d01a      	beq.n	800db54 <USBD_LL_SetupStage+0x72>
 800db1e:	2b02      	cmp	r3, #2
 800db20:	d822      	bhi.n	800db68 <USBD_LL_SetupStage+0x86>
 800db22:	2b00      	cmp	r3, #0
 800db24:	d002      	beq.n	800db2c <USBD_LL_SetupStage+0x4a>
 800db26:	2b01      	cmp	r3, #1
 800db28:	d00a      	beq.n	800db40 <USBD_LL_SetupStage+0x5e>
 800db2a:	e01d      	b.n	800db68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db32:	4619      	mov	r1, r3
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 fb5f 	bl	800e1f8 <USBD_StdDevReq>
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]
      break;
 800db3e:	e020      	b.n	800db82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 fbc7 	bl	800e2dc <USBD_StdItfReq>
 800db4e:	4603      	mov	r3, r0
 800db50:	73fb      	strb	r3, [r7, #15]
      break;
 800db52:	e016      	b.n	800db82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db5a:	4619      	mov	r1, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fc29 	bl	800e3b4 <USBD_StdEPReq>
 800db62:	4603      	mov	r3, r0
 800db64:	73fb      	strb	r3, [r7, #15]
      break;
 800db66:	e00c      	b.n	800db82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db72:	b2db      	uxtb	r3, r3
 800db74:	4619      	mov	r1, r3
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f011 ffae 	bl	801fad8 <USBD_LL_StallEP>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73fb      	strb	r3, [r7, #15]
      break;
 800db80:	bf00      	nop
  }

  return ret;
 800db82:	7bfb      	ldrb	r3, [r7, #15]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	460b      	mov	r3, r1
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800db9e:	7afb      	ldrb	r3, [r7, #11]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d16e      	bne.n	800dc82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dbaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dbb2:	2b03      	cmp	r3, #3
 800dbb4:	f040 8098 	bne.w	800dce8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	689a      	ldr	r2, [r3, #8]
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d913      	bls.n	800dbec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	689a      	ldr	r2, [r3, #8]
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	1ad2      	subs	r2, r2, r3
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	68da      	ldr	r2, [r3, #12]
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	bf28      	it	cs
 800dbde:	4613      	movcs	r3, r2
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	6879      	ldr	r1, [r7, #4]
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f001 f984 	bl	800eef2 <USBD_CtlContinueRx>
 800dbea:	e07d      	b.n	800dce8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbf2:	f003 031f 	and.w	r3, r3, #31
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d014      	beq.n	800dc24 <USBD_LL_DataOutStage+0x98>
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d81d      	bhi.n	800dc3a <USBD_LL_DataOutStage+0xae>
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <USBD_LL_DataOutStage+0x7c>
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d003      	beq.n	800dc0e <USBD_LL_DataOutStage+0x82>
 800dc06:	e018      	b.n	800dc3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	75bb      	strb	r3, [r7, #22]
            break;
 800dc0c:	e018      	b.n	800dc40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	4619      	mov	r1, r3
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f000 fa5e 	bl	800e0da <USBD_CoreFindIF>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	75bb      	strb	r3, [r7, #22]
            break;
 800dc22:	e00d      	b.n	800dc40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f000 fa60 	bl	800e0f4 <USBD_CoreFindEP>
 800dc34:	4603      	mov	r3, r0
 800dc36:	75bb      	strb	r3, [r7, #22]
            break;
 800dc38:	e002      	b.n	800dc40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	75bb      	strb	r3, [r7, #22]
            break;
 800dc3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dc40:	7dbb      	ldrb	r3, [r7, #22]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d119      	bne.n	800dc7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	2b03      	cmp	r3, #3
 800dc50:	d113      	bne.n	800dc7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dc52:	7dba      	ldrb	r2, [r7, #22]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	32ae      	adds	r2, #174	; 0xae
 800dc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00b      	beq.n	800dc7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dc62:	7dba      	ldrb	r2, [r7, #22]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dc6a:	7dba      	ldrb	r2, [r7, #22]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	32ae      	adds	r2, #174	; 0xae
 800dc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f001 f94a 	bl	800ef14 <USBD_CtlSendStatus>
 800dc80:	e032      	b.n	800dce8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dc82:	7afb      	ldrb	r3, [r7, #11]
 800dc84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f000 fa31 	bl	800e0f4 <USBD_CoreFindEP>
 800dc92:	4603      	mov	r3, r0
 800dc94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc96:	7dbb      	ldrb	r3, [r7, #22]
 800dc98:	2bff      	cmp	r3, #255	; 0xff
 800dc9a:	d025      	beq.n	800dce8 <USBD_LL_DataOutStage+0x15c>
 800dc9c:	7dbb      	ldrb	r3, [r7, #22]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d122      	bne.n	800dce8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d117      	bne.n	800dcde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dcae:	7dba      	ldrb	r2, [r7, #22]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	32ae      	adds	r2, #174	; 0xae
 800dcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcb8:	699b      	ldr	r3, [r3, #24]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00f      	beq.n	800dcde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dcbe:	7dba      	ldrb	r2, [r7, #22]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dcc6:	7dba      	ldrb	r2, [r7, #22]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	32ae      	adds	r2, #174	; 0xae
 800dccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd0:	699b      	ldr	r3, [r3, #24]
 800dcd2:	7afa      	ldrb	r2, [r7, #11]
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	4798      	blx	r3
 800dcda:	4603      	mov	r3, r0
 800dcdc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dcde:	7dfb      	ldrb	r3, [r7, #23]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dce4:	7dfb      	ldrb	r3, [r7, #23]
 800dce6:	e000      	b.n	800dcea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b086      	sub	sp, #24
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	60f8      	str	r0, [r7, #12]
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	607a      	str	r2, [r7, #4]
 800dcfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dd00:	7afb      	ldrb	r3, [r7, #11]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d16f      	bne.n	800dde6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	3314      	adds	r3, #20
 800dd0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d15a      	bne.n	800ddcc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	689a      	ldr	r2, [r3, #8]
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d914      	bls.n	800dd4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	689a      	ldr	r2, [r3, #8]
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	1ad2      	subs	r2, r2, r3
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	461a      	mov	r2, r3
 800dd36:	6879      	ldr	r1, [r7, #4]
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f001 f8ac 	bl	800ee96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd3e:	2300      	movs	r3, #0
 800dd40:	2200      	movs	r2, #0
 800dd42:	2100      	movs	r1, #0
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f011 ff71 	bl	801fc2c <USBD_LL_PrepareReceive>
 800dd4a:	e03f      	b.n	800ddcc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	68da      	ldr	r2, [r3, #12]
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d11c      	bne.n	800dd92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d316      	bcc.n	800dd92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d20f      	bcs.n	800dd92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd72:	2200      	movs	r2, #0
 800dd74:	2100      	movs	r1, #0
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f001 f88d 	bl	800ee96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd84:	2300      	movs	r3, #0
 800dd86:	2200      	movs	r2, #0
 800dd88:	2100      	movs	r1, #0
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f011 ff4e 	bl	801fc2c <USBD_LL_PrepareReceive>
 800dd90:	e01c      	b.n	800ddcc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b03      	cmp	r3, #3
 800dd9c:	d10f      	bne.n	800ddbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d009      	beq.n	800ddbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddbe:	2180      	movs	r1, #128	; 0x80
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f011 fe89 	bl	801fad8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f001 f8b7 	bl	800ef3a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d03a      	beq.n	800de4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f7ff fe42 	bl	800da60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dde4:	e032      	b.n	800de4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dde6:	7afb      	ldrb	r3, [r7, #11]
 800dde8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	4619      	mov	r1, r3
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f000 f97f 	bl	800e0f4 <USBD_CoreFindEP>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddfa:	7dfb      	ldrb	r3, [r7, #23]
 800ddfc:	2bff      	cmp	r3, #255	; 0xff
 800ddfe:	d025      	beq.n	800de4c <USBD_LL_DataInStage+0x15a>
 800de00:	7dfb      	ldrb	r3, [r7, #23]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d122      	bne.n	800de4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b03      	cmp	r3, #3
 800de10:	d11c      	bne.n	800de4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800de12:	7dfa      	ldrb	r2, [r7, #23]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	32ae      	adds	r2, #174	; 0xae
 800de18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1c:	695b      	ldr	r3, [r3, #20]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d014      	beq.n	800de4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800de22:	7dfa      	ldrb	r2, [r7, #23]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800de2a:	7dfa      	ldrb	r2, [r7, #23]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	32ae      	adds	r2, #174	; 0xae
 800de30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	7afa      	ldrb	r2, [r7, #11]
 800de38:	4611      	mov	r1, r2
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	4798      	blx	r3
 800de3e:	4603      	mov	r3, r0
 800de40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800de42:	7dbb      	ldrb	r3, [r7, #22]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800de48:	7dbb      	ldrb	r3, [r7, #22]
 800de4a:	e000      	b.n	800de4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3718      	adds	r7, #24
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}

0800de56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de56:	b580      	push	{r7, lr}
 800de58:	b084      	sub	sp, #16
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800de5e:	2300      	movs	r3, #0
 800de60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2201      	movs	r2, #1
 800de66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d014      	beq.n	800debc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00e      	beq.n	800debc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	6852      	ldr	r2, [r2, #4]
 800deaa:	b2d2      	uxtb	r2, r2
 800deac:	4611      	mov	r1, r2
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	4798      	blx	r3
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d001      	beq.n	800debc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800deb8:	2303      	movs	r3, #3
 800deba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800debc:	2340      	movs	r3, #64	; 0x40
 800debe:	2200      	movs	r2, #0
 800dec0:	2100      	movs	r1, #0
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f011 fdc3 	bl	801fa4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2240      	movs	r2, #64	; 0x40
 800ded4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ded8:	2340      	movs	r3, #64	; 0x40
 800deda:	2200      	movs	r2, #0
 800dedc:	2180      	movs	r1, #128	; 0x80
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f011 fdb5 	bl	801fa4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2240      	movs	r2, #64	; 0x40
 800deee:	621a      	str	r2, [r3, #32]

  return ret;
 800def0:	7bfb      	ldrb	r3, [r7, #15]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800defa:	b480      	push	{r7}
 800defc:	b083      	sub	sp, #12
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	460b      	mov	r3, r1
 800df04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	78fa      	ldrb	r2, [r7, #3]
 800df0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	370c      	adds	r7, #12
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2204      	movs	r2, #4
 800df34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df46:	b480      	push	{r7}
 800df48:	b083      	sub	sp, #12
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b04      	cmp	r3, #4
 800df58:	d106      	bne.n	800df68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800df60:	b2da      	uxtb	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b082      	sub	sp, #8
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b03      	cmp	r3, #3
 800df88:	d110      	bne.n	800dfac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00b      	beq.n	800dfac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d005      	beq.n	800dfac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfa6:	69db      	ldr	r3, [r3, #28]
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b082      	sub	sp, #8
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	32ae      	adds	r2, #174	; 0xae
 800dfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	e01c      	b.n	800e012 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d115      	bne.n	800e010 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	32ae      	adds	r2, #174	; 0xae
 800dfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dff2:	6a1b      	ldr	r3, [r3, #32]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00b      	beq.n	800e010 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	32ae      	adds	r2, #174	; 0xae
 800e002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e006:	6a1b      	ldr	r3, [r3, #32]
 800e008:	78fa      	ldrb	r2, [r7, #3]
 800e00a:	4611      	mov	r1, r2
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b082      	sub	sp, #8
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	460b      	mov	r3, r1
 800e024:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	32ae      	adds	r2, #174	; 0xae
 800e030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e038:	2303      	movs	r3, #3
 800e03a:	e01c      	b.n	800e076 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2b03      	cmp	r3, #3
 800e046:	d115      	bne.n	800e074 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	32ae      	adds	r2, #174	; 0xae
 800e052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00b      	beq.n	800e074 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	32ae      	adds	r2, #174	; 0xae
 800e066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06c:	78fa      	ldrb	r2, [r7, #3]
 800e06e:	4611      	mov	r1, r2
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e07e:	b480      	push	{r7}
 800e080:	b083      	sub	sp, #12
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	370c      	adds	r7, #12
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00e      	beq.n	800e0d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	6852      	ldr	r2, [r2, #4]
 800e0be:	b2d2      	uxtb	r2, r2
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	4798      	blx	r3
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d001      	beq.n	800e0d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b083      	sub	sp, #12
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e0e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e100:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e102:	4618      	mov	r0, r3
 800e104:	370c      	adds	r7, #12
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b086      	sub	sp, #24
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	460b      	mov	r3, r1
 800e118:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e122:	2300      	movs	r3, #0
 800e124:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	885b      	ldrh	r3, [r3, #2]
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	b29b      	uxth	r3, r3
 800e132:	429a      	cmp	r2, r3
 800e134:	d920      	bls.n	800e178 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e13e:	e013      	b.n	800e168 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e140:	f107 030a 	add.w	r3, r7, #10
 800e144:	4619      	mov	r1, r3
 800e146:	6978      	ldr	r0, [r7, #20]
 800e148:	f000 f81b 	bl	800e182 <USBD_GetNextDesc>
 800e14c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	785b      	ldrb	r3, [r3, #1]
 800e152:	2b05      	cmp	r3, #5
 800e154:	d108      	bne.n	800e168 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	789b      	ldrb	r3, [r3, #2]
 800e15e:	78fa      	ldrb	r2, [r7, #3]
 800e160:	429a      	cmp	r2, r3
 800e162:	d008      	beq.n	800e176 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e164:	2300      	movs	r3, #0
 800e166:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	885b      	ldrh	r3, [r3, #2]
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	897b      	ldrh	r3, [r7, #10]
 800e170:	429a      	cmp	r2, r3
 800e172:	d8e5      	bhi.n	800e140 <USBD_GetEpDesc+0x32>
 800e174:	e000      	b.n	800e178 <USBD_GetEpDesc+0x6a>
          break;
 800e176:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e178:	693b      	ldr	r3, [r7, #16]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e182:	b480      	push	{r7}
 800e184:	b085      	sub	sp, #20
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
 800e18a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	881a      	ldrh	r2, [r3, #0]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	4413      	add	r3, r2
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3714      	adds	r7, #20
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e1da:	8a3b      	ldrh	r3, [r7, #16]
 800e1dc:	021b      	lsls	r3, r3, #8
 800e1de:	b21a      	sxth	r2, r3
 800e1e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	b21b      	sxth	r3, r3
 800e1e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e1ea:	89fb      	ldrh	r3, [r7, #14]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	371c      	adds	r7, #28
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e202:	2300      	movs	r3, #0
 800e204:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e20e:	2b40      	cmp	r3, #64	; 0x40
 800e210:	d005      	beq.n	800e21e <USBD_StdDevReq+0x26>
 800e212:	2b40      	cmp	r3, #64	; 0x40
 800e214:	d857      	bhi.n	800e2c6 <USBD_StdDevReq+0xce>
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00f      	beq.n	800e23a <USBD_StdDevReq+0x42>
 800e21a:	2b20      	cmp	r3, #32
 800e21c:	d153      	bne.n	800e2c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	32ae      	adds	r2, #174	; 0xae
 800e228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	4798      	blx	r3
 800e234:	4603      	mov	r3, r0
 800e236:	73fb      	strb	r3, [r7, #15]
      break;
 800e238:	e04a      	b.n	800e2d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	785b      	ldrb	r3, [r3, #1]
 800e23e:	2b09      	cmp	r3, #9
 800e240:	d83b      	bhi.n	800e2ba <USBD_StdDevReq+0xc2>
 800e242:	a201      	add	r2, pc, #4	; (adr r2, 800e248 <USBD_StdDevReq+0x50>)
 800e244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e248:	0800e29d 	.word	0x0800e29d
 800e24c:	0800e2b1 	.word	0x0800e2b1
 800e250:	0800e2bb 	.word	0x0800e2bb
 800e254:	0800e2a7 	.word	0x0800e2a7
 800e258:	0800e2bb 	.word	0x0800e2bb
 800e25c:	0800e27b 	.word	0x0800e27b
 800e260:	0800e271 	.word	0x0800e271
 800e264:	0800e2bb 	.word	0x0800e2bb
 800e268:	0800e293 	.word	0x0800e293
 800e26c:	0800e285 	.word	0x0800e285
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fa3c 	bl	800e6f0 <USBD_GetDescriptor>
          break;
 800e278:	e024      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 fba1 	bl	800e9c4 <USBD_SetAddress>
          break;
 800e282:	e01f      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e284:	6839      	ldr	r1, [r7, #0]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 fbe0 	bl	800ea4c <USBD_SetConfig>
 800e28c:	4603      	mov	r3, r0
 800e28e:	73fb      	strb	r3, [r7, #15]
          break;
 800e290:	e018      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 fc83 	bl	800eba0 <USBD_GetConfig>
          break;
 800e29a:	e013      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fcb4 	bl	800ec0c <USBD_GetStatus>
          break;
 800e2a4:	e00e      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 fce3 	bl	800ec74 <USBD_SetFeature>
          break;
 800e2ae:	e009      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fd07 	bl	800ecc6 <USBD_ClrFeature>
          break;
 800e2b8:	e004      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fd5e 	bl	800ed7e <USBD_CtlError>
          break;
 800e2c2:	bf00      	nop
      }
      break;
 800e2c4:	e004      	b.n	800e2d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fd58 	bl	800ed7e <USBD_CtlError>
      break;
 800e2ce:	bf00      	nop
  }

  return ret;
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop

0800e2dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2f2:	2b40      	cmp	r3, #64	; 0x40
 800e2f4:	d005      	beq.n	800e302 <USBD_StdItfReq+0x26>
 800e2f6:	2b40      	cmp	r3, #64	; 0x40
 800e2f8:	d852      	bhi.n	800e3a0 <USBD_StdItfReq+0xc4>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <USBD_StdItfReq+0x26>
 800e2fe:	2b20      	cmp	r3, #32
 800e300:	d14e      	bne.n	800e3a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	3b01      	subs	r3, #1
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d840      	bhi.n	800e392 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	889b      	ldrh	r3, [r3, #4]
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b01      	cmp	r3, #1
 800e318:	d836      	bhi.n	800e388 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	889b      	ldrh	r3, [r3, #4]
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	4619      	mov	r1, r3
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7ff fed9 	bl	800e0da <USBD_CoreFindIF>
 800e328:	4603      	mov	r3, r0
 800e32a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e32c:	7bbb      	ldrb	r3, [r7, #14]
 800e32e:	2bff      	cmp	r3, #255	; 0xff
 800e330:	d01d      	beq.n	800e36e <USBD_StdItfReq+0x92>
 800e332:	7bbb      	ldrb	r3, [r7, #14]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d11a      	bne.n	800e36e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e338:	7bba      	ldrb	r2, [r7, #14]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	32ae      	adds	r2, #174	; 0xae
 800e33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e342:	689b      	ldr	r3, [r3, #8]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00f      	beq.n	800e368 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e348:	7bba      	ldrb	r2, [r7, #14]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e350:	7bba      	ldrb	r2, [r7, #14]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	32ae      	adds	r2, #174	; 0xae
 800e356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	4798      	blx	r3
 800e362:	4603      	mov	r3, r0
 800e364:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e366:	e004      	b.n	800e372 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e368:	2303      	movs	r3, #3
 800e36a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e36c:	e001      	b.n	800e372 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e36e:	2303      	movs	r3, #3
 800e370:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	88db      	ldrh	r3, [r3, #6]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d110      	bne.n	800e39c <USBD_StdItfReq+0xc0>
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10d      	bne.n	800e39c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fdc7 	bl	800ef14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e386:	e009      	b.n	800e39c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fcf7 	bl	800ed7e <USBD_CtlError>
          break;
 800e390:	e004      	b.n	800e39c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e392:	6839      	ldr	r1, [r7, #0]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fcf2 	bl	800ed7e <USBD_CtlError>
          break;
 800e39a:	e000      	b.n	800e39e <USBD_StdItfReq+0xc2>
          break;
 800e39c:	bf00      	nop
      }
      break;
 800e39e:	e004      	b.n	800e3aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fceb 	bl	800ed7e <USBD_CtlError>
      break;
 800e3a8:	bf00      	nop
  }

  return ret;
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	889b      	ldrh	r3, [r3, #4]
 800e3c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3d0:	2b40      	cmp	r3, #64	; 0x40
 800e3d2:	d007      	beq.n	800e3e4 <USBD_StdEPReq+0x30>
 800e3d4:	2b40      	cmp	r3, #64	; 0x40
 800e3d6:	f200 817f 	bhi.w	800e6d8 <USBD_StdEPReq+0x324>
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d02a      	beq.n	800e434 <USBD_StdEPReq+0x80>
 800e3de:	2b20      	cmp	r3, #32
 800e3e0:	f040 817a 	bne.w	800e6d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e3e4:	7bbb      	ldrb	r3, [r7, #14]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7ff fe83 	bl	800e0f4 <USBD_CoreFindEP>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e3f2:	7b7b      	ldrb	r3, [r7, #13]
 800e3f4:	2bff      	cmp	r3, #255	; 0xff
 800e3f6:	f000 8174 	beq.w	800e6e2 <USBD_StdEPReq+0x32e>
 800e3fa:	7b7b      	ldrb	r3, [r7, #13]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f040 8170 	bne.w	800e6e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e402:	7b7a      	ldrb	r2, [r7, #13]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e40a:	7b7a      	ldrb	r2, [r7, #13]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	32ae      	adds	r2, #174	; 0xae
 800e410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	f000 8163 	beq.w	800e6e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e41c:	7b7a      	ldrb	r2, [r7, #13]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	32ae      	adds	r2, #174	; 0xae
 800e422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	6839      	ldr	r1, [r7, #0]
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	4798      	blx	r3
 800e42e:	4603      	mov	r3, r0
 800e430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e432:	e156      	b.n	800e6e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	785b      	ldrb	r3, [r3, #1]
 800e438:	2b03      	cmp	r3, #3
 800e43a:	d008      	beq.n	800e44e <USBD_StdEPReq+0x9a>
 800e43c:	2b03      	cmp	r3, #3
 800e43e:	f300 8145 	bgt.w	800e6cc <USBD_StdEPReq+0x318>
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 809b 	beq.w	800e57e <USBD_StdEPReq+0x1ca>
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d03c      	beq.n	800e4c6 <USBD_StdEPReq+0x112>
 800e44c:	e13e      	b.n	800e6cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b02      	cmp	r3, #2
 800e458:	d002      	beq.n	800e460 <USBD_StdEPReq+0xac>
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d016      	beq.n	800e48c <USBD_StdEPReq+0xd8>
 800e45e:	e02c      	b.n	800e4ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e460:	7bbb      	ldrb	r3, [r7, #14]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00d      	beq.n	800e482 <USBD_StdEPReq+0xce>
 800e466:	7bbb      	ldrb	r3, [r7, #14]
 800e468:	2b80      	cmp	r3, #128	; 0x80
 800e46a:	d00a      	beq.n	800e482 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e46c:	7bbb      	ldrb	r3, [r7, #14]
 800e46e:	4619      	mov	r1, r3
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f011 fb31 	bl	801fad8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e476:	2180      	movs	r1, #128	; 0x80
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f011 fb2d 	bl	801fad8 <USBD_LL_StallEP>
 800e47e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e480:	e020      	b.n	800e4c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e482:	6839      	ldr	r1, [r7, #0]
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 fc7a 	bl	800ed7e <USBD_CtlError>
              break;
 800e48a:	e01b      	b.n	800e4c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	885b      	ldrh	r3, [r3, #2]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d10e      	bne.n	800e4b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00b      	beq.n	800e4b2 <USBD_StdEPReq+0xfe>
 800e49a:	7bbb      	ldrb	r3, [r7, #14]
 800e49c:	2b80      	cmp	r3, #128	; 0x80
 800e49e:	d008      	beq.n	800e4b2 <USBD_StdEPReq+0xfe>
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	88db      	ldrh	r3, [r3, #6]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d104      	bne.n	800e4b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f011 fb13 	bl	801fad8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 fd2e 	bl	800ef14 <USBD_CtlSendStatus>

              break;
 800e4b8:	e004      	b.n	800e4c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e4ba:	6839      	ldr	r1, [r7, #0]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fc5e 	bl	800ed7e <USBD_CtlError>
              break;
 800e4c2:	bf00      	nop
          }
          break;
 800e4c4:	e107      	b.n	800e6d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d002      	beq.n	800e4d8 <USBD_StdEPReq+0x124>
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d016      	beq.n	800e504 <USBD_StdEPReq+0x150>
 800e4d6:	e04b      	b.n	800e570 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4d8:	7bbb      	ldrb	r3, [r7, #14]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00d      	beq.n	800e4fa <USBD_StdEPReq+0x146>
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	2b80      	cmp	r3, #128	; 0x80
 800e4e2:	d00a      	beq.n	800e4fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4e4:	7bbb      	ldrb	r3, [r7, #14]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f011 faf5 	bl	801fad8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4ee:	2180      	movs	r1, #128	; 0x80
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f011 faf1 	bl	801fad8 <USBD_LL_StallEP>
 800e4f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e4f8:	e040      	b.n	800e57c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e4fa:	6839      	ldr	r1, [r7, #0]
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fc3e 	bl	800ed7e <USBD_CtlError>
              break;
 800e502:	e03b      	b.n	800e57c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	885b      	ldrh	r3, [r3, #2]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d136      	bne.n	800e57a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e50c:	7bbb      	ldrb	r3, [r7, #14]
 800e50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e512:	2b00      	cmp	r3, #0
 800e514:	d004      	beq.n	800e520 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e516:	7bbb      	ldrb	r3, [r7, #14]
 800e518:	4619      	mov	r1, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f011 fafb 	bl	801fb16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 fcf7 	bl	800ef14 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e526:	7bbb      	ldrb	r3, [r7, #14]
 800e528:	4619      	mov	r1, r3
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7ff fde2 	bl	800e0f4 <USBD_CoreFindEP>
 800e530:	4603      	mov	r3, r0
 800e532:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e534:	7b7b      	ldrb	r3, [r7, #13]
 800e536:	2bff      	cmp	r3, #255	; 0xff
 800e538:	d01f      	beq.n	800e57a <USBD_StdEPReq+0x1c6>
 800e53a:	7b7b      	ldrb	r3, [r7, #13]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d11c      	bne.n	800e57a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e540:	7b7a      	ldrb	r2, [r7, #13]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e548:	7b7a      	ldrb	r2, [r7, #13]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	32ae      	adds	r2, #174	; 0xae
 800e54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d010      	beq.n	800e57a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e558:	7b7a      	ldrb	r2, [r7, #13]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	32ae      	adds	r2, #174	; 0xae
 800e55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	6839      	ldr	r1, [r7, #0]
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	4798      	blx	r3
 800e56a:	4603      	mov	r3, r0
 800e56c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e56e:	e004      	b.n	800e57a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e570:	6839      	ldr	r1, [r7, #0]
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fc03 	bl	800ed7e <USBD_CtlError>
              break;
 800e578:	e000      	b.n	800e57c <USBD_StdEPReq+0x1c8>
              break;
 800e57a:	bf00      	nop
          }
          break;
 800e57c:	e0ab      	b.n	800e6d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b02      	cmp	r3, #2
 800e588:	d002      	beq.n	800e590 <USBD_StdEPReq+0x1dc>
 800e58a:	2b03      	cmp	r3, #3
 800e58c:	d032      	beq.n	800e5f4 <USBD_StdEPReq+0x240>
 800e58e:	e097      	b.n	800e6c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e590:	7bbb      	ldrb	r3, [r7, #14]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d007      	beq.n	800e5a6 <USBD_StdEPReq+0x1f2>
 800e596:	7bbb      	ldrb	r3, [r7, #14]
 800e598:	2b80      	cmp	r3, #128	; 0x80
 800e59a:	d004      	beq.n	800e5a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fbed 	bl	800ed7e <USBD_CtlError>
                break;
 800e5a4:	e091      	b.n	800e6ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	da0b      	bge.n	800e5c6 <USBD_StdEPReq+0x212>
 800e5ae:	7bbb      	ldrb	r3, [r7, #14]
 800e5b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	4413      	add	r3, r2
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	3310      	adds	r3, #16
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	e00b      	b.n	800e5de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e5c6:	7bbb      	ldrb	r3, [r7, #14]
 800e5c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	4413      	add	r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	4413      	add	r3, r2
 800e5dc:	3304      	adds	r3, #4
 800e5de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	2202      	movs	r2, #2
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 fc37 	bl	800ee60 <USBD_CtlSendData>
              break;
 800e5f2:	e06a      	b.n	800e6ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e5f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	da11      	bge.n	800e620 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e5fc:	7bbb      	ldrb	r3, [r7, #14]
 800e5fe:	f003 020f 	and.w	r2, r3, #15
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	4613      	mov	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	440b      	add	r3, r1
 800e60e:	3324      	adds	r3, #36	; 0x24
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d117      	bne.n	800e646 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 fbb0 	bl	800ed7e <USBD_CtlError>
                  break;
 800e61e:	e054      	b.n	800e6ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e620:	7bbb      	ldrb	r3, [r7, #14]
 800e622:	f003 020f 	and.w	r2, r3, #15
 800e626:	6879      	ldr	r1, [r7, #4]
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	440b      	add	r3, r1
 800e632:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d104      	bne.n	800e646 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e63c:	6839      	ldr	r1, [r7, #0]
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 fb9d 	bl	800ed7e <USBD_CtlError>
                  break;
 800e644:	e041      	b.n	800e6ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e646:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	da0b      	bge.n	800e666 <USBD_StdEPReq+0x2b2>
 800e64e:	7bbb      	ldrb	r3, [r7, #14]
 800e650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	3310      	adds	r3, #16
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	4413      	add	r3, r2
 800e662:	3304      	adds	r3, #4
 800e664:	e00b      	b.n	800e67e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e66c:	4613      	mov	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	4413      	add	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	4413      	add	r3, r2
 800e67c:	3304      	adds	r3, #4
 800e67e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e680:	7bbb      	ldrb	r3, [r7, #14]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <USBD_StdEPReq+0x2d8>
 800e686:	7bbb      	ldrb	r3, [r7, #14]
 800e688:	2b80      	cmp	r3, #128	; 0x80
 800e68a:	d103      	bne.n	800e694 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	2200      	movs	r2, #0
 800e690:	601a      	str	r2, [r3, #0]
 800e692:	e00e      	b.n	800e6b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e694:	7bbb      	ldrb	r3, [r7, #14]
 800e696:	4619      	mov	r1, r3
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f011 fa5b 	bl	801fb54 <USBD_LL_IsStallEP>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d003      	beq.n	800e6ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	e002      	b.n	800e6b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fbd1 	bl	800ee60 <USBD_CtlSendData>
              break;
 800e6be:	e004      	b.n	800e6ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fb5b 	bl	800ed7e <USBD_CtlError>
              break;
 800e6c8:	bf00      	nop
          }
          break;
 800e6ca:	e004      	b.n	800e6d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e6cc:	6839      	ldr	r1, [r7, #0]
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 fb55 	bl	800ed7e <USBD_CtlError>
          break;
 800e6d4:	bf00      	nop
      }
      break;
 800e6d6:	e005      	b.n	800e6e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fb4f 	bl	800ed7e <USBD_CtlError>
      break;
 800e6e0:	e000      	b.n	800e6e4 <USBD_StdEPReq+0x330>
      break;
 800e6e2:	bf00      	nop
  }

  return ret;
 800e6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
	...

0800e6f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e6fe:	2300      	movs	r3, #0
 800e700:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e702:	2300      	movs	r3, #0
 800e704:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	885b      	ldrh	r3, [r3, #2]
 800e70a:	0a1b      	lsrs	r3, r3, #8
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	3b01      	subs	r3, #1
 800e710:	2b06      	cmp	r3, #6
 800e712:	f200 8128 	bhi.w	800e966 <USBD_GetDescriptor+0x276>
 800e716:	a201      	add	r2, pc, #4	; (adr r2, 800e71c <USBD_GetDescriptor+0x2c>)
 800e718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71c:	0800e739 	.word	0x0800e739
 800e720:	0800e751 	.word	0x0800e751
 800e724:	0800e791 	.word	0x0800e791
 800e728:	0800e967 	.word	0x0800e967
 800e72c:	0800e967 	.word	0x0800e967
 800e730:	0800e907 	.word	0x0800e907
 800e734:	0800e933 	.word	0x0800e933
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	7c12      	ldrb	r2, [r2, #16]
 800e744:	f107 0108 	add.w	r1, r7, #8
 800e748:	4610      	mov	r0, r2
 800e74a:	4798      	blx	r3
 800e74c:	60f8      	str	r0, [r7, #12]
      break;
 800e74e:	e112      	b.n	800e976 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	7c1b      	ldrb	r3, [r3, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d10d      	bne.n	800e774 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e760:	f107 0208 	add.w	r2, r7, #8
 800e764:	4610      	mov	r0, r2
 800e766:	4798      	blx	r3
 800e768:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3301      	adds	r3, #1
 800e76e:	2202      	movs	r2, #2
 800e770:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e772:	e100      	b.n	800e976 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e77c:	f107 0208 	add.w	r2, r7, #8
 800e780:	4610      	mov	r0, r2
 800e782:	4798      	blx	r3
 800e784:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3301      	adds	r3, #1
 800e78a:	2202      	movs	r2, #2
 800e78c:	701a      	strb	r2, [r3, #0]
      break;
 800e78e:	e0f2      	b.n	800e976 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	885b      	ldrh	r3, [r3, #2]
 800e794:	b2db      	uxtb	r3, r3
 800e796:	2b05      	cmp	r3, #5
 800e798:	f200 80ac 	bhi.w	800e8f4 <USBD_GetDescriptor+0x204>
 800e79c:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <USBD_GetDescriptor+0xb4>)
 800e79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a2:	bf00      	nop
 800e7a4:	0800e7bd 	.word	0x0800e7bd
 800e7a8:	0800e7f1 	.word	0x0800e7f1
 800e7ac:	0800e825 	.word	0x0800e825
 800e7b0:	0800e859 	.word	0x0800e859
 800e7b4:	0800e88d 	.word	0x0800e88d
 800e7b8:	0800e8c1 	.word	0x0800e8c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00b      	beq.n	800e7e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	7c12      	ldrb	r2, [r2, #16]
 800e7d4:	f107 0108 	add.w	r1, r7, #8
 800e7d8:	4610      	mov	r0, r2
 800e7da:	4798      	blx	r3
 800e7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7de:	e091      	b.n	800e904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7e0:	6839      	ldr	r1, [r7, #0]
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 facb 	bl	800ed7e <USBD_CtlError>
            err++;
 800e7e8:	7afb      	ldrb	r3, [r7, #11]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e7ee:	e089      	b.n	800e904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00b      	beq.n	800e814 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	7c12      	ldrb	r2, [r2, #16]
 800e808:	f107 0108 	add.w	r1, r7, #8
 800e80c:	4610      	mov	r0, r2
 800e80e:	4798      	blx	r3
 800e810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e812:	e077      	b.n	800e904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e814:	6839      	ldr	r1, [r7, #0]
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 fab1 	bl	800ed7e <USBD_CtlError>
            err++;
 800e81c:	7afb      	ldrb	r3, [r7, #11]
 800e81e:	3301      	adds	r3, #1
 800e820:	72fb      	strb	r3, [r7, #11]
          break;
 800e822:	e06f      	b.n	800e904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00b      	beq.n	800e848 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	7c12      	ldrb	r2, [r2, #16]
 800e83c:	f107 0108 	add.w	r1, r7, #8
 800e840:	4610      	mov	r0, r2
 800e842:	4798      	blx	r3
 800e844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e846:	e05d      	b.n	800e904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fa97 	bl	800ed7e <USBD_CtlError>
            err++;
 800e850:	7afb      	ldrb	r3, [r7, #11]
 800e852:	3301      	adds	r3, #1
 800e854:	72fb      	strb	r3, [r7, #11]
          break;
 800e856:	e055      	b.n	800e904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00b      	beq.n	800e87c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	7c12      	ldrb	r2, [r2, #16]
 800e870:	f107 0108 	add.w	r1, r7, #8
 800e874:	4610      	mov	r0, r2
 800e876:	4798      	blx	r3
 800e878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e87a:	e043      	b.n	800e904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 fa7d 	bl	800ed7e <USBD_CtlError>
            err++;
 800e884:	7afb      	ldrb	r3, [r7, #11]
 800e886:	3301      	adds	r3, #1
 800e888:	72fb      	strb	r3, [r7, #11]
          break;
 800e88a:	e03b      	b.n	800e904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e892:	695b      	ldr	r3, [r3, #20]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00b      	beq.n	800e8b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e89e:	695b      	ldr	r3, [r3, #20]
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	7c12      	ldrb	r2, [r2, #16]
 800e8a4:	f107 0108 	add.w	r1, r7, #8
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	4798      	blx	r3
 800e8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8ae:	e029      	b.n	800e904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8b0:	6839      	ldr	r1, [r7, #0]
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 fa63 	bl	800ed7e <USBD_CtlError>
            err++;
 800e8b8:	7afb      	ldrb	r3, [r7, #11]
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e8be:	e021      	b.n	800e904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8c6:	699b      	ldr	r3, [r3, #24]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00b      	beq.n	800e8e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	7c12      	ldrb	r2, [r2, #16]
 800e8d8:	f107 0108 	add.w	r1, r7, #8
 800e8dc:	4610      	mov	r0, r2
 800e8de:	4798      	blx	r3
 800e8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8e2:	e00f      	b.n	800e904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 fa49 	bl	800ed7e <USBD_CtlError>
            err++;
 800e8ec:	7afb      	ldrb	r3, [r7, #11]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8f2:	e007      	b.n	800e904 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e8f4:	6839      	ldr	r1, [r7, #0]
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 fa41 	bl	800ed7e <USBD_CtlError>
          err++;
 800e8fc:	7afb      	ldrb	r3, [r7, #11]
 800e8fe:	3301      	adds	r3, #1
 800e900:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e902:	bf00      	nop
      }
      break;
 800e904:	e037      	b.n	800e976 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	7c1b      	ldrb	r3, [r3, #16]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d109      	bne.n	800e922 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e916:	f107 0208 	add.w	r2, r7, #8
 800e91a:	4610      	mov	r0, r2
 800e91c:	4798      	blx	r3
 800e91e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e920:	e029      	b.n	800e976 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e922:	6839      	ldr	r1, [r7, #0]
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 fa2a 	bl	800ed7e <USBD_CtlError>
        err++;
 800e92a:	7afb      	ldrb	r3, [r7, #11]
 800e92c:	3301      	adds	r3, #1
 800e92e:	72fb      	strb	r3, [r7, #11]
      break;
 800e930:	e021      	b.n	800e976 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	7c1b      	ldrb	r3, [r3, #16]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10d      	bne.n	800e956 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e942:	f107 0208 	add.w	r2, r7, #8
 800e946:	4610      	mov	r0, r2
 800e948:	4798      	blx	r3
 800e94a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3301      	adds	r3, #1
 800e950:	2207      	movs	r2, #7
 800e952:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e954:	e00f      	b.n	800e976 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e956:	6839      	ldr	r1, [r7, #0]
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 fa10 	bl	800ed7e <USBD_CtlError>
        err++;
 800e95e:	7afb      	ldrb	r3, [r7, #11]
 800e960:	3301      	adds	r3, #1
 800e962:	72fb      	strb	r3, [r7, #11]
      break;
 800e964:	e007      	b.n	800e976 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fa08 	bl	800ed7e <USBD_CtlError>
      err++;
 800e96e:	7afb      	ldrb	r3, [r7, #11]
 800e970:	3301      	adds	r3, #1
 800e972:	72fb      	strb	r3, [r7, #11]
      break;
 800e974:	bf00      	nop
  }

  if (err != 0U)
 800e976:	7afb      	ldrb	r3, [r7, #11]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d11e      	bne.n	800e9ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	88db      	ldrh	r3, [r3, #6]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d016      	beq.n	800e9b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e984:	893b      	ldrh	r3, [r7, #8]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d00e      	beq.n	800e9a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	88da      	ldrh	r2, [r3, #6]
 800e98e:	893b      	ldrh	r3, [r7, #8]
 800e990:	4293      	cmp	r3, r2
 800e992:	bf28      	it	cs
 800e994:	4613      	movcs	r3, r2
 800e996:	b29b      	uxth	r3, r3
 800e998:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e99a:	893b      	ldrh	r3, [r7, #8]
 800e99c:	461a      	mov	r2, r3
 800e99e:	68f9      	ldr	r1, [r7, #12]
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 fa5d 	bl	800ee60 <USBD_CtlSendData>
 800e9a6:	e009      	b.n	800e9bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e9a8:	6839      	ldr	r1, [r7, #0]
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f9e7 	bl	800ed7e <USBD_CtlError>
 800e9b0:	e004      	b.n	800e9bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 faae 	bl	800ef14 <USBD_CtlSendStatus>
 800e9b8:	e000      	b.n	800e9bc <USBD_GetDescriptor+0x2cc>
    return;
 800e9ba:	bf00      	nop
  }
}
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop

0800e9c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	889b      	ldrh	r3, [r3, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d131      	bne.n	800ea3a <USBD_SetAddress+0x76>
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	88db      	ldrh	r3, [r3, #6]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d12d      	bne.n	800ea3a <USBD_SetAddress+0x76>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	885b      	ldrh	r3, [r3, #2]
 800e9e2:	2b7f      	cmp	r3, #127	; 0x7f
 800e9e4:	d829      	bhi.n	800ea3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	885b      	ldrh	r3, [r3, #2]
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d104      	bne.n	800ea08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e9fe:	6839      	ldr	r1, [r7, #0]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 f9bc 	bl	800ed7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea06:	e01d      	b.n	800ea44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	7bfa      	ldrb	r2, [r7, #15]
 800ea0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ea10:	7bfb      	ldrb	r3, [r7, #15]
 800ea12:	4619      	mov	r1, r3
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f011 f8c9 	bl	801fbac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 fa7a 	bl	800ef14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ea20:	7bfb      	ldrb	r3, [r7, #15]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d004      	beq.n	800ea30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2202      	movs	r2, #2
 800ea2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea2e:	e009      	b.n	800ea44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea38:	e004      	b.n	800ea44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ea3a:	6839      	ldr	r1, [r7, #0]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 f99e 	bl	800ed7e <USBD_CtlError>
  }
}
 800ea42:	bf00      	nop
 800ea44:	bf00      	nop
 800ea46:	3710      	adds	r7, #16
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea56:	2300      	movs	r3, #0
 800ea58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	885b      	ldrh	r3, [r3, #2]
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	4b4e      	ldr	r3, [pc, #312]	; (800eb9c <USBD_SetConfig+0x150>)
 800ea62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ea64:	4b4d      	ldr	r3, [pc, #308]	; (800eb9c <USBD_SetConfig+0x150>)
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d905      	bls.n	800ea78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ea6c:	6839      	ldr	r1, [r7, #0]
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 f985 	bl	800ed7e <USBD_CtlError>
    return USBD_FAIL;
 800ea74:	2303      	movs	r3, #3
 800ea76:	e08c      	b.n	800eb92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	2b02      	cmp	r3, #2
 800ea82:	d002      	beq.n	800ea8a <USBD_SetConfig+0x3e>
 800ea84:	2b03      	cmp	r3, #3
 800ea86:	d029      	beq.n	800eadc <USBD_SetConfig+0x90>
 800ea88:	e075      	b.n	800eb76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ea8a:	4b44      	ldr	r3, [pc, #272]	; (800eb9c <USBD_SetConfig+0x150>)
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d020      	beq.n	800ead4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ea92:	4b42      	ldr	r3, [pc, #264]	; (800eb9c <USBD_SetConfig+0x150>)
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	461a      	mov	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea9c:	4b3f      	ldr	r3, [pc, #252]	; (800eb9c <USBD_SetConfig+0x150>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7fe ffe7 	bl	800da76 <USBD_SetClassConfig>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d008      	beq.n	800eac4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 f962 	bl	800ed7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2202      	movs	r2, #2
 800eabe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eac2:	e065      	b.n	800eb90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 fa25 	bl	800ef14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2203      	movs	r2, #3
 800eace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ead2:	e05d      	b.n	800eb90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fa1d 	bl	800ef14 <USBD_CtlSendStatus>
      break;
 800eada:	e059      	b.n	800eb90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eadc:	4b2f      	ldr	r3, [pc, #188]	; (800eb9c <USBD_SetConfig+0x150>)
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d112      	bne.n	800eb0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2202      	movs	r2, #2
 800eae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eaec:	4b2b      	ldr	r3, [pc, #172]	; (800eb9c <USBD_SetConfig+0x150>)
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eaf6:	4b29      	ldr	r3, [pc, #164]	; (800eb9c <USBD_SetConfig+0x150>)
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	4619      	mov	r1, r3
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7fe ffd6 	bl	800daae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fa06 	bl	800ef14 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb08:	e042      	b.n	800eb90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800eb0a:	4b24      	ldr	r3, [pc, #144]	; (800eb9c <USBD_SetConfig+0x150>)
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d02a      	beq.n	800eb6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	4619      	mov	r1, r3
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7fe ffc4 	bl	800daae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eb26:	4b1d      	ldr	r3, [pc, #116]	; (800eb9c <USBD_SetConfig+0x150>)
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb30:	4b1a      	ldr	r3, [pc, #104]	; (800eb9c <USBD_SetConfig+0x150>)
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7fe ff9d 	bl	800da76 <USBD_SetClassConfig>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eb40:	7bfb      	ldrb	r3, [r7, #15]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00f      	beq.n	800eb66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eb46:	6839      	ldr	r1, [r7, #0]
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 f918 	bl	800ed7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	4619      	mov	r1, r3
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7fe ffa9 	bl	800daae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb64:	e014      	b.n	800eb90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f9d4 	bl	800ef14 <USBD_CtlSendStatus>
      break;
 800eb6c:	e010      	b.n	800eb90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f9d0 	bl	800ef14 <USBD_CtlSendStatus>
      break;
 800eb74:	e00c      	b.n	800eb90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eb76:	6839      	ldr	r1, [r7, #0]
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f900 	bl	800ed7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb7e:	4b07      	ldr	r3, [pc, #28]	; (800eb9c <USBD_SetConfig+0x150>)
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	4619      	mov	r1, r3
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7fe ff92 	bl	800daae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	73fb      	strb	r3, [r7, #15]
      break;
 800eb8e:	bf00      	nop
  }

  return ret;
 800eb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20000528 	.word	0x20000528

0800eba0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	88db      	ldrh	r3, [r3, #6]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d004      	beq.n	800ebbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ebb2:	6839      	ldr	r1, [r7, #0]
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 f8e2 	bl	800ed7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ebba:	e023      	b.n	800ec04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	dc02      	bgt.n	800ebce <USBD_GetConfig+0x2e>
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	dc03      	bgt.n	800ebd4 <USBD_GetConfig+0x34>
 800ebcc:	e015      	b.n	800ebfa <USBD_GetConfig+0x5a>
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d00b      	beq.n	800ebea <USBD_GetConfig+0x4a>
 800ebd2:	e012      	b.n	800ebfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	3308      	adds	r3, #8
 800ebde:	2201      	movs	r2, #1
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 f93c 	bl	800ee60 <USBD_CtlSendData>
        break;
 800ebe8:	e00c      	b.n	800ec04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	3304      	adds	r3, #4
 800ebee:	2201      	movs	r2, #1
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 f934 	bl	800ee60 <USBD_CtlSendData>
        break;
 800ebf8:	e004      	b.n	800ec04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ebfa:	6839      	ldr	r1, [r7, #0]
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 f8be 	bl	800ed7e <USBD_CtlError>
        break;
 800ec02:	bf00      	nop
}
 800ec04:	bf00      	nop
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	3b01      	subs	r3, #1
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d81e      	bhi.n	800ec62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	88db      	ldrh	r3, [r3, #6]
 800ec28:	2b02      	cmp	r3, #2
 800ec2a:	d004      	beq.n	800ec36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f8a5 	bl	800ed7e <USBD_CtlError>
        break;
 800ec34:	e01a      	b.n	800ec6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d005      	beq.n	800ec52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	f043 0202 	orr.w	r2, r3, #2
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	330c      	adds	r3, #12
 800ec56:	2202      	movs	r2, #2
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 f900 	bl	800ee60 <USBD_CtlSendData>
      break;
 800ec60:	e004      	b.n	800ec6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ec62:	6839      	ldr	r1, [r7, #0]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 f88a 	bl	800ed7e <USBD_CtlError>
      break;
 800ec6a:	bf00      	nop
  }
}
 800ec6c:	bf00      	nop
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	885b      	ldrh	r3, [r3, #2]
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d107      	bne.n	800ec96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 f940 	bl	800ef14 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ec94:	e013      	b.n	800ecbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	885b      	ldrh	r3, [r3, #2]
 800ec9a:	2b02      	cmp	r3, #2
 800ec9c:	d10b      	bne.n	800ecb6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	889b      	ldrh	r3, [r3, #4]
 800eca2:	0a1b      	lsrs	r3, r3, #8
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	b2da      	uxtb	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 f930 	bl	800ef14 <USBD_CtlSendStatus>
}
 800ecb4:	e003      	b.n	800ecbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 f860 	bl	800ed7e <USBD_CtlError>
}
 800ecbe:	bf00      	nop
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b082      	sub	sp, #8
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
 800ecce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	2b02      	cmp	r3, #2
 800ecdc:	d80b      	bhi.n	800ecf6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	885b      	ldrh	r3, [r3, #2]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d10c      	bne.n	800ed00 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 f910 	bl	800ef14 <USBD_CtlSendStatus>
      }
      break;
 800ecf4:	e004      	b.n	800ed00 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f840 	bl	800ed7e <USBD_CtlError>
      break;
 800ecfe:	e000      	b.n	800ed02 <USBD_ClrFeature+0x3c>
      break;
 800ed00:	bf00      	nop
  }
}
 800ed02:	bf00      	nop
 800ed04:	3708      	adds	r7, #8
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b084      	sub	sp, #16
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
 800ed12:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	781a      	ldrb	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	3301      	adds	r3, #1
 800ed24:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	781a      	ldrb	r2, [r3, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3301      	adds	r3, #1
 800ed32:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f7ff fa41 	bl	800e1bc <SWAPBYTE>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3301      	adds	r3, #1
 800ed46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f7ff fa34 	bl	800e1bc <SWAPBYTE>
 800ed54:	4603      	mov	r3, r0
 800ed56:	461a      	mov	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3301      	adds	r3, #1
 800ed66:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f7ff fa27 	bl	800e1bc <SWAPBYTE>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	461a      	mov	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	80da      	strh	r2, [r3, #6]
}
 800ed76:	bf00      	nop
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b082      	sub	sp, #8
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
 800ed86:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed88:	2180      	movs	r1, #128	; 0x80
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f010 fea4 	bl	801fad8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ed90:	2100      	movs	r1, #0
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f010 fea0 	bl	801fad8 <USBD_LL_StallEP>
}
 800ed98:	bf00      	nop
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b086      	sub	sp, #24
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800edac:	2300      	movs	r3, #0
 800edae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d036      	beq.n	800ee24 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800edba:	6938      	ldr	r0, [r7, #16]
 800edbc:	f000 f836 	bl	800ee2c <USBD_GetLen>
 800edc0:	4603      	mov	r3, r0
 800edc2:	3301      	adds	r3, #1
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	005b      	lsls	r3, r3, #1
 800edc8:	b29a      	uxth	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800edce:	7dfb      	ldrb	r3, [r7, #23]
 800edd0:	68ba      	ldr	r2, [r7, #8]
 800edd2:	4413      	add	r3, r2
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	7812      	ldrb	r2, [r2, #0]
 800edd8:	701a      	strb	r2, [r3, #0]
  idx++;
 800edda:	7dfb      	ldrb	r3, [r7, #23]
 800eddc:	3301      	adds	r3, #1
 800edde:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
 800ede2:	68ba      	ldr	r2, [r7, #8]
 800ede4:	4413      	add	r3, r2
 800ede6:	2203      	movs	r2, #3
 800ede8:	701a      	strb	r2, [r3, #0]
  idx++;
 800edea:	7dfb      	ldrb	r3, [r7, #23]
 800edec:	3301      	adds	r3, #1
 800edee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800edf0:	e013      	b.n	800ee1a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800edf2:	7dfb      	ldrb	r3, [r7, #23]
 800edf4:	68ba      	ldr	r2, [r7, #8]
 800edf6:	4413      	add	r3, r2
 800edf8:	693a      	ldr	r2, [r7, #16]
 800edfa:	7812      	ldrb	r2, [r2, #0]
 800edfc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	3301      	adds	r3, #1
 800ee02:	613b      	str	r3, [r7, #16]
    idx++;
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
 800ee06:	3301      	adds	r3, #1
 800ee08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ee0a:	7dfb      	ldrb	r3, [r7, #23]
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	4413      	add	r3, r2
 800ee10:	2200      	movs	r2, #0
 800ee12:	701a      	strb	r2, [r3, #0]
    idx++;
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
 800ee16:	3301      	adds	r3, #1
 800ee18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1e7      	bne.n	800edf2 <USBD_GetString+0x52>
 800ee22:	e000      	b.n	800ee26 <USBD_GetString+0x86>
    return;
 800ee24:	bf00      	nop
  }
}
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ee34:	2300      	movs	r3, #0
 800ee36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ee3c:	e005      	b.n	800ee4a <USBD_GetLen+0x1e>
  {
    len++;
 800ee3e:	7bfb      	ldrb	r3, [r7, #15]
 800ee40:	3301      	adds	r3, #1
 800ee42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	3301      	adds	r3, #1
 800ee48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1f5      	bne.n	800ee3e <USBD_GetLen+0x12>
  }

  return len;
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2202      	movs	r2, #2
 800ee70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	68ba      	ldr	r2, [r7, #8]
 800ee84:	2100      	movs	r1, #0
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f010 feaf 	bl	801fbea <USBD_LL_Transmit>

  return USBD_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b084      	sub	sp, #16
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	60f8      	str	r0, [r7, #12]
 800ee9e:	60b9      	str	r1, [r7, #8]
 800eea0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	2100      	movs	r1, #0
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f010 fe9e 	bl	801fbea <USBD_LL_Transmit>

  return USBD_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3710      	adds	r7, #16
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2203      	movs	r2, #3
 800eec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	2100      	movs	r1, #0
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f010 fea2 	bl	801fc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eee8:	2300      	movs	r3, #0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3710      	adds	r7, #16
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b084      	sub	sp, #16
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	60f8      	str	r0, [r7, #12]
 800eefa:	60b9      	str	r1, [r7, #8]
 800eefc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	2100      	movs	r1, #0
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	f010 fe91 	bl	801fc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2204      	movs	r2, #4
 800ef20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef24:	2300      	movs	r3, #0
 800ef26:	2200      	movs	r2, #0
 800ef28:	2100      	movs	r1, #0
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f010 fe5d 	bl	801fbea <USBD_LL_Transmit>

  return USBD_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b082      	sub	sp, #8
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2205      	movs	r2, #5
 800ef46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2100      	movs	r1, #0
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f010 fe6b 	bl	801fc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b08b      	sub	sp, #44	; 0x2c
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	ed87 0a02 	vstr	s0, [r7, #8]
 800ef6c:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	881b      	ldrh	r3, [r3, #0]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	885b      	ldrh	r3, [r3, #2]
 800ef84:	fb02 f303 	mul.w	r3, r2, r3
 800ef88:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ef8e:	e010      	b.n	800efb2 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	1d1a      	adds	r2, r3, #4
 800ef94:	627a      	str	r2, [r7, #36]	; 0x24
 800ef96:	ed93 7a00 	vldr	s14, [r3]
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	1d1a      	adds	r2, r3, #4
 800ef9e:	623a      	str	r2, [r7, #32]
 800efa0:	edd7 7a02 	vldr	s15, [r7, #8]
 800efa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efa8:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	3b01      	subs	r3, #1
 800efb0:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1eb      	bne.n	800ef90 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800efb8:	2300      	movs	r3, #0
 800efba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800efbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	372c      	adds	r7, #44	; 0x2c
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800efcc:	b480      	push	{r7}
 800efce:	b08b      	sub	sp, #44	; 0x2c
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	881b      	ldrh	r3, [r3, #0]
 800efe6:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	885b      	ldrh	r3, [r3, #2]
 800efec:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800efee:	89fb      	ldrh	r3, [r7, #14]
 800eff0:	61bb      	str	r3, [r7, #24]
 800eff2:	2300      	movs	r3, #0
 800eff4:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	009b      	lsls	r3, r3, #2
 800effa:	693a      	ldr	r2, [r7, #16]
 800effc:	4413      	add	r3, r2
 800effe:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f000:	89bb      	ldrh	r3, [r7, #12]
 800f002:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f004:	e00d      	b.n	800f022 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	1d1a      	adds	r2, r3, #4
 800f00a:	627a      	str	r2, [r7, #36]	; 0x24
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f012:	89fb      	ldrh	r3, [r7, #14]
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	6a3a      	ldr	r2, [r7, #32]
 800f018:	4413      	add	r3, r2
 800f01a:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f01c:	69fb      	ldr	r3, [r7, #28]
 800f01e:	3b01      	subs	r3, #1
 800f020:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1ee      	bne.n	800f006 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	3301      	adds	r3, #1
 800f02c:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	3b01      	subs	r3, #1
 800f032:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d1dd      	bne.n	800eff6 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f03a:	2300      	movs	r3, #0
 800f03c:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f03e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f042:	4618      	mov	r0, r3
 800f044:	372c      	adds	r7, #44	; 0x2c
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr

0800f04e <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800f04e:	b480      	push	{r7}
 800f050:	b087      	sub	sp, #28
 800f052:	af00      	add	r7, sp, #0
 800f054:	60f8      	str	r0, [r7, #12]
 800f056:	60b9      	str	r1, [r7, #8]
 800f058:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800f05a:	f04f 0300 	mov.w	r3, #0
 800f05e:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800f064:	e00d      	b.n	800f082 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	1d1a      	adds	r2, r3, #4
 800f06a:	60fa      	str	r2, [r7, #12]
 800f06c:	edd3 7a00 	vldr	s15, [r3]
 800f070:	ed97 7a04 	vldr	s14, [r7, #16]
 800f074:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f078:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	3b01      	subs	r3, #1
 800f080:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d1ee      	bne.n	800f066 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	ee07 3a90 	vmov	s15, r3
 800f08e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f092:	edd7 6a04 	vldr	s13, [r7, #16]
 800f096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	edc3 7a00 	vstr	s15, [r3]
}
 800f0a0:	bf00      	nop
 800f0a2:	371c      	adds	r7, #28
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b08a      	sub	sp, #40	; 0x28
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800f0b8:	f04f 0300 	mov.w	r3, #0
 800f0bc:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800f0c2:	e011      	b.n	800f0e8 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	1d1a      	adds	r2, r3, #4
 800f0c8:	60fa      	str	r2, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800f0ce:	edd7 7a07 	vldr	s15, [r7, #28]
 800f0d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f0d6:	ed97 7a08 	vldr	s14, [r7, #32]
 800f0da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0de:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1ea      	bne.n	800f0c4 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	ee07 3a90 	vmov	s15, r3
 800f0f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f0f8:	edd7 6a08 	vldr	s13, [r7, #32]
 800f0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f100:	edc7 7a06 	vstr	s15, [r7, #24]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800f108:	edd7 7a06 	vldr	s15, [r7, #24]
 800f10c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f114:	db09      	blt.n	800f12a <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800f116:	ed97 0a06 	vldr	s0, [r7, #24]
 800f11a:	f011 f94b 	bl	80203b4 <sqrtf>
 800f11e:	eef0 7a40 	vmov.f32	s15, s0
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800f128:	e004      	b.n	800f134 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f04f 0200 	mov.w	r2, #0
 800f130:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f132:	bf00      	nop
}
 800f134:	bf00      	nop
 800f136:	3728      	adds	r7, #40	; 0x28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b089      	sub	sp, #36	; 0x24
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	460b      	mov	r3, r1
 800f146:	607a      	str	r2, [r7, #4]
 800f148:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800f14a:	2300      	movs	r3, #0
 800f14c:	61fb      	str	r3, [r7, #28]
 800f14e:	e043      	b.n	800f1d8 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	005b      	lsls	r3, r3, #1
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	4413      	add	r3, r2
 800f158:	881b      	ldrh	r3, [r3, #0]
 800f15a:	089b      	lsrs	r3, r3, #2
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	3301      	adds	r3, #1
 800f164:	005b      	lsls	r3, r3, #1
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	4413      	add	r3, r2
 800f16a:	881b      	ldrh	r3, [r3, #0]
 800f16c:	089b      	lsrs	r3, r3, #2
 800f16e:	b29b      	uxth	r3, r3
 800f170:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	4413      	add	r3, r2
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	68fa      	ldr	r2, [r7, #12]
 800f184:	441a      	add	r2, r3
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	68f9      	ldr	r1, [r7, #12]
 800f18c:	440b      	add	r3, r1
 800f18e:	6812      	ldr	r2, [r2, #0]
 800f190:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	4413      	add	r3, r2
 800f19a:	693a      	ldr	r2, [r7, #16]
 800f19c:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	441a      	add	r2, r3
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	68f9      	ldr	r1, [r7, #12]
 800f1be:	440b      	add	r3, r1
 800f1c0:	6812      	ldr	r2, [r2, #0]
 800f1c2:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	601a      	str	r2, [r3, #0]

    i += 2;
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	3302      	adds	r3, #2
 800f1d6:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800f1d8:	897b      	ldrh	r3, [r7, #10]
 800f1da:	69fa      	ldr	r2, [r7, #28]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d3b7      	bcc.n	800f150 <arm_bitreversal_32+0x14>
  }
}
 800f1e0:	bf00      	nop
 800f1e2:	bf00      	nop
 800f1e4:	3724      	adds	r7, #36	; 0x24
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr

0800f1ee <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b0a0      	sub	sp, #128	; 0x80
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
 800f1f6:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	881b      	ldrh	r3, [r3, #0]
 800f1fc:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800f1fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	4413      	add	r3, r2
 800f206:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 800f212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f214:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800f216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f218:	085b      	lsrs	r3, r3, #1
 800f21a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800f21c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	683a      	ldr	r2, [r7, #0]
 800f222:	4413      	add	r3, r2
 800f224:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 800f226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f22c:	4413      	add	r3, r2
 800f22e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800f230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f232:	089b      	lsrs	r3, r3, #2
 800f234:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f236:	e1b6      	b.n	800f5a6 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	68db      	ldr	r3, [r3, #12]
 800f24e:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 800f250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800f256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800f25c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800f262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800f268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800f26e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800f274:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f276:	689b      	ldr	r3, [r3, #8]
 800f278:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800f27a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800f280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800f286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800f28c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800f292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800f298:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f29c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	1d1a      	adds	r2, r3, #4
 800f2a4:	603a      	str	r2, [r7, #0]
 800f2a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2aa:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800f2ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f2b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	1d1a      	adds	r2, r3, #4
 800f2ba:	603a      	str	r2, [r7, #0]
 800f2bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2c0:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800f2c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f2c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	1d1a      	adds	r2, r3, #4
 800f2d0:	603a      	str	r2, [r7, #0]
 800f2d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2d6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800f2da:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f2de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	1d1a      	adds	r2, r3, #4
 800f2e6:	603a      	str	r2, [r7, #0]
 800f2e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2ec:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800f2f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f2f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f2f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 800f300:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f304:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f30c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 800f310:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f314:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f31c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800f320:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f324:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f32c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 800f330:	ed97 7a06 	vldr	s14, [r7, #24]
 800f334:	edd7 7a02 	vldr	s15, [r7, #8]
 800f338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f33a:	1d1a      	adds	r2, r3, #4
 800f33c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f33e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f342:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800f346:	ed97 7a07 	vldr	s14, [r7, #28]
 800f34a:	edd7 7a03 	vldr	s15, [r7, #12]
 800f34e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f350:	1d1a      	adds	r2, r3, #4
 800f352:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f354:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f358:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800f35c:	ed97 7a08 	vldr	s14, [r7, #32]
 800f360:	edd7 7a04 	vldr	s15, [r7, #16]
 800f364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f366:	1d1a      	adds	r2, r3, #4
 800f368:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f36a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f36e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800f372:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f376:	edd7 7a05 	vldr	s15, [r7, #20]
 800f37a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f37c:	1d1a      	adds	r2, r3, #4
 800f37e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f380:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f384:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800f388:	ed97 7a02 	vldr	s14, [r7, #8]
 800f38c:	edd7 7a06 	vldr	s15, [r7, #24]
 800f390:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f394:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800f398:	ed97 7a03 	vldr	s14, [r7, #12]
 800f39c:	edd7 7a07 	vldr	s15, [r7, #28]
 800f3a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3a4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800f3a8:	ed97 7a04 	vldr	s14, [r7, #16]
 800f3ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800f3b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3b4:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800f3b8:	ed97 7a05 	vldr	s14, [r7, #20]
 800f3bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f3c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3c4:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800f3c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f3ca:	1d1a      	adds	r2, r3, #4
 800f3cc:	673a      	str	r2, [r7, #112]	; 0x70
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800f3d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f3d4:	1d1a      	adds	r2, r3, #4
 800f3d6:	673a      	str	r2, [r7, #112]	; 0x70
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800f3dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f3e0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800f3ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f3f0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f3f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3f8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800f3fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f400:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f408:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800f40c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f410:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f418:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800f41c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f41e:	1d1a      	adds	r2, r3, #4
 800f420:	677a      	str	r2, [r7, #116]	; 0x74
 800f422:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f426:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f42a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f42e:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800f432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f434:	1d1a      	adds	r2, r3, #4
 800f436:	677a      	str	r2, [r7, #116]	; 0x74
 800f438:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f43c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f440:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f444:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800f448:	edd7 7a02 	vldr	s15, [r7, #8]
 800f44c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f454:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800f458:	edd7 7a03 	vldr	s15, [r7, #12]
 800f45c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f464:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800f468:	edd7 7a03 	vldr	s15, [r7, #12]
 800f46c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f474:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800f478:	edd7 7a02 	vldr	s15, [r7, #8]
 800f47c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f480:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f484:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800f488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f48a:	1d1a      	adds	r2, r3, #4
 800f48c:	67ba      	str	r2, [r7, #120]	; 0x78
 800f48e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f492:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f49a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800f49e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4a0:	1d1a      	adds	r2, r3, #4
 800f4a2:	67ba      	str	r2, [r7, #120]	; 0x78
 800f4a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f4a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f4ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4b0:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800f4b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4b6:	1d1a      	adds	r2, r3, #4
 800f4b8:	673a      	str	r2, [r7, #112]	; 0x70
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800f4be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4c0:	1d1a      	adds	r2, r3, #4
 800f4c2:	673a      	str	r2, [r7, #112]	; 0x70
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800f4c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f4cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f4d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4d4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800f4d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f4dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4e4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800f4e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f4ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f4f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4f4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800f4f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f4fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f504:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 800f508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f50a:	1d1a      	adds	r2, r3, #4
 800f50c:	677a      	str	r2, [r7, #116]	; 0x74
 800f50e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f512:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f51a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800f51e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f520:	1d1a      	adds	r2, r3, #4
 800f522:	677a      	str	r2, [r7, #116]	; 0x74
 800f524:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f528:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f52c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f530:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800f534:	edd7 7a04 	vldr	s15, [r7, #16]
 800f538:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f53c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f540:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 800f544:	edd7 7a05 	vldr	s15, [r7, #20]
 800f548:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f550:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 800f554:	edd7 7a05 	vldr	s15, [r7, #20]
 800f558:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f55c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f560:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 800f564:	edd7 7a04 	vldr	s15, [r7, #16]
 800f568:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f56c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f570:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800f574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f576:	1d1a      	adds	r2, r3, #4
 800f578:	67ba      	str	r2, [r7, #120]	; 0x78
 800f57a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f57e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f582:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f586:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800f58a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f58c:	1d1a      	adds	r2, r3, #4
 800f58e:	67ba      	str	r2, [r7, #120]	; 0x78
 800f590:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f594:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f59c:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800f5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f47f ae45 	bne.w	800f238 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800f5ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5b0:	b299      	uxth	r1, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	2302      	movs	r3, #2
 800f5b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f5ba:	f000 fef1 	bl	80103a0 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800f5be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5c0:	b299      	uxth	r1, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	685a      	ldr	r2, [r3, #4]
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f5ca:	f000 fee9 	bl	80103a0 <arm_radix8_butterfly_f32>
}
 800f5ce:	bf00      	nop
 800f5d0:	3780      	adds	r7, #128	; 0x80
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b0ac      	sub	sp, #176	; 0xb0
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	085b      	lsrs	r3, r3, #1
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800f5ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	683a      	ldr	r2, [r7, #0]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800f5fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f604:	4413      	add	r3, r2
 800f606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800f60a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f614:	4413      	add	r3, r2
 800f616:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800f61e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f622:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800f624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f628:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800f62a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f62e:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800f630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f634:	3b04      	subs	r3, #4
 800f636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800f63a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f63e:	3b04      	subs	r3, #4
 800f640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800f644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f648:	3b04      	subs	r3, #4
 800f64a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800f64e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f652:	009b      	lsls	r3, r3, #2
 800f654:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f658:	4413      	add	r3, r2
 800f65a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f666:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f66a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f66e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800f676:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f67a:	085b      	lsrs	r3, r3, #1
 800f67c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800f680:	2302      	movs	r3, #2
 800f682:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800f684:	2304      	movs	r3, #4
 800f686:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800f688:	2306      	movs	r3, #6
 800f68a:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	ed93 7a00 	vldr	s14, [r3]
 800f692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f696:	edd3 7a00 	vldr	s15, [r3]
 800f69a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f69e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	ed93 7a00 	vldr	s14, [r3]
 800f6a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6ac:	edd3 7a00 	vldr	s15, [r3]
 800f6b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	ed93 7a00 	vldr	s14, [r3]
 800f6c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	edd3 7a00 	vldr	s15, [r3]
 800f6ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6ce:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	3304      	adds	r3, #4
 800f6d6:	ed93 7a00 	vldr	s14, [r3]
 800f6da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6de:	3304      	adds	r3, #4
 800f6e0:	edd3 7a00 	vldr	s15, [r3]
 800f6e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800f6ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	ed93 7a00 	vldr	s14, [r3]
 800f6f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800f6fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f6fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f702:	3304      	adds	r3, #4
 800f704:	edd3 7a00 	vldr	s15, [r3]
 800f708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f70c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800f710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f714:	edd3 7a00 	vldr	s15, [r3]
 800f718:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f71c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f724:	edd3 7a00 	vldr	s15, [r3]
 800f728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f72c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800f730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f734:	edd3 7a00 	vldr	s15, [r3]
 800f738:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f73c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f744:	edd3 7a00 	vldr	s15, [r3]
 800f748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f74c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800f750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f754:	3304      	adds	r3, #4
 800f756:	edd3 7a00 	vldr	s15, [r3]
 800f75a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f75e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f766:	3304      	adds	r3, #4
 800f768:	edd3 7a00 	vldr	s15, [r3]
 800f76c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f770:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800f774:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f778:	3304      	adds	r3, #4
 800f77a:	edd3 7a00 	vldr	s15, [r3]
 800f77e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f782:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f78a:	3304      	adds	r3, #4
 800f78c:	edd3 7a00 	vldr	s15, [r3]
 800f790:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f794:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800f798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f79c:	ed93 7a00 	vldr	s14, [r3]
 800f7a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f7a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7ac:	edd3 7a00 	vldr	s15, [r3]
 800f7b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7b4:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800f7b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7bc:	ed93 7a00 	vldr	s14, [r3]
 800f7c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800f7c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7cc:	edd3 7a00 	vldr	s15, [r3]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	1d1a      	adds	r2, r3, #4
 800f7d4:	603a      	str	r2, [r7, #0]
 800f7d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7da:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800f7de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7e2:	3304      	adds	r3, #4
 800f7e4:	ed93 7a00 	vldr	s14, [r3]
 800f7e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800f7ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	edd3 7a00 	vldr	s15, [r3]
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	1d1a      	adds	r2, r3, #4
 800f7fe:	603a      	str	r2, [r7, #0]
 800f800:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f804:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800f808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f80c:	1d1a      	adds	r2, r3, #4
 800f80e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f814:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800f816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f81a:	1d1a      	adds	r2, r3, #4
 800f81c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f822:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800f824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f828:	1d1a      	adds	r2, r3, #4
 800f82a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f82e:	69fa      	ldr	r2, [r7, #28]
 800f830:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800f832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f836:	1d1a      	adds	r2, r3, #4
 800f838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f83c:	6a3a      	ldr	r2, [r7, #32]
 800f83e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800f840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f844:	1d1a      	adds	r2, r3, #4
 800f846:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800f84e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f852:	1d1a      	adds	r2, r3, #4
 800f854:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f858:	693a      	ldr	r2, [r7, #16]
 800f85a:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800f85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f85e:	009b      	lsls	r3, r3, #2
 800f860:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f864:	4413      	add	r3, r2
 800f866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800f86a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f872:	4413      	add	r3, r2
 800f874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800f878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f880:	4413      	add	r3, r2
 800f882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800f886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f88a:	3b02      	subs	r3, #2
 800f88c:	085b      	lsrs	r3, r3, #1
 800f88e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f892:	e31a      	b.n	800feca <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	ed93 7a00 	vldr	s14, [r3]
 800f89a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f89e:	edd3 7a00 	vldr	s15, [r3]
 800f8a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8a6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	ed93 7a00 	vldr	s14, [r3]
 800f8b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8b4:	edd3 7a00 	vldr	s15, [r3]
 800f8b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8bc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	ed93 7a00 	vldr	s14, [r3]
 800f8c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	edd3 7a00 	vldr	s15, [r3]
 800f8d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8d6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	3304      	adds	r3, #4
 800f8de:	ed93 7a00 	vldr	s14, [r3]
 800f8e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8e6:	3304      	adds	r3, #4
 800f8e8:	edd3 7a00 	vldr	s15, [r3]
 800f8ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8f0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800f8f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	ed93 7a00 	vldr	s14, [r3]
 800f8fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800f902:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f90a:	3304      	adds	r3, #4
 800f90c:	edd3 7a00 	vldr	s15, [r3]
 800f910:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f914:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800f918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f91c:	edd3 7a00 	vldr	s15, [r3]
 800f920:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f924:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f92c:	edd3 7a00 	vldr	s15, [r3]
 800f930:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f934:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800f938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f93c:	edd3 7a00 	vldr	s15, [r3]
 800f940:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f944:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f94c:	edd3 7a00 	vldr	s15, [r3]
 800f950:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f954:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800f958:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f95c:	3304      	adds	r3, #4
 800f95e:	edd3 7a00 	vldr	s15, [r3]
 800f962:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f966:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f96a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f96e:	3304      	adds	r3, #4
 800f970:	edd3 7a00 	vldr	s15, [r3]
 800f974:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f978:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800f97c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f980:	3304      	adds	r3, #4
 800f982:	edd3 7a00 	vldr	s15, [r3]
 800f986:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f98a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f98e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f992:	3304      	adds	r3, #4
 800f994:	edd3 7a00 	vldr	s15, [r3]
 800f998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f99c:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800f9a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9a4:	ed93 7a00 	vldr	s14, [r3]
 800f9a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f9ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9b4:	edd3 7a00 	vldr	s15, [r3]
 800f9b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9bc:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800f9c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9c4:	ed93 7a00 	vldr	s14, [r3]
 800f9c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800f9cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9d4:	edd3 7a00 	vldr	s15, [r3]
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	1d1a      	adds	r2, r3, #4
 800f9dc:	603a      	str	r2, [r7, #0]
 800f9de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9e2:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800f9e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9ea:	3304      	adds	r3, #4
 800f9ec:	ed93 7a00 	vldr	s14, [r3]
 800f9f0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800f9f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9fc:	3304      	adds	r3, #4
 800f9fe:	edd3 7a00 	vldr	s15, [r3]
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	1d1a      	adds	r2, r3, #4
 800fa06:	603a      	str	r2, [r7, #0]
 800fa08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa0c:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800fa10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa14:	3b04      	subs	r3, #4
 800fa16:	ed93 7a00 	vldr	s14, [r3]
 800fa1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa1e:	3b04      	subs	r3, #4
 800fa20:	edd3 7a00 	vldr	s15, [r3]
 800fa24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa28:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800fa2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa30:	3b04      	subs	r3, #4
 800fa32:	ed93 7a00 	vldr	s14, [r3]
 800fa36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa3a:	3b04      	subs	r3, #4
 800fa3c:	edd3 7a00 	vldr	s15, [r3]
 800fa40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa44:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800fa48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa4c:	ed93 7a00 	vldr	s14, [r3]
 800fa50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa54:	edd3 7a00 	vldr	s15, [r3]
 800fa58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa5c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800fa60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa64:	ed93 7a00 	vldr	s14, [r3]
 800fa68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa6c:	edd3 7a00 	vldr	s15, [r3]
 800fa70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa74:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800fa78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa7c:	ed93 7a00 	vldr	s14, [r3]
 800fa80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa84:	edd3 7a00 	vldr	s15, [r3]
 800fa88:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa8c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800fa90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa94:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800fa98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa9c:	ed93 7a00 	vldr	s14, [r3]
 800faa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800faa4:	edd3 7a00 	vldr	s15, [r3]
 800faa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800faac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fab0:	3b04      	subs	r3, #4
 800fab2:	edd3 7a00 	vldr	s15, [r3]
 800fab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800faba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fabe:	3b04      	subs	r3, #4
 800fac0:	edd3 7a00 	vldr	s15, [r3]
 800fac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fac8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800facc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fad0:	3b04      	subs	r3, #4
 800fad2:	edd3 7a00 	vldr	s15, [r3]
 800fad6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800fada:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fae2:	3b04      	subs	r3, #4
 800fae4:	edd3 7a00 	vldr	s15, [r3]
 800fae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800faec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800faf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800faf4:	edd3 7a00 	vldr	s15, [r3]
 800faf8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fafc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb04:	edd3 7a00 	vldr	s15, [r3]
 800fb08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb0c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800fb10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb14:	ed93 7a00 	vldr	s14, [r3]
 800fb18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb1c:	edd3 7a00 	vldr	s15, [r3]
 800fb20:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb24:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800fb28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb2c:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800fb30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb34:	3b04      	subs	r3, #4
 800fb36:	ed93 7a00 	vldr	s14, [r3]
 800fb3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb3e:	3b04      	subs	r3, #4
 800fb40:	edd3 7a00 	vldr	s15, [r3]
 800fb44:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb48:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800fb4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb50:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800fb54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb58:	ed93 7a00 	vldr	s14, [r3]
 800fb5c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800fb60:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb68:	edd3 7a00 	vldr	s15, [r3]
 800fb6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb70:	1f1a      	subs	r2, r3, #4
 800fb72:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fb76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb7a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800fb7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb82:	3b04      	subs	r3, #4
 800fb84:	ed93 7a00 	vldr	s14, [r3]
 800fb88:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800fb8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb94:	3b04      	subs	r3, #4
 800fb96:	edd3 7a00 	vldr	s15, [r3]
 800fb9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb9e:	1f1a      	subs	r2, r3, #4
 800fba0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fba8:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800fbac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fbb0:	1d1a      	adds	r2, r3, #4
 800fbb2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800fbba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fbbe:	1d1a      	adds	r2, r3, #4
 800fbc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800fbc8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fbcc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fbd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbd4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800fbd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fbdc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fbe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbe4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800fbe8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fbec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fbf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbf4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800fbf8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fbfc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc04:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800fc08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc0c:	1d1a      	adds	r2, r3, #4
 800fc0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fc12:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fc16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fc1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc1e:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800fc22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc26:	1d1a      	adds	r2, r3, #4
 800fc28:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fc2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fc30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fc34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc38:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800fc3c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800fc40:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fc44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800fc4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fc50:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fc54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc58:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800fc5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fc60:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fc64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc68:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800fc6c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800fc70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fc74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800fc7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc80:	1f1a      	subs	r2, r3, #4
 800fc82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fc86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fc8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fc8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc92:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800fc96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc9a:	1f1a      	subs	r2, r3, #4
 800fc9c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fca0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fca4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcac:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800fcb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800fcb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800fcc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fcc8:	4413      	add	r3, r2
 800fcca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800fcce:	edd7 7a07 	vldr	s15, [r7, #28]
 800fcd2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fcd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcda:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800fcde:	edd7 7a08 	vldr	s15, [r7, #32]
 800fce2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800fcee:	edd7 7a08 	vldr	s15, [r7, #32]
 800fcf2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcfa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800fcfe:	edd7 7a07 	vldr	s15, [r7, #28]
 800fd02:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fd06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd0a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800fd0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd12:	1d1a      	adds	r2, r3, #4
 800fd14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fd18:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fd1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fd20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd24:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800fd28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd2c:	1d1a      	adds	r2, r3, #4
 800fd2e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fd32:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fd36:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fd3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd3e:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800fd42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800fd46:	eef1 7a67 	vneg.f32	s15, s15
 800fd4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fd4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 800fd56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800fd5a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fd5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd62:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 800fd66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800fd6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 800fd76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800fd7a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fd7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd82:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800fd86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fd8a:	1f1a      	subs	r2, r3, #4
 800fd8c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fd90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fd94:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fd98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd9c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800fda0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fda4:	1f1a      	subs	r2, r3, #4
 800fda6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fdaa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800fdae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800fdb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fdb6:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800fdba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800fdc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800fdca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fdd2:	4413      	add	r3, r2
 800fdd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800fdd8:	edd7 7a03 	vldr	s15, [r7, #12]
 800fddc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fde0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800fde8:	edd7 7a04 	vldr	s15, [r7, #16]
 800fdec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fdf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdf4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800fdf8:	edd7 7a04 	vldr	s15, [r7, #16]
 800fdfc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fe00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800fe08:	edd7 7a03 	vldr	s15, [r7, #12]
 800fe0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fe10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe14:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800fe18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fe1c:	1d1a      	adds	r2, r3, #4
 800fe1e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800fe22:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fe26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fe2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe2e:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800fe32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fe36:	1d1a      	adds	r2, r3, #4
 800fe38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800fe3c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fe40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fe44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe48:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800fe4c:	edd7 7a06 	vldr	s15, [r7, #24]
 800fe50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fe54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe58:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800fe5c:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fe64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe68:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800fe6c:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fe74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe78:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800fe7c:	edd7 7a06 	vldr	s15, [r7, #24]
 800fe80:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fe84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800fe8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe90:	1f1a      	subs	r2, r3, #4
 800fe92:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800fe96:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fe9a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fe9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fea2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800fea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800feaa:	1f1a      	subs	r2, r3, #4
 800feac:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800feb0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800feb4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800feb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800febc:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800fec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fec4:	3b01      	subs	r3, #1
 800fec6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800feca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fece:	2b00      	cmp	r3, #0
 800fed0:	f47f ace0 	bne.w	800f894 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	ed93 7a00 	vldr	s14, [r3]
 800feda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fede:	edd3 7a00 	vldr	s15, [r3]
 800fee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fee6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	ed93 7a00 	vldr	s14, [r3]
 800fef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fef4:	edd3 7a00 	vldr	s15, [r3]
 800fef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fefc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	3304      	adds	r3, #4
 800ff04:	ed93 7a00 	vldr	s14, [r3]
 800ff08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	edd3 7a00 	vldr	s15, [r3]
 800ff12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff16:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	3304      	adds	r3, #4
 800ff1e:	ed93 7a00 	vldr	s14, [r3]
 800ff22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff26:	3304      	adds	r3, #4
 800ff28:	edd3 7a00 	vldr	s15, [r3]
 800ff2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff30:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800ff34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff38:	3304      	adds	r3, #4
 800ff3a:	ed93 7a00 	vldr	s14, [r3]
 800ff3e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ff42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff4a:	3304      	adds	r3, #4
 800ff4c:	edd3 7a00 	vldr	s15, [r3]
 800ff50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff54:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800ff58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff5c:	edd3 7a00 	vldr	s15, [r3]
 800ff60:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ff64:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff6c:	edd3 7a00 	vldr	s15, [r3]
 800ff70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800ff78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff7c:	edd3 7a00 	vldr	s15, [r3]
 800ff80:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800ff84:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff8c:	edd3 7a00 	vldr	s15, [r3]
 800ff90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff94:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800ff98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff9c:	3304      	adds	r3, #4
 800ff9e:	edd3 7a00 	vldr	s15, [r3]
 800ffa2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ffa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ffaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffae:	3304      	adds	r3, #4
 800ffb0:	edd3 7a00 	vldr	s15, [r3]
 800ffb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffb8:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800ffbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	edd3 7a00 	vldr	s15, [r3]
 800ffc6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ffca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ffce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffd2:	3304      	adds	r3, #4
 800ffd4:	edd3 7a00 	vldr	s15, [r3]
 800ffd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffdc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800ffe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffe4:	ed93 7a00 	vldr	s14, [r3]
 800ffe8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ffec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fff4:	edd3 7a00 	vldr	s15, [r3]
 800fff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fffc:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8010000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010004:	ed93 7a00 	vldr	s14, [r3]
 8010008:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801000c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010014:	edd3 7a00 	vldr	s15, [r3]
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	1d1a      	adds	r2, r3, #4
 801001c:	603a      	str	r2, [r7, #0]
 801001e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010022:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8010026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801002a:	3304      	adds	r3, #4
 801002c:	ed93 7a00 	vldr	s14, [r3]
 8010030:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801003c:	3304      	adds	r3, #4
 801003e:	edd3 7a00 	vldr	s15, [r3]
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	1d1a      	adds	r2, r3, #4
 8010046:	603a      	str	r2, [r7, #0]
 8010048:	ee77 7a27 	vadd.f32	s15, s14, s15
 801004c:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8010050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8010058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8010060:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010064:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010068:	ee67 7a27 	vmul.f32	s15, s14, s15
 801006c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8010070:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010074:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010078:	ee67 7a27 	vmul.f32	s15, s14, s15
 801007c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8010080:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010084:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010088:	ee67 7a27 	vmul.f32	s15, s14, s15
 801008c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8010090:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010094:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010098:	ee67 7a27 	vmul.f32	s15, s14, s15
 801009c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80100a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100a4:	1d1a      	adds	r2, r3, #4
 80100a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80100aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80100ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80100b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100b6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80100ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100be:	1d1a      	adds	r2, r3, #4
 80100c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80100c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80100c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80100cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100d0:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 80100d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80100dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80100e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80100e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80100ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80100f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80100f8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80100fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010100:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8010104:	edd7 7a08 	vldr	s15, [r7, #32]
 8010108:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801010c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010110:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8010114:	edd7 7a07 	vldr	s15, [r7, #28]
 8010118:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801011c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010120:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8010124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010128:	1d1a      	adds	r2, r3, #4
 801012a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801012e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010132:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010136:	ee77 7a27 	vadd.f32	s15, s14, s15
 801013a:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 801013e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010142:	1d1a      	adds	r2, r3, #4
 8010144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010148:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801014c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010154:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8010158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8010160:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8010168:	edd7 7a03 	vldr	s15, [r7, #12]
 801016c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010174:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8010178:	edd7 7a04 	vldr	s15, [r7, #16]
 801017c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010184:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8010188:	edd7 7a04 	vldr	s15, [r7, #16]
 801018c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010194:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8010198:	edd7 7a03 	vldr	s15, [r7, #12]
 801019c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80101a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101a4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80101a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101ac:	1d1a      	adds	r2, r3, #4
 80101ae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80101b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80101b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80101ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101be:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80101c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101c6:	1d1a      	adds	r2, r3, #4
 80101c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80101cc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80101d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80101d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101d8:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80101dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101e0:	b299      	uxth	r1, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	2304      	movs	r3, #4
 80101e8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80101ea:	f000 f8d9 	bl	80103a0 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80101ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101f2:	b299      	uxth	r1, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	685a      	ldr	r2, [r3, #4]
 80101f8:	2304      	movs	r3, #4
 80101fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80101fc:	f000 f8d0 	bl	80103a0 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8010200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010204:	b299      	uxth	r1, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685a      	ldr	r2, [r3, #4]
 801020a:	2304      	movs	r3, #4
 801020c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801020e:	f000 f8c7 	bl	80103a0 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8010212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010216:	b299      	uxth	r1, r3
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	685a      	ldr	r2, [r3, #4]
 801021c:	2304      	movs	r3, #4
 801021e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010220:	f000 f8be 	bl	80103a0 <arm_radix8_butterfly_f32>
}
 8010224:	bf00      	nop
 8010226:	37b0      	adds	r7, #176	; 0xb0
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b088      	sub	sp, #32
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	4611      	mov	r1, r2
 8010238:	461a      	mov	r2, r3
 801023a:	460b      	mov	r3, r1
 801023c:	71fb      	strb	r3, [r7, #7]
 801023e:	4613      	mov	r3, r2
 8010240:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	881b      	ldrh	r3, [r3, #0]
 8010246:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8010248:	79fb      	ldrb	r3, [r7, #7]
 801024a:	2b01      	cmp	r3, #1
 801024c:	d117      	bne.n	801027e <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	3304      	adds	r3, #4
 8010252:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8010254:	2300      	movs	r3, #0
 8010256:	61fb      	str	r3, [r7, #28]
 8010258:	e00d      	b.n	8010276 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	edd3 7a00 	vldr	s15, [r3]
 8010260:	eef1 7a67 	vneg.f32	s15, s15
 8010264:	69bb      	ldr	r3, [r7, #24]
 8010266:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	3308      	adds	r3, #8
 801026e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	3301      	adds	r3, #1
 8010274:	61fb      	str	r3, [r7, #28]
 8010276:	69fa      	ldr	r2, [r7, #28]
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	429a      	cmp	r2, r3
 801027c:	d3ed      	bcc.n	801025a <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010284:	d040      	beq.n	8010308 <arm_cfft_f32+0xdc>
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801028c:	d845      	bhi.n	801031a <arm_cfft_f32+0xee>
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010294:	d033      	beq.n	80102fe <arm_cfft_f32+0xd2>
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801029c:	d83d      	bhi.n	801031a <arm_cfft_f32+0xee>
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102a4:	d026      	beq.n	80102f4 <arm_cfft_f32+0xc8>
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102ac:	d835      	bhi.n	801031a <arm_cfft_f32+0xee>
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102b4:	d028      	beq.n	8010308 <arm_cfft_f32+0xdc>
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102bc:	d82d      	bhi.n	801031a <arm_cfft_f32+0xee>
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102c4:	d01b      	beq.n	80102fe <arm_cfft_f32+0xd2>
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102cc:	d825      	bhi.n	801031a <arm_cfft_f32+0xee>
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	2b80      	cmp	r3, #128	; 0x80
 80102d2:	d00f      	beq.n	80102f4 <arm_cfft_f32+0xc8>
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	2b80      	cmp	r3, #128	; 0x80
 80102d8:	d81f      	bhi.n	801031a <arm_cfft_f32+0xee>
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	2b40      	cmp	r3, #64	; 0x40
 80102de:	d013      	beq.n	8010308 <arm_cfft_f32+0xdc>
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	2b40      	cmp	r3, #64	; 0x40
 80102e4:	d819      	bhi.n	801031a <arm_cfft_f32+0xee>
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	2b10      	cmp	r3, #16
 80102ea:	d003      	beq.n	80102f4 <arm_cfft_f32+0xc8>
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	2b20      	cmp	r3, #32
 80102f0:	d005      	beq.n	80102fe <arm_cfft_f32+0xd2>
 80102f2:	e012      	b.n	801031a <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80102f4:	68b9      	ldr	r1, [r7, #8]
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f7fe ff79 	bl	800f1ee <arm_cfft_radix8by2_f32>
    break;
 80102fc:	e00d      	b.n	801031a <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80102fe:	68b9      	ldr	r1, [r7, #8]
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f7ff f968 	bl	800f5d6 <arm_cfft_radix8by4_f32>
    break;
 8010306:	e008      	b.n	801031a <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	b299      	uxth	r1, r3
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	2301      	movs	r3, #1
 8010312:	68b8      	ldr	r0, [r7, #8]
 8010314:	f000 f844 	bl	80103a0 <arm_radix8_butterfly_f32>
    break;
 8010318:	bf00      	nop
  }

  if ( bitReverseFlag )
 801031a:	79bb      	ldrb	r3, [r7, #6]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d007      	beq.n	8010330 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	8999      	ldrh	r1, [r3, #12]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	461a      	mov	r2, r3
 801032a:	68b8      	ldr	r0, [r7, #8]
 801032c:	f7fe ff06 	bl	800f13c <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8010330:	79fb      	ldrb	r3, [r7, #7]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d130      	bne.n	8010398 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	ee07 3a90 	vmov	s15, r3
 801033c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010340:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010348:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8010350:	2300      	movs	r3, #0
 8010352:	61fb      	str	r3, [r7, #28]
 8010354:	e01c      	b.n	8010390 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	1d1a      	adds	r2, r3, #4
 801035a:	61ba      	str	r2, [r7, #24]
 801035c:	ed93 7a00 	vldr	s14, [r3]
 8010360:	edd7 7a04 	vldr	s15, [r7, #16]
 8010364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010368:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 801036c:	69bb      	ldr	r3, [r7, #24]
 801036e:	edd3 7a00 	vldr	s15, [r3]
 8010372:	eeb1 7a67 	vneg.f32	s14, s15
 8010376:	edd7 7a04 	vldr	s15, [r7, #16]
 801037a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	3304      	adds	r3, #4
 8010388:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	3301      	adds	r3, #1
 801038e:	61fb      	str	r3, [r7, #28]
 8010390:	69fa      	ldr	r2, [r7, #28]
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	429a      	cmp	r2, r3
 8010396:	d3de      	bcc.n	8010356 <arm_cfft_f32+0x12a>
    }
  }
}
 8010398:	bf00      	nop
 801039a:	3720      	adds	r7, #32
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b0bd      	sub	sp, #244	; 0xf4
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	607a      	str	r2, [r7, #4]
 80103aa:	461a      	mov	r2, r3
 80103ac:	460b      	mov	r3, r1
 80103ae:	817b      	strh	r3, [r7, #10]
 80103b0:	4613      	mov	r3, r2
 80103b2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80103b4:	4b09      	ldr	r3, [pc, #36]	; (80103dc <arm_radix8_butterfly_f32+0x3c>)
 80103b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80103ba:	897b      	ldrh	r3, [r7, #10]
 80103bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80103c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80103c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103cc:	08db      	lsrs	r3, r3, #3
 80103ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80103d2:	2300      	movs	r3, #0
 80103d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80103d8:	e002      	b.n	80103e0 <arm_radix8_butterfly_f32+0x40>
 80103da:	bf00      	nop
 80103dc:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80103e0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80103e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103e8:	4413      	add	r3, r2
 80103ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80103ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80103f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103f6:	4413      	add	r3, r2
 80103f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80103fc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010404:	4413      	add	r3, r2
 8010406:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 801040a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801040e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010412:	4413      	add	r3, r2
 8010414:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8010418:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801041c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010420:	4413      	add	r3, r2
 8010422:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8010426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801042a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801042e:	4413      	add	r3, r2
 8010430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8010434:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801043c:	4413      	add	r3, r2
 801043e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8010442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	4413      	add	r3, r2
 801044c:	ed93 7a00 	vldr	s14, [r3]
 8010450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010454:	00db      	lsls	r3, r3, #3
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	4413      	add	r3, r2
 801045a:	edd3 7a00 	vldr	s15, [r3]
 801045e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010462:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8010466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801046a:	00db      	lsls	r3, r3, #3
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	4413      	add	r3, r2
 8010470:	ed93 7a00 	vldr	s14, [r3]
 8010474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010478:	00db      	lsls	r3, r3, #3
 801047a:	68fa      	ldr	r2, [r7, #12]
 801047c:	4413      	add	r3, r2
 801047e:	edd3 7a00 	vldr	s15, [r3]
 8010482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010486:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 801048a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801048e:	00db      	lsls	r3, r3, #3
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	4413      	add	r3, r2
 8010494:	ed93 7a00 	vldr	s14, [r3]
 8010498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801049c:	00db      	lsls	r3, r3, #3
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	4413      	add	r3, r2
 80104a2:	edd3 7a00 	vldr	s15, [r3]
 80104a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104aa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80104ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80104b2:	00db      	lsls	r3, r3, #3
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	4413      	add	r3, r2
 80104b8:	ed93 7a00 	vldr	s14, [r3]
 80104bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80104c0:	00db      	lsls	r3, r3, #3
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	4413      	add	r3, r2
 80104c6:	edd3 7a00 	vldr	s15, [r3]
 80104ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104ce:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80104d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	4413      	add	r3, r2
 80104dc:	ed93 7a00 	vldr	s14, [r3]
 80104e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80104e4:	00db      	lsls	r3, r3, #3
 80104e6:	68fa      	ldr	r2, [r7, #12]
 80104e8:	4413      	add	r3, r2
 80104ea:	edd3 7a00 	vldr	s15, [r3]
 80104ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104f2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80104f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80104fa:	00db      	lsls	r3, r3, #3
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	4413      	add	r3, r2
 8010500:	ed93 7a00 	vldr	s14, [r3]
 8010504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010508:	00db      	lsls	r3, r3, #3
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	4413      	add	r3, r2
 801050e:	edd3 7a00 	vldr	s15, [r3]
 8010512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010516:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 801051a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	4413      	add	r3, r2
 8010524:	ed93 7a00 	vldr	s14, [r3]
 8010528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801052c:	00db      	lsls	r3, r3, #3
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	4413      	add	r3, r2
 8010532:	edd3 7a00 	vldr	s15, [r3]
 8010536:	ee77 7a27 	vadd.f32	s15, s14, s15
 801053a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 801053e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010542:	00db      	lsls	r3, r3, #3
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	4413      	add	r3, r2
 8010548:	ed93 7a00 	vldr	s14, [r3]
 801054c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010550:	00db      	lsls	r3, r3, #3
 8010552:	68fa      	ldr	r2, [r7, #12]
 8010554:	4413      	add	r3, r2
 8010556:	edd3 7a00 	vldr	s15, [r3]
 801055a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801055e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8010562:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010566:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801056a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801056e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8010572:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010576:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801057a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801057e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8010582:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010586:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801058a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801058e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8010592:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010596:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801059a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801059e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80105a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80105a6:	00db      	lsls	r3, r3, #3
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	4413      	add	r3, r2
 80105ac:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80105b0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80105b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105b8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80105bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80105c0:	00db      	lsls	r3, r3, #3
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	4413      	add	r3, r2
 80105c6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80105ca:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80105ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105d2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80105d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80105da:	00db      	lsls	r3, r3, #3
 80105dc:	3304      	adds	r3, #4
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	4413      	add	r3, r2
 80105e2:	ed93 7a00 	vldr	s14, [r3]
 80105e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80105ea:	00db      	lsls	r3, r3, #3
 80105ec:	3304      	adds	r3, #4
 80105ee:	68fa      	ldr	r2, [r7, #12]
 80105f0:	4413      	add	r3, r2
 80105f2:	edd3 7a00 	vldr	s15, [r3]
 80105f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105fa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80105fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010602:	00db      	lsls	r3, r3, #3
 8010604:	3304      	adds	r3, #4
 8010606:	68fa      	ldr	r2, [r7, #12]
 8010608:	4413      	add	r3, r2
 801060a:	ed93 7a00 	vldr	s14, [r3]
 801060e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010612:	00db      	lsls	r3, r3, #3
 8010614:	3304      	adds	r3, #4
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	4413      	add	r3, r2
 801061a:	edd3 7a00 	vldr	s15, [r3]
 801061e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010622:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8010626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801062a:	00db      	lsls	r3, r3, #3
 801062c:	3304      	adds	r3, #4
 801062e:	68fa      	ldr	r2, [r7, #12]
 8010630:	4413      	add	r3, r2
 8010632:	ed93 7a00 	vldr	s14, [r3]
 8010636:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801063a:	00db      	lsls	r3, r3, #3
 801063c:	3304      	adds	r3, #4
 801063e:	68fa      	ldr	r2, [r7, #12]
 8010640:	4413      	add	r3, r2
 8010642:	edd3 7a00 	vldr	s15, [r3]
 8010646:	ee77 7a27 	vadd.f32	s15, s14, s15
 801064a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 801064e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010652:	00db      	lsls	r3, r3, #3
 8010654:	3304      	adds	r3, #4
 8010656:	68fa      	ldr	r2, [r7, #12]
 8010658:	4413      	add	r3, r2
 801065a:	ed93 7a00 	vldr	s14, [r3]
 801065e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010662:	00db      	lsls	r3, r3, #3
 8010664:	3304      	adds	r3, #4
 8010666:	68fa      	ldr	r2, [r7, #12]
 8010668:	4413      	add	r3, r2
 801066a:	edd3 7a00 	vldr	s15, [r3]
 801066e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010672:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8010676:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801067a:	00db      	lsls	r3, r3, #3
 801067c:	3304      	adds	r3, #4
 801067e:	68fa      	ldr	r2, [r7, #12]
 8010680:	4413      	add	r3, r2
 8010682:	ed93 7a00 	vldr	s14, [r3]
 8010686:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801068a:	00db      	lsls	r3, r3, #3
 801068c:	3304      	adds	r3, #4
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	4413      	add	r3, r2
 8010692:	edd3 7a00 	vldr	s15, [r3]
 8010696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801069a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 801069e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80106a2:	00db      	lsls	r3, r3, #3
 80106a4:	3304      	adds	r3, #4
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	4413      	add	r3, r2
 80106aa:	ed93 7a00 	vldr	s14, [r3]
 80106ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80106b2:	00db      	lsls	r3, r3, #3
 80106b4:	3304      	adds	r3, #4
 80106b6:	68fa      	ldr	r2, [r7, #12]
 80106b8:	4413      	add	r3, r2
 80106ba:	edd3 7a00 	vldr	s15, [r3]
 80106be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106c2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80106c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80106ca:	00db      	lsls	r3, r3, #3
 80106cc:	3304      	adds	r3, #4
 80106ce:	68fa      	ldr	r2, [r7, #12]
 80106d0:	4413      	add	r3, r2
 80106d2:	ed93 7a00 	vldr	s14, [r3]
 80106d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80106da:	00db      	lsls	r3, r3, #3
 80106dc:	3304      	adds	r3, #4
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	4413      	add	r3, r2
 80106e2:	edd3 7a00 	vldr	s15, [r3]
 80106e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106ea:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80106ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80106f2:	00db      	lsls	r3, r3, #3
 80106f4:	3304      	adds	r3, #4
 80106f6:	68fa      	ldr	r2, [r7, #12]
 80106f8:	4413      	add	r3, r2
 80106fa:	ed93 7a00 	vldr	s14, [r3]
 80106fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010702:	00db      	lsls	r3, r3, #3
 8010704:	3304      	adds	r3, #4
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	4413      	add	r3, r2
 801070a:	edd3 7a00 	vldr	s15, [r3]
 801070e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010712:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8010716:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801071a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801071e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010722:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8010726:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801072a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801072e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010732:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8010736:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801073a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801073e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010742:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8010746:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801074a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801074e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010752:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8010756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801075a:	00db      	lsls	r3, r3, #3
 801075c:	3304      	adds	r3, #4
 801075e:	68fa      	ldr	r2, [r7, #12]
 8010760:	4413      	add	r3, r2
 8010762:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010766:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801076a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801076e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8010772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	3304      	adds	r3, #4
 801077a:	68fa      	ldr	r2, [r7, #12]
 801077c:	4413      	add	r3, r2
 801077e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010782:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010786:	ee77 7a67 	vsub.f32	s15, s14, s15
 801078a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 801078e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010792:	00db      	lsls	r3, r3, #3
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	4413      	add	r3, r2
 8010798:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801079c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80107a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107a4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80107a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	4413      	add	r3, r2
 80107b2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80107b6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80107ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107be:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80107c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	3304      	adds	r3, #4
 80107ca:	68fa      	ldr	r2, [r7, #12]
 80107cc:	4413      	add	r3, r2
 80107ce:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80107d2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80107d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107da:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80107de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	3304      	adds	r3, #4
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	4413      	add	r3, r2
 80107ea:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80107ee:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80107f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107f6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80107fa:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80107fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8010802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010806:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801080a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801080e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8010812:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8010816:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801081a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801081e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8010822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010826:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 801082a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801082e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8010832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010836:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801083a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801083e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8010842:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8010846:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801084a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801084e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8010852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010856:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 801085a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801085e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8010862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010866:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 801086a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801086e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8010872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010876:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 801087a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801087e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8010882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010886:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 801088a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801088e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8010892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010896:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 801089a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801089e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80108a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108a6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80108aa:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80108ae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80108b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108b6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80108ba:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80108be:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80108c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108c6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80108ca:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80108ce:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80108d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108d6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80108da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80108de:	00db      	lsls	r3, r3, #3
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	4413      	add	r3, r2
 80108e4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80108e8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80108ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108f0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80108f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80108f8:	00db      	lsls	r3, r3, #3
 80108fa:	68fa      	ldr	r2, [r7, #12]
 80108fc:	4413      	add	r3, r2
 80108fe:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8010902:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8010906:	ee77 7a67 	vsub.f32	s15, s14, s15
 801090a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 801090e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010912:	00db      	lsls	r3, r3, #3
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	4413      	add	r3, r2
 8010918:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801091c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8010920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010924:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8010928:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801092c:	00db      	lsls	r3, r3, #3
 801092e:	68fa      	ldr	r2, [r7, #12]
 8010930:	4413      	add	r3, r2
 8010932:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010936:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801093a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801093e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8010942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	3304      	adds	r3, #4
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	4413      	add	r3, r2
 801094e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8010952:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8010956:	ee77 7a67 	vsub.f32	s15, s14, s15
 801095a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 801095e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010962:	00db      	lsls	r3, r3, #3
 8010964:	3304      	adds	r3, #4
 8010966:	68fa      	ldr	r2, [r7, #12]
 8010968:	4413      	add	r3, r2
 801096a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801096e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8010972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010976:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 801097a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	3304      	adds	r3, #4
 8010982:	68fa      	ldr	r2, [r7, #12]
 8010984:	4413      	add	r3, r2
 8010986:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801098a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801098e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010992:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8010996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801099a:	00db      	lsls	r3, r3, #3
 801099c:	3304      	adds	r3, #4
 801099e:	68fa      	ldr	r2, [r7, #12]
 80109a0:	4413      	add	r3, r2
 80109a2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80109a6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80109aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109ae:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 80109b2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80109b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80109ba:	4413      	add	r3, r2
 80109bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 80109c0:	897b      	ldrh	r3, [r7, #10]
 80109c2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80109c6:	429a      	cmp	r2, r3
 80109c8:	f4ff ad0a 	bcc.w	80103e0 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80109cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109d0:	2b07      	cmp	r3, #7
 80109d2:	f240 84e3 	bls.w	801139c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80109d6:	2300      	movs	r3, #0
 80109d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80109dc:	2301      	movs	r3, #1
 80109de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80109e2:	893b      	ldrh	r3, [r7, #8]
 80109e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80109e8:	4413      	add	r3, r2
 80109ea:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80109ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80109f2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80109f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109f8:	4413      	add	r3, r2
 80109fa:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80109fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80109fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010a00:	4413      	add	r3, r2
 8010a02:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8010a04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010a08:	4413      	add	r3, r2
 8010a0a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8010a0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010a10:	4413      	add	r3, r2
 8010a12:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8010a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010a18:	4413      	add	r3, r2
 8010a1a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8010a1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010a20:	4413      	add	r3, r2
 8010a22:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8010a24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010a28:	00db      	lsls	r3, r3, #3
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8010a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a34:	00db      	lsls	r3, r3, #3
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	4413      	add	r3, r2
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8010a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a40:	00db      	lsls	r3, r3, #3
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	4413      	add	r3, r2
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8010a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a4c:	00db      	lsls	r3, r3, #3
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	4413      	add	r3, r2
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8010a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a58:	00db      	lsls	r3, r3, #3
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8010a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a64:	00db      	lsls	r3, r3, #3
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	4413      	add	r3, r2
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8010a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a70:	00db      	lsls	r3, r3, #3
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	4413      	add	r3, r2
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8010a7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010a7e:	00db      	lsls	r3, r3, #3
 8010a80:	3304      	adds	r3, #4
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	4413      	add	r3, r2
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8010a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a8c:	00db      	lsls	r3, r3, #3
 8010a8e:	3304      	adds	r3, #4
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	4413      	add	r3, r2
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8010a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a9a:	00db      	lsls	r3, r3, #3
 8010a9c:	3304      	adds	r3, #4
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8010aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010aa8:	00db      	lsls	r3, r3, #3
 8010aaa:	3304      	adds	r3, #4
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	4413      	add	r3, r2
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8010ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ab6:	00db      	lsls	r3, r3, #3
 8010ab8:	3304      	adds	r3, #4
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	4413      	add	r3, r2
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8010ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ac4:	00db      	lsls	r3, r3, #3
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	4413      	add	r3, r2
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8010ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ad2:	00db      	lsls	r3, r3, #3
 8010ad4:	3304      	adds	r3, #4
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	4413      	add	r3, r2
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8010ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8010ae6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aee:	4413      	add	r3, r2
 8010af0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8010af4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8010af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010afc:	4413      	add	r3, r2
 8010afe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8010b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b0a:	4413      	add	r3, r2
 8010b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8010b10:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b18:	4413      	add	r3, r2
 8010b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8010b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b26:	4413      	add	r3, r2
 8010b28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8010b2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b34:	4413      	add	r3, r2
 8010b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8010b3a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b42:	4413      	add	r3, r2
 8010b44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8010b48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010b4c:	00db      	lsls	r3, r3, #3
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	4413      	add	r3, r2
 8010b52:	ed93 7a00 	vldr	s14, [r3]
 8010b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010b5a:	00db      	lsls	r3, r3, #3
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	4413      	add	r3, r2
 8010b60:	edd3 7a00 	vldr	s15, [r3]
 8010b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b68:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8010b6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010b70:	00db      	lsls	r3, r3, #3
 8010b72:	68fa      	ldr	r2, [r7, #12]
 8010b74:	4413      	add	r3, r2
 8010b76:	ed93 7a00 	vldr	s14, [r3]
 8010b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010b7e:	00db      	lsls	r3, r3, #3
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	4413      	add	r3, r2
 8010b84:	edd3 7a00 	vldr	s15, [r3]
 8010b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b8c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8010b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010b94:	00db      	lsls	r3, r3, #3
 8010b96:	68fa      	ldr	r2, [r7, #12]
 8010b98:	4413      	add	r3, r2
 8010b9a:	ed93 7a00 	vldr	s14, [r3]
 8010b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010ba2:	00db      	lsls	r3, r3, #3
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	4413      	add	r3, r2
 8010ba8:	edd3 7a00 	vldr	s15, [r3]
 8010bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bb0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8010bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010bb8:	00db      	lsls	r3, r3, #3
 8010bba:	68fa      	ldr	r2, [r7, #12]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	ed93 7a00 	vldr	s14, [r3]
 8010bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010bc6:	00db      	lsls	r3, r3, #3
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	4413      	add	r3, r2
 8010bcc:	edd3 7a00 	vldr	s15, [r3]
 8010bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bd4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8010bd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010bdc:	00db      	lsls	r3, r3, #3
 8010bde:	68fa      	ldr	r2, [r7, #12]
 8010be0:	4413      	add	r3, r2
 8010be2:	ed93 7a00 	vldr	s14, [r3]
 8010be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010bea:	00db      	lsls	r3, r3, #3
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	4413      	add	r3, r2
 8010bf0:	edd3 7a00 	vldr	s15, [r3]
 8010bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bf8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8010bfc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010c00:	00db      	lsls	r3, r3, #3
 8010c02:	68fa      	ldr	r2, [r7, #12]
 8010c04:	4413      	add	r3, r2
 8010c06:	ed93 7a00 	vldr	s14, [r3]
 8010c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010c0e:	00db      	lsls	r3, r3, #3
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	4413      	add	r3, r2
 8010c14:	edd3 7a00 	vldr	s15, [r3]
 8010c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c1c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8010c20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010c24:	00db      	lsls	r3, r3, #3
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	4413      	add	r3, r2
 8010c2a:	ed93 7a00 	vldr	s14, [r3]
 8010c2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010c32:	00db      	lsls	r3, r3, #3
 8010c34:	68fa      	ldr	r2, [r7, #12]
 8010c36:	4413      	add	r3, r2
 8010c38:	edd3 7a00 	vldr	s15, [r3]
 8010c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c40:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8010c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010c48:	00db      	lsls	r3, r3, #3
 8010c4a:	68fa      	ldr	r2, [r7, #12]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	ed93 7a00 	vldr	s14, [r3]
 8010c52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010c56:	00db      	lsls	r3, r3, #3
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	edd3 7a00 	vldr	s15, [r3]
 8010c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c64:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8010c68:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010c6c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c74:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8010c78:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010c7c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c84:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8010c88:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010c8c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c94:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8010c98:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010c9c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ca4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8010ca8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010cac:	00db      	lsls	r3, r3, #3
 8010cae:	68fa      	ldr	r2, [r7, #12]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010cb6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cbe:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8010cc2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010cc6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cce:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8010cd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010cd6:	00db      	lsls	r3, r3, #3
 8010cd8:	3304      	adds	r3, #4
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	4413      	add	r3, r2
 8010cde:	ed93 7a00 	vldr	s14, [r3]
 8010ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ce6:	00db      	lsls	r3, r3, #3
 8010ce8:	3304      	adds	r3, #4
 8010cea:	68fa      	ldr	r2, [r7, #12]
 8010cec:	4413      	add	r3, r2
 8010cee:	edd3 7a00 	vldr	s15, [r3]
 8010cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cf6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8010cfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010cfe:	00db      	lsls	r3, r3, #3
 8010d00:	3304      	adds	r3, #4
 8010d02:	68fa      	ldr	r2, [r7, #12]
 8010d04:	4413      	add	r3, r2
 8010d06:	ed93 7a00 	vldr	s14, [r3]
 8010d0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d0e:	00db      	lsls	r3, r3, #3
 8010d10:	3304      	adds	r3, #4
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	4413      	add	r3, r2
 8010d16:	edd3 7a00 	vldr	s15, [r3]
 8010d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d1e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8010d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d26:	00db      	lsls	r3, r3, #3
 8010d28:	3304      	adds	r3, #4
 8010d2a:	68fa      	ldr	r2, [r7, #12]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	ed93 7a00 	vldr	s14, [r3]
 8010d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010d36:	00db      	lsls	r3, r3, #3
 8010d38:	3304      	adds	r3, #4
 8010d3a:	68fa      	ldr	r2, [r7, #12]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	edd3 7a00 	vldr	s15, [r3]
 8010d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8010d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d4e:	00db      	lsls	r3, r3, #3
 8010d50:	3304      	adds	r3, #4
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	4413      	add	r3, r2
 8010d56:	ed93 7a00 	vldr	s14, [r3]
 8010d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010d5e:	00db      	lsls	r3, r3, #3
 8010d60:	3304      	adds	r3, #4
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	4413      	add	r3, r2
 8010d66:	edd3 7a00 	vldr	s15, [r3]
 8010d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d6e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8010d72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010d76:	00db      	lsls	r3, r3, #3
 8010d78:	3304      	adds	r3, #4
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	ed93 7a00 	vldr	s14, [r3]
 8010d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d86:	00db      	lsls	r3, r3, #3
 8010d88:	3304      	adds	r3, #4
 8010d8a:	68fa      	ldr	r2, [r7, #12]
 8010d8c:	4413      	add	r3, r2
 8010d8e:	edd3 7a00 	vldr	s15, [r3]
 8010d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d96:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8010d9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010d9e:	00db      	lsls	r3, r3, #3
 8010da0:	3304      	adds	r3, #4
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	4413      	add	r3, r2
 8010da6:	ed93 7a00 	vldr	s14, [r3]
 8010daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010dae:	00db      	lsls	r3, r3, #3
 8010db0:	3304      	adds	r3, #4
 8010db2:	68fa      	ldr	r2, [r7, #12]
 8010db4:	4413      	add	r3, r2
 8010db6:	edd3 7a00 	vldr	s15, [r3]
 8010dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dbe:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8010dc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010dc6:	00db      	lsls	r3, r3, #3
 8010dc8:	3304      	adds	r3, #4
 8010dca:	68fa      	ldr	r2, [r7, #12]
 8010dcc:	4413      	add	r3, r2
 8010dce:	ed93 7a00 	vldr	s14, [r3]
 8010dd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010dd6:	00db      	lsls	r3, r3, #3
 8010dd8:	3304      	adds	r3, #4
 8010dda:	68fa      	ldr	r2, [r7, #12]
 8010ddc:	4413      	add	r3, r2
 8010dde:	edd3 7a00 	vldr	s15, [r3]
 8010de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010de6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8010dea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010dee:	00db      	lsls	r3, r3, #3
 8010df0:	3304      	adds	r3, #4
 8010df2:	68fa      	ldr	r2, [r7, #12]
 8010df4:	4413      	add	r3, r2
 8010df6:	ed93 7a00 	vldr	s14, [r3]
 8010dfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010dfe:	00db      	lsls	r3, r3, #3
 8010e00:	3304      	adds	r3, #4
 8010e02:	68fa      	ldr	r2, [r7, #12]
 8010e04:	4413      	add	r3, r2
 8010e06:	edd3 7a00 	vldr	s15, [r3]
 8010e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e0e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8010e12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010e16:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e1e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8010e22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010e26:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e2e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8010e32:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010e36:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e3e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8010e42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010e46:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8010e52:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010e56:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e5e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8010e62:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010e66:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e6e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8010e72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	3304      	adds	r3, #4
 8010e7a:	68fa      	ldr	r2, [r7, #12]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010e82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e8a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8010e8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010e92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8010e9e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010ea2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010eaa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8010eae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010eb2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010eba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8010ebe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010ec2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eca:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8010ece:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010ed2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eda:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8010ede:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010ee2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eea:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8010eee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010ef2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010efa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8010efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f02:	00db      	lsls	r3, r3, #3
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	4413      	add	r3, r2
 8010f08:	ed97 7a07 	vldr	s14, [r7, #28]
 8010f0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f14:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8010f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f1c:	00db      	lsls	r3, r3, #3
 8010f1e:	3304      	adds	r3, #4
 8010f20:	68fa      	ldr	r2, [r7, #12]
 8010f22:	4413      	add	r3, r2
 8010f24:	ed97 7a05 	vldr	s14, [r7, #20]
 8010f28:	edd7 7a04 	vldr	s15, [r7, #16]
 8010f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f30:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8010f34:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010f38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8010f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f40:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8010f44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010f48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f50:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8010f54:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010f58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f60:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8010f64:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010f68:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8010f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f70:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8010f74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f78:	00db      	lsls	r3, r3, #3
 8010f7a:	68fa      	ldr	r2, [r7, #12]
 8010f7c:	4413      	add	r3, r2
 8010f7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8010f82:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f8a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8010f8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f92:	00db      	lsls	r3, r3, #3
 8010f94:	3304      	adds	r3, #4
 8010f96:	68fa      	ldr	r2, [r7, #12]
 8010f98:	4413      	add	r3, r2
 8010f9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8010f9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8010fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fa6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8010faa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010fae:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8010fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8010fba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010fbe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8010fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fc6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8010fca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010fce:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8010fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fd6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8010fda:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010fde:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8010fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fe6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8010fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010fee:	00db      	lsls	r3, r3, #3
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	ed97 7a07 	vldr	s14, [r7, #28]
 8010ff8:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011000:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8011004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011008:	00db      	lsls	r3, r3, #3
 801100a:	3304      	adds	r3, #4
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	4413      	add	r3, r2
 8011010:	ed97 7a05 	vldr	s14, [r7, #20]
 8011014:	edd7 7a04 	vldr	s15, [r7, #16]
 8011018:	ee77 7a67 	vsub.f32	s15, s14, s15
 801101c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8011020:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011024:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011028:	ee77 7a67 	vsub.f32	s15, s14, s15
 801102c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011034:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8011038:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801103c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011044:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011048:	ee67 7a27 	vmul.f32	s15, s14, s15
 801104c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8011050:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011054:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011058:	ee77 7a67 	vsub.f32	s15, s14, s15
 801105c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011064:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8011068:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801106c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011074:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011078:	ee67 7a27 	vmul.f32	s15, s14, s15
 801107c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8011080:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011084:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011088:	ee77 7a67 	vsub.f32	s15, s14, s15
 801108c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8011090:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011094:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011098:	ee77 7a27 	vadd.f32	s15, s14, s15
 801109c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80110a0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80110a4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80110a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110ac:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80110b0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80110b4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80110b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110bc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80110c0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80110c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80110c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110cc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80110d0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80110d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80110d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110dc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80110e0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80110e4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80110e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110ec:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80110f0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80110f4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80110f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110fc:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8011100:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011104:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011108:	ee77 7a27 	vadd.f32	s15, s14, s15
 801110c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8011110:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011114:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011118:	ee77 7a67 	vsub.f32	s15, s14, s15
 801111c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8011120:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011124:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011128:	ee77 7a27 	vadd.f32	s15, s14, s15
 801112c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8011130:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011134:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011138:	ee77 7a67 	vsub.f32	s15, s14, s15
 801113c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8011140:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011144:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011148:	ee77 7a67 	vsub.f32	s15, s14, s15
 801114c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8011150:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011154:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011158:	ee77 7a27 	vadd.f32	s15, s14, s15
 801115c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8011160:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011164:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011168:	ee77 7a67 	vsub.f32	s15, s14, s15
 801116c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8011170:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011174:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011178:	ee77 7a27 	vadd.f32	s15, s14, s15
 801117c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8011180:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8011184:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011188:	ee67 7a27 	vmul.f32	s15, s14, s15
 801118c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8011190:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011194:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011198:	ee67 7a27 	vmul.f32	s15, s14, s15
 801119c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80111a0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80111a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80111a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ac:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80111b0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80111b4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80111b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111bc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80111c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80111c4:	00db      	lsls	r3, r3, #3
 80111c6:	68fa      	ldr	r2, [r7, #12]
 80111c8:	4413      	add	r3, r2
 80111ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80111ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80111d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111d6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80111da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80111de:	00db      	lsls	r3, r3, #3
 80111e0:	3304      	adds	r3, #4
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	4413      	add	r3, r2
 80111e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80111ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80111ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111f2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80111f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80111fa:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80111fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011202:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8011206:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801120a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 801120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011212:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8011216:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801121a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 801121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011222:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8011226:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801122a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 801122e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011232:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8011236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	68fa      	ldr	r2, [r7, #12]
 801123e:	4413      	add	r3, r2
 8011240:	ed97 7a07 	vldr	s14, [r7, #28]
 8011244:	edd7 7a06 	vldr	s15, [r7, #24]
 8011248:	ee77 7a27 	vadd.f32	s15, s14, s15
 801124c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8011250:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011254:	00db      	lsls	r3, r3, #3
 8011256:	3304      	adds	r3, #4
 8011258:	68fa      	ldr	r2, [r7, #12]
 801125a:	4413      	add	r3, r2
 801125c:	ed97 7a05 	vldr	s14, [r7, #20]
 8011260:	edd7 7a04 	vldr	s15, [r7, #16]
 8011264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011268:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 801126c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011270:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011278:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 801127c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011280:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011288:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 801128c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011290:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011298:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 801129c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80112a0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80112a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112a8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80112ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80112b0:	00db      	lsls	r3, r3, #3
 80112b2:	68fa      	ldr	r2, [r7, #12]
 80112b4:	4413      	add	r3, r2
 80112b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80112ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80112be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112c2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80112c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80112ca:	00db      	lsls	r3, r3, #3
 80112cc:	3304      	adds	r3, #4
 80112ce:	68fa      	ldr	r2, [r7, #12]
 80112d0:	4413      	add	r3, r2
 80112d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80112d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80112da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112de:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80112e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80112e6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80112ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112ee:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80112f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80112f6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80112fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112fe:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8011302:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8011306:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801130e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8011312:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011316:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801131a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801131e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8011322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011326:	00db      	lsls	r3, r3, #3
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	4413      	add	r3, r2
 801132c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011330:	edd7 7a06 	vldr	s15, [r7, #24]
 8011334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011338:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 801133c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011340:	00db      	lsls	r3, r3, #3
 8011342:	3304      	adds	r3, #4
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	4413      	add	r3, r2
 8011348:	ed97 7a05 	vldr	s14, [r7, #20]
 801134c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011354:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8011358:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801135c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011360:	4413      	add	r3, r2
 8011362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8011366:	897b      	ldrh	r3, [r7, #10]
 8011368:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801136c:	429a      	cmp	r2, r3
 801136e:	f4ff abba 	bcc.w	8010ae6 <arm_radix8_butterfly_f32+0x746>

         j++;
 8011372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011376:	3301      	adds	r3, #1
 8011378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 801137c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011384:	429a      	cmp	r2, r3
 8011386:	f4ff ab2c 	bcc.w	80109e2 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 801138a:	893b      	ldrh	r3, [r7, #8]
 801138c:	00db      	lsls	r3, r3, #3
 801138e:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8011390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011394:	2b07      	cmp	r3, #7
 8011396:	f63f a813 	bhi.w	80103c0 <arm_radix8_butterfly_f32+0x20>
}
 801139a:	e000      	b.n	801139e <arm_radix8_butterfly_f32+0xffe>
         break;
 801139c:	bf00      	nop
}
 801139e:	bf00      	nop
 80113a0:	37f4      	adds	r7, #244	; 0xf4
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop

080113ac <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b095      	sub	sp, #84	; 0x54
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	695b      	ldr	r3, [r3, #20]
 80113bc:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	881b      	ldrh	r3, [r3, #0]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80113ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80113d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80113da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 80113e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 80113e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113e8:	1d1a      	adds	r2, r3, #4
 80113ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80113f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113f2:	1d1a      	adds	r2, r3, #4
 80113f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80113fa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80113fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8011402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011406:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 801140a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801140e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011416:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 801141a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801141e:	edd7 7a08 	vldr	s15, [r7, #32]
 8011422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	1d1a      	adds	r2, r3, #4
 801142a:	607a      	str	r2, [r7, #4]
 801142c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011434:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8011438:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801143c:	edd7 7a08 	vldr	s15, [r7, #32]
 8011440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	1d1a      	adds	r2, r3, #4
 8011448:	607a      	str	r2, [r7, #4]
 801144a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011452:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8011456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	68ba      	ldr	r2, [r7, #8]
 801145c:	4413      	add	r3, r2
 801145e:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8011460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011462:	3308      	adds	r3, #8
 8011464:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8011466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 801146c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8011472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8011478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 801147e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011480:	1d1a      	adds	r2, r3, #4
 8011482:	64ba      	str	r2, [r7, #72]	; 0x48
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8011488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801148a:	1d1a      	adds	r2, r3, #4
 801148c:	64ba      	str	r2, [r7, #72]	; 0x48
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8011492:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011496:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801149a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801149e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80114a2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80114a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80114aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114ae:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80114b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80114b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80114ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114be:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80114c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80114c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80114ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114ce:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80114d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80114d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80114da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114de:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80114e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80114e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80114ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114ee:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80114f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80114f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80114fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8011502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011506:	edd7 7a04 	vldr	s15, [r7, #16]
 801150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	1d1a      	adds	r2, r3, #4
 8011512:	607a      	str	r2, [r7, #4]
 8011514:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011518:	ee67 7a87 	vmul.f32	s15, s15, s14
 801151c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8011520:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8011524:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8011528:	ee37 7a67 	vsub.f32	s14, s14, s15
 801152c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011534:	edd7 7a05 	vldr	s15, [r7, #20]
 8011538:	ee77 7a67 	vsub.f32	s15, s14, s15
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	1d1a      	adds	r2, r3, #4
 8011540:	607a      	str	r2, [r7, #4]
 8011542:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011546:	ee67 7a87 	vmul.f32	s15, s15, s14
 801154a:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 801154e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011550:	3308      	adds	r3, #8
 8011552:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8011554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011556:	3b08      	subs	r3, #8
 8011558:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 801155a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801155c:	3b01      	subs	r3, #1
 801155e:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8011560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011562:	2b00      	cmp	r3, #0
 8011564:	f73f af7f 	bgt.w	8011466 <stage_rfft_f32+0xba>
}
 8011568:	bf00      	nop
 801156a:	bf00      	nop
 801156c:	3754      	adds	r7, #84	; 0x54
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr

08011576 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8011576:	b480      	push	{r7}
 8011578:	b095      	sub	sp, #84	; 0x54
 801157a:	af00      	add	r7, sp, #0
 801157c:	60f8      	str	r0, [r7, #12]
 801157e:	60b9      	str	r1, [r7, #8]
 8011580:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	695b      	ldr	r3, [r3, #20]
 8011586:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	3b01      	subs	r3, #1
 8011596:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8011598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 801159e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80115a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115a6:	3308      	adds	r3, #8
 80115a8:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80115aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80115ae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80115b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	1d1a      	adds	r2, r3, #4
 80115ba:	607a      	str	r2, [r7, #4]
 80115bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80115c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80115c4:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80115c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80115cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80115d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	1d1a      	adds	r2, r3, #4
 80115d8:	607a      	str	r2, [r7, #4]
 80115da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80115de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80115e2:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80115e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115e8:	00db      	lsls	r3, r3, #3
 80115ea:	68ba      	ldr	r2, [r7, #8]
 80115ec:	4413      	add	r3, r2
 80115ee:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80115f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115f2:	3308      	adds	r3, #8
 80115f4:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 80115f6:	e07c      	b.n	80116f2 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80115f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80115fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8011604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 801160a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8011610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011612:	1d1a      	adds	r2, r3, #4
 8011614:	64ba      	str	r2, [r7, #72]	; 0x48
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 801161a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801161c:	1d1a      	adds	r2, r3, #4
 801161e:	64ba      	str	r2, [r7, #72]	; 0x48
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8011624:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011628:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801162c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011630:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8011634:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011638:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011640:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8011644:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011648:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011650:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8011654:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011658:	edd7 7a08 	vldr	s15, [r7, #32]
 801165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011660:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8011664:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011668:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011670:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8011674:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011678:	edd7 7a08 	vldr	s15, [r7, #32]
 801167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011680:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8011684:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011688:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801168c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011690:	edd7 7a07 	vldr	s15, [r7, #28]
 8011694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011698:	edd7 7a06 	vldr	s15, [r7, #24]
 801169c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	1d1a      	adds	r2, r3, #4
 80116a4:	607a      	str	r2, [r7, #4]
 80116a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80116aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116ae:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80116b2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80116b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80116ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116be:	edd7 7a05 	vldr	s15, [r7, #20]
 80116c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80116ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	1d1a      	adds	r2, r3, #4
 80116d2:	607a      	str	r2, [r7, #4]
 80116d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80116d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116dc:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80116e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116e2:	3308      	adds	r3, #8
 80116e4:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80116e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116e8:	3b08      	subs	r3, #8
 80116ea:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80116ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ee:	3b01      	subs	r3, #1
 80116f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 80116f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f73f af7f 	bgt.w	80115f8 <merge_rfft_f32+0x82>
   }

}
 80116fa:	bf00      	nop
 80116fc:	bf00      	nop
 80116fe:	3754      	adds	r7, #84	; 0x54
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr

08011708 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b086      	sub	sp, #24
 801170c:	af00      	add	r7, sp, #0
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
 8011714:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 801171a:	78fb      	ldrb	r3, [r7, #3]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00b      	beq.n	8011738 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	68b9      	ldr	r1, [r7, #8]
 8011724:	68f8      	ldr	r0, [r7, #12]
 8011726:	f7ff ff26 	bl	8011576 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 801172a:	78fa      	ldrb	r2, [r7, #3]
 801172c:	2301      	movs	r3, #1
 801172e:	6879      	ldr	r1, [r7, #4]
 8011730:	6978      	ldr	r0, [r7, #20]
 8011732:	f7fe fd7b 	bl	801022c <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8011736:	e00a      	b.n	801174e <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8011738:	78fa      	ldrb	r2, [r7, #3]
 801173a:	2301      	movs	r3, #1
 801173c:	68b9      	ldr	r1, [r7, #8]
 801173e:	6978      	ldr	r0, [r7, #20]
 8011740:	f7fe fd74 	bl	801022c <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	68b9      	ldr	r1, [r7, #8]
 8011748:	68f8      	ldr	r0, [r7, #12]
 801174a:	f7ff fe2f 	bl	80113ac <stage_rfft_f32>
}
 801174e:	bf00      	nop
 8011750:	3718      	adds	r7, #24
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}

08011756 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 8011756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011758:	b093      	sub	sp, #76	; 0x4c
 801175a:	af0a      	add	r7, sp, #40	; 0x28
 801175c:	6178      	str	r0, [r7, #20]
 801175e:	6139      	str	r1, [r7, #16]
 8011760:	60fa      	str	r2, [r7, #12]
 8011762:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 801176a:	e033      	b.n	80117d4 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	607b      	str	r3, [r7, #4]
 8011772:	693a      	ldr	r2, [r7, #16]
 8011774:	6852      	ldr	r2, [r2, #4]
 8011776:	6939      	ldr	r1, [r7, #16]
 8011778:	6889      	ldr	r1, [r1, #8]
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	6800      	ldr	r0, [r0, #0]
 801177e:	68fc      	ldr	r4, [r7, #12]
 8011780:	6864      	ldr	r4, [r4, #4]
 8011782:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8011784:	682d      	ldr	r5, [r5, #0]
 8011786:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8011788:	68f6      	ldr	r6, [r6, #12]
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	603b      	str	r3, [r7, #0]
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	691b      	ldr	r3, [r3, #16]
 8011794:	9308      	str	r3, [sp, #32]
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	9307      	str	r3, [sp, #28]
 801179a:	9606      	str	r6, [sp, #24]
 801179c:	9505      	str	r5, [sp, #20]
 801179e:	9404      	str	r4, [sp, #16]
 80117a0:	9003      	str	r0, [sp, #12]
 80117a2:	9102      	str	r1, [sp, #8]
 80117a4:	9201      	str	r2, [sp, #4]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80117ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80117b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80117b2:	f000 f822 	bl	80117fa <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 80117b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	461a      	mov	r2, r3
 80117bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117be:	4413      	add	r3, r2
 80117c0:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 80117c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	461a      	mov	r2, r3
 80117c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ca:	4413      	add	r3, r2
 80117cc:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	3b01      	subs	r3, #1
 80117d2:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1c8      	bne.n	801176c <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 80117da:	2300      	movs	r3, #0
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3724      	adds	r7, #36	; 0x24
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117e4 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	370c      	adds	r7, #12
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr

080117fa <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 80117fa:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80117fe:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 8011802:	af00      	add	r7, sp, #0
 8011804:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 8011808:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 801180c:	6020      	str	r0, [r4, #0]
 801180e:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 8011812:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 8011816:	6001      	str	r1, [r0, #0]
 8011818:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801181c:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 8011820:	600a      	str	r2, [r1, #0]
 8011822:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8011826:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 801182a:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801182c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011830:	3b04      	subs	r3, #4
 8011832:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 8011836:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 801183a:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 801183e:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8011842:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8011846:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801184a:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 801184e:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 8011852:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 8011856:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 801185a:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 801185e:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8011862:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8011866:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 801186a:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 801186e:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 8011872:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8011876:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801187a:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 801187e:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8011882:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 8011886:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801188a:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 801188e:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8011892:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8011896:	2300      	movs	r3, #0
 8011898:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 801189c:	f001 bd13 	b.w	80132c6 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80118a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118a4:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 80118a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118ac:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 80118b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118b8:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 80118bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118c0:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 80118c8:	2300      	movs	r3, #0
 80118ca:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 80118d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118d8:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d01b      	beq.n	801191a <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 80118e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118e6:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80118ea:	6819      	ldr	r1, [r3, #0]
 80118ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80118f0:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 80118f4:	1d0b      	adds	r3, r1, #4
 80118f6:	6013      	str	r3, [r2, #0]
 80118f8:	680b      	ldr	r3, [r1, #0]
 80118fa:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 80118fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011902:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8011906:	6819      	ldr	r1, [r3, #0]
 8011908:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801190c:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 8011910:	1d0b      	adds	r3, r1, #4
 8011912:	6013      	str	r3, [r2, #0]
 8011914:	680b      	ldr	r3, [r1, #0]
 8011916:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 801191a:	2300      	movs	r3, #0
 801191c:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8011920:	f001 b9db 	b.w	8012cda <arm_nn_vec_mat_mult_t_s8+0x14e0>
 8011924:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011928:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 801192c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011930:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8011932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011936:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	461a      	mov	r2, r3
 8011942:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011946:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801194a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801194c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011950:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	1d1a      	adds	r2, r3, #4
 801195a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801195e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	601a      	str	r2, [r3, #0]

    return (val);
 8011966:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801196a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801196e:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8011970:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8011974:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011978:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801197c:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8011980:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011984:	6013      	str	r3, [r2, #0]
 8011986:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801198a:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801198e:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011990:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011994:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801199e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	fa22 f283 	sxtab16	r2, r2, r3
 80119a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119ac:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80119b0:	601a      	str	r2, [r3, #0]
  return(result);
 80119b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119b6:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80119c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119c4:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 80119c8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80119cc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80119ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119d2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	461a      	mov	r2, r3
 80119de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119e2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80119e6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80119e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119ec:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	1d1a      	adds	r2, r3, #4
 80119f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119fa:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	601a      	str	r2, [r3, #0]
    return (val);
 8011a02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a06:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011a0a:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8011a0c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8011a10:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8011a14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a18:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011a1c:	601a      	str	r2, [r3, #0]
 8011a1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a22:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8011a26:	2308      	movs	r3, #8
 8011a28:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011a2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a2e:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8011a32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a36:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f003 031f 	and.w	r3, r3, #31
 8011a40:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011a42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a46:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d105      	bne.n	8011a5c <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 8011a50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a54:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011a58:	6819      	ldr	r1, [r3, #0]
 8011a5a:	e00b      	b.n	8011a74 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011a5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a60:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8011a64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a68:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011a6c:	6812      	ldr	r2, [r2, #0]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	fa62 f103 	ror.w	r1, r2, r3
 8011a74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a78:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8011a7c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011a80:	6013      	str	r3, [r2, #0]
 8011a82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a86:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011a8a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011a8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a90:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8011a94:	681a      	ldr	r2, [r3, #0]
 8011a96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a9a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	fa22 f283 	sxtab16	r2, r2, r3
 8011aa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011aa8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011aac:	601a      	str	r2, [r3, #0]
  return(result);
 8011aae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ab2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8011abc:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8011ac0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ac4:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 8011ac8:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8011acc:	6013      	str	r3, [r2, #0]
 8011ace:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ad2:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011ad6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011ad8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011adc:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ae6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	fa22 f283 	sxtab16	r2, r2, r3
 8011af0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011af4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8011af8:	601a      	str	r2, [r3, #0]
  return(result);
 8011afa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011afe:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8011b08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b0c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8011b16:	441a      	add	r2, r3
 8011b18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b1c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8011b20:	601a      	str	r2, [r3, #0]
 8011b22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b26:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 8011b30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b34:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8011b38:	601a      	str	r2, [r3, #0]

    return (val);
 8011b3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b3e:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8011b48:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011b4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b50:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8011b54:	601a      	str	r2, [r3, #0]
 8011b56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b5a:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8011b5e:	2308      	movs	r3, #8
 8011b60:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011b62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b66:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8011b6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b6e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f003 031f 	and.w	r3, r3, #31
 8011b78:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011b7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b7e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d105      	bne.n	8011b94 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 8011b88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b8c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8011b90:	6819      	ldr	r1, [r3, #0]
 8011b92:	e00b      	b.n	8011bac <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011b94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b98:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8011b9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ba0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011ba4:	6812      	ldr	r2, [r2, #0]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	fa62 f103 	ror.w	r1, r2, r3
 8011bac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bb0:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8011bb4:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8011bb8:	6013      	str	r3, [r2, #0]
 8011bba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bbe:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011bc2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011bc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bc8:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bd2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	fa22 f283 	sxtab16	r2, r2, r3
 8011bdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011be0:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011be4:	601a      	str	r2, [r3, #0]
  return(result);
 8011be6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bea:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8011bf4:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8011bf8:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8011bfc:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8011c00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c04:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c0e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011c12:	6019      	str	r1, [r3, #0]
 8011c14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c18:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011c1c:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011c1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c22:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011c26:	6819      	ldr	r1, [r3, #0]
 8011c28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c2c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c36:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	fb21 3202 	smlad	r2, r1, r2, r3
 8011c40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c44:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011c48:	601a      	str	r2, [r3, #0]
  return(result);
 8011c4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c4e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8011c58:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8011c5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c60:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8011c64:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011c68:	6013      	str	r3, [r2, #0]
 8011c6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c6e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8011c72:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011c74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c78:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c82:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	fa22 f283 	sxtab16	r2, r2, r3
 8011c8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c90:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8011c94:	601a      	str	r2, [r3, #0]
  return(result);
 8011c96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c9a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8011ca4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011ca8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011cac:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8011cb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cb4:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8011cb8:	601a      	str	r2, [r3, #0]
 8011cba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cbe:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011cc2:	6019      	str	r1, [r3, #0]
 8011cc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cc8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011ccc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011cce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cd2:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8011cd6:	6819      	ldr	r1, [r3, #0]
 8011cd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cdc:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ce6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	fb21 3202 	smlad	r2, r1, r2, r3
 8011cf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cf4:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011cf8:	601a      	str	r2, [r3, #0]
  return(result);
 8011cfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cfe:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8011d08:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8011d0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d10:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8011d14:	601a      	str	r2, [r3, #0]
 8011d16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d1a:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8011d1e:	2308      	movs	r3, #8
 8011d20:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011d22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d26:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8011d2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d2e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	f003 031f 	and.w	r3, r3, #31
 8011d38:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011d3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d3e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d105      	bne.n	8011d54 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 8011d48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d4c:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8011d50:	6819      	ldr	r1, [r3, #0]
 8011d52:	e00b      	b.n	8011d6c <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011d54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d58:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8011d5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d60:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011d64:	6812      	ldr	r2, [r2, #0]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	fa62 f103 	ror.w	r1, r2, r3
 8011d6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d70:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8011d74:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011d78:	6013      	str	r3, [r2, #0]
 8011d7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d7e:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011d82:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011d84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d88:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d92:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	fa22 f283 	sxtab16	r2, r2, r3
 8011d9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011da0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011da4:	601a      	str	r2, [r3, #0]
  return(result);
 8011da6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011daa:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8011db4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011db8:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8011dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011dc0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8011dc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dc6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dd6:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8011dda:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011ddc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011de0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	1d1a      	adds	r2, r3, #4
 8011dea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dee:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	601a      	str	r2, [r3, #0]
    return (val);
 8011df6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dfa:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8011dfe:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8011e00:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8011e04:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8011e08:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8011e0c:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8011e10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e14:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011e18:	601a      	str	r2, [r3, #0]
 8011e1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e1e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011e22:	6019      	str	r1, [r3, #0]
 8011e24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e28:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011e2c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011e2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e32:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011e36:	6819      	ldr	r1, [r3, #0]
 8011e38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e3c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e46:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	fb21 3202 	smlad	r2, r1, r2, r3
 8011e50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e54:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011e58:	601a      	str	r2, [r3, #0]
  return(result);
 8011e5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e5e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8011e68:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011e6c:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8011e70:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8011e74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e78:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011e7c:	601a      	str	r2, [r3, #0]
 8011e7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e82:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8011e86:	6019      	str	r1, [r3, #0]
 8011e88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e8c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8011e90:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011e92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e96:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011e9a:	6819      	ldr	r1, [r3, #0]
 8011e9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ea0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011eaa:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	fb21 3202 	smlad	r2, r1, r2, r3
 8011eb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011eb8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011ebc:	601a      	str	r2, [r3, #0]
  return(result);
 8011ebe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ec2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8011ecc:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011ed0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ed4:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8011ed8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011edc:	6013      	str	r3, [r2, #0]
 8011ede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ee2:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011ee6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011ee8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011eec:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8011ef0:	681a      	ldr	r2, [r3, #0]
 8011ef2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ef6:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	fa22 f283 	sxtab16	r2, r2, r3
 8011f00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f04:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011f08:	601a      	str	r2, [r3, #0]
  return(result);
 8011f0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f0e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8011f18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f1c:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8011f20:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011f24:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8011f26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f2a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	461a      	mov	r2, r3
 8011f36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f3a:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8011f3e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011f40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f44:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	1d1a      	adds	r2, r3, #4
 8011f4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f52:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	601a      	str	r2, [r3, #0]
    return (val);
 8011f5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f5e:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8011f62:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8011f64:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8011f68:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8011f6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f70:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f7a:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8011f7e:	2308      	movs	r3, #8
 8011f80:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011f82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f86:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8011f8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f8e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	f003 031f 	and.w	r3, r3, #31
 8011f98:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011f9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f9e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d105      	bne.n	8011fb4 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 8011fa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fac:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011fb0:	6819      	ldr	r1, [r3, #0]
 8011fb2:	e00b      	b.n	8011fcc <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011fb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fb8:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8011fbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fc0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011fc4:	6812      	ldr	r2, [r2, #0]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	fa62 f103 	ror.w	r1, r2, r3
 8011fcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fd0:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8011fd4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011fd8:	6013      	str	r3, [r2, #0]
 8011fda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fde:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8011fe2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011fe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fe8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ff2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	fa22 f283 	sxtab16	r2, r2, r3
 8011ffc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012000:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012004:	601a      	str	r2, [r3, #0]
  return(result);
 8012006:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801200a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012014:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012018:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801201c:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8012020:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012024:	6013      	str	r3, [r2, #0]
 8012026:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801202a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801202e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012030:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012034:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8012038:	681a      	ldr	r2, [r3, #0]
 801203a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801203e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	fa22 f283 	sxtab16	r2, r2, r3
 8012048:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801204c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012050:	601a      	str	r2, [r3, #0]
  return(result);
 8012052:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012056:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012060:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012064:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801206e:	441a      	add	r2, r3
 8012070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012074:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012078:	601a      	str	r2, [r3, #0]
 801207a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801207e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012088:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801208c:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012090:	601a      	str	r2, [r3, #0]
    return (val);
 8012092:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012096:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 80120a0:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80120a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120a8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80120ac:	601a      	str	r2, [r3, #0]
 80120ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120b2:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 80120b6:	2308      	movs	r3, #8
 80120b8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80120ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120be:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 80120c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120c6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f003 031f 	and.w	r3, r3, #31
 80120d0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80120d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120d6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d105      	bne.n	80120ec <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 80120e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120e4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80120e8:	6819      	ldr	r1, [r3, #0]
 80120ea:	e00b      	b.n	8012104 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80120ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120f0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80120f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120f8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80120fc:	6812      	ldr	r2, [r2, #0]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	fa62 f103 	ror.w	r1, r2, r3
 8012104:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012108:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 801210c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012110:	6013      	str	r3, [r2, #0]
 8012112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012116:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801211a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801211c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012120:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8012124:	681a      	ldr	r2, [r3, #0]
 8012126:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801212a:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	fa22 f283 	sxtab16	r2, r2, r3
 8012134:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012138:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801213c:	601a      	str	r2, [r3, #0]
  return(result);
 801213e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012142:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801214c:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012150:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8012154:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801215c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8012160:	601a      	str	r2, [r3, #0]
 8012162:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012166:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801216a:	6019      	str	r1, [r3, #0]
 801216c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012170:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012174:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801217a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801217e:	6819      	ldr	r1, [r3, #0]
 8012180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012184:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801218e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	fb21 3202 	smlad	r2, r1, r2, r3
 8012198:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801219c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80121a0:	601a      	str	r2, [r3, #0]
  return(result);
 80121a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121a6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 80121b0:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80121b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121b8:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80121bc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80121c0:	6013      	str	r3, [r2, #0]
 80121c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121c6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80121ca:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80121cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121d0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121da:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	fa22 f283 	sxtab16	r2, r2, r3
 80121e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121e8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80121ec:	601a      	str	r2, [r3, #0]
  return(result);
 80121ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121f2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 80121fc:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012200:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012204:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012208:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801220c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012210:	601a      	str	r2, [r3, #0]
 8012212:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012216:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801221a:	6019      	str	r1, [r3, #0]
 801221c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012220:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012224:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012226:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801222a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801222e:	6819      	ldr	r1, [r3, #0]
 8012230:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012234:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801223e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	fb21 3202 	smlad	r2, r1, r2, r3
 8012248:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801224c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012250:	601a      	str	r2, [r3, #0]
  return(result);
 8012252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012256:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012260:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012264:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012268:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801226c:	601a      	str	r2, [r3, #0]
 801226e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012272:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8012276:	2308      	movs	r3, #8
 8012278:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801227a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801227e:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8012282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012286:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	f003 031f 	and.w	r3, r3, #31
 8012290:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012296:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d105      	bne.n	80122ac <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 80122a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80122a8:	6819      	ldr	r1, [r3, #0]
 80122aa:	e00b      	b.n	80122c4 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 80122ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122b0:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80122b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122b8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80122bc:	6812      	ldr	r2, [r2, #0]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	fa62 f103 	ror.w	r1, r2, r3
 80122c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122c8:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 80122cc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80122d0:	6013      	str	r3, [r2, #0]
 80122d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80122da:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80122dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122e0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80122e4:	681a      	ldr	r2, [r3, #0]
 80122e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	fa22 f283 	sxtab16	r2, r2, r3
 80122f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122f8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80122fc:	601a      	str	r2, [r3, #0]
  return(result);
 80122fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012302:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801230c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012310:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8012314:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012318:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801231a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801231e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	461a      	mov	r2, r3
 801232a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801232e:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8012332:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012334:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012338:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	1d1a      	adds	r2, r3, #4
 8012342:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012346:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	601a      	str	r2, [r3, #0]
    return (val);
 801234e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012352:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8012356:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012358:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 801235c:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012360:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8012364:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012368:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801236c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8012370:	601a      	str	r2, [r3, #0]
 8012372:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012376:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801237a:	6019      	str	r1, [r3, #0]
 801237c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012380:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8012384:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012386:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801238a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801238e:	6819      	ldr	r1, [r3, #0]
 8012390:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012394:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801239e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	fb21 3202 	smlad	r2, r1, r2, r3
 80123a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123ac:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80123b0:	601a      	str	r2, [r3, #0]
  return(result);
 80123b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123b6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 80123c0:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80123c4:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80123c8:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80123cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80123d4:	601a      	str	r2, [r3, #0]
 80123d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80123de:	6019      	str	r1, [r3, #0]
 80123e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80123e8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80123ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80123f2:	6819      	ldr	r1, [r3, #0]
 80123f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012402:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	fb21 3202 	smlad	r2, r1, r2, r3
 801240c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012410:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8012414:	601a      	str	r2, [r3, #0]
  return(result);
 8012416:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801241a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8012424:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012428:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801242c:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8012430:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012434:	6013      	str	r3, [r2, #0]
 8012436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801243a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801243e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012440:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012444:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8012448:	681a      	ldr	r2, [r3, #0]
 801244a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801244e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	fa22 f283 	sxtab16	r2, r2, r3
 8012458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801245c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8012460:	601a      	str	r2, [r3, #0]
  return(result);
 8012462:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012466:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012470:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012474:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8012478:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801247c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801247e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012482:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	461a      	mov	r2, r3
 801248e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012492:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8012496:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012498:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801249c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	1d1a      	adds	r2, r3, #4
 80124a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	601a      	str	r2, [r3, #0]
    return (val);
 80124b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124b6:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80124ba:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80124bc:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80124c0:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80124c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80124cc:	601a      	str	r2, [r3, #0]
 80124ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124d2:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 80124d6:	2308      	movs	r3, #8
 80124d8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80124da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124de:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 80124e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124e6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f003 031f 	and.w	r3, r3, #31
 80124f0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80124f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d105      	bne.n	801250c <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 8012500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012504:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8012508:	6819      	ldr	r1, [r3, #0]
 801250a:	e00b      	b.n	8012524 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801250c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012510:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8012514:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012518:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801251c:	6812      	ldr	r2, [r2, #0]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	fa62 f103 	ror.w	r1, r2, r3
 8012524:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012528:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 801252c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012530:	6013      	str	r3, [r2, #0]
 8012532:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012536:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801253a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801253c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012540:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801254a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	fa22 f283 	sxtab16	r2, r2, r3
 8012554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012558:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801255c:	601a      	str	r2, [r3, #0]
  return(result);
 801255e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012562:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801256c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012570:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012574:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8012578:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801257c:	6013      	str	r3, [r2, #0]
 801257e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012582:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012586:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012588:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801258c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012590:	681a      	ldr	r2, [r3, #0]
 8012592:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012596:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	fa22 f283 	sxtab16	r2, r2, r3
 80125a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80125a8:	601a      	str	r2, [r3, #0]
  return(result);
 80125aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 80125b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125bc:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80125c0:	681a      	ldr	r2, [r3, #0]
 80125c2:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 80125c6:	441a      	add	r2, r3
 80125c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125cc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125d6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80125e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125e4:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 80125e8:	601a      	str	r2, [r3, #0]
    return (val);
 80125ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125ee:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 80125f8:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80125fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012600:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801260a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801260e:	2308      	movs	r3, #8
 8012610:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012612:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012616:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801261a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801261e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f003 031f 	and.w	r3, r3, #31
 8012628:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801262a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801262e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d105      	bne.n	8012644 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 8012638:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801263c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012640:	6819      	ldr	r1, [r3, #0]
 8012642:	e00b      	b.n	801265c <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012644:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012648:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 801264c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012650:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8012654:	6812      	ldr	r2, [r2, #0]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	fa62 f103 	ror.w	r1, r2, r3
 801265c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012660:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8012664:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012668:	6013      	str	r3, [r2, #0]
 801266a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801266e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8012672:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012674:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012678:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012682:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	fa22 f283 	sxtab16	r2, r2, r3
 801268c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012690:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8012694:	601a      	str	r2, [r3, #0]
  return(result);
 8012696:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801269a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 80126a4:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80126a8:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 80126ac:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80126b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80126c2:	6019      	str	r1, [r3, #0]
 80126c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80126cc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80126ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80126d6:	6819      	ldr	r1, [r3, #0]
 80126d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	fb21 3202 	smlad	r2, r1, r2, r3
 80126f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80126f8:	601a      	str	r2, [r3, #0]
  return(result);
 80126fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8012708:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801270c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012710:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8012714:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012718:	6013      	str	r3, [r2, #0]
 801271a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801271e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012722:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012728:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012732:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	fa22 f283 	sxtab16	r2, r2, r3
 801273c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012740:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8012744:	601a      	str	r2, [r3, #0]
  return(result);
 8012746:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801274a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8012754:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012758:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801275c:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012764:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8012768:	601a      	str	r2, [r3, #0]
 801276a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801276e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8012772:	6019      	str	r1, [r3, #0]
 8012774:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012778:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801277c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801277e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012782:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8012786:	6819      	ldr	r1, [r3, #0]
 8012788:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801278c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012796:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	fb21 3202 	smlad	r2, r1, r2, r3
 80127a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80127a8:	601a      	str	r2, [r3, #0]
  return(result);
 80127aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 80127b8:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 80127bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127c0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80127c4:	601a      	str	r2, [r3, #0]
 80127c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ca:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80127ce:	2308      	movs	r3, #8
 80127d0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80127d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127d6:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80127da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127de:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	f003 031f 	and.w	r3, r3, #31
 80127e8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80127ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d105      	bne.n	8012804 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 80127f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127fc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8012800:	6819      	ldr	r1, [r3, #0]
 8012802:	e00b      	b.n	801281c <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012804:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012808:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 801280c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012810:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8012814:	6812      	ldr	r2, [r2, #0]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	fa62 f103 	ror.w	r1, r2, r3
 801281c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012820:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8012824:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012828:	6013      	str	r3, [r2, #0]
 801282a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801282e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8012832:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012834:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012838:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012842:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	fa22 f283 	sxtab16	r2, r2, r3
 801284c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012850:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012854:	601a      	str	r2, [r3, #0]
  return(result);
 8012856:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801285a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8012864:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012868:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 801286c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012870:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012872:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012876:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	461a      	mov	r2, r3
 8012882:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012886:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 801288a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801288c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012890:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	1d1a      	adds	r2, r3, #4
 801289a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801289e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	601a      	str	r2, [r3, #0]
    return (val);
 80128a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128aa:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 80128ae:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80128b0:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 80128b4:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80128b8:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80128bc:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80128c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128c4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80128c8:	601a      	str	r2, [r3, #0]
 80128ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80128d2:	6019      	str	r1, [r3, #0]
 80128d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80128dc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80128de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80128e6:	6819      	ldr	r1, [r3, #0]
 80128e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	fb21 3202 	smlad	r2, r1, r2, r3
 8012900:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012904:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012908:	601a      	str	r2, [r3, #0]
  return(result);
 801290a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801290e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8012918:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801291c:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012920:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012924:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012928:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801292c:	601a      	str	r2, [r3, #0]
 801292e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012936:	6019      	str	r1, [r3, #0]
 8012938:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801293c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8012940:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012942:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012946:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801294a:	6819      	ldr	r1, [r3, #0]
 801294c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012950:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801295a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	fb21 3202 	smlad	r2, r1, r2, r3
 8012964:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012968:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801296c:	601a      	str	r2, [r3, #0]
  return(result);
 801296e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012972:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801297c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012980:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012984:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8012988:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801298c:	6013      	str	r3, [r2, #0]
 801298e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012992:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012996:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012998:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801299c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	fa22 f283 	sxtab16	r2, r2, r3
 80129b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80129b8:	601a      	str	r2, [r3, #0]
  return(result);
 80129ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80129c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129cc:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80129d0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80129d4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80129d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	461a      	mov	r2, r3
 80129e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ea:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 80129ee:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80129f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	1d1a      	adds	r2, r3, #4
 80129fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	601a      	str	r2, [r3, #0]
    return (val);
 8012a0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a0e:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8012a12:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8012a14:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8012a18:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012a1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012a24:	601a      	str	r2, [r3, #0]
 8012a26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a2a:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8012a2e:	2308      	movs	r3, #8
 8012a30:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012a32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a36:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8012a3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	f003 031f 	and.w	r3, r3, #31
 8012a48:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012a4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d105      	bne.n	8012a64 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 8012a58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012a60:	6819      	ldr	r1, [r3, #0]
 8012a62:	e00b      	b.n	8012a7c <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012a64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a68:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8012a6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012a74:	6812      	ldr	r2, [r2, #0]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	fa62 f103 	ror.w	r1, r2, r3
 8012a7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a80:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8012a84:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012a88:	6013      	str	r3, [r2, #0]
 8012a8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a92:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012a94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a9c:	681a      	ldr	r2, [r3, #0]
 8012a9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	fa22 f283 	sxtab16	r2, r2, r3
 8012aac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ab0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012ab4:	601a      	str	r2, [r3, #0]
  return(result);
 8012ab6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012ac4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012ac8:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012acc:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 8012ad0:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ad4:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 8012ad8:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8012adc:	fa22 f283 	sxtab16	r2, r2, r3
 8012ae0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ae4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012ae8:	601a      	str	r2, [r3, #0]
  return(result);
 8012aea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012af8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012afc:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012b00:	681a      	ldr	r2, [r3, #0]
 8012b02:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012b06:	4413      	add	r3, r2
 8012b08:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8012b0c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012b14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b18:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8012b1c:	601a      	str	r2, [r3, #0]
    return (val);
 8012b1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b22:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8012b2c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 8012b30:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8012b34:	2308      	movs	r3, #8
 8012b36:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 8012b3a:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012b3e:	f003 031f 	and.w	r3, r3, #31
 8012b42:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 8012b46:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d102      	bne.n	8012b54 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 8012b4e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8012b52:	e004      	b.n	8012b5e <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012b54:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8012b58:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012b5c:	41da      	rors	r2, r3
 8012b5e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012b62:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8012b66:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b6a:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8012b6e:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8012b72:	fa22 f383 	sxtab16	r3, r2, r3
 8012b76:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 8012b7a:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8012b7e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012b82:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8012b86:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 8012b8a:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012b8e:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8012b92:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8012b96:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012b9a:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8012b9e:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8012ba2:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8012ba6:	fb21 3302 	smlad	r3, r1, r2, r3
 8012baa:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 8012bae:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8012bb2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8012bb6:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012bba:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012bbe:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012bc2:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012bc6:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012bca:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8012bce:	fa22 f383 	sxtab16	r3, r2, r3
 8012bd2:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 8012bd6:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8012bda:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8012bde:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012be2:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012be6:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012bea:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 8012bee:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012bf2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012bf6:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8012bfa:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8012bfe:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012c02:	fb21 3302 	smlad	r3, r1, r2, r3
 8012c06:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 8012c0a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012c0e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012c12:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8012c16:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8012c1a:	2308      	movs	r3, #8
 8012c1c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 8012c20:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012c24:	f003 031f 	and.w	r3, r3, #31
 8012c28:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 8012c2c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d102      	bne.n	8012c3a <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 8012c34:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8012c38:	e004      	b.n	8012c44 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012c3a:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8012c3e:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012c42:	41da      	rors	r2, r3
 8012c44:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012c48:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8012c4c:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c50:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 8012c54:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8012c58:	fa22 f383 	sxtab16	r3, r2, r3
 8012c5c:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 8012c60:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8012c64:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 8012c68:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8012c6c:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 8012c70:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012c74:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8012c78:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 8012c7c:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012c80:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8012c84:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 8012c88:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 8012c8c:	fb21 3302 	smlad	r3, r1, r2, r3
 8012c90:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 8012c94:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8012c98:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8012c9c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012ca0:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012ca4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012ca8:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8012cac:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 8012cb0:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012cb4:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8012cb8:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8012cbc:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8012cc0:	fb21 3302 	smlad	r3, r1, r2, r3
 8012cc4:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 8012cc8:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8012ccc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8012cd0:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012cd4:	3310      	adds	r3, #16
 8012cd6:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8012cda:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012cde:	f1a3 020f 	sub.w	r2, r3, #15
 8012ce2:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012ce6:	4293      	cmp	r3, r2
 8012ce8:	f6fe ae1c 	blt.w	8011924 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8012cec:	e05a      	b.n	8012da4 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8012cee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cf2:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8012d02:	4413      	add	r3, r2
 8012d04:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8012d08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d0c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012d16:	4413      	add	r3, r2
 8012d18:	f993 3000 	ldrsb.w	r3, [r3]
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8012d22:	4413      	add	r3, r2
 8012d24:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8012d28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d2c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f993 3000 	ldrsb.w	r3, [r3]
 8012d36:	461a      	mov	r2, r3
 8012d38:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8012d3c:	4413      	add	r3, r2
 8012d3e:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 8012d42:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8012d46:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8012d4a:	fb03 f202 	mul.w	r2, r3, r2
 8012d4e:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012d52:	4413      	add	r3, r2
 8012d54:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 8012d58:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8012d5c:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8012d60:	fb03 f202 	mul.w	r2, r3, r2
 8012d64:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012d68:	4413      	add	r3, r2
 8012d6a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 8012d6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d72:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	1c5a      	adds	r2, r3, #1
 8012d7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d7e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012d82:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8012d84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d88:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	1c5a      	adds	r2, r3, #1
 8012d90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d94:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012d98:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8012d9a:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012d9e:	3301      	adds	r3, #1
 8012da0:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8012da4:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 8012da8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012dac:	429a      	cmp	r2, r3
 8012dae:	db9e      	blt.n	8012cee <arm_nn_vec_mat_mult_t_s8+0x14f4>
 8012db0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012db4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8012db8:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012dbc:	6013      	str	r3, [r2, #0]
 8012dbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dc2:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8012dc6:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8012dca:	6013      	str	r3, [r2, #0]
 8012dcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dd0:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8012dd4:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8012dd8:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012dda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dde:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8012de8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dec:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	fa03 f202 	lsl.w	r2, r3, r2
 8012df6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dfa:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012dfe:	601a      	str	r2, [r3, #0]
 8012e00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e04:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8012e08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e0c:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012e14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e18:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8012e20:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012e24:	461a      	mov	r2, r3
 8012e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e2a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8012e2c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012e30:	461a      	mov	r2, r3
 8012e32:	2300      	movs	r3, #0
 8012e34:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8012e36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012e3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e42:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	17da      	asrs	r2, r3, #31
 8012e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8012e4c:	637a      	str	r2, [r7, #52]	; 0x34
 8012e4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e52:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	17da      	asrs	r2, r3, #31
 8012e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e62:	fb02 f203 	mul.w	r2, r2, r3
 8012e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e68:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8012e6a:	fb04 f303 	mul.w	r3, r4, r3
 8012e6e:	4413      	add	r3, r2
 8012e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e72:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8012e74:	fba2 5604 	umull	r5, r6, r2, r4
 8012e78:	4433      	add	r3, r6
 8012e7a:	461e      	mov	r6, r3
 8012e7c:	1943      	adds	r3, r0, r5
 8012e7e:	61bb      	str	r3, [r7, #24]
 8012e80:	eb41 0306 	adc.w	r3, r1, r6
 8012e84:	61fb      	str	r3, [r7, #28]
 8012e86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012e8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012e8e:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8012e92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9a:	f04f 0000 	mov.w	r0, #0
 8012e9e:	f04f 0100 	mov.w	r1, #0
 8012ea2:	0fd0      	lsrs	r0, r2, #31
 8012ea4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012ea8:	17d9      	asrs	r1, r3, #31
 8012eaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eae:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	6013      	str	r3, [r2, #0]
    return result;
 8012eb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eba:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8012ebe:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012ec0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ec4:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	dc06      	bgt.n	8012edc <arm_nn_vec_mat_mult_t_s8+0x16e2>
 8012ece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ed2:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	425a      	negs	r2, r3
 8012eda:	e000      	b.n	8012ede <arm_nn_vec_mat_mult_t_s8+0x16e4>
 8012edc:	2200      	movs	r2, #0
 8012ede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ee2:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8012ee6:	6019      	str	r1, [r3, #0]
 8012ee8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eec:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012ef0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012ef2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ef6:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8012efa:	2300      	movs	r3, #0
 8012efc:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012efe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f02:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012f06:	2201      	movs	r2, #1
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	fa02 f103 	lsl.w	r1, r2, r3
 8012f0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f12:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8012f16:	1e4b      	subs	r3, r1, #1
 8012f18:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012f1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f1e:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 8012f22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f26:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8012f2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f2e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8012f32:	6812      	ldr	r2, [r2, #0]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	4013      	ands	r3, r2
 8012f38:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012f3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f3e:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 8012f42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f46:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8012f4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f4e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012f52:	6812      	ldr	r2, [r2, #0]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	fa42 f303 	asr.w	r3, r2, r3
 8012f5a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8012f5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f60:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8012f64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f68:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	105b      	asrs	r3, r3, #1
 8012f70:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012f72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f76:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	da0a      	bge.n	8012f96 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 8012f80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f84:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8012f88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f8c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	3301      	adds	r3, #1
 8012f94:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012f96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f9a:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8012f9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fa2:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012fa6:	6812      	ldr	r2, [r2, #0]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	dd0a      	ble.n	8012fc4 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 8012fae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fb2:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8012fb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fba:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	6013      	str	r3, [r2, #0]
    return result;
 8012fc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fc8:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8012fcc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012fce:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8012fd0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 8012fd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fd8:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8012fdc:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012fe0:	6013      	str	r3, [r2, #0]
 8012fe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fe6:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012fea:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8012fee:	6013      	str	r3, [r2, #0]
 8012ff0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ff4:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8012ff8:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8012ffc:	6013      	str	r3, [r2, #0]
 8012ffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013002:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801300c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013010:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	fa03 f202 	lsl.w	r2, r3, r2
 801301a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801301e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8013022:	601a      	str	r2, [r3, #0]
 8013024:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013028:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 801302c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013030:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013038:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801303c:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8013040:	2300      	movs	r3, #0
 8013042:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013044:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013048:	461a      	mov	r2, r3
 801304a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801304e:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8013052:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013056:	461a      	mov	r2, r3
 8013058:	2300      	movs	r3, #0
 801305a:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801305e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013062:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013066:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801306a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	17da      	asrs	r2, r3, #31
 8013072:	643b      	str	r3, [r7, #64]	; 0x40
 8013074:	647a      	str	r2, [r7, #68]	; 0x44
 8013076:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801307a:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	17da      	asrs	r2, r3, #31
 8013082:	63bb      	str	r3, [r7, #56]	; 0x38
 8013084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801308a:	fb02 f203 	mul.w	r2, r2, r3
 801308e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013090:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8013092:	fb04 f303 	mul.w	r3, r4, r3
 8013096:	4413      	add	r3, r2
 8013098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801309a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 801309c:	fba2 ab04 	umull	sl, fp, r2, r4
 80130a0:	445b      	add	r3, fp
 80130a2:	469b      	mov	fp, r3
 80130a4:	eb10 030a 	adds.w	r3, r0, sl
 80130a8:	623b      	str	r3, [r7, #32]
 80130aa:	eb41 030b 	adc.w	r3, r1, fp
 80130ae:	627b      	str	r3, [r7, #36]	; 0x24
 80130b0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80130b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80130b8:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 80130bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80130c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80130c4:	f04f 0000 	mov.w	r0, #0
 80130c8:	f04f 0100 	mov.w	r1, #0
 80130cc:	0fd0      	lsrs	r0, r2, #31
 80130ce:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80130d2:	17d9      	asrs	r1, r3, #31
 80130d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130d8:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 80130dc:	4603      	mov	r3, r0
 80130de:	6013      	str	r3, [r2, #0]
    return result;
 80130e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130e4:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80130e8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80130ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130ee:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	dc06      	bgt.n	8013106 <arm_nn_vec_mat_mult_t_s8+0x190c>
 80130f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130fc:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	425a      	negs	r2, r3
 8013104:	e000      	b.n	8013108 <arm_nn_vec_mat_mult_t_s8+0x190e>
 8013106:	2200      	movs	r2, #0
 8013108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801310c:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8013110:	6019      	str	r1, [r3, #0]
 8013112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013116:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801311a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801311c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013120:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8013124:	2300      	movs	r3, #0
 8013126:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801312c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013130:	2201      	movs	r2, #1
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	fa02 f103 	lsl.w	r1, r2, r3
 8013138:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801313c:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 8013140:	1e4b      	subs	r3, r1, #1
 8013142:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013144:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013148:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 801314c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013150:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8013154:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013158:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801315c:	6812      	ldr	r2, [r2, #0]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	4013      	ands	r3, r2
 8013162:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013164:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013168:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 801316c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013170:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8013174:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013178:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801317c:	6812      	ldr	r2, [r2, #0]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	fa42 f303 	asr.w	r3, r2, r3
 8013184:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013186:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801318a:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801318e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013192:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	105b      	asrs	r3, r3, #1
 801319a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801319c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131a0:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	da0a      	bge.n	80131c0 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 80131aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131ae:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80131b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131b6:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	3301      	adds	r3, #1
 80131be:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80131c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131c4:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 80131c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131cc:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80131d0:	6812      	ldr	r2, [r2, #0]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	dd0a      	ble.n	80131ee <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 80131d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131dc:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80131e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131e4:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	3301      	adds	r3, #1
 80131ec:	6013      	str	r3, [r2, #0]
    return result;
 80131ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131f2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80131f6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80131f8:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 80131fa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 80131fe:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8013202:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8013206:	4413      	add	r3, r2
 8013208:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 801320c:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8013210:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8013214:	4413      	add	r3, r2
 8013216:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 801321a:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 801321e:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8013222:	4293      	cmp	r3, r2
 8013224:	bfb8      	it	lt
 8013226:	4613      	movlt	r3, r2
 8013228:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 801322c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8013230:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8013234:	4293      	cmp	r3, r2
 8013236:	bfa8      	it	ge
 8013238:	4613      	movge	r3, r2
 801323a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 801323e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8013242:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8013246:	4293      	cmp	r3, r2
 8013248:	bfb8      	it	lt
 801324a:	4613      	movlt	r3, r2
 801324c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 8013250:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8013254:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8013258:	4293      	cmp	r3, r2
 801325a:	bfa8      	it	ge
 801325c:	4613      	movge	r3, r2
 801325e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 8013262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013266:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801326a:	6819      	ldr	r1, [r3, #0]
 801326c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013270:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8013274:	1c4b      	adds	r3, r1, #1
 8013276:	6013      	str	r3, [r2, #0]
 8013278:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801327c:	b25b      	sxtb	r3, r3
 801327e:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 8013280:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013284:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8013288:	6819      	ldr	r1, [r3, #0]
 801328a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801328e:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8013292:	1c4b      	adds	r3, r1, #1
 8013294:	6013      	str	r3, [r2, #0]
 8013296:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 801329a:	b25b      	sxtb	r3, r3
 801329c:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 801329e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80132a2:	005b      	lsls	r3, r3, #1
 80132a4:	4619      	mov	r1, r3
 80132a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132aa:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 80132ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132b2:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	440b      	add	r3, r1
 80132ba:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80132bc:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80132c0:	3302      	adds	r3, #2
 80132c2:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80132c6:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80132ca:	1e5a      	subs	r2, r3, #1
 80132cc:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80132d0:	4293      	cmp	r3, r2
 80132d2:	f6fe aae5 	blt.w	80118a0 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 80132d6:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f001 806e 	beq.w	80143c0 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80132e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132e8:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80132ec:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80132f0:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 80132f4:	6812      	ldr	r2, [r2, #0]
 80132f6:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 80132f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132fc:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8013300:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013304:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 8013308:	6812      	ldr	r2, [r2, #0]
 801330a:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 801330c:	2300      	movs	r3, #0
 801330e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 8013312:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013316:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00d      	beq.n	801333c <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 8013320:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013324:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801332e:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 8013332:	1d19      	adds	r1, r3, #4
 8013334:	6011      	str	r1, [r2, #0]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 801333c:	2300      	movs	r3, #0
 801333e:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8013342:	f000 beb5 	b.w	80140b0 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 8013346:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801334a:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801334e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013352:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013358:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	461a      	mov	r2, r3
 8013364:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013368:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 801336c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801336e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013372:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	1d1a      	adds	r2, r3, #4
 801337c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013380:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	601a      	str	r2, [r3, #0]
    return (val);
 8013388:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801338c:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8013390:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013392:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8013396:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801339a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801339e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80133a2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80133a6:	6019      	str	r1, [r3, #0]
 80133a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133ac:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80133b0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80133b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133b6:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80133c0:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 80133c4:	6812      	ldr	r2, [r2, #0]
 80133c6:	fa23 f282 	sxtab16	r2, r3, r2
 80133ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133ce:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80133d2:	601a      	str	r2, [r3, #0]
  return(result);
 80133d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133d8:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 80133e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133e6:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80133ea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80133ee:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80133f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133f4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	461a      	mov	r2, r3
 8013400:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013404:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8013408:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801340a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801340e:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	1d1a      	adds	r2, r3, #4
 8013418:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801341c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	601a      	str	r2, [r3, #0]
    return (val);
 8013424:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013428:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801342c:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801342e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013432:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801343a:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801343e:	601a      	str	r2, [r3, #0]
 8013440:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013444:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8013448:	2208      	movs	r2, #8
 801344a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801344c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013450:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8013454:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013458:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 801345c:	6812      	ldr	r2, [r2, #0]
 801345e:	f002 021f 	and.w	r2, r2, #31
 8013462:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013464:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013468:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d105      	bne.n	801347e <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 8013472:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013476:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	e00b      	b.n	8013496 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801347e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013482:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 8013486:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801348a:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801348e:	6812      	ldr	r2, [r2, #0]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	fa62 f303 	ror.w	r3, r2, r3
 8013496:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801349a:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 801349e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80134a2:	6011      	str	r1, [r2, #0]
 80134a4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80134a8:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80134ac:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80134ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134b2:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80134bc:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80134c0:	6812      	ldr	r2, [r2, #0]
 80134c2:	fa23 f282 	sxtab16	r2, r3, r2
 80134c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134ca:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80134ce:	601a      	str	r2, [r3, #0]
  return(result);
 80134d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134d4:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 80134de:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80134e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134e6:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80134ea:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80134ee:	6019      	str	r1, [r3, #0]
 80134f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134f4:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80134f8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80134fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134fe:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013508:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 801350c:	6812      	ldr	r2, [r2, #0]
 801350e:	fa23 f282 	sxtab16	r2, r3, r2
 8013512:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013516:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801351a:	601a      	str	r2, [r3, #0]
  return(result);
 801351c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013520:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 801352a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801352e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013532:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8013536:	601a      	str	r2, [r3, #0]
 8013538:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801353c:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8013540:	2208      	movs	r2, #8
 8013542:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013544:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013548:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801354c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013550:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 8013554:	6812      	ldr	r2, [r2, #0]
 8013556:	f002 021f 	and.w	r2, r2, #31
 801355a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801355c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013560:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d105      	bne.n	8013576 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 801356a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801356e:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	e00b      	b.n	801358e <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013576:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801357a:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 801357e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013582:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8013586:	6812      	ldr	r2, [r2, #0]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	fa62 f303 	ror.w	r3, r2, r3
 801358e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013592:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 8013596:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801359a:	6011      	str	r1, [r2, #0]
 801359c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80135a0:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 80135a4:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135aa:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80135b4:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 80135b8:	6812      	ldr	r2, [r2, #0]
 80135ba:	fa23 f282 	sxtab16	r2, r3, r2
 80135be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135c2:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80135c6:	601a      	str	r2, [r3, #0]
  return(result);
 80135c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135cc:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80135d6:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80135da:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80135de:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80135e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135e6:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80135ea:	6018      	str	r0, [r3, #0]
 80135ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135f0:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 80135f4:	6019      	str	r1, [r3, #0]
 80135f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135fa:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80135fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013600:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013604:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801360e:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 8013612:	6812      	ldr	r2, [r2, #0]
 8013614:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013618:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 801361c:	6809      	ldr	r1, [r1, #0]
 801361e:	fb23 1202 	smlad	r2, r3, r2, r1
 8013622:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013626:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 801362a:	601a      	str	r2, [r3, #0]
  return(result);
 801362c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013630:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 801363a:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 801363e:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8013642:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013646:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801364a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 801364e:	6018      	str	r0, [r3, #0]
 8013650:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013654:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8013658:	6019      	str	r1, [r3, #0]
 801365a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801365e:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8013662:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013664:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013668:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013672:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 8013676:	6812      	ldr	r2, [r2, #0]
 8013678:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801367c:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 8013680:	6809      	ldr	r1, [r1, #0]
 8013682:	fb23 1202 	smlad	r2, r3, r2, r1
 8013686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801368a:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801368e:	601a      	str	r2, [r3, #0]
  return(result);
 8013690:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013694:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 801369e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136a2:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80136a6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80136aa:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80136ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136b0:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	461a      	mov	r2, r3
 80136bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136c0:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 80136c4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80136c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136ca:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	1d1a      	adds	r2, r3, #4
 80136d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136d8:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	601a      	str	r2, [r3, #0]
    return (val);
 80136e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136e4:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 80136e8:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80136ea:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 80136ee:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80136f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136f6:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80136fa:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80136fe:	6019      	str	r1, [r3, #0]
 8013700:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013704:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8013708:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801370a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801370e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013718:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 801371c:	6812      	ldr	r2, [r2, #0]
 801371e:	fa23 f282 	sxtab16	r2, r3, r2
 8013722:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013726:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801372a:	601a      	str	r2, [r3, #0]
  return(result);
 801372c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013730:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 801373a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801373e:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8013742:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013746:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013748:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801374c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	461a      	mov	r2, r3
 8013758:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801375c:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8013760:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013762:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013766:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	1d1a      	adds	r2, r3, #4
 8013770:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013774:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	601a      	str	r2, [r3, #0]
    return (val);
 801377c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013780:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8013784:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013786:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801378a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801378e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013792:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8013796:	601a      	str	r2, [r3, #0]
 8013798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801379c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80137a0:	2208      	movs	r2, #8
 80137a2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80137a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137a8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80137ac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80137b0:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 80137b4:	6812      	ldr	r2, [r2, #0]
 80137b6:	f002 021f 	and.w	r2, r2, #31
 80137ba:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80137bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137c0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d105      	bne.n	80137d6 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 80137ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137ce:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	e00b      	b.n	80137ee <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 80137d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137da:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 80137de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137e2:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80137e6:	6812      	ldr	r2, [r2, #0]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	fa62 f303 	ror.w	r3, r2, r3
 80137ee:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80137f2:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 80137f6:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80137fa:	6011      	str	r1, [r2, #0]
 80137fc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013800:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8013804:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013806:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801380a:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013814:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8013818:	6812      	ldr	r2, [r2, #0]
 801381a:	fa23 f282 	sxtab16	r2, r3, r2
 801381e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013822:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8013826:	601a      	str	r2, [r3, #0]
  return(result);
 8013828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801382c:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8013836:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801383a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801383e:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8013842:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013846:	6019      	str	r1, [r3, #0]
 8013848:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801384c:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8013850:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013852:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013856:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013860:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 8013864:	6812      	ldr	r2, [r2, #0]
 8013866:	fa23 f282 	sxtab16	r2, r3, r2
 801386a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801386e:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8013872:	601a      	str	r2, [r3, #0]
  return(result);
 8013874:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013878:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8013882:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013886:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801388a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801388e:	601a      	str	r2, [r3, #0]
 8013890:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013894:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8013898:	2208      	movs	r2, #8
 801389a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801389c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138a0:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80138a4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80138a8:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 80138ac:	6812      	ldr	r2, [r2, #0]
 80138ae:	f002 021f 	and.w	r2, r2, #31
 80138b2:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80138b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138b8:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d105      	bne.n	80138ce <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 80138c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138c6:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	e00b      	b.n	80138e6 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 80138ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138d2:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 80138d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138da:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80138de:	6812      	ldr	r2, [r2, #0]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	fa62 f303 	ror.w	r3, r2, r3
 80138e6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80138ea:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 80138ee:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80138f2:	6011      	str	r1, [r2, #0]
 80138f4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80138f8:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 80138fc:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80138fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013902:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801390c:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8013910:	6812      	ldr	r2, [r2, #0]
 8013912:	fa23 f282 	sxtab16	r2, r3, r2
 8013916:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801391a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 801391e:	601a      	str	r2, [r3, #0]
  return(result);
 8013920:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013924:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 801392e:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8013932:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8013936:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801393a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801393e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8013942:	6018      	str	r0, [r3, #0]
 8013944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013948:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 801394c:	6019      	str	r1, [r3, #0]
 801394e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013952:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8013956:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013958:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801395c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013966:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 801396a:	6812      	ldr	r2, [r2, #0]
 801396c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013970:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 8013974:	6809      	ldr	r1, [r1, #0]
 8013976:	fb23 1202 	smlad	r2, r3, r2, r1
 801397a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801397e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8013982:	601a      	str	r2, [r3, #0]
  return(result);
 8013984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013988:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8013992:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8013996:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 801399a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801399e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139a2:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80139a6:	6018      	str	r0, [r3, #0]
 80139a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139ac:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80139b0:	6019      	str	r1, [r3, #0]
 80139b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139b6:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80139ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80139bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139c0:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80139ca:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 80139ce:	6812      	ldr	r2, [r2, #0]
 80139d0:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80139d4:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 80139d8:	6809      	ldr	r1, [r1, #0]
 80139da:	fb23 1202 	smlad	r2, r3, r2, r1
 80139de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139e2:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80139e6:	601a      	str	r2, [r3, #0]
  return(result);
 80139e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139ec:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80139f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139fa:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80139fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013a02:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013a04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a08:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	461a      	mov	r2, r3
 8013a14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a18:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8013a1c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013a1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a22:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	1d1a      	adds	r2, r3, #4
 8013a2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a30:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	601a      	str	r2, [r3, #0]
    return (val);
 8013a38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a3c:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8013a40:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013a42:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8013a46:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013a4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a4e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8013a52:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013a56:	6019      	str	r1, [r3, #0]
 8013a58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a5c:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8013a60:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a66:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013a70:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 8013a74:	6812      	ldr	r2, [r2, #0]
 8013a76:	fa23 f282 	sxtab16	r2, r3, r2
 8013a7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a7e:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8013a82:	601a      	str	r2, [r3, #0]
  return(result);
 8013a84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a88:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8013a92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a96:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013a9a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013a9e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013aa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013aa4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	461a      	mov	r2, r3
 8013ab0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ab4:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8013ab8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013aba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013abe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	1d1a      	adds	r2, r3, #4
 8013ac8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013acc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	601a      	str	r2, [r3, #0]
    return (val);
 8013ad4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ad8:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8013adc:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013ade:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013ae2:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013ae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013aea:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8013aee:	601a      	str	r2, [r3, #0]
 8013af0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013af4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013af8:	2208      	movs	r2, #8
 8013afa:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013afc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b00:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013b04:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013b08:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8013b0c:	6812      	ldr	r2, [r2, #0]
 8013b0e:	f002 021f 	and.w	r2, r2, #31
 8013b12:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013b14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b18:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d105      	bne.n	8013b2e <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 8013b22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b26:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	e00b      	b.n	8013b46 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013b2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b32:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8013b36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b3a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013b3e:	6812      	ldr	r2, [r2, #0]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	fa62 f303 	ror.w	r3, r2, r3
 8013b46:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013b4a:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8013b4e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013b52:	6011      	str	r1, [r2, #0]
 8013b54:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013b58:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8013b5c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013b5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b62:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013b6c:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8013b70:	6812      	ldr	r2, [r2, #0]
 8013b72:	fa23 f282 	sxtab16	r2, r3, r2
 8013b76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b7a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8013b7e:	601a      	str	r2, [r3, #0]
  return(result);
 8013b80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b84:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8013b8e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013b92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b96:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8013b9a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013b9e:	6019      	str	r1, [r3, #0]
 8013ba0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ba4:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8013ba8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013baa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bae:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013bb8:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8013bbc:	6812      	ldr	r2, [r2, #0]
 8013bbe:	fa23 f282 	sxtab16	r2, r3, r2
 8013bc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bc6:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8013bca:	601a      	str	r2, [r3, #0]
  return(result);
 8013bcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bd0:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8013bda:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013bde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013be2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8013be6:	601a      	str	r2, [r3, #0]
 8013be8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bec:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013bf0:	2208      	movs	r2, #8
 8013bf2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013bf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bf8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013bfc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c00:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8013c04:	6812      	ldr	r2, [r2, #0]
 8013c06:	f002 021f 	and.w	r2, r2, #31
 8013c0a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013c0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c10:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d105      	bne.n	8013c26 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 8013c1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c1e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	e00b      	b.n	8013c3e <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013c26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c2a:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 8013c2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c32:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013c36:	6812      	ldr	r2, [r2, #0]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	fa62 f303 	ror.w	r3, r2, r3
 8013c3e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c42:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8013c46:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013c4a:	6011      	str	r1, [r2, #0]
 8013c4c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c50:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8013c54:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c5a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c64:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8013c68:	6812      	ldr	r2, [r2, #0]
 8013c6a:	fa23 f282 	sxtab16	r2, r3, r2
 8013c6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c72:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013c76:	601a      	str	r2, [r3, #0]
  return(result);
 8013c78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c7c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8013c86:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8013c8a:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8013c8e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013c92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c96:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013c9a:	6018      	str	r0, [r3, #0]
 8013c9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ca0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8013ca4:	6019      	str	r1, [r3, #0]
 8013ca6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013caa:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8013cae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013cb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cb4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013cbe:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8013cc2:	6812      	ldr	r2, [r2, #0]
 8013cc4:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013cc8:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8013ccc:	6809      	ldr	r1, [r1, #0]
 8013cce:	fb23 1202 	smlad	r2, r3, r2, r1
 8013cd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cd6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013cda:	601a      	str	r2, [r3, #0]
  return(result);
 8013cdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ce0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8013cea:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8013cee:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8013cf2:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013cf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cfa:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013cfe:	6018      	str	r0, [r3, #0]
 8013d00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d04:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8013d08:	6019      	str	r1, [r3, #0]
 8013d0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d0e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013d12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013d14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d18:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013d22:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8013d26:	6812      	ldr	r2, [r2, #0]
 8013d28:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013d2c:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8013d30:	6809      	ldr	r1, [r1, #0]
 8013d32:	fb23 1202 	smlad	r2, r3, r2, r1
 8013d36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d3a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8013d3e:	601a      	str	r2, [r3, #0]
  return(result);
 8013d40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d44:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8013d4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d52:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013d56:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013d5a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013d5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d60:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d70:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8013d74:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013d76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d7a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	1d1a      	adds	r2, r3, #4
 8013d84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d88:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	601a      	str	r2, [r3, #0]
    return (val);
 8013d90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d94:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8013d98:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013d9a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8013d9e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013da2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013da6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013daa:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013dae:	6019      	str	r1, [r3, #0]
 8013db0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013db4:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8013db8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013dba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dbe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013dc8:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8013dcc:	6812      	ldr	r2, [r2, #0]
 8013dce:	fa23 f282 	sxtab16	r2, r3, r2
 8013dd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dd6:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013dda:	601a      	str	r2, [r3, #0]
  return(result);
 8013ddc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013de0:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8013dea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dee:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013df2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013df6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013df8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dfc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	461a      	mov	r2, r3
 8013e08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e0c:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8013e10:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013e12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e16:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	1d1a      	adds	r2, r3, #4
 8013e20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e24:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	601a      	str	r2, [r3, #0]
    return (val);
 8013e2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e30:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8013e34:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013e36:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013e3a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013e3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e42:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8013e46:	601a      	str	r2, [r3, #0]
 8013e48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e4c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013e50:	2208      	movs	r2, #8
 8013e52:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013e54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e58:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013e5c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013e60:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8013e64:	6812      	ldr	r2, [r2, #0]
 8013e66:	f002 021f 	and.w	r2, r2, #31
 8013e6a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013e6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e70:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d105      	bne.n	8013e86 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8013e7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e7e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	e00b      	b.n	8013e9e <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013e86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e8a:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8013e8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e92:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013e96:	6812      	ldr	r2, [r2, #0]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	fa62 f303 	ror.w	r3, r2, r3
 8013e9e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013ea2:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8013ea6:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013eaa:	6011      	str	r1, [r2, #0]
 8013eac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013eb0:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8013eb4:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013eb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eba:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013ec4:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8013ec8:	6812      	ldr	r2, [r2, #0]
 8013eca:	fa23 f282 	sxtab16	r2, r3, r2
 8013ece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ed2:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8013ed6:	601a      	str	r2, [r3, #0]
  return(result);
 8013ed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013edc:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8013ee6:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013eea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eee:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8013ef2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013ef6:	6019      	str	r1, [r3, #0]
 8013ef8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013efc:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8013f00:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013f02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f06:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f10:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8013f14:	6812      	ldr	r2, [r2, #0]
 8013f16:	fa23 f282 	sxtab16	r2, r3, r2
 8013f1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f1e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013f22:	601a      	str	r2, [r3, #0]
  return(result);
 8013f24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f28:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8013f32:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013f36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f3a:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8013f3e:	601a      	str	r2, [r3, #0]
 8013f40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f44:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8013f48:	2208      	movs	r2, #8
 8013f4a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013f4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f50:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8013f54:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f58:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 8013f5c:	6812      	ldr	r2, [r2, #0]
 8013f5e:	f002 021f 	and.w	r2, r2, #31
 8013f62:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013f64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f68:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d105      	bne.n	8013f7e <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 8013f72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f76:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	e00b      	b.n	8013f96 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013f7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f82:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8013f86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f8a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8013f8e:	6812      	ldr	r2, [r2, #0]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	fa62 f303 	ror.w	r3, r2, r3
 8013f96:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f9a:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8013f9e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013fa2:	6011      	str	r1, [r2, #0]
 8013fa4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013fa8:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8013fac:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013fae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fb2:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013fbc:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8013fc0:	6812      	ldr	r2, [r2, #0]
 8013fc2:	fa23 f282 	sxtab16	r2, r3, r2
 8013fc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fca:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8013fce:	601a      	str	r2, [r3, #0]
  return(result);
 8013fd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fd4:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8013fde:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8013fe2:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8013fe6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013fea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fee:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8013ff2:	6018      	str	r0, [r3, #0]
 8013ff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ff8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013ffc:	6019      	str	r1, [r3, #0]
 8013ffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014002:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8014006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014008:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801400c:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014016:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 801401a:	6812      	ldr	r2, [r2, #0]
 801401c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014020:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 8014024:	6809      	ldr	r1, [r1, #0]
 8014026:	fb23 1202 	smlad	r2, r3, r2, r1
 801402a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801402e:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8014032:	601a      	str	r2, [r3, #0]
  return(result);
 8014034:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014038:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014042:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8014046:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 801404a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801404e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014052:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014056:	6018      	str	r0, [r3, #0]
 8014058:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801405c:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8014060:	6019      	str	r1, [r3, #0]
 8014062:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014066:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 801406a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801406c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014070:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801407a:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 801407e:	6812      	ldr	r2, [r2, #0]
 8014080:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014084:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 8014088:	6809      	ldr	r1, [r1, #0]
 801408a:	fb23 1202 	smlad	r2, r3, r2, r1
 801408e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014092:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014096:	601a      	str	r2, [r3, #0]
  return(result);
 8014098:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801409c:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80140a6:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 80140aa:	3310      	adds	r3, #16
 80140ac:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 80140b0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80140b4:	3b0f      	subs	r3, #15
 80140b6:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 80140ba:	429a      	cmp	r2, r3
 80140bc:	f6ff a943 	blt.w	8013346 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80140c0:	e03f      	b.n	8014142 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 80140c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140c6:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	f993 3000 	ldrsb.w	r3, [r3]
 80140d0:	461a      	mov	r2, r3
 80140d2:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80140d6:	4413      	add	r3, r2
 80140d8:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 80140dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140e0:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f993 3000 	ldrsb.w	r3, [r3]
 80140ea:	461a      	mov	r2, r3
 80140ec:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80140f0:	4413      	add	r3, r2
 80140f2:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 80140f6:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80140fa:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80140fe:	fb02 f303 	mul.w	r3, r2, r3
 8014102:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014106:	4413      	add	r3, r2
 8014108:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 801410c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014110:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	1c5a      	adds	r2, r3, #1
 8014118:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801411c:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014120:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8014122:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014126:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	1c5a      	adds	r2, r3, #1
 801412e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014132:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014136:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014138:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 801413c:	3301      	adds	r3, #1
 801413e:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8014142:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8014146:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801414a:	429a      	cmp	r2, r3
 801414c:	dbb9      	blt.n	80140c2 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 801414e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014152:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8014156:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801415a:	601a      	str	r2, [r3, #0]
 801415c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014160:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8014164:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8014168:	601a      	str	r2, [r3, #0]
 801416a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801416e:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014172:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 8014176:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014178:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801417c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014186:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801418a:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 801418e:	6812      	ldr	r2, [r2, #0]
 8014190:	409a      	lsls	r2, r3
 8014192:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014196:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801419a:	601a      	str	r2, [r3, #0]
 801419c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141a0:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80141a4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80141a8:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 80141ac:	6812      	ldr	r2, [r2, #0]
 80141ae:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80141b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141b4:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80141b8:	2200      	movs	r2, #0
 80141ba:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80141bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80141c0:	461a      	mov	r2, r3
 80141c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80141c6:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 80141ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80141ce:	461a      	mov	r2, r3
 80141d0:	2300      	movs	r3, #0
 80141d2:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80141d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80141da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80141de:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80141e2:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 80141e6:	6809      	ldr	r1, [r1, #0]
 80141e8:	17c8      	asrs	r0, r1, #31
 80141ea:	6139      	str	r1, [r7, #16]
 80141ec:	6178      	str	r0, [r7, #20]
 80141ee:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80141f2:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 80141f6:	6809      	ldr	r1, [r1, #0]
 80141f8:	17c8      	asrs	r0, r1, #31
 80141fa:	60b9      	str	r1, [r7, #8]
 80141fc:	60f8      	str	r0, [r7, #12]
 80141fe:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8014202:	4631      	mov	r1, r6
 8014204:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8014208:	4650      	mov	r0, sl
 801420a:	fb00 f001 	mul.w	r0, r0, r1
 801420e:	4659      	mov	r1, fp
 8014210:	462c      	mov	r4, r5
 8014212:	fb04 f101 	mul.w	r1, r4, r1
 8014216:	4401      	add	r1, r0
 8014218:	4628      	mov	r0, r5
 801421a:	4654      	mov	r4, sl
 801421c:	fba0 8904 	umull	r8, r9, r0, r4
 8014220:	4449      	add	r1, r9
 8014222:	4689      	mov	r9, r1
 8014224:	eb12 0108 	adds.w	r1, r2, r8
 8014228:	6039      	str	r1, [r7, #0]
 801422a:	eb43 0309 	adc.w	r3, r3, r9
 801422e:	607b      	str	r3, [r7, #4]
 8014230:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014234:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014238:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801423c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014240:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014244:	f04f 0200 	mov.w	r2, #0
 8014248:	f04f 0300 	mov.w	r3, #0
 801424c:	0fc2      	lsrs	r2, r0, #31
 801424e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8014252:	17cb      	asrs	r3, r1, #31
 8014254:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014258:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 801425c:	4613      	mov	r3, r2
 801425e:	600b      	str	r3, [r1, #0]
    return result;
 8014260:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014264:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8014268:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801426a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801426e:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	dc06      	bgt.n	8014286 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 8014278:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801427c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	425b      	negs	r3, r3
 8014284:	e000      	b.n	8014288 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 8014286:	2300      	movs	r3, #0
 8014288:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801428c:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 8014290:	6011      	str	r1, [r2, #0]
 8014292:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014296:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 801429a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801429c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142a0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80142a4:	2200      	movs	r2, #0
 80142a6:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80142a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142ac:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 80142b0:	2201      	movs	r2, #1
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	409a      	lsls	r2, r3
 80142b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142ba:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80142be:	3a01      	subs	r2, #1
 80142c0:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80142c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142c6:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80142ca:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142ce:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 80142d2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142d6:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 80142da:	6809      	ldr	r1, [r1, #0]
 80142dc:	6812      	ldr	r2, [r2, #0]
 80142de:	400a      	ands	r2, r1
 80142e0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80142e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142e6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80142ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142ee:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 80142f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142f6:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 80142fa:	6809      	ldr	r1, [r1, #0]
 80142fc:	6812      	ldr	r2, [r2, #0]
 80142fe:	fa41 f202 	asr.w	r2, r1, r2
 8014302:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8014304:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014308:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 801430c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014310:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 8014314:	6812      	ldr	r2, [r2, #0]
 8014316:	1052      	asrs	r2, r2, #1
 8014318:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801431a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801431e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	da0a      	bge.n	801433e <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 8014328:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801432c:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8014330:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014334:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 8014338:	6812      	ldr	r2, [r2, #0]
 801433a:	3201      	adds	r2, #1
 801433c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801433e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014342:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 8014346:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801434a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 801434e:	6812      	ldr	r2, [r2, #0]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	429a      	cmp	r2, r3
 8014354:	dd0a      	ble.n	801436c <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 8014356:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801435a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801435e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014362:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 8014366:	6812      	ldr	r2, [r2, #0]
 8014368:	3201      	adds	r2, #1
 801436a:	601a      	str	r2, [r3, #0]
    return result;
 801436c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014370:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014374:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014376:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8014378:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 801437c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014380:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8014384:	4413      	add	r3, r2
 8014386:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 801438a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801438e:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8014392:	4293      	cmp	r3, r2
 8014394:	bfb8      	it	lt
 8014396:	4613      	movlt	r3, r2
 8014398:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 801439c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80143a0:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80143a4:	4293      	cmp	r3, r2
 80143a6:	bfa8      	it	ge
 80143a8:	4613      	movge	r3, r2
 80143aa:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 80143ae:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 80143b2:	b25a      	sxtb	r2, r3
 80143b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143b8:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 80143c0:	2300      	movs	r3, #0
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 80143c8:	46bd      	mov	sp, r7
 80143ca:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80143ce:	4770      	bx	lr

080143d0 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 80143d0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80143d4:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 80143de:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 80143e2:	6020      	str	r0, [r4, #0]
 80143e4:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 80143e8:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 80143ec:	6001      	str	r1, [r0, #0]
 80143ee:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80143f2:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 80143f6:	600a      	str	r2, [r1, #0]
 80143f8:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 80143fc:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8014400:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 8014402:	2201      	movs	r2, #1
 8014404:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8014408:	fa02 f303 	lsl.w	r3, r2, r3
 801440c:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 8014410:	2300      	movs	r3, #0
 8014412:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8014416:	2300      	movs	r3, #0
 8014418:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 801441c:	f004 b863 	b.w	80184e6 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8014420:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014424:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 8014430:	2301      	movs	r3, #1
 8014432:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8014436:	e015      	b.n	8014464 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 8014438:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801443c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014440:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4413      	add	r3, r2
 8014448:	f993 2000 	ldrsb.w	r2, [r3]
 801444c:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8014450:	4293      	cmp	r3, r2
 8014452:	bfb8      	it	lt
 8014454:	4613      	movlt	r3, r2
 8014456:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 801445a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801445e:	3301      	adds	r3, #1
 8014460:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8014464:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014468:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801446c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	429a      	cmp	r2, r3
 8014474:	dbe0      	blt.n	8014438 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 8014476:	2300      	movs	r3, #0
 8014478:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 801447c:	2300      	movs	r3, #0
 801447e:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 8014482:	2300      	movs	r3, #0
 8014484:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8014488:	f001 ba24 	b.w	80158d4 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 801448c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8014490:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014494:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	4413      	add	r3, r2
 801449c:	f993 3000 	ldrsb.w	r3, [r3]
 80144a0:	461a      	mov	r2, r3
 80144a2:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80144a6:	1ad3      	subs	r3, r2, r3
 80144a8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 80144ac:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80144b0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80144b4:	429a      	cmp	r2, r3
 80144b6:	f2c1 8208 	blt.w	80158ca <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 80144ba:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80144be:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80144c2:	fb03 f202 	mul.w	r2, r3, r2
 80144c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80144ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80144ce:	601a      	str	r2, [r3, #0]
 80144d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80144d4:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 80144d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80144dc:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80144e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80144e8:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80144ec:	2300      	movs	r3, #0
 80144ee:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80144f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80144f4:	f04f 0300 	mov.w	r3, #0
 80144f8:	f607 0138 	addw	r1, r7, #2104	; 0x838
 80144fc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014500:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014504:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	0fdb      	lsrs	r3, r3, #31
 801450c:	b2da      	uxtb	r2, r3
 801450e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014512:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	0fdb      	lsrs	r3, r3, #31
 801451a:	b2db      	uxtb	r3, r3
 801451c:	4053      	eors	r3, r2
 801451e:	b2db      	uxtb	r3, r3
 8014520:	2b00      	cmp	r3, #0
 8014522:	d012      	beq.n	801454a <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 8014524:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8014528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801452c:	2100      	movs	r1, #0
 801452e:	f1d2 0001 	rsbs	r0, r2, #1
 8014532:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 8014536:	eb61 0303 	sbc.w	r3, r1, r3
 801453a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 801453e:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 8014542:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8014546:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801454a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801454e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	17da      	asrs	r2, r3, #31
 8014556:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 801455a:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 801455e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014562:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	17da      	asrs	r2, r3, #31
 801456a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 801456e:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 8014572:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8014576:	e9d3 0100 	ldrd	r0, r1, [r3]
 801457a:	460b      	mov	r3, r1
 801457c:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8014580:	fb02 f203 	mul.w	r2, r2, r3
 8014584:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8014588:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 801458c:	e9c4 0100 	strd	r0, r1, [r4]
 8014590:	4601      	mov	r1, r0
 8014592:	fb01 f303 	mul.w	r3, r1, r3
 8014596:	4413      	add	r3, r2
 8014598:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 801459c:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 80145a0:	fba2 1201 	umull	r1, r2, r2, r1
 80145a4:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 80145a8:	460a      	mov	r2, r1
 80145aa:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 80145ae:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 80145b2:	4413      	add	r3, r2
 80145b4:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80145b8:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80145bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c0:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 80145c4:	1851      	adds	r1, r2, r1
 80145c6:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 80145ca:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 80145ce:	414b      	adcs	r3, r1
 80145d0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80145d4:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 80145d8:	f607 0238 	addw	r2, r7, #2104	; 0x838
 80145dc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80145e0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80145e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	da0a      	bge.n	8014602 <arm_softmax_s8+0x232>
 80145ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80145f0:	1851      	adds	r1, r2, r1
 80145f2:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 80145f6:	f143 0300 	adc.w	r3, r3, #0
 80145fa:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80145fe:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8014602:	f04f 0000 	mov.w	r0, #0
 8014606:	f04f 0100 	mov.w	r1, #0
 801460a:	0fd0      	lsrs	r0, r2, #31
 801460c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014610:	17d9      	asrs	r1, r3, #31
 8014612:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014616:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801461a:	4603      	mov	r3, r0
 801461c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801461e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014622:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8014626:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801462a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801462e:	6812      	ldr	r2, [r2, #0]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	429a      	cmp	r2, r3
 8014634:	d10e      	bne.n	8014654 <arm_softmax_s8+0x284>
 8014636:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801463a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014644:	d106      	bne.n	8014654 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 8014646:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801464a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801464e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014652:	6013      	str	r3, [r2, #0]
    return result;
 8014654:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014658:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 8014662:	2300      	movs	r3, #0
 8014664:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 8014668:	2318      	movs	r3, #24
 801466a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 801466e:	2201      	movs	r2, #1
 8014670:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8014674:	fa02 f303 	lsl.w	r3, r2, r3
 8014678:	1e5a      	subs	r2, r3, #1
 801467a:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801467e:	ea02 0103 	and.w	r1, r2, r3
 8014682:	2201      	movs	r2, #1
 8014684:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8014688:	fa02 f303 	lsl.w	r3, r2, r3
 801468c:	1acb      	subs	r3, r1, r3
 801468e:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 8014692:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 8014696:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801469a:	1ad3      	subs	r3, r2, r3
 801469c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80146a0:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 80146a4:	015b      	lsls	r3, r3, #5
 80146a6:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80146aa:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 80146ae:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80146b2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 80146b6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80146ba:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 80146be:	2300      	movs	r3, #0
 80146c0:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 80146c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80146c8:	f04f 0300 	mov.w	r3, #0
 80146cc:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80146d0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80146d4:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80146d8:	0fdb      	lsrs	r3, r3, #31
 80146da:	b2da      	uxtb	r2, r3
 80146dc:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80146e0:	0fdb      	lsrs	r3, r3, #31
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	4053      	eors	r3, r2
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d012      	beq.n	8014712 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 80146ec:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80146f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f4:	2100      	movs	r1, #0
 80146f6:	f1d2 0001 	rsbs	r0, r2, #1
 80146fa:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 80146fe:	eb61 0303 	sbc.w	r3, r1, r3
 8014702:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8014706:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 801470a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 801470e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014712:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8014716:	17da      	asrs	r2, r3, #31
 8014718:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 801471c:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 8014720:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8014724:	17da      	asrs	r2, r3, #31
 8014726:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 801472a:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 801472e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8014732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014736:	460b      	mov	r3, r1
 8014738:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 801473c:	fb02 f203 	mul.w	r2, r2, r3
 8014740:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8014744:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 8014748:	e9c4 0100 	strd	r0, r1, [r4]
 801474c:	4601      	mov	r1, r0
 801474e:	fb01 f303 	mul.w	r3, r1, r3
 8014752:	4413      	add	r3, r2
 8014754:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8014758:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 801475c:	fba2 8901 	umull	r8, r9, r2, r1
 8014760:	444b      	add	r3, r9
 8014762:	4699      	mov	r9, r3
 8014764:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8014768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476c:	eb12 0108 	adds.w	r1, r2, r8
 8014770:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8014774:	eb43 0309 	adc.w	r3, r3, r9
 8014778:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801477c:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8014780:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8014784:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014788:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014790:	2b00      	cmp	r3, #0
 8014792:	da0a      	bge.n	80147aa <arm_softmax_s8+0x3da>
 8014794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014798:	1851      	adds	r1, r2, r1
 801479a:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 801479e:	f143 0300 	adc.w	r3, r3, #0
 80147a2:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 80147a6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80147aa:	f04f 0000 	mov.w	r0, #0
 80147ae:	f04f 0100 	mov.w	r1, #0
 80147b2:	0fd0      	lsrs	r0, r2, #31
 80147b4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80147b8:	17d9      	asrs	r1, r3, #31
 80147ba:	4602      	mov	r2, r0
 80147bc:	460b      	mov	r3, r1
 80147be:	4613      	mov	r3, r2
 80147c0:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80147c4:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80147c8:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d108      	bne.n	80147e2 <arm_softmax_s8+0x412>
 80147d0:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80147d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80147d8:	d103      	bne.n	80147e2 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 80147da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80147de:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 80147e2:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 80147e6:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 80147ea:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80147ee:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 80147f2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80147f6:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 80147fa:	2300      	movs	r3, #0
 80147fc:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 8014800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014804:	f04f 0300 	mov.w	r3, #0
 8014808:	f607 1128 	addw	r1, r7, #2344	; 0x928
 801480c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014810:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8014814:	0fdb      	lsrs	r3, r3, #31
 8014816:	b2da      	uxtb	r2, r3
 8014818:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801481c:	0fdb      	lsrs	r3, r3, #31
 801481e:	b2db      	uxtb	r3, r3
 8014820:	4053      	eors	r3, r2
 8014822:	b2db      	uxtb	r3, r3
 8014824:	2b00      	cmp	r3, #0
 8014826:	d012      	beq.n	801484e <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 8014828:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014830:	2100      	movs	r1, #0
 8014832:	f1d2 0001 	rsbs	r0, r2, #1
 8014836:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 801483a:	eb61 0303 	sbc.w	r3, r1, r3
 801483e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8014842:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8014846:	f607 1228 	addw	r2, r7, #2344	; 0x928
 801484a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801484e:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8014852:	17da      	asrs	r2, r3, #31
 8014854:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8014858:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 801485c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8014860:	17da      	asrs	r2, r3, #31
 8014862:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8014866:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 801486a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801486e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014872:	460b      	mov	r3, r1
 8014874:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8014878:	fb02 f203 	mul.w	r2, r2, r3
 801487c:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8014880:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 8014884:	e9c4 0100 	strd	r0, r1, [r4]
 8014888:	4601      	mov	r1, r0
 801488a:	fb01 f303 	mul.w	r3, r1, r3
 801488e:	4413      	add	r3, r2
 8014890:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 8014894:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8014898:	fba2 ab01 	umull	sl, fp, r2, r1
 801489c:	445b      	add	r3, fp
 801489e:	469b      	mov	fp, r3
 80148a0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80148a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a8:	eb12 010a 	adds.w	r1, r2, sl
 80148ac:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 80148b0:	eb43 030b 	adc.w	r3, r3, fp
 80148b4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80148b8:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 80148bc:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80148c0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80148c4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80148c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	da0a      	bge.n	80148e6 <arm_softmax_s8+0x516>
 80148d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80148d4:	1851      	adds	r1, r2, r1
 80148d6:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 80148da:	f143 0300 	adc.w	r3, r3, #0
 80148de:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80148e2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80148e6:	f04f 0000 	mov.w	r0, #0
 80148ea:	f04f 0100 	mov.w	r1, #0
 80148ee:	0fd0      	lsrs	r0, r2, #31
 80148f0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80148f4:	17d9      	asrs	r1, r3, #31
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	4613      	mov	r3, r2
 80148fc:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014900:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 8014904:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8014908:	429a      	cmp	r2, r3
 801490a:	d108      	bne.n	801491e <arm_softmax_s8+0x54e>
 801490c:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8014910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014914:	d103      	bne.n	801491e <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 8014916:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801491a:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 801491e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8014922:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 8014926:	2300      	movs	r3, #0
 8014928:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 801492c:	2304      	movs	r3, #4
 801492e:	3b01      	subs	r3, #1
 8014930:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 8014934:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8014938:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 801493c:	4013      	ands	r3, r2
 801493e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 8014942:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8014946:	109b      	asrs	r3, r3, #2
 8014948:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 801494c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8014950:	105b      	asrs	r3, r3, #1
 8014952:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 8014956:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 801495a:	2b00      	cmp	r3, #0
 801495c:	da04      	bge.n	8014968 <arm_softmax_s8+0x598>
        threshold++;
 801495e:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8014962:	3301      	adds	r3, #1
 8014964:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 8014968:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 801496c:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8014970:	429a      	cmp	r2, r3
 8014972:	dd04      	ble.n	801497e <arm_softmax_s8+0x5ae>
        result++;
 8014974:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8014978:	3301      	adds	r3, #1
 801497a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 801497e:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 8014982:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8014986:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 801498a:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801498e:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 8014992:	2300      	movs	r3, #0
 8014994:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 8014998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801499c:	f04f 0300 	mov.w	r3, #0
 80149a0:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80149a4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80149a8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80149ac:	0fdb      	lsrs	r3, r3, #31
 80149ae:	b2da      	uxtb	r2, r3
 80149b0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80149b4:	0fdb      	lsrs	r3, r3, #31
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	4053      	eors	r3, r2
 80149ba:	b2db      	uxtb	r3, r3
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d012      	beq.n	80149e6 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 80149c0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 80149c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c8:	2100      	movs	r1, #0
 80149ca:	f1d2 0001 	rsbs	r0, r2, #1
 80149ce:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 80149d2:	eb61 0303 	sbc.w	r3, r1, r3
 80149d6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80149da:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80149de:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80149e2:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80149e6:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80149ea:	17da      	asrs	r2, r3, #31
 80149ec:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 80149f0:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 80149f4:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80149f8:	17da      	asrs	r2, r3, #31
 80149fa:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80149fe:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 8014a02:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8014a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a0a:	460b      	mov	r3, r1
 8014a0c:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8014a10:	fb02 f203 	mul.w	r2, r2, r3
 8014a14:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8014a18:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 8014a1c:	e9cc 0100 	strd	r0, r1, [ip]
 8014a20:	4601      	mov	r1, r0
 8014a22:	fb01 f303 	mul.w	r3, r1, r3
 8014a26:	4413      	add	r3, r2
 8014a28:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8014a2c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8014a30:	fba2 5601 	umull	r5, r6, r2, r1
 8014a34:	4433      	add	r3, r6
 8014a36:	461e      	mov	r6, r3
 8014a38:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8014a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a40:	1951      	adds	r1, r2, r5
 8014a42:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8014a46:	4173      	adcs	r3, r6
 8014a48:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8014a4c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8014a50:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8014a54:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8014a58:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8014a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	da0a      	bge.n	8014a7a <arm_softmax_s8+0x6aa>
 8014a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a68:	1851      	adds	r1, r2, r1
 8014a6a:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8014a6e:	f143 0300 	adc.w	r3, r3, #0
 8014a72:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8014a76:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8014a7a:	f04f 0000 	mov.w	r0, #0
 8014a7e:	f04f 0100 	mov.w	r1, #0
 8014a82:	0fd0      	lsrs	r0, r2, #31
 8014a84:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014a88:	17d9      	asrs	r1, r3, #31
 8014a8a:	4602      	mov	r2, r0
 8014a8c:	460b      	mov	r3, r1
 8014a8e:	4613      	mov	r3, r2
 8014a90:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014a94:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8014a98:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d108      	bne.n	8014ab2 <arm_softmax_s8+0x6e2>
 8014aa0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8014aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014aa8:	d103      	bne.n	8014ab2 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 8014aaa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014aae:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 8014ab2:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014ab6:	4423      	add	r3, r4
 8014ab8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 8014abc:	2300      	movs	r3, #0
 8014abe:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 8014ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014ac6:	f04f 0300 	mov.w	r3, #0
 8014aca:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8014ace:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014ad2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014ad6:	0fdb      	lsrs	r3, r3, #31
 8014ad8:	b2da      	uxtb	r2, r3
 8014ada:	2300      	movs	r3, #0
 8014adc:	4053      	eors	r3, r2
 8014ade:	b2db      	uxtb	r3, r3
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d012      	beq.n	8014b0a <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 8014ae4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aec:	2100      	movs	r1, #0
 8014aee:	f1d2 0001 	rsbs	r0, r2, #1
 8014af2:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 8014af6:	eb61 0303 	sbc.w	r3, r1, r3
 8014afa:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8014afe:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 8014b02:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8014b06:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014b0a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014b0e:	17da      	asrs	r2, r3, #31
 8014b10:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8014b14:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8014b18:	a3f0      	add	r3, pc, #960	; (adr r3, 8014edc <arm_softmax_s8+0xb0c>)
 8014b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1e:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 8014b22:	fb02 f001 	mul.w	r0, r2, r1
 8014b26:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8014b2a:	fb01 f103 	mul.w	r1, r1, r3
 8014b2e:	4401      	add	r1, r0
 8014b30:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8014b34:	fba0 2302 	umull	r2, r3, r0, r2
 8014b38:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 8014b42:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8014b46:	18cb      	adds	r3, r1, r3
 8014b48:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8014b4c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b54:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8014b58:	1851      	adds	r1, r2, r1
 8014b5a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8014b5e:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8014b62:	414b      	adcs	r3, r1
 8014b64:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8014b68:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 8014b6c:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8014b70:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014b74:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	da0a      	bge.n	8014b96 <arm_softmax_s8+0x7c6>
 8014b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b84:	1851      	adds	r1, r2, r1
 8014b86:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8014b8a:	f143 0300 	adc.w	r3, r3, #0
 8014b8e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8014b92:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8014b96:	f04f 0000 	mov.w	r0, #0
 8014b9a:	f04f 0100 	mov.w	r1, #0
 8014b9e:	0fd0      	lsrs	r0, r2, #31
 8014ba0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014ba4:	17d9      	asrs	r1, r3, #31
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	460b      	mov	r3, r1
 8014baa:	4613      	mov	r3, r2
 8014bac:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014bb0:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8014bb4:	4bc6      	ldr	r3, [pc, #792]	; (8014ed0 <arm_softmax_s8+0xb00>)
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d108      	bne.n	8014bcc <arm_softmax_s8+0x7fc>
 8014bba:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014bc2:	d103      	bne.n	8014bcc <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 8014bc4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014bc8:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 8014bcc:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014bd0:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8014bd4:	4413      	add	r3, r2
 8014bd6:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014be0:	2302      	movs	r3, #2
 8014be2:	3b01      	subs	r3, #1
 8014be4:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 8014be8:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8014bec:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8014bf0:	4013      	ands	r3, r2
 8014bf2:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 8014bf6:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8014bfa:	105b      	asrs	r3, r3, #1
 8014bfc:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 8014c00:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8014c04:	105b      	asrs	r3, r3, #1
 8014c06:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 8014c0a:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	da04      	bge.n	8014c1c <arm_softmax_s8+0x84c>
        threshold++;
 8014c12:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8014c16:	3301      	adds	r3, #1
 8014c18:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 8014c1c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8014c20:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8014c24:	429a      	cmp	r2, r3
 8014c26:	dd04      	ble.n	8014c32 <arm_softmax_s8+0x862>
        result++;
 8014c28:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 8014c32:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014c36:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8014c3a:	4413      	add	r3, r2
 8014c3c:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8014c40:	2300      	movs	r3, #0
 8014c42:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 8014c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014c4a:	f04f 0300 	mov.w	r3, #0
 8014c4e:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8014c52:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014c56:	2200      	movs	r2, #0
 8014c58:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8014c5c:	0fdb      	lsrs	r3, r3, #31
 8014c5e:	b2db      	uxtb	r3, r3
 8014c60:	4053      	eors	r3, r2
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d012      	beq.n	8014c8e <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 8014c68:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c70:	2100      	movs	r1, #0
 8014c72:	f1d2 0001 	rsbs	r0, r2, #1
 8014c76:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 8014c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8014c7e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8014c82:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 8014c86:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8014c8a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014c8e:	a18c      	add	r1, pc, #560	; (adr r1, 8014ec0 <arm_softmax_s8+0xaf0>)
 8014c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c94:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8014c98:	17da      	asrs	r2, r3, #31
 8014c9a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8014c9e:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 8014ca2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8014ca6:	fb03 f201 	mul.w	r2, r3, r1
 8014caa:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8014cae:	fb00 f303 	mul.w	r3, r0, r3
 8014cb2:	4413      	add	r3, r2
 8014cb4:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8014cb8:	fba0 1202 	umull	r1, r2, r0, r2
 8014cbc:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 8014cc0:	460a      	mov	r2, r1
 8014cc2:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 8014cc6:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8014cca:	4413      	add	r3, r2
 8014ccc:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8014cd0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8014cdc:	1851      	adds	r1, r2, r1
 8014cde:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8014ce2:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 8014ce6:	414b      	adcs	r3, r1
 8014ce8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8014cec:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8014cf0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8014cf4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014cf8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	da0a      	bge.n	8014d1a <arm_softmax_s8+0x94a>
 8014d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014d08:	1851      	adds	r1, r2, r1
 8014d0a:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 8014d0e:	f143 0300 	adc.w	r3, r3, #0
 8014d12:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8014d16:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8014d1a:	f04f 0000 	mov.w	r0, #0
 8014d1e:	f04f 0100 	mov.w	r1, #0
 8014d22:	0fd0      	lsrs	r0, r2, #31
 8014d24:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014d28:	17d9      	asrs	r1, r3, #31
 8014d2a:	4602      	mov	r2, r0
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	4613      	mov	r3, r2
 8014d30:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 8014d34:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8014d38:	4b66      	ldr	r3, [pc, #408]	; (8014ed4 <arm_softmax_s8+0xb04>)
 8014d3a:	4413      	add	r3, r2
 8014d3c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 8014d40:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8014d44:	1c53      	adds	r3, r2, #1
 8014d46:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	fa03 f202 	lsl.w	r2, r3, r2
 8014d50:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8014d54:	4013      	ands	r3, r2
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d002      	beq.n	8014d60 <arm_softmax_s8+0x990>
 8014d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d5e:	e000      	b.n	8014d62 <arm_softmax_s8+0x992>
 8014d60:	2300      	movs	r3, #0
 8014d62:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8014d66:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014d6a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 8014d74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014d78:	f04f 0300 	mov.w	r3, #0
 8014d7c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8014d80:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014d84:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014d88:	0fdb      	lsrs	r3, r3, #31
 8014d8a:	b2da      	uxtb	r2, r3
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	4053      	eors	r3, r2
 8014d90:	b2db      	uxtb	r3, r3
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d012      	beq.n	8014dbc <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 8014d96:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9e:	2100      	movs	r1, #0
 8014da0:	f1d2 0001 	rsbs	r0, r2, #1
 8014da4:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 8014da8:	eb61 0303 	sbc.w	r3, r1, r3
 8014dac:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8014db0:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 8014db4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8014db8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014dbc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014dc0:	17da      	asrs	r2, r3, #31
 8014dc2:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8014dc6:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 8014dca:	a33f      	add	r3, pc, #252	; (adr r3, 8014ec8 <arm_softmax_s8+0xaf8>)
 8014dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd0:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8014dd4:	fb02 f001 	mul.w	r0, r2, r1
 8014dd8:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8014ddc:	fb01 f103 	mul.w	r1, r1, r3
 8014de0:	4401      	add	r1, r0
 8014de2:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8014de6:	fba0 2302 	umull	r2, r3, r0, r2
 8014dea:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8014dee:	4613      	mov	r3, r2
 8014df0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8014df4:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8014df8:	18cb      	adds	r3, r1, r3
 8014dfa:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8014dfe:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e06:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8014e0a:	1851      	adds	r1, r2, r1
 8014e0c:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8014e10:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8014e14:	414b      	adcs	r3, r1
 8014e16:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8014e1a:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8014e1e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8014e22:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014e26:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	da0a      	bge.n	8014e48 <arm_softmax_s8+0xa78>
 8014e32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e36:	1851      	adds	r1, r2, r1
 8014e38:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8014e3c:	f143 0300 	adc.w	r3, r3, #0
 8014e40:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8014e44:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8014e48:	f04f 0000 	mov.w	r0, #0
 8014e4c:	f04f 0100 	mov.w	r1, #0
 8014e50:	0fd0      	lsrs	r0, r2, #31
 8014e52:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014e56:	17d9      	asrs	r1, r3, #31
 8014e58:	4602      	mov	r2, r0
 8014e5a:	460b      	mov	r3, r1
 8014e5c:	4613      	mov	r3, r2
 8014e5e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014e62:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8014e66:	4b1c      	ldr	r3, [pc, #112]	; (8014ed8 <arm_softmax_s8+0xb08>)
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d108      	bne.n	8014e7e <arm_softmax_s8+0xaae>
 8014e6c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e74:	d103      	bne.n	8014e7e <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 8014e76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014e7a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 8014e7e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 8014e82:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8014e86:	ea02 0103 	and.w	r1, r2, r3
 8014e8a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8014e8e:	43da      	mvns	r2, r3
 8014e90:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014e94:	4013      	ands	r3, r2
 8014e96:	404b      	eors	r3, r1
 8014e98:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 8014e9c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8014ea0:	1c53      	adds	r3, r2, #1
 8014ea2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	fa03 f202 	lsl.w	r2, r3, r2
 8014eac:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8014eb0:	4013      	ands	r3, r2
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d016      	beq.n	8014ee4 <arm_softmax_s8+0xb14>
 8014eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014eba:	e014      	b.n	8014ee6 <arm_softmax_s8+0xb16>
 8014ebc:	f3af 8000 	nop.w
 8014ec0:	70f5a894 	.word	0x70f5a894
 8014ec4:	00000000 	.word	0x00000000
 8014ec8:	63afbe7b 	.word	0x63afbe7b
 8014ecc:	00000000 	.word	0x00000000
 8014ed0:	2aaaaaab 	.word	0x2aaaaaab
 8014ed4:	70f5a894 	.word	0x70f5a894
 8014ed8:	63afbe7b 	.word	0x63afbe7b
 8014edc:	2aaaaaab 	.word	0x2aaaaaab
 8014ee0:	00000000 	.word	0x00000000
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8014eea:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014eee:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 8014ef2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014ef6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8014efa:	2300      	movs	r3, #0
 8014efc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8014efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014f02:	f04f 0300 	mov.w	r3, #0
 8014f06:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8014f0a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014f0e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8014f12:	0fdb      	lsrs	r3, r3, #31
 8014f14:	b2da      	uxtb	r2, r3
 8014f16:	2300      	movs	r3, #0
 8014f18:	4053      	eors	r3, r2
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d012      	beq.n	8014f46 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8014f20:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8014f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f28:	2100      	movs	r1, #0
 8014f2a:	f1d2 0001 	rsbs	r0, r2, #1
 8014f2e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8014f32:	eb61 0303 	sbc.w	r3, r1, r3
 8014f36:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8014f3a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8014f3e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8014f42:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014f46:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8014f4a:	17da      	asrs	r2, r3, #31
 8014f4c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8014f50:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 8014f54:	a3a8      	add	r3, pc, #672	; (adr r3, 80151f8 <arm_softmax_s8+0xe28>)
 8014f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5a:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8014f5e:	fb02 f001 	mul.w	r0, r2, r1
 8014f62:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 8014f66:	fb01 f103 	mul.w	r1, r1, r3
 8014f6a:	4401      	add	r1, r0
 8014f6c:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8014f70:	fba0 2302 	umull	r2, r3, r0, r2
 8014f74:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8014f78:	4613      	mov	r3, r2
 8014f7a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8014f7e:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8014f82:	18cb      	adds	r3, r1, r3
 8014f84:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8014f88:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8014f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f90:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8014f94:	1851      	adds	r1, r2, r1
 8014f96:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8014f9a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8014f9e:	414b      	adcs	r3, r1
 8014fa0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8014fa4:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 8014fa8:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8014fac:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014fb0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8014fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	da0a      	bge.n	8014fd2 <arm_softmax_s8+0xc02>
 8014fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014fc0:	1851      	adds	r1, r2, r1
 8014fc2:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8014fc6:	f143 0300 	adc.w	r3, r3, #0
 8014fca:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8014fce:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8014fd2:	f04f 0000 	mov.w	r0, #0
 8014fd6:	f04f 0100 	mov.w	r1, #0
 8014fda:	0fd0      	lsrs	r0, r2, #31
 8014fdc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014fe0:	17d9      	asrs	r1, r3, #31
 8014fe2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014fe6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8014fea:	4603      	mov	r3, r0
 8014fec:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014fee:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8014ff2:	4b7f      	ldr	r3, [pc, #508]	; (80151f0 <arm_softmax_s8+0xe20>)
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d10b      	bne.n	8015010 <arm_softmax_s8+0xc40>
 8014ff8:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8014ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015000:	d106      	bne.n	8015010 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 8015002:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015006:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 801500a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801500e:	6013      	str	r3, [r2, #0]
    return result;
 8015010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015014:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015018:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 801501a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801501e:	ea02 0103 	and.w	r1, r2, r3
 8015022:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015026:	43da      	mvns	r2, r3
 8015028:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801502c:	4013      	ands	r3, r2
 801502e:	404b      	eors	r3, r1
 8015030:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 8015034:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015038:	1c53      	adds	r3, r2, #1
 801503a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801503e:	2301      	movs	r3, #1
 8015040:	fa03 f202 	lsl.w	r2, r3, r2
 8015044:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015048:	4013      	ands	r3, r2
 801504a:	2b00      	cmp	r3, #0
 801504c:	d002      	beq.n	8015054 <arm_softmax_s8+0xc84>
 801504e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015052:	e000      	b.n	8015056 <arm_softmax_s8+0xc86>
 8015054:	2300      	movs	r3, #0
 8015056:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801505a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801505e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8015062:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015066:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015068:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801506c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015070:	2300      	movs	r3, #0
 8015072:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015074:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015078:	f04f 0300 	mov.w	r3, #0
 801507c:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8015080:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015084:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015088:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	0fdb      	lsrs	r3, r3, #31
 8015090:	b2da      	uxtb	r2, r3
 8015092:	2300      	movs	r3, #0
 8015094:	4053      	eors	r3, r2
 8015096:	b2db      	uxtb	r3, r3
 8015098:	2b00      	cmp	r3, #0
 801509a:	d012      	beq.n	80150c2 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 801509c:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80150a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a4:	2100      	movs	r1, #0
 80150a6:	f1d2 0001 	rsbs	r0, r2, #1
 80150aa:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 80150ae:	eb61 0303 	sbc.w	r3, r1, r3
 80150b2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80150b6:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 80150ba:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 80150be:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80150c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80150c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	17da      	asrs	r2, r3, #31
 80150ce:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 80150d2:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 80150d6:	a344      	add	r3, pc, #272	; (adr r3, 80151e8 <arm_softmax_s8+0xe18>)
 80150d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150dc:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80150e0:	fb02 f001 	mul.w	r0, r2, r1
 80150e4:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 80150e8:	fb01 f103 	mul.w	r1, r1, r3
 80150ec:	4401      	add	r1, r0
 80150ee:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 80150f2:	fba0 2302 	umull	r2, r3, r0, r2
 80150f6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80150fa:	4613      	mov	r3, r2
 80150fc:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8015100:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8015104:	18cb      	adds	r3, r1, r3
 8015106:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 801510a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015112:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8015116:	1851      	adds	r1, r2, r1
 8015118:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 801511c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8015120:	414b      	adcs	r3, r1
 8015122:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8015126:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 801512a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 801512e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015132:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513a:	2b00      	cmp	r3, #0
 801513c:	da0a      	bge.n	8015154 <arm_softmax_s8+0xd84>
 801513e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015142:	1851      	adds	r1, r2, r1
 8015144:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8015148:	f143 0300 	adc.w	r3, r3, #0
 801514c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8015150:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8015154:	f04f 0000 	mov.w	r0, #0
 8015158:	f04f 0100 	mov.w	r1, #0
 801515c:	0fd0      	lsrs	r0, r2, #31
 801515e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015162:	17d9      	asrs	r1, r3, #31
 8015164:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015168:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801516c:	4603      	mov	r3, r0
 801516e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015170:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015174:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	4b1e      	ldr	r3, [pc, #120]	; (80151f4 <arm_softmax_s8+0xe24>)
 801517c:	429a      	cmp	r2, r3
 801517e:	d10e      	bne.n	801519e <arm_softmax_s8+0xdce>
 8015180:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015184:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801518e:	d106      	bne.n	801519e <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 8015190:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015194:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015198:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801519c:	6013      	str	r3, [r2, #0]
    return result;
 801519e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80151a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80151a6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80151a8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80151ac:	ea02 0103 	and.w	r1, r2, r3
 80151b0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80151b4:	43da      	mvns	r2, r3
 80151b6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80151ba:	4013      	ands	r3, r2
 80151bc:	404b      	eors	r3, r1
 80151be:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 80151c2:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80151c6:	1c53      	adds	r3, r2, #1
 80151c8:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80151cc:	2301      	movs	r3, #1
 80151ce:	fa03 f202 	lsl.w	r2, r3, r2
 80151d2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80151d6:	4013      	ands	r3, r2
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d011      	beq.n	8015200 <arm_softmax_s8+0xe30>
 80151dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151e0:	e00f      	b.n	8015202 <arm_softmax_s8+0xe32>
 80151e2:	bf00      	nop
 80151e4:	f3af 8000 	nop.w
 80151e8:	2f16ac6c 	.word	0x2f16ac6c
 80151ec:	00000000 	.word	0x00000000
 80151f0:	4da2cbf2 	.word	0x4da2cbf2
 80151f4:	2f16ac6c 	.word	0x2f16ac6c
 80151f8:	4da2cbf2 	.word	0x4da2cbf2
 80151fc:	00000000 	.word	0x00000000
 8015200:	2300      	movs	r3, #0
 8015202:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015206:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801520a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801520e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015212:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015214:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015218:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801521c:	2300      	movs	r3, #0
 801521e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015220:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015224:	f04f 0300 	mov.w	r3, #0
 8015228:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 801522c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015230:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015234:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	0fdb      	lsrs	r3, r3, #31
 801523c:	b2da      	uxtb	r2, r3
 801523e:	2300      	movs	r3, #0
 8015240:	4053      	eors	r3, r2
 8015242:	b2db      	uxtb	r3, r3
 8015244:	2b00      	cmp	r3, #0
 8015246:	d012      	beq.n	801526e <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 8015248:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015250:	2100      	movs	r1, #0
 8015252:	f1d2 0001 	rsbs	r0, r2, #1
 8015256:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 801525a:	eb61 0303 	sbc.w	r3, r1, r3
 801525e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8015262:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8015266:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 801526a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801526e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015272:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	17da      	asrs	r2, r3, #31
 801527a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 801527e:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 8015282:	a3ab      	add	r3, pc, #684	; (adr r3, 8015530 <arm_softmax_s8+0x1160>)
 8015284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015288:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 801528c:	fb02 f001 	mul.w	r0, r2, r1
 8015290:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 8015294:	fb01 f103 	mul.w	r1, r1, r3
 8015298:	4401      	add	r1, r0
 801529a:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 801529e:	fba0 2302 	umull	r2, r3, r0, r2
 80152a2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80152a6:	4613      	mov	r3, r2
 80152a8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 80152ac:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 80152b0:	18cb      	adds	r3, r1, r3
 80152b2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80152b6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80152ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152be:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 80152c2:	1851      	adds	r1, r2, r1
 80152c4:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 80152c8:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 80152cc:	414b      	adcs	r3, r1
 80152ce:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80152d2:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80152d6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80152da:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80152de:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80152e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	da0a      	bge.n	8015300 <arm_softmax_s8+0xf30>
 80152ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80152ee:	1851      	adds	r1, r2, r1
 80152f0:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 80152f4:	f143 0300 	adc.w	r3, r3, #0
 80152f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80152fc:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8015300:	f04f 0000 	mov.w	r0, #0
 8015304:	f04f 0100 	mov.w	r1, #0
 8015308:	0fd0      	lsrs	r0, r2, #31
 801530a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801530e:	17d9      	asrs	r1, r3, #31
 8015310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015314:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8015318:	4603      	mov	r3, r0
 801531a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801531c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015320:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015324:	681a      	ldr	r2, [r3, #0]
 8015326:	4b80      	ldr	r3, [pc, #512]	; (8015528 <arm_softmax_s8+0x1158>)
 8015328:	429a      	cmp	r2, r3
 801532a:	d10e      	bne.n	801534a <arm_softmax_s8+0xf7a>
 801532c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015330:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801533a:	d106      	bne.n	801534a <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 801533c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015340:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8015344:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015348:	6013      	str	r3, [r2, #0]
    return result;
 801534a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801534e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015352:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8015354:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015358:	ea02 0103 	and.w	r1, r2, r3
 801535c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015360:	43da      	mvns	r2, r3
 8015362:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015366:	4013      	ands	r3, r2
 8015368:	404b      	eors	r3, r1
 801536a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 801536e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015372:	1c53      	adds	r3, r2, #1
 8015374:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015378:	2301      	movs	r3, #1
 801537a:	fa03 f202 	lsl.w	r2, r3, r2
 801537e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015382:	4013      	ands	r3, r2
 8015384:	2b00      	cmp	r3, #0
 8015386:	d002      	beq.n	801538e <arm_softmax_s8+0xfbe>
 8015388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801538c:	e000      	b.n	8015390 <arm_softmax_s8+0xfc0>
 801538e:	2300      	movs	r3, #0
 8015390:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015394:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015398:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801539c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80153a0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80153a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80153a6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80153aa:	2300      	movs	r3, #0
 80153ac:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80153ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80153b2:	f04f 0300 	mov.w	r3, #0
 80153b6:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 80153ba:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80153be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80153c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	0fdb      	lsrs	r3, r3, #31
 80153ca:	b2da      	uxtb	r2, r3
 80153cc:	2300      	movs	r3, #0
 80153ce:	4053      	eors	r3, r2
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d012      	beq.n	80153fc <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 80153d6:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80153da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153de:	2100      	movs	r1, #0
 80153e0:	f1d2 0001 	rsbs	r0, r2, #1
 80153e4:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 80153e8:	eb61 0303 	sbc.w	r3, r1, r3
 80153ec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80153f0:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80153f4:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 80153f8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80153fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015400:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	17da      	asrs	r2, r3, #31
 8015408:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 801540c:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8015410:	a343      	add	r3, pc, #268	; (adr r3, 8015520 <arm_softmax_s8+0x1150>)
 8015412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015416:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 801541a:	fb02 f001 	mul.w	r0, r2, r1
 801541e:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 8015422:	fb01 f103 	mul.w	r1, r1, r3
 8015426:	4401      	add	r1, r0
 8015428:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 801542c:	fba0 2302 	umull	r2, r3, r0, r2
 8015430:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8015434:	4613      	mov	r3, r2
 8015436:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 801543a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 801543e:	18cb      	adds	r3, r1, r3
 8015440:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8015444:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8015448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801544c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8015450:	1851      	adds	r1, r2, r1
 8015452:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8015456:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 801545a:	414b      	adcs	r3, r1
 801545c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8015460:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8015464:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8015468:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801546c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8015470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015474:	2b00      	cmp	r3, #0
 8015476:	da0a      	bge.n	801548e <arm_softmax_s8+0x10be>
 8015478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801547c:	1851      	adds	r1, r2, r1
 801547e:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8015482:	f143 0300 	adc.w	r3, r3, #0
 8015486:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 801548a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 801548e:	f04f 0000 	mov.w	r0, #0
 8015492:	f04f 0100 	mov.w	r1, #0
 8015496:	0fd0      	lsrs	r0, r2, #31
 8015498:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801549c:	17d9      	asrs	r1, r3, #31
 801549e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154a2:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80154a6:	4603      	mov	r3, r0
 80154a8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80154aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	4b1d      	ldr	r3, [pc, #116]	; (801552c <arm_softmax_s8+0x115c>)
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d10e      	bne.n	80154d8 <arm_softmax_s8+0x1108>
 80154ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80154c8:	d106      	bne.n	80154d8 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 80154ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154ce:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80154d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80154d6:	6013      	str	r3, [r2, #0]
    return result;
 80154d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80154e0:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80154e2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80154e6:	ea02 0103 	and.w	r1, r2, r3
 80154ea:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80154ee:	43da      	mvns	r2, r3
 80154f0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80154f4:	4013      	ands	r3, r2
 80154f6:	404b      	eors	r3, r1
 80154f8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 80154fc:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015500:	1c53      	adds	r3, r2, #1
 8015502:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015506:	2301      	movs	r3, #1
 8015508:	fa03 f202 	lsl.w	r2, r3, r2
 801550c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015510:	4013      	ands	r3, r2
 8015512:	2b00      	cmp	r3, #0
 8015514:	d010      	beq.n	8015538 <arm_softmax_s8+0x1168>
 8015516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801551a:	e00e      	b.n	801553a <arm_softmax_s8+0x116a>
 801551c:	f3af 8000 	nop.w
 8015520:	02582ab7 	.word	0x02582ab7
 8015524:	00000000 	.word	0x00000000
 8015528:	1152aaa4 	.word	0x1152aaa4
 801552c:	02582ab7 	.word	0x02582ab7
 8015530:	1152aaa4 	.word	0x1152aaa4
 8015534:	00000000 	.word	0x00000000
 8015538:	2300      	movs	r3, #0
 801553a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801553e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015542:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8015546:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801554a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801554c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015550:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8015554:	2300      	movs	r3, #0
 8015556:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801555c:	f04f 0300 	mov.w	r3, #0
 8015560:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8015564:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015568:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801556c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	0fdb      	lsrs	r3, r3, #31
 8015574:	b2da      	uxtb	r2, r3
 8015576:	2300      	movs	r3, #0
 8015578:	4053      	eors	r3, r2
 801557a:	b2db      	uxtb	r3, r3
 801557c:	2b00      	cmp	r3, #0
 801557e:	d012      	beq.n	80155a6 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 8015580:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8015584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015588:	2100      	movs	r1, #0
 801558a:	f1d2 0001 	rsbs	r0, r2, #1
 801558e:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 8015592:	eb61 0303 	sbc.w	r3, r1, r3
 8015596:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801559a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 801559e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80155a2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80155a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80155aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	17da      	asrs	r2, r3, #31
 80155b2:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 80155b6:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 80155ba:	4ad3      	ldr	r2, [pc, #844]	; (8015908 <arm_softmax_s8+0x1538>)
 80155bc:	f04f 0300 	mov.w	r3, #0
 80155c0:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 80155c4:	fb02 f001 	mul.w	r0, r2, r1
 80155c8:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 80155cc:	fb01 f103 	mul.w	r1, r1, r3
 80155d0:	4401      	add	r1, r0
 80155d2:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 80155d6:	fba0 2302 	umull	r2, r3, r0, r2
 80155da:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80155de:	4613      	mov	r3, r2
 80155e0:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 80155e4:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80155e8:	18cb      	adds	r3, r1, r3
 80155ea:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80155ee:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80155f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f6:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 80155fa:	1851      	adds	r1, r2, r1
 80155fc:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8015600:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8015604:	414b      	adcs	r3, r1
 8015606:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 801560a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 801560e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8015612:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015616:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561e:	2b00      	cmp	r3, #0
 8015620:	da0a      	bge.n	8015638 <arm_softmax_s8+0x1268>
 8015622:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015626:	1851      	adds	r1, r2, r1
 8015628:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 801562c:	f143 0300 	adc.w	r3, r3, #0
 8015630:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8015634:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8015638:	f04f 0000 	mov.w	r0, #0
 801563c:	f04f 0100 	mov.w	r1, #0
 8015640:	0fd0      	lsrs	r0, r2, #31
 8015642:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015646:	17d9      	asrs	r1, r3, #31
 8015648:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801564c:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8015650:	4603      	mov	r3, r0
 8015652:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015654:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015658:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	4baa      	ldr	r3, [pc, #680]	; (8015908 <arm_softmax_s8+0x1538>)
 8015660:	429a      	cmp	r2, r3
 8015662:	d10e      	bne.n	8015682 <arm_softmax_s8+0x12b2>
 8015664:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015668:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015672:	d106      	bne.n	8015682 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 8015674:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015678:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 801567c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015680:	6013      	str	r3, [r2, #0]
    return result;
 8015682:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015686:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801568a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 801568c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015690:	ea02 0103 	and.w	r1, r2, r3
 8015694:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015698:	43da      	mvns	r2, r3
 801569a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801569e:	4013      	ands	r3, r2
 80156a0:	404b      	eors	r3, r1
 80156a2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 80156a6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80156aa:	1c53      	adds	r3, r2, #1
 80156ac:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80156b0:	2301      	movs	r3, #1
 80156b2:	fa03 f202 	lsl.w	r2, r3, r2
 80156b6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80156ba:	4013      	ands	r3, r2
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d002      	beq.n	80156c6 <arm_softmax_s8+0x12f6>
 80156c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156c4:	e000      	b.n	80156c8 <arm_softmax_s8+0x12f8>
 80156c6:	2300      	movs	r3, #0
 80156c8:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80156cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80156d0:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80156d4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80156d8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80156da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80156de:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80156e2:	2300      	movs	r3, #0
 80156e4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80156e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80156ea:	f04f 0300 	mov.w	r3, #0
 80156ee:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 80156f2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80156f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80156fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	0fdb      	lsrs	r3, r3, #31
 8015702:	b2da      	uxtb	r2, r3
 8015704:	2300      	movs	r3, #0
 8015706:	4053      	eors	r3, r2
 8015708:	b2db      	uxtb	r3, r3
 801570a:	2b00      	cmp	r3, #0
 801570c:	d012      	beq.n	8015734 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 801570e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8015712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015716:	2100      	movs	r1, #0
 8015718:	f1d2 0001 	rsbs	r0, r2, #1
 801571c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8015720:	eb61 0303 	sbc.w	r3, r1, r3
 8015724:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8015728:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 801572c:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8015730:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015734:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015738:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	17da      	asrs	r2, r3, #31
 8015740:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8015744:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8015748:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 801574c:	f04f 0300 	mov.w	r3, #0
 8015750:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8015754:	fb02 f001 	mul.w	r0, r2, r1
 8015758:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 801575c:	fb01 f103 	mul.w	r1, r1, r3
 8015760:	4401      	add	r1, r0
 8015762:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8015766:	fba0 2302 	umull	r2, r3, r0, r2
 801576a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 801576e:	4613      	mov	r3, r2
 8015770:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8015774:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8015778:	18cb      	adds	r3, r1, r3
 801577a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 801577e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8015782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015786:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 801578a:	1851      	adds	r1, r2, r1
 801578c:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8015790:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8015794:	414b      	adcs	r3, r1
 8015796:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 801579a:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 801579e:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 80157a2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80157a6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80157aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	da0a      	bge.n	80157c8 <arm_softmax_s8+0x13f8>
 80157b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80157b6:	1851      	adds	r1, r2, r1
 80157b8:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80157bc:	f143 0300 	adc.w	r3, r3, #0
 80157c0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80157c4:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80157c8:	f04f 0000 	mov.w	r0, #0
 80157cc:	f04f 0100 	mov.w	r1, #0
 80157d0:	0fd0      	lsrs	r0, r2, #31
 80157d2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80157d6:	17d9      	asrs	r1, r3, #31
 80157d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157dc:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80157e0:	4603      	mov	r3, r0
 80157e2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80157e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157e8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	2bf2      	cmp	r3, #242	; 0xf2
 80157f0:	d10e      	bne.n	8015810 <arm_softmax_s8+0x1440>
 80157f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015800:	d106      	bne.n	8015810 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 8015802:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015806:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801580a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801580e:	6013      	str	r3, [r2, #0]
    return result;
 8015810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015814:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8015818:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 801581a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801581e:	ea02 0103 	and.w	r1, r2, r3
 8015822:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015826:	43da      	mvns	r2, r3
 8015828:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801582c:	4013      	ands	r3, r2
 801582e:	404b      	eors	r3, r1
 8015830:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 8015834:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8015838:	2b00      	cmp	r3, #0
 801583a:	d102      	bne.n	8015842 <arm_softmax_s8+0x1472>
 801583c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015840:	e000      	b.n	8015844 <arm_softmax_s8+0x1474>
 8015842:	2300      	movs	r3, #0
 8015844:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8015848:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801584c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015850:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015854:	43da      	mvns	r2, r3
 8015856:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801585a:	4013      	ands	r3, r2
 801585c:	404b      	eors	r3, r1
 801585e:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 8015862:	2300      	movs	r3, #0
 8015864:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801586c:	3b01      	subs	r3, #1
 801586e:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 8015872:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 8015876:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 801587a:	4013      	ands	r3, r2
 801587c:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 8015880:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8015884:	131b      	asrs	r3, r3, #12
 8015886:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 801588a:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 801588e:	105b      	asrs	r3, r3, #1
 8015890:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 8015894:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8015898:	2b00      	cmp	r3, #0
 801589a:	da04      	bge.n	80158a6 <arm_softmax_s8+0x14d6>
        threshold++;
 801589c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80158a0:	3301      	adds	r3, #1
 80158a2:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 80158a6:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 80158aa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80158ae:	429a      	cmp	r2, r3
 80158b0:	dd04      	ble.n	80158bc <arm_softmax_s8+0x14ec>
        result++;
 80158b2:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80158b6:	3301      	adds	r3, #1
 80158b8:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 80158bc:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 80158c0:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 80158c4:	4413      	add	r3, r2
 80158c6:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 80158ca:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80158ce:	3301      	adds	r3, #1
 80158d0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80158d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158d8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80158dc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	429a      	cmp	r2, r3
 80158e4:	f6fe add2 	blt.w	801448c <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 80158e8:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 80158ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80158f4:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 80158f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d103      	bne.n	801590c <arm_softmax_s8+0x153c>
    return 32U;
 8015904:	2320      	movs	r3, #32
 8015906:	e009      	b.n	801591c <arm_softmax_s8+0x154c>
 8015908:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 801590c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015910:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	fab3 f383 	clz	r3, r3
 801591a:	b2db      	uxtb	r3, r3
 801591c:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8015920:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8015924:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8015928:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 801592c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8015930:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8015934:	fa02 f303 	lsl.w	r3, r2, r3
 8015938:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 801593c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015940:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015944:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8015946:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801594a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	17da      	asrs	r2, r3, #31
 8015952:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8015956:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 801595a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801595e:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8015962:	4602      	mov	r2, r0
 8015964:	18d3      	adds	r3, r2, r3
 8015966:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801596a:	460b      	mov	r3, r1
 801596c:	f143 0300 	adc.w	r3, r3, #0
 8015970:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8015974:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8015978:	f607 0228 	addw	r2, r7, #2088	; 0x828
 801597c:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8015980:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8015984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015988:	2b00      	cmp	r3, #0
 801598a:	db04      	blt.n	8015996 <arm_softmax_s8+0x15c6>
 801598c:	f04f 0001 	mov.w	r0, #1
 8015990:	f04f 0100 	mov.w	r1, #0
 8015994:	e003      	b.n	801599e <arm_softmax_s8+0x15ce>
 8015996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801599a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801599e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80159a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a6:	1884      	adds	r4, r0, r2
 80159a8:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 80159ac:	eb41 0303 	adc.w	r3, r1, r3
 80159b0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80159b4:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80159b8:	460b      	mov	r3, r1
 80159ba:	0fdb      	lsrs	r3, r3, #31
 80159bc:	2200      	movs	r2, #0
 80159be:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 80159c2:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 80159c6:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80159ca:	4602      	mov	r2, r0
 80159cc:	189b      	adds	r3, r3, r2
 80159ce:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80159d2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80159d6:	460a      	mov	r2, r1
 80159d8:	4153      	adcs	r3, r2
 80159da:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80159de:	f04f 0200 	mov.w	r2, #0
 80159e2:	f04f 0300 	mov.w	r3, #0
 80159e6:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 80159ea:	084a      	lsrs	r2, r1, #1
 80159ec:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80159f0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80159f4:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80159f8:	104b      	asrs	r3, r1, #1
 80159fa:	4610      	mov	r0, r2
 80159fc:	4619      	mov	r1, r3
 80159fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a02:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8015a06:	4603      	mov	r3, r0
 8015a08:	6013      	str	r3, [r2, #0]
 8015a0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a0e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8015a12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a16:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015a1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a22:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8015a26:	2300      	movs	r3, #0
 8015a28:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015a2e:	f04f 0300 	mov.w	r3, #0
 8015a32:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8015a36:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015a3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a3e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	0fdb      	lsrs	r3, r3, #31
 8015a46:	b2da      	uxtb	r2, r3
 8015a48:	2301      	movs	r3, #1
 8015a4a:	4053      	eors	r3, r2
 8015a4c:	b2db      	uxtb	r3, r3
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d012      	beq.n	8015a78 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 8015a52:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	f1d2 0001 	rsbs	r0, r2, #1
 8015a60:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8015a64:	eb61 0303 	sbc.w	r3, r1, r3
 8015a68:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8015a6c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8015a70:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8015a74:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015a78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	17da      	asrs	r2, r3, #31
 8015a84:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8015a88:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 8015a8c:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 8015a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a94:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8015a98:	fb02 f001 	mul.w	r0, r2, r1
 8015a9c:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8015aa0:	fb01 f103 	mul.w	r1, r1, r3
 8015aa4:	4401      	add	r1, r0
 8015aa6:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8015aaa:	fba0 2302 	umull	r2, r3, r0, r2
 8015aae:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8015ab8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8015abc:	18cb      	adds	r3, r1, r3
 8015abe:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8015ac2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aca:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8015ace:	1851      	adds	r1, r2, r1
 8015ad0:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8015ad4:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8015ad8:	414b      	adcs	r3, r1
 8015ada:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8015ade:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8015ae2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8015ae6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015aea:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	da0a      	bge.n	8015b0c <arm_softmax_s8+0x173c>
 8015af6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015afa:	1851      	adds	r1, r2, r1
 8015afc:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8015b00:	f143 0300 	adc.w	r3, r3, #0
 8015b04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8015b08:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8015b0c:	f04f 0000 	mov.w	r0, #0
 8015b10:	f04f 0100 	mov.w	r1, #0
 8015b14:	0fd0      	lsrs	r0, r2, #31
 8015b16:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015b1a:	17d9      	asrs	r1, r3, #31
 8015b1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b20:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8015b24:	4603      	mov	r3, r0
 8015b26:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015b28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8015b36:	d10e      	bne.n	8015b56 <arm_softmax_s8+0x1786>
 8015b38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015b46:	d106      	bne.n	8015b56 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8015b48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b4c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8015b50:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b54:	6013      	str	r3, [r2, #0]
    return result;
 8015b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b5a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8015b5e:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8015b60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b64:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8015b68:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 8015b6c:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 8015b6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b72:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8015b76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8015b7a:	6013      	str	r3, [r2, #0]
 8015b7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b80:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8015b84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b88:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	6013      	str	r3, [r2, #0]
 8015b90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b94:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8015b98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015ba4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ba8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015bac:	2300      	movs	r3, #0
 8015bae:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015bb4:	f04f 0300 	mov.w	r3, #0
 8015bb8:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8015bbc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015bc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015bc4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	0fdb      	lsrs	r3, r3, #31
 8015bcc:	b2da      	uxtb	r2, r3
 8015bce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015bd2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	0fdb      	lsrs	r3, r3, #31
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	4053      	eors	r3, r2
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d012      	beq.n	8015c0a <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 8015be4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bec:	2100      	movs	r1, #0
 8015bee:	f1d2 0001 	rsbs	r0, r2, #1
 8015bf2:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8015bf6:	eb61 0303 	sbc.w	r3, r1, r3
 8015bfa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8015bfe:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8015c02:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8015c06:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015c0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c0e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	17da      	asrs	r2, r3, #31
 8015c16:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8015c1a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 8015c1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	17da      	asrs	r2, r3, #31
 8015c2a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8015c2e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8015c32:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8015c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c3a:	460b      	mov	r3, r1
 8015c3c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8015c40:	fb02 f203 	mul.w	r2, r2, r3
 8015c44:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8015c48:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8015c4c:	e9c4 0100 	strd	r0, r1, [r4]
 8015c50:	4601      	mov	r1, r0
 8015c52:	fb01 f303 	mul.w	r3, r1, r3
 8015c56:	4413      	add	r3, r2
 8015c58:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8015c5c:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8015c60:	fba2 1201 	umull	r1, r2, r2, r1
 8015c64:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8015c68:	460a      	mov	r2, r1
 8015c6a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015c6e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015c72:	4413      	add	r3, r2
 8015c74:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015c78:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c80:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015c84:	1851      	adds	r1, r2, r1
 8015c86:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8015c8a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8015c8e:	414b      	adcs	r3, r1
 8015c90:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8015c94:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8015c98:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8015c9c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015ca0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	da0a      	bge.n	8015cc2 <arm_softmax_s8+0x18f2>
 8015cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015cb0:	1851      	adds	r1, r2, r1
 8015cb2:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8015cb6:	f143 0300 	adc.w	r3, r3, #0
 8015cba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8015cbe:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8015cc2:	f04f 0000 	mov.w	r0, #0
 8015cc6:	f04f 0100 	mov.w	r1, #0
 8015cca:	0fd0      	lsrs	r0, r2, #31
 8015ccc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015cd0:	17d9      	asrs	r1, r3, #31
 8015cd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cd6:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015cda:	4603      	mov	r3, r0
 8015cdc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015cde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ce2:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8015ce6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015cee:	6812      	ldr	r2, [r2, #0]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d10e      	bne.n	8015d14 <arm_softmax_s8+0x1944>
 8015cf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cfa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015d04:	d106      	bne.n	8015d14 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8015d06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d0a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015d0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d12:	6013      	str	r3, [r2, #0]
    return result;
 8015d14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015d1c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8015d1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d22:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	1a99      	subs	r1, r3, r2
 8015d2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d2e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8015d32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d36:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	6013      	str	r3, [r2, #0]
 8015d3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d42:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015d46:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8015d48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d4c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015d50:	2300      	movs	r3, #0
 8015d52:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015d54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015d58:	f04f 0300 	mov.w	r3, #0
 8015d5c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8015d60:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015d64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d68:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	0fdb      	lsrs	r3, r3, #31
 8015d70:	b2da      	uxtb	r2, r3
 8015d72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	0fdb      	lsrs	r3, r3, #31
 8015d7e:	b2db      	uxtb	r3, r3
 8015d80:	4053      	eors	r3, r2
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d012      	beq.n	8015dae <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 8015d88:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d90:	2100      	movs	r1, #0
 8015d92:	f1d2 0001 	rsbs	r0, r2, #1
 8015d96:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 8015d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8015d9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8015da2:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8015da6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8015daa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015dae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015db2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	17da      	asrs	r2, r3, #31
 8015dba:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8015dbe:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8015dc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015dc6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	17da      	asrs	r2, r3, #31
 8015dce:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8015dd2:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8015dd6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8015dda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015dde:	460b      	mov	r3, r1
 8015de0:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8015de4:	fb02 f203 	mul.w	r2, r2, r3
 8015de8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8015dec:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8015df0:	e9c4 0100 	strd	r0, r1, [r4]
 8015df4:	4601      	mov	r1, r0
 8015df6:	fb01 f303 	mul.w	r3, r1, r3
 8015dfa:	4413      	add	r3, r2
 8015dfc:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8015e00:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8015e04:	fba2 1201 	umull	r1, r2, r2, r1
 8015e08:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 8015e0c:	460a      	mov	r2, r1
 8015e0e:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8015e12:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8015e16:	4413      	add	r3, r2
 8015e18:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8015e1c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e24:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8015e28:	1851      	adds	r1, r2, r1
 8015e2a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8015e2e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8015e32:	414b      	adcs	r3, r1
 8015e34:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8015e38:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8015e3c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8015e40:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015e44:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	da0a      	bge.n	8015e66 <arm_softmax_s8+0x1a96>
 8015e50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e54:	1851      	adds	r1, r2, r1
 8015e56:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8015e5a:	f143 0300 	adc.w	r3, r3, #0
 8015e5e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8015e62:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8015e66:	f04f 0000 	mov.w	r0, #0
 8015e6a:	f04f 0100 	mov.w	r1, #0
 8015e6e:	0fd0      	lsrs	r0, r2, #31
 8015e70:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015e74:	17d9      	asrs	r1, r3, #31
 8015e76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e7a:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015e7e:	4603      	mov	r3, r0
 8015e80:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015e82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e86:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8015e8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e8e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015e92:	6812      	ldr	r2, [r2, #0]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d10e      	bne.n	8015eb8 <arm_softmax_s8+0x1ae8>
 8015e9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e9e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015ea8:	d106      	bne.n	8015eb8 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 8015eaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015eae:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015eb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015eb6:	6013      	str	r3, [r2, #0]
    return result;
 8015eb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ebc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015ec0:	681a      	ldr	r2, [r3, #0]
 8015ec2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ec6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015eca:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8015ecc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8015ed0:	4619      	mov	r1, r3
 8015ed2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ed6:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8015eda:	1e4b      	subs	r3, r1, #1
 8015edc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8015ede:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ee2:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8015ee6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015eea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	009b      	lsls	r3, r3, #2
 8015ef2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8015ef4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ef8:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8015efc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015f04:	6812      	ldr	r2, [r2, #0]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	dd02      	ble.n	8015f12 <arm_softmax_s8+0x1b42>
 8015f0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015f10:	e000      	b.n	8015f14 <arm_softmax_s8+0x1b44>
 8015f12:	2000      	movs	r0, #0
 8015f14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f18:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8015f1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015f24:	6812      	ldr	r2, [r2, #0]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	dd01      	ble.n	8015f30 <arm_softmax_s8+0x1b60>
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	e001      	b.n	8015f34 <arm_softmax_s8+0x1b64>
 8015f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	ea02 0103 	and.w	r1, r2, r3
 8015f42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f46:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8015f4a:	ea81 0300 	eor.w	r3, r1, r0
 8015f4e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8015f50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f54:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	425a      	negs	r2, r3
 8015f5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f60:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	4293      	cmp	r3, r2
 8015f68:	da02      	bge.n	8015f70 <arm_softmax_s8+0x1ba0>
 8015f6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015f6e:	e000      	b.n	8015f72 <arm_softmax_s8+0x1ba2>
 8015f70:	2000      	movs	r0, #0
 8015f72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	425a      	negs	r2, r3
 8015f7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f82:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	da01      	bge.n	8015f90 <arm_softmax_s8+0x1bc0>
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	e001      	b.n	8015f94 <arm_softmax_s8+0x1bc4>
 8015f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	ea02 0103 	and.w	r1, r2, r3
 8015fa2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fa6:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8015faa:	ea81 0300 	eor.w	r3, r1, r0
 8015fae:	6013      	str	r3, [r2, #0]
    return result;
 8015fb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fb4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8015fb8:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8015fba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fbe:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8015fc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fc6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	440b      	add	r3, r1
 8015fce:	6013      	str	r3, [r2, #0]
 8015fd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fd4:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8015fd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fdc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	6013      	str	r3, [r2, #0]
 8015fe4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fe8:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8015fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ff0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015ff8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ffc:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016000:	2300      	movs	r3, #0
 8016002:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016008:	f04f 0300 	mov.w	r3, #0
 801600c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8016010:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016014:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016018:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	0fdb      	lsrs	r3, r3, #31
 8016020:	b2da      	uxtb	r2, r3
 8016022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016026:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	0fdb      	lsrs	r3, r3, #31
 801602e:	b2db      	uxtb	r3, r3
 8016030:	4053      	eors	r3, r2
 8016032:	b2db      	uxtb	r3, r3
 8016034:	2b00      	cmp	r3, #0
 8016036:	d012      	beq.n	801605e <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8016038:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016040:	2100      	movs	r1, #0
 8016042:	f1d2 0001 	rsbs	r0, r2, #1
 8016046:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 801604a:	eb61 0303 	sbc.w	r3, r1, r3
 801604e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8016052:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8016056:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801605a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801605e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016062:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	17da      	asrs	r2, r3, #31
 801606a:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801606e:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8016072:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016076:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	17da      	asrs	r2, r3, #31
 801607e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8016082:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8016086:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801608a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801608e:	460b      	mov	r3, r1
 8016090:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8016094:	fb02 f203 	mul.w	r2, r2, r3
 8016098:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801609c:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 80160a0:	e9c4 0100 	strd	r0, r1, [r4]
 80160a4:	4601      	mov	r1, r0
 80160a6:	fb01 f303 	mul.w	r3, r1, r3
 80160aa:	4413      	add	r3, r2
 80160ac:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80160b0:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 80160b4:	fba2 1201 	umull	r1, r2, r2, r1
 80160b8:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 80160bc:	460a      	mov	r2, r1
 80160be:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 80160c2:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80160c6:	4413      	add	r3, r2
 80160c8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80160cc:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80160d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d4:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80160d8:	1851      	adds	r1, r2, r1
 80160da:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 80160de:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80160e2:	414b      	adcs	r3, r1
 80160e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80160e8:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80160ec:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80160f0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80160f4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80160f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	da0a      	bge.n	8016116 <arm_softmax_s8+0x1d46>
 8016100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016104:	1851      	adds	r1, r2, r1
 8016106:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 801610a:	f143 0300 	adc.w	r3, r3, #0
 801610e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8016112:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8016116:	f04f 0000 	mov.w	r0, #0
 801611a:	f04f 0100 	mov.w	r1, #0
 801611e:	0fd0      	lsrs	r0, r2, #31
 8016120:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016124:	17d9      	asrs	r1, r3, #31
 8016126:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801612a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801612e:	4603      	mov	r3, r0
 8016130:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016132:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016136:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 801613a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801613e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016142:	6812      	ldr	r2, [r2, #0]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	429a      	cmp	r2, r3
 8016148:	d10e      	bne.n	8016168 <arm_softmax_s8+0x1d98>
 801614a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801614e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016158:	d106      	bne.n	8016168 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 801615a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801615e:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016162:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016166:	6013      	str	r3, [r2, #0]
    return result;
 8016168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801616c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8016170:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016172:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016176:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	1a99      	subs	r1, r3, r2
 801617e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016182:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8016186:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801618a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	6013      	str	r3, [r2, #0]
 8016192:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016196:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801619a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801619c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161a0:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80161a4:	2300      	movs	r3, #0
 80161a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80161a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80161ac:	f04f 0300 	mov.w	r3, #0
 80161b0:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80161b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80161b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161bc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	0fdb      	lsrs	r3, r3, #31
 80161c4:	b2da      	uxtb	r2, r3
 80161c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	0fdb      	lsrs	r3, r3, #31
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	4053      	eors	r3, r2
 80161d6:	b2db      	uxtb	r3, r3
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d012      	beq.n	8016202 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 80161dc:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80161e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e4:	2100      	movs	r1, #0
 80161e6:	f1d2 0001 	rsbs	r0, r2, #1
 80161ea:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 80161ee:	eb61 0303 	sbc.w	r3, r1, r3
 80161f2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80161f6:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80161fa:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80161fe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016202:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016206:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	17da      	asrs	r2, r3, #31
 801620e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8016212:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8016216:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801621a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	17da      	asrs	r2, r3, #31
 8016222:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8016226:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 801622a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801622e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016232:	460b      	mov	r3, r1
 8016234:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8016238:	fb02 f203 	mul.w	r2, r2, r3
 801623c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8016240:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8016244:	e9c4 0100 	strd	r0, r1, [r4]
 8016248:	4601      	mov	r1, r0
 801624a:	fb01 f303 	mul.w	r3, r1, r3
 801624e:	4413      	add	r3, r2
 8016250:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8016254:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8016258:	fba2 1201 	umull	r1, r2, r2, r1
 801625c:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8016260:	460a      	mov	r2, r1
 8016262:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8016266:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 801626a:	4413      	add	r3, r2
 801626c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8016270:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8016274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016278:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 801627c:	1851      	adds	r1, r2, r1
 801627e:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8016282:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8016286:	414b      	adcs	r3, r1
 8016288:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 801628c:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8016290:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8016294:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016298:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	da0a      	bge.n	80162ba <arm_softmax_s8+0x1eea>
 80162a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80162a8:	1851      	adds	r1, r2, r1
 80162aa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80162ae:	f143 0300 	adc.w	r3, r3, #0
 80162b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80162b6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80162ba:	f04f 0000 	mov.w	r0, #0
 80162be:	f04f 0100 	mov.w	r1, #0
 80162c2:	0fd0      	lsrs	r0, r2, #31
 80162c4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80162c8:	17d9      	asrs	r1, r3, #31
 80162ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162ce:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80162d2:	4603      	mov	r3, r0
 80162d4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80162d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162da:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80162de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162e2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80162e6:	6812      	ldr	r2, [r2, #0]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	429a      	cmp	r2, r3
 80162ec:	d10e      	bne.n	801630c <arm_softmax_s8+0x1f3c>
 80162ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162f2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80162fc:	d106      	bne.n	801630c <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 80162fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016302:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8016306:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801630a:	6013      	str	r3, [r2, #0]
    return result;
 801630c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801631a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801631e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8016320:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016324:	4619      	mov	r1, r3
 8016326:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801632a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 801632e:	1e4b      	subs	r3, r1, #1
 8016330:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8016332:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016336:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 801633a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801633e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	009b      	lsls	r3, r3, #2
 8016346:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016348:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801634c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8016350:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016354:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016358:	6812      	ldr	r2, [r2, #0]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	429a      	cmp	r2, r3
 801635e:	dd02      	ble.n	8016366 <arm_softmax_s8+0x1f96>
 8016360:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016364:	e000      	b.n	8016368 <arm_softmax_s8+0x1f98>
 8016366:	2000      	movs	r0, #0
 8016368:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801636c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8016370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016374:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016378:	6812      	ldr	r2, [r2, #0]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	429a      	cmp	r2, r3
 801637e:	dd01      	ble.n	8016384 <arm_softmax_s8+0x1fb4>
 8016380:	2200      	movs	r2, #0
 8016382:	e001      	b.n	8016388 <arm_softmax_s8+0x1fb8>
 8016384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016388:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801638c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	ea02 0103 	and.w	r1, r2, r3
 8016396:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801639a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 801639e:	ea81 0300 	eor.w	r3, r1, r0
 80163a2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80163a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163a8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	425a      	negs	r2, r3
 80163b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163b4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	4293      	cmp	r3, r2
 80163bc:	da02      	bge.n	80163c4 <arm_softmax_s8+0x1ff4>
 80163be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80163c2:	e000      	b.n	80163c6 <arm_softmax_s8+0x1ff6>
 80163c4:	2000      	movs	r0, #0
 80163c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163ca:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	425a      	negs	r2, r3
 80163d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	4293      	cmp	r3, r2
 80163de:	da01      	bge.n	80163e4 <arm_softmax_s8+0x2014>
 80163e0:	2200      	movs	r2, #0
 80163e2:	e001      	b.n	80163e8 <arm_softmax_s8+0x2018>
 80163e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163ec:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	ea02 0103 	and.w	r1, r2, r3
 80163f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163fa:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80163fe:	ea81 0300 	eor.w	r3, r1, r0
 8016402:	6013      	str	r3, [r2, #0]
    return result;
 8016404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016408:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801640c:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801640e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016412:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8016416:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801641a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	440b      	add	r3, r1
 8016422:	6013      	str	r3, [r2, #0]
 8016424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016428:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 801642c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016430:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	6013      	str	r3, [r2, #0]
 8016438:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801643c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8016440:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016444:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801644c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016450:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8016454:	2300      	movs	r3, #0
 8016456:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801645c:	f04f 0300 	mov.w	r3, #0
 8016460:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8016464:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801646c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	0fdb      	lsrs	r3, r3, #31
 8016474:	b2da      	uxtb	r2, r3
 8016476:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801647a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	0fdb      	lsrs	r3, r3, #31
 8016482:	b2db      	uxtb	r3, r3
 8016484:	4053      	eors	r3, r2
 8016486:	b2db      	uxtb	r3, r3
 8016488:	2b00      	cmp	r3, #0
 801648a:	d012      	beq.n	80164b2 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 801648c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8016490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016494:	2100      	movs	r1, #0
 8016496:	f1d2 0001 	rsbs	r0, r2, #1
 801649a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 801649e:	eb61 0303 	sbc.w	r3, r1, r3
 80164a2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80164a6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80164aa:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80164ae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80164b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164b6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	17da      	asrs	r2, r3, #31
 80164be:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80164c2:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 80164c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164ca:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	17da      	asrs	r2, r3, #31
 80164d2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80164d6:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 80164da:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80164de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80164e2:	460b      	mov	r3, r1
 80164e4:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 80164e8:	fb02 f203 	mul.w	r2, r2, r3
 80164ec:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80164f0:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 80164f4:	e9c4 0100 	strd	r0, r1, [r4]
 80164f8:	4601      	mov	r1, r0
 80164fa:	fb01 f303 	mul.w	r3, r1, r3
 80164fe:	4413      	add	r3, r2
 8016500:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8016504:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8016508:	fba2 1201 	umull	r1, r2, r2, r1
 801650c:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8016510:	460a      	mov	r2, r1
 8016512:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 8016516:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 801651a:	4413      	add	r3, r2
 801651c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8016520:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8016524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016528:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 801652c:	1851      	adds	r1, r2, r1
 801652e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8016532:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8016536:	414b      	adcs	r3, r1
 8016538:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801653c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8016540:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8016544:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016548:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016550:	2b00      	cmp	r3, #0
 8016552:	da0a      	bge.n	801656a <arm_softmax_s8+0x219a>
 8016554:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016558:	1851      	adds	r1, r2, r1
 801655a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 801655e:	f143 0300 	adc.w	r3, r3, #0
 8016562:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8016566:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 801656a:	f04f 0000 	mov.w	r0, #0
 801656e:	f04f 0100 	mov.w	r1, #0
 8016572:	0fd0      	lsrs	r0, r2, #31
 8016574:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016578:	17d9      	asrs	r1, r3, #31
 801657a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801657e:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8016582:	4603      	mov	r3, r0
 8016584:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016586:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801658a:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 801658e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016592:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016596:	6812      	ldr	r2, [r2, #0]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	429a      	cmp	r2, r3
 801659c:	d10e      	bne.n	80165bc <arm_softmax_s8+0x21ec>
 801659e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165a2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80165ac:	d106      	bne.n	80165bc <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 80165ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165b2:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80165b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80165ba:	6013      	str	r3, [r2, #0]
    return result;
 80165bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165c0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80165c4:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80165c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165ca:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	1a99      	subs	r1, r3, r2
 80165d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165d6:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 80165da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	6013      	str	r3, [r2, #0]
 80165e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165ea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80165ee:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80165f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165f4:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80165f8:	2300      	movs	r3, #0
 80165fa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80165fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016600:	f04f 0300 	mov.w	r3, #0
 8016604:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8016608:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801660c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016610:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	0fdb      	lsrs	r3, r3, #31
 8016618:	b2da      	uxtb	r2, r3
 801661a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801661e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	0fdb      	lsrs	r3, r3, #31
 8016626:	b2db      	uxtb	r3, r3
 8016628:	4053      	eors	r3, r2
 801662a:	b2db      	uxtb	r3, r3
 801662c:	2b00      	cmp	r3, #0
 801662e:	d012      	beq.n	8016656 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8016630:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8016634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016638:	2100      	movs	r1, #0
 801663a:	f1d2 0001 	rsbs	r0, r2, #1
 801663e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8016642:	eb61 0303 	sbc.w	r3, r1, r3
 8016646:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801664a:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 801664e:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8016652:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801665a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	17da      	asrs	r2, r3, #31
 8016662:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8016666:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 801666a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801666e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	17da      	asrs	r2, r3, #31
 8016676:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 801667a:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 801667e:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8016682:	460b      	mov	r3, r1
 8016684:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8016688:	fb02 f203 	mul.w	r2, r2, r3
 801668c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8016690:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 8016694:	4601      	mov	r1, r0
 8016696:	fb01 f303 	mul.w	r3, r1, r3
 801669a:	4413      	add	r3, r2
 801669c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80166a0:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 80166a4:	fba2 1201 	umull	r1, r2, r2, r1
 80166a8:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 80166ac:	460a      	mov	r2, r1
 80166ae:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 80166b2:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 80166b6:	4413      	add	r3, r2
 80166b8:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 80166bc:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80166c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166c4:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 80166c8:	1851      	adds	r1, r2, r1
 80166ca:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80166ce:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 80166d2:	414b      	adcs	r3, r1
 80166d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80166d8:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 80166dc:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 80166e0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80166e4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80166e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	da0a      	bge.n	8016706 <arm_softmax_s8+0x2336>
 80166f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80166f4:	1851      	adds	r1, r2, r1
 80166f6:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80166fa:	f143 0300 	adc.w	r3, r3, #0
 80166fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8016702:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8016706:	f04f 0000 	mov.w	r0, #0
 801670a:	f04f 0100 	mov.w	r1, #0
 801670e:	0fd0      	lsrs	r0, r2, #31
 8016710:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016714:	17d9      	asrs	r1, r3, #31
 8016716:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801671a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 801671e:	4603      	mov	r3, r0
 8016720:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016726:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 801672a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801672e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8016732:	6812      	ldr	r2, [r2, #0]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	429a      	cmp	r2, r3
 8016738:	d10e      	bne.n	8016758 <arm_softmax_s8+0x2388>
 801673a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801673e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016748:	d106      	bne.n	8016758 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 801674a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801674e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8016752:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016756:	6013      	str	r3, [r2, #0]
    return result;
 8016758:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801675c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8016760:	681a      	ldr	r2, [r3, #0]
 8016762:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016766:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801676a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801676c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016770:	4619      	mov	r1, r3
 8016772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016776:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801677a:	1e4b      	subs	r3, r1, #1
 801677c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801677e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016782:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8016786:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801678a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	009b      	lsls	r3, r3, #2
 8016792:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016794:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016798:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801679c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167a0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80167a4:	6812      	ldr	r2, [r2, #0]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	dd02      	ble.n	80167b2 <arm_softmax_s8+0x23e2>
 80167ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80167b0:	e000      	b.n	80167b4 <arm_softmax_s8+0x23e4>
 80167b2:	2000      	movs	r0, #0
 80167b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167b8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80167bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167c0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80167c4:	6812      	ldr	r2, [r2, #0]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	429a      	cmp	r2, r3
 80167ca:	dd01      	ble.n	80167d0 <arm_softmax_s8+0x2400>
 80167cc:	2200      	movs	r2, #0
 80167ce:	e001      	b.n	80167d4 <arm_softmax_s8+0x2404>
 80167d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	ea02 0103 	and.w	r1, r2, r3
 80167e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167e6:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80167ea:	ea81 0300 	eor.w	r3, r1, r0
 80167ee:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80167f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167f4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	425a      	negs	r2, r3
 80167fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016800:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	4293      	cmp	r3, r2
 8016808:	da02      	bge.n	8016810 <arm_softmax_s8+0x2440>
 801680a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801680e:	e000      	b.n	8016812 <arm_softmax_s8+0x2442>
 8016810:	2000      	movs	r0, #0
 8016812:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016816:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	425a      	negs	r2, r3
 801681e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016822:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	4293      	cmp	r3, r2
 801682a:	da05      	bge.n	8016838 <arm_softmax_s8+0x2468>
 801682c:	2200      	movs	r2, #0
 801682e:	e005      	b.n	801683c <arm_softmax_s8+0x246c>
 8016830:	c3c3c3c4 	.word	0xc3c3c3c4
 8016834:	ffffffff 	.word	0xffffffff
 8016838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801683c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016840:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	ea02 0103 	and.w	r1, r2, r3
 801684a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801684e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8016852:	ea81 0300 	eor.w	r3, r1, r0
 8016856:	6013      	str	r3, [r2, #0]
    return result;
 8016858:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801685c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8016860:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016862:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016866:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801686a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801686e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	440b      	add	r3, r1
 8016876:	6013      	str	r3, [r2, #0]
 8016878:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801687c:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8016880:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016884:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801688c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016890:	4619      	mov	r1, r3
 8016892:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016896:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 801689a:	1e4b      	subs	r3, r1, #1
 801689c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801689e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168a2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80168a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168aa:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	005b      	lsls	r3, r3, #1
 80168b2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80168b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168b8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80168bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168c0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80168c4:	6812      	ldr	r2, [r2, #0]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	429a      	cmp	r2, r3
 80168ca:	dd02      	ble.n	80168d2 <arm_softmax_s8+0x2502>
 80168cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80168d0:	e000      	b.n	80168d4 <arm_softmax_s8+0x2504>
 80168d2:	2000      	movs	r0, #0
 80168d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168d8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80168dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168e0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80168e4:	6812      	ldr	r2, [r2, #0]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	429a      	cmp	r2, r3
 80168ea:	dd01      	ble.n	80168f0 <arm_softmax_s8+0x2520>
 80168ec:	2200      	movs	r2, #0
 80168ee:	e001      	b.n	80168f4 <arm_softmax_s8+0x2524>
 80168f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80168f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	ea02 0103 	and.w	r1, r2, r3
 8016902:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016906:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801690a:	ea81 0300 	eor.w	r3, r1, r0
 801690e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016910:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016914:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	425a      	negs	r2, r3
 801691c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016920:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	4293      	cmp	r3, r2
 8016928:	da02      	bge.n	8016930 <arm_softmax_s8+0x2560>
 801692a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801692e:	e000      	b.n	8016932 <arm_softmax_s8+0x2562>
 8016930:	2000      	movs	r0, #0
 8016932:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016936:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	425a      	negs	r2, r3
 801693e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016942:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4293      	cmp	r3, r2
 801694a:	da01      	bge.n	8016950 <arm_softmax_s8+0x2580>
 801694c:	2200      	movs	r2, #0
 801694e:	e001      	b.n	8016954 <arm_softmax_s8+0x2584>
 8016950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016954:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016958:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	ea02 0103 	and.w	r1, r2, r3
 8016962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016966:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801696a:	ea81 0300 	eor.w	r3, r1, r0
 801696e:	6013      	str	r3, [r2, #0]
    return result;
 8016970:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016974:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8016978:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 801697a:	bf00      	nop
 801697c:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 8016980:	2300      	movs	r3, #0
 8016982:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8016986:	f001 bd85 	b.w	8018494 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 801698a:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801698e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016992:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	4413      	add	r3, r2
 801699a:	f993 3000 	ldrsb.w	r3, [r3]
 801699e:	461a      	mov	r2, r3
 80169a0:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80169a4:	1ad3      	subs	r3, r2, r3
 80169a6:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 80169aa:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80169ae:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80169b2:	429a      	cmp	r2, r3
 80169b4:	f2c1 8562 	blt.w	801847c <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80169b8:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80169bc:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80169c0:	fb03 f202 	mul.w	r2, r3, r2
 80169c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169c8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80169cc:	601a      	str	r2, [r3, #0]
 80169ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169d2:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 80169d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169da:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80169e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169e6:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80169ea:	2300      	movs	r3, #0
 80169ec:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80169ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80169f2:	f04f 0300 	mov.w	r3, #0
 80169f6:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80169fa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80169fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a02:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	0fdb      	lsrs	r3, r3, #31
 8016a0a:	b2da      	uxtb	r2, r3
 8016a0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a10:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	0fdb      	lsrs	r3, r3, #31
 8016a18:	b2db      	uxtb	r3, r3
 8016a1a:	4053      	eors	r3, r2
 8016a1c:	b2db      	uxtb	r3, r3
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d012      	beq.n	8016a48 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 8016a22:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8016a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2a:	2100      	movs	r1, #0
 8016a2c:	f1d2 0001 	rsbs	r0, r2, #1
 8016a30:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8016a34:	eb61 0303 	sbc.w	r3, r1, r3
 8016a38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8016a3c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8016a40:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8016a44:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016a48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a4c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	17da      	asrs	r2, r3, #31
 8016a54:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8016a58:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8016a5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a60:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	17da      	asrs	r2, r3, #31
 8016a68:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8016a6c:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8016a70:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8016a74:	460b      	mov	r3, r1
 8016a76:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8016a7a:	fb02 f203 	mul.w	r2, r2, r3
 8016a7e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8016a82:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 8016a86:	4601      	mov	r1, r0
 8016a88:	fb01 f303 	mul.w	r3, r1, r3
 8016a8c:	4413      	add	r3, r2
 8016a8e:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8016a92:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8016a96:	fba2 1201 	umull	r1, r2, r2, r1
 8016a9a:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 8016a9e:	460a      	mov	r2, r1
 8016aa0:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 8016aa4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8016aa8:	4413      	add	r3, r2
 8016aaa:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8016aae:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8016ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ab6:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8016aba:	1851      	adds	r1, r2, r1
 8016abc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8016ac0:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8016ac4:	414b      	adcs	r3, r1
 8016ac6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8016aca:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8016ace:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8016ad2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016ad6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8016ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	da0a      	bge.n	8016af8 <arm_softmax_s8+0x2728>
 8016ae2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ae6:	1851      	adds	r1, r2, r1
 8016ae8:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8016aec:	f143 0300 	adc.w	r3, r3, #0
 8016af0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8016af4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016af8:	f04f 0000 	mov.w	r0, #0
 8016afc:	f04f 0100 	mov.w	r1, #0
 8016b00:	0fd0      	lsrs	r0, r2, #31
 8016b02:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016b06:	17d9      	asrs	r1, r3, #31
 8016b08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b0c:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8016b10:	4603      	mov	r3, r0
 8016b12:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016b14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b18:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8016b1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b20:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8016b24:	6812      	ldr	r2, [r2, #0]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d10e      	bne.n	8016b4a <arm_softmax_s8+0x277a>
 8016b2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b30:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016b3a:	d106      	bne.n	8016b4a <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 8016b3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b40:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8016b44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016b48:	6013      	str	r3, [r2, #0]
    return result;
 8016b4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b4e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8016b52:	681a      	ldr	r2, [r3, #0]
 8016b54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b58:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016b5c:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8016b5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b62:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8016b66:	2300      	movs	r3, #0
 8016b68:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8016b6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b6e:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8016b72:	2318      	movs	r3, #24
 8016b74:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8016b76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b7a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8016b7e:	2201      	movs	r2, #1
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	fa02 f303 	lsl.w	r3, r2, r3
 8016b86:	1e5a      	subs	r2, r3, #1
 8016b88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b8c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	ea02 0003 	and.w	r0, r2, r3
 8016b96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b9a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8016b9e:	2201      	movs	r2, #1
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	fa02 f103 	lsl.w	r1, r2, r3
 8016ba6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016baa:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8016bae:	1a43      	subs	r3, r0, r1
 8016bb0:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 8016bb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bb6:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 8016bba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bbe:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8016bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bc6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016bca:	6812      	ldr	r2, [r2, #0]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	1ad3      	subs	r3, r2, r3
 8016bd0:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8016bd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bd6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	0159      	lsls	r1, r3, #5
 8016bde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016be2:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8016be6:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 8016bea:	6013      	str	r3, [r2, #0]
 8016bec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bf0:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8016bf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bf8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	6013      	str	r3, [r2, #0]
 8016c00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c04:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8016c08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c0c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016c14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c18:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016c24:	f04f 0300 	mov.w	r3, #0
 8016c28:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8016c2c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016c30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c34:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	0fdb      	lsrs	r3, r3, #31
 8016c3c:	b2da      	uxtb	r2, r3
 8016c3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c42:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	0fdb      	lsrs	r3, r3, #31
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	4053      	eors	r3, r2
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d012      	beq.n	8016c7a <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8016c54:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5c:	2100      	movs	r1, #0
 8016c5e:	f1d2 0001 	rsbs	r0, r2, #1
 8016c62:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8016c66:	eb61 0303 	sbc.w	r3, r1, r3
 8016c6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8016c6e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8016c72:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8016c76:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016c7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c7e:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	17da      	asrs	r2, r3, #31
 8016c86:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8016c8a:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8016c8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c92:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	17da      	asrs	r2, r3, #31
 8016c9a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8016c9e:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8016ca2:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8016ca6:	460b      	mov	r3, r1
 8016ca8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8016cac:	fb02 f203 	mul.w	r2, r2, r3
 8016cb0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8016cb4:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 8016cb8:	4601      	mov	r1, r0
 8016cba:	fb01 f303 	mul.w	r3, r1, r3
 8016cbe:	4413      	add	r3, r2
 8016cc0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8016cc4:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8016cc8:	fba2 1201 	umull	r1, r2, r2, r1
 8016ccc:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8016cd0:	460a      	mov	r2, r1
 8016cd2:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8016cd6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8016cda:	4413      	add	r3, r2
 8016cdc:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8016ce0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce8:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 8016cec:	1851      	adds	r1, r2, r1
 8016cee:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8016cf2:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8016cf6:	414b      	adcs	r3, r1
 8016cf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8016cfc:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8016d00:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8016d04:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016d08:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	da0a      	bge.n	8016d2a <arm_softmax_s8+0x295a>
 8016d14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d18:	1851      	adds	r1, r2, r1
 8016d1a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8016d1e:	f143 0300 	adc.w	r3, r3, #0
 8016d22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8016d26:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8016d2a:	f04f 0000 	mov.w	r0, #0
 8016d2e:	f04f 0100 	mov.w	r1, #0
 8016d32:	0fd0      	lsrs	r0, r2, #31
 8016d34:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016d38:	17d9      	asrs	r1, r3, #31
 8016d3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d3e:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016d42:	4603      	mov	r3, r0
 8016d44:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016d46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d4a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8016d4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d52:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016d56:	6812      	ldr	r2, [r2, #0]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d10e      	bne.n	8016d7c <arm_softmax_s8+0x29ac>
 8016d5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d62:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016d6c:	d106      	bne.n	8016d7c <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 8016d6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d72:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016d76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016d7a:	6013      	str	r3, [r2, #0]
    return result;
 8016d7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d80:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8016d84:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8016d86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d8a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016d8e:	601a      	str	r2, [r3, #0]
 8016d90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d94:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8016d98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d9c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	6013      	str	r3, [r2, #0]
 8016da4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016da8:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8016dac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016db0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016db8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dbc:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016dc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016dc8:	f04f 0300 	mov.w	r3, #0
 8016dcc:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8016dd0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016dd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dd8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	0fdb      	lsrs	r3, r3, #31
 8016de0:	b2da      	uxtb	r2, r3
 8016de2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016de6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	0fdb      	lsrs	r3, r3, #31
 8016dee:	b2db      	uxtb	r3, r3
 8016df0:	4053      	eors	r3, r2
 8016df2:	b2db      	uxtb	r3, r3
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d012      	beq.n	8016e1e <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8016df8:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e00:	2100      	movs	r1, #0
 8016e02:	f1d2 0001 	rsbs	r0, r2, #1
 8016e06:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8016e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8016e0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8016e12:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8016e16:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8016e1a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016e1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e22:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	17da      	asrs	r2, r3, #31
 8016e2a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8016e2e:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8016e32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e36:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	17da      	asrs	r2, r3, #31
 8016e3e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8016e42:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8016e46:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8016e4a:	460b      	mov	r3, r1
 8016e4c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8016e50:	fb02 f203 	mul.w	r2, r2, r3
 8016e54:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8016e58:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8016e5c:	4601      	mov	r1, r0
 8016e5e:	fb01 f303 	mul.w	r3, r1, r3
 8016e62:	4413      	add	r3, r2
 8016e64:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8016e68:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 8016e6c:	fba2 1201 	umull	r1, r2, r2, r1
 8016e70:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8016e74:	460a      	mov	r2, r1
 8016e76:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 8016e7a:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8016e7e:	4413      	add	r3, r2
 8016e80:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8016e84:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e8c:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8016e90:	1851      	adds	r1, r2, r1
 8016e92:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8016e96:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8016e9a:	414b      	adcs	r3, r1
 8016e9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8016ea0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8016ea4:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8016ea8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016eac:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	da0a      	bge.n	8016ece <arm_softmax_s8+0x2afe>
 8016eb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ebc:	1851      	adds	r1, r2, r1
 8016ebe:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8016ec2:	f143 0300 	adc.w	r3, r3, #0
 8016ec6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8016eca:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8016ece:	f04f 0000 	mov.w	r0, #0
 8016ed2:	f04f 0100 	mov.w	r1, #0
 8016ed6:	0fd0      	lsrs	r0, r2, #31
 8016ed8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016edc:	17d9      	asrs	r1, r3, #31
 8016ede:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ee2:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016eea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016eee:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8016ef2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ef6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016efa:	6812      	ldr	r2, [r2, #0]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d10e      	bne.n	8016f20 <arm_softmax_s8+0x2b50>
 8016f02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f06:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016f10:	d106      	bne.n	8016f20 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8016f12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f16:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8016f1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016f1e:	6013      	str	r3, [r2, #0]
    return result;
 8016f20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f24:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8016f28:	681a      	ldr	r2, [r3, #0]
 8016f2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f2e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8016f32:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8016f34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f38:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016f40:	2104      	movs	r1, #4
 8016f42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f46:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8016f4a:	1e4b      	subs	r3, r1, #1
 8016f4c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8016f4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f52:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8016f56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f5a:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8016f5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f62:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8016f66:	6812      	ldr	r2, [r2, #0]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	4013      	ands	r3, r2
 8016f6c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8016f6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f72:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8016f76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f7a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	109b      	asrs	r3, r3, #2
 8016f82:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8016f84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f88:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8016f8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f90:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	105b      	asrs	r3, r3, #1
 8016f98:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8016f9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f9e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	da0a      	bge.n	8016fbe <arm_softmax_s8+0x2bee>
        threshold++;
 8016fa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fac:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8016fb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fb4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	3301      	adds	r3, #1
 8016fbc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8016fbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fc2:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8016fc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fca:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8016fce:	6812      	ldr	r2, [r2, #0]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	429a      	cmp	r2, r3
 8016fd4:	dd0a      	ble.n	8016fec <arm_softmax_s8+0x2c1c>
        result++;
 8016fd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fda:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8016fde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fe2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	3301      	adds	r3, #1
 8016fea:	6013      	str	r3, [r2, #0]
    return result;
 8016fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ff0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8016ff4:	681c      	ldr	r4, [r3, #0]
 8016ff6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ffa:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8016ffe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017002:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	6013      	str	r3, [r2, #0]
 801700a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801700e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8017012:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017016:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801701e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017022:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017026:	2300      	movs	r3, #0
 8017028:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801702a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801702e:	f04f 0300 	mov.w	r3, #0
 8017032:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017036:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801703a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801703e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	0fdb      	lsrs	r3, r3, #31
 8017046:	b2da      	uxtb	r2, r3
 8017048:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801704c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	0fdb      	lsrs	r3, r3, #31
 8017054:	b2db      	uxtb	r3, r3
 8017056:	4053      	eors	r3, r2
 8017058:	b2db      	uxtb	r3, r3
 801705a:	2b00      	cmp	r3, #0
 801705c:	d012      	beq.n	8017084 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 801705e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017066:	2100      	movs	r1, #0
 8017068:	f1d2 0001 	rsbs	r0, r2, #1
 801706c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8017070:	eb61 0303 	sbc.w	r3, r1, r3
 8017074:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017078:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 801707c:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017080:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8017084:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017088:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	17da      	asrs	r2, r3, #31
 8017090:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8017094:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8017098:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801709c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	17da      	asrs	r2, r3, #31
 80170a4:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80170a8:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 80170ac:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80170b0:	460b      	mov	r3, r1
 80170b2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80170b6:	fb02 f203 	mul.w	r2, r2, r3
 80170ba:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80170be:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 80170c2:	4601      	mov	r1, r0
 80170c4:	fb01 f303 	mul.w	r3, r1, r3
 80170c8:	4413      	add	r3, r2
 80170ca:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 80170ce:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 80170d2:	fba2 1201 	umull	r1, r2, r2, r1
 80170d6:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 80170da:	460a      	mov	r2, r1
 80170dc:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 80170e0:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 80170e4:	4413      	add	r3, r2
 80170e6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80170ea:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80170ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170f2:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 80170f6:	1851      	adds	r1, r2, r1
 80170f8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80170fc:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8017100:	414b      	adcs	r3, r1
 8017102:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8017106:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801710a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801710e:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8017112:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801711a:	2b00      	cmp	r3, #0
 801711c:	da0a      	bge.n	8017134 <arm_softmax_s8+0x2d64>
 801711e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017122:	1851      	adds	r1, r2, r1
 8017124:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8017128:	f143 0300 	adc.w	r3, r3, #0
 801712c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8017130:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8017134:	f04f 0000 	mov.w	r0, #0
 8017138:	f04f 0100 	mov.w	r1, #0
 801713c:	0fd0      	lsrs	r0, r2, #31
 801713e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017142:	17d9      	asrs	r1, r3, #31
 8017144:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017148:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801714c:	4603      	mov	r3, r0
 801714e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017150:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017154:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8017158:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801715c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017160:	6812      	ldr	r2, [r2, #0]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	429a      	cmp	r2, r3
 8017166:	d10e      	bne.n	8017186 <arm_softmax_s8+0x2db6>
 8017168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801716c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017176:	d106      	bne.n	8017186 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8017178:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801717c:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017180:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017184:	6013      	str	r3, [r2, #0]
    return result;
 8017186:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801718a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801718e:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8017190:	18e2      	adds	r2, r4, r3
 8017192:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017196:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801719a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801719c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171a0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80171a4:	2300      	movs	r3, #0
 80171a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80171a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80171ac:	f04f 0300 	mov.w	r3, #0
 80171b0:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80171b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80171b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171bc:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	0fdb      	lsrs	r3, r3, #31
 80171c4:	b2da      	uxtb	r2, r3
 80171c6:	2300      	movs	r3, #0
 80171c8:	4053      	eors	r3, r2
 80171ca:	b2db      	uxtb	r3, r3
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d012      	beq.n	80171f6 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 80171d0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80171d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d8:	2100      	movs	r1, #0
 80171da:	f1d2 0001 	rsbs	r0, r2, #1
 80171de:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80171e2:	eb61 0303 	sbc.w	r3, r1, r3
 80171e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80171ea:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80171ee:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80171f2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80171f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171fa:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	17da      	asrs	r2, r3, #31
 8017202:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8017206:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 801720a:	a3c9      	add	r3, pc, #804	; (adr r3, 8017530 <arm_softmax_s8+0x3160>)
 801720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017210:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8017214:	fb02 f001 	mul.w	r0, r2, r1
 8017218:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 801721c:	fb01 f103 	mul.w	r1, r1, r3
 8017220:	4401      	add	r1, r0
 8017222:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8017226:	fba0 2302 	umull	r2, r3, r0, r2
 801722a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 801722e:	4613      	mov	r3, r2
 8017230:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8017234:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8017238:	18cb      	adds	r3, r1, r3
 801723a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 801723e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8017242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017246:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 801724a:	1851      	adds	r1, r2, r1
 801724c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8017250:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8017254:	414b      	adcs	r3, r1
 8017256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801725a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801725e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8017262:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017266:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801726e:	2b00      	cmp	r3, #0
 8017270:	da0a      	bge.n	8017288 <arm_softmax_s8+0x2eb8>
 8017272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017276:	1851      	adds	r1, r2, r1
 8017278:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801727c:	f143 0300 	adc.w	r3, r3, #0
 8017280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8017284:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8017288:	f04f 0000 	mov.w	r0, #0
 801728c:	f04f 0100 	mov.w	r1, #0
 8017290:	0fd0      	lsrs	r0, r2, #31
 8017292:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017296:	17d9      	asrs	r1, r3, #31
 8017298:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801729c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80172a0:	4603      	mov	r3, r0
 80172a2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80172a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172a8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80172ac:	681a      	ldr	r2, [r3, #0]
 80172ae:	4b9e      	ldr	r3, [pc, #632]	; (8017528 <arm_softmax_s8+0x3158>)
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d10e      	bne.n	80172d2 <arm_softmax_s8+0x2f02>
 80172b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172b8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80172c2:	d106      	bne.n	80172d2 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 80172c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172c8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80172cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80172d0:	6013      	str	r3, [r2, #0]
    return result;
 80172d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172d6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80172da:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80172dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172e0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	441a      	add	r2, r3
 80172e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172ec:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80172f0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80172f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172f6:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80172fa:	2300      	movs	r3, #0
 80172fc:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80172fe:	2102      	movs	r1, #2
 8017300:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017304:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8017308:	1e4b      	subs	r3, r1, #1
 801730a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801730c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017310:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8017314:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017318:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 801731c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017320:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8017324:	6812      	ldr	r2, [r2, #0]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	4013      	ands	r3, r2
 801732a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801732c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017330:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8017334:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017338:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	105b      	asrs	r3, r3, #1
 8017340:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8017342:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017346:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801734a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801734e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	105b      	asrs	r3, r3, #1
 8017356:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017358:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801735c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	2b00      	cmp	r3, #0
 8017364:	da0a      	bge.n	801737c <arm_softmax_s8+0x2fac>
        threshold++;
 8017366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801736a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801736e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017372:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	3301      	adds	r3, #1
 801737a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801737c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017380:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8017384:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017388:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801738c:	6812      	ldr	r2, [r2, #0]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	429a      	cmp	r2, r3
 8017392:	dd0a      	ble.n	80173aa <arm_softmax_s8+0x2fda>
        result++;
 8017394:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017398:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 801739c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173a0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	3301      	adds	r3, #1
 80173a8:	6013      	str	r3, [r2, #0]
    return result;
 80173aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173ae:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80173b2:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80173b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173b8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	441a      	add	r2, r3
 80173c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173c4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80173c8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80173ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173ce:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 80173d2:	2300      	movs	r3, #0
 80173d4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80173d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80173da:	f04f 0300 	mov.w	r3, #0
 80173de:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 80173e2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80173e6:	2200      	movs	r2, #0
 80173e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173ec:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	0fdb      	lsrs	r3, r3, #31
 80173f4:	b2db      	uxtb	r3, r3
 80173f6:	4053      	eors	r3, r2
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d012      	beq.n	8017424 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 80173fe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017406:	2100      	movs	r1, #0
 8017408:	f1d2 0001 	rsbs	r0, r2, #1
 801740c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8017410:	eb61 0303 	sbc.w	r3, r1, r3
 8017414:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8017418:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 801741c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8017420:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017424:	a13e      	add	r1, pc, #248	; (adr r1, 8017520 <arm_softmax_s8+0x3150>)
 8017426:	e9d1 0100 	ldrd	r0, r1, [r1]
 801742a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801742e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	17da      	asrs	r2, r3, #31
 8017436:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 801743a:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 801743e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8017442:	fb03 f201 	mul.w	r2, r3, r1
 8017446:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 801744a:	fb00 f303 	mul.w	r3, r0, r3
 801744e:	4413      	add	r3, r2
 8017450:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8017454:	fba0 1202 	umull	r1, r2, r0, r2
 8017458:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 801745c:	460a      	mov	r2, r1
 801745e:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8017462:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8017466:	4413      	add	r3, r2
 8017468:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 801746c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017474:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8017478:	1851      	adds	r1, r2, r1
 801747a:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 801747e:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 8017482:	414b      	adcs	r3, r1
 8017484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017488:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 801748c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8017490:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017494:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801749c:	2b00      	cmp	r3, #0
 801749e:	da0a      	bge.n	80174b6 <arm_softmax_s8+0x30e6>
 80174a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80174a4:	1851      	adds	r1, r2, r1
 80174a6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80174aa:	f143 0300 	adc.w	r3, r3, #0
 80174ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80174b2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80174b6:	f04f 0000 	mov.w	r0, #0
 80174ba:	f04f 0100 	mov.w	r1, #0
 80174be:	0fd0      	lsrs	r0, r2, #31
 80174c0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80174c4:	17d9      	asrs	r1, r3, #31
 80174c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174ca:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 80174ce:	4603      	mov	r3, r0
 80174d0:	6013      	str	r3, [r2, #0]
    return result;
 80174d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174d6:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80174da:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 80174dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174e0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80174e4:	4b11      	ldr	r3, [pc, #68]	; (801752c <arm_softmax_s8+0x315c>)
 80174e6:	440b      	add	r3, r1
 80174e8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 80174ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174ee:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80174f2:	6819      	ldr	r1, [r3, #0]
 80174f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174f8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80174fc:	1c4b      	adds	r3, r1, #1
 80174fe:	6013      	str	r3, [r2, #0]
 8017500:	2301      	movs	r3, #1
 8017502:	fa03 f201 	lsl.w	r2, r3, r1
 8017506:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801750a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	4013      	ands	r3, r2
 8017512:	2b00      	cmp	r3, #0
 8017514:	d010      	beq.n	8017538 <arm_softmax_s8+0x3168>
 8017516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801751a:	e00e      	b.n	801753a <arm_softmax_s8+0x316a>
 801751c:	f3af 8000 	nop.w
 8017520:	70f5a894 	.word	0x70f5a894
 8017524:	00000000 	.word	0x00000000
 8017528:	2aaaaaab 	.word	0x2aaaaaab
 801752c:	70f5a894 	.word	0x70f5a894
 8017530:	2aaaaaab 	.word	0x2aaaaaab
 8017534:	00000000 	.word	0x00000000
 8017538:	2200      	movs	r2, #0
 801753a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801753e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017542:	601a      	str	r2, [r3, #0]
 8017544:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017548:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 801754c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017550:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017558:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801755c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8017560:	2300      	movs	r3, #0
 8017562:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017568:	f04f 0300 	mov.w	r3, #0
 801756c:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8017570:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017574:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017578:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	0fdb      	lsrs	r3, r3, #31
 8017580:	b2da      	uxtb	r2, r3
 8017582:	2300      	movs	r3, #0
 8017584:	4053      	eors	r3, r2
 8017586:	b2db      	uxtb	r3, r3
 8017588:	2b00      	cmp	r3, #0
 801758a:	d012      	beq.n	80175b2 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 801758c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8017590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017594:	2100      	movs	r1, #0
 8017596:	f1d2 0001 	rsbs	r0, r2, #1
 801759a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 801759e:	eb61 0303 	sbc.w	r3, r1, r3
 80175a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80175a6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80175aa:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80175ae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80175b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175b6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	17da      	asrs	r2, r3, #31
 80175be:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 80175c2:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 80175c6:	a3c4      	add	r3, pc, #784	; (adr r3, 80178d8 <arm_softmax_s8+0x3508>)
 80175c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175cc:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 80175d0:	fb02 f001 	mul.w	r0, r2, r1
 80175d4:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80175d8:	fb01 f103 	mul.w	r1, r1, r3
 80175dc:	4401      	add	r1, r0
 80175de:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 80175e2:	fba0 2302 	umull	r2, r3, r0, r2
 80175e6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80175ea:	4613      	mov	r3, r2
 80175ec:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80175f0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80175f4:	18cb      	adds	r3, r1, r3
 80175f6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80175fa:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80175fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017602:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8017606:	1851      	adds	r1, r2, r1
 8017608:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801760c:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8017610:	414b      	adcs	r3, r1
 8017612:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017616:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 801761a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 801761e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017622:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8017626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762a:	2b00      	cmp	r3, #0
 801762c:	da0a      	bge.n	8017644 <arm_softmax_s8+0x3274>
 801762e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017632:	1851      	adds	r1, r2, r1
 8017634:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8017638:	f143 0300 	adc.w	r3, r3, #0
 801763c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017640:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8017644:	f04f 0000 	mov.w	r0, #0
 8017648:	f04f 0100 	mov.w	r1, #0
 801764c:	0fd0      	lsrs	r0, r2, #31
 801764e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017652:	17d9      	asrs	r1, r3, #31
 8017654:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017658:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 801765c:	4603      	mov	r3, r0
 801765e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017660:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017664:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	4b99      	ldr	r3, [pc, #612]	; (80178d0 <arm_softmax_s8+0x3500>)
 801766c:	429a      	cmp	r2, r3
 801766e:	d10e      	bne.n	801768e <arm_softmax_s8+0x32be>
 8017670:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017674:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801767e:	d106      	bne.n	801768e <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8017680:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017684:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8017688:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801768c:	6013      	str	r3, [r2, #0]
    return result;
 801768e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017692:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8017696:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8017698:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801769c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	ea02 0003 	and.w	r0, r2, r3
 80176a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176aa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	43da      	mvns	r2, r3
 80176b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176b6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	ea02 0103 	and.w	r1, r2, r3
 80176c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176c4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80176c8:	ea80 0301 	eor.w	r3, r0, r1
 80176cc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80176ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176d2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80176d6:	6819      	ldr	r1, [r3, #0]
 80176d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176dc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80176e0:	1c4b      	adds	r3, r1, #1
 80176e2:	6013      	str	r3, [r2, #0]
 80176e4:	2301      	movs	r3, #1
 80176e6:	fa03 f201 	lsl.w	r2, r3, r1
 80176ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176ee:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	4013      	ands	r3, r2
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d002      	beq.n	8017700 <arm_softmax_s8+0x3330>
 80176fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80176fe:	e000      	b.n	8017702 <arm_softmax_s8+0x3332>
 8017700:	2200      	movs	r2, #0
 8017702:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017706:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801770a:	601a      	str	r2, [r3, #0]
 801770c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017710:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8017714:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017718:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017720:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017724:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8017728:	2300      	movs	r3, #0
 801772a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801772c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017730:	f04f 0300 	mov.w	r3, #0
 8017734:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8017738:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801773c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017740:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	0fdb      	lsrs	r3, r3, #31
 8017748:	b2da      	uxtb	r2, r3
 801774a:	2300      	movs	r3, #0
 801774c:	4053      	eors	r3, r2
 801774e:	b2db      	uxtb	r3, r3
 8017750:	2b00      	cmp	r3, #0
 8017752:	d012      	beq.n	801777a <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 8017754:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8017758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801775c:	2100      	movs	r1, #0
 801775e:	f1d2 0001 	rsbs	r0, r2, #1
 8017762:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8017766:	eb61 0303 	sbc.w	r3, r1, r3
 801776a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801776e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8017772:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8017776:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801777a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801777e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	17da      	asrs	r2, r3, #31
 8017786:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 801778a:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 801778e:	a34e      	add	r3, pc, #312	; (adr r3, 80178c8 <arm_softmax_s8+0x34f8>)
 8017790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017794:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8017798:	fb02 f001 	mul.w	r0, r2, r1
 801779c:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 80177a0:	fb01 f103 	mul.w	r1, r1, r3
 80177a4:	4401      	add	r1, r0
 80177a6:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 80177aa:	fba0 2302 	umull	r2, r3, r0, r2
 80177ae:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80177b2:	4613      	mov	r3, r2
 80177b4:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80177b8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80177bc:	18cb      	adds	r3, r1, r3
 80177be:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80177c2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80177c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ca:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 80177ce:	1851      	adds	r1, r2, r1
 80177d0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80177d4:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 80177d8:	414b      	adcs	r3, r1
 80177da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80177de:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80177e2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80177e6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80177ea:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80177ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	da0a      	bge.n	801780c <arm_softmax_s8+0x343c>
 80177f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80177fa:	1851      	adds	r1, r2, r1
 80177fc:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8017800:	f143 0300 	adc.w	r3, r3, #0
 8017804:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017808:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801780c:	f04f 0000 	mov.w	r0, #0
 8017810:	f04f 0100 	mov.w	r1, #0
 8017814:	0fd0      	lsrs	r0, r2, #31
 8017816:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801781a:	17d9      	asrs	r1, r3, #31
 801781c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017820:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8017824:	4603      	mov	r3, r0
 8017826:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017828:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801782c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8017830:	681a      	ldr	r2, [r3, #0]
 8017832:	4b28      	ldr	r3, [pc, #160]	; (80178d4 <arm_softmax_s8+0x3504>)
 8017834:	429a      	cmp	r2, r3
 8017836:	d10e      	bne.n	8017856 <arm_softmax_s8+0x3486>
 8017838:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801783c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017846:	d106      	bne.n	8017856 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8017848:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801784c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8017850:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017854:	6013      	str	r3, [r2, #0]
    return result;
 8017856:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801785a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801785e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8017860:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017864:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	ea02 0003 	and.w	r0, r2, r3
 801786e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017872:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	43da      	mvns	r2, r3
 801787a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801787e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	ea02 0103 	and.w	r1, r2, r3
 8017888:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801788c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017890:	ea80 0301 	eor.w	r3, r0, r1
 8017894:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 8017896:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801789a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801789e:	6819      	ldr	r1, [r3, #0]
 80178a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178a4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80178a8:	1c4b      	adds	r3, r1, #1
 80178aa:	6013      	str	r3, [r2, #0]
 80178ac:	2301      	movs	r3, #1
 80178ae:	fa03 f201 	lsl.w	r2, r3, r1
 80178b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178b6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	4013      	ands	r3, r2
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d00e      	beq.n	80178e0 <arm_softmax_s8+0x3510>
 80178c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178c6:	e00c      	b.n	80178e2 <arm_softmax_s8+0x3512>
 80178c8:	4da2cbf2 	.word	0x4da2cbf2
 80178cc:	00000000 	.word	0x00000000
 80178d0:	63afbe7b 	.word	0x63afbe7b
 80178d4:	4da2cbf2 	.word	0x4da2cbf2
 80178d8:	63afbe7b 	.word	0x63afbe7b
 80178dc:	00000000 	.word	0x00000000
 80178e0:	2200      	movs	r2, #0
 80178e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178e6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80178ea:	601a      	str	r2, [r3, #0]
 80178ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178f0:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80178f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178f8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017900:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017904:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8017908:	2300      	movs	r3, #0
 801790a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801790c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017910:	f04f 0300 	mov.w	r3, #0
 8017914:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8017918:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801791c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017920:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	0fdb      	lsrs	r3, r3, #31
 8017928:	b2da      	uxtb	r2, r3
 801792a:	2300      	movs	r3, #0
 801792c:	4053      	eors	r3, r2
 801792e:	b2db      	uxtb	r3, r3
 8017930:	2b00      	cmp	r3, #0
 8017932:	d012      	beq.n	801795a <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8017934:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8017938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801793c:	2100      	movs	r1, #0
 801793e:	f1d2 0001 	rsbs	r0, r2, #1
 8017942:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8017946:	eb61 0303 	sbc.w	r3, r1, r3
 801794a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801794e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8017952:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8017956:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801795a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801795e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	17da      	asrs	r2, r3, #31
 8017966:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 801796a:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 801796e:	a3c0      	add	r3, pc, #768	; (adr r3, 8017c70 <arm_softmax_s8+0x38a0>)
 8017970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017974:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8017978:	fb02 f001 	mul.w	r0, r2, r1
 801797c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8017980:	fb01 f103 	mul.w	r1, r1, r3
 8017984:	4401      	add	r1, r0
 8017986:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 801798a:	fba0 2302 	umull	r2, r3, r0, r2
 801798e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8017992:	4613      	mov	r3, r2
 8017994:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8017998:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801799c:	18cb      	adds	r3, r1, r3
 801799e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80179a2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80179a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179aa:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 80179ae:	1851      	adds	r1, r2, r1
 80179b0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80179b4:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 80179b8:	414b      	adcs	r3, r1
 80179ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80179be:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80179c2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80179c6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80179ca:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80179ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	da08      	bge.n	80179e8 <arm_softmax_s8+0x3618>
 80179d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80179da:	1851      	adds	r1, r2, r1
 80179dc:	67b9      	str	r1, [r7, #120]	; 0x78
 80179de:	f143 0300 	adc.w	r3, r3, #0
 80179e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80179e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80179e8:	f04f 0000 	mov.w	r0, #0
 80179ec:	f04f 0100 	mov.w	r1, #0
 80179f0:	0fd0      	lsrs	r0, r2, #31
 80179f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80179f6:	17d9      	asrs	r1, r3, #31
 80179f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179fc:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8017a00:	4603      	mov	r3, r0
 8017a02:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017a04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a08:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017a0c:	681a      	ldr	r2, [r3, #0]
 8017a0e:	4b96      	ldr	r3, [pc, #600]	; (8017c68 <arm_softmax_s8+0x3898>)
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d10e      	bne.n	8017a32 <arm_softmax_s8+0x3662>
 8017a14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a18:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017a22:	d106      	bne.n	8017a32 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8017a24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a28:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8017a2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017a30:	6013      	str	r3, [r2, #0]
    return result;
 8017a32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a36:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8017a3a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8017a3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a40:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	ea02 0003 	and.w	r0, r2, r3
 8017a4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a4e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	43da      	mvns	r2, r3
 8017a56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a5a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	ea02 0103 	and.w	r1, r2, r3
 8017a64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a68:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017a6c:	ea80 0301 	eor.w	r3, r0, r1
 8017a70:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8017a72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a76:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017a7a:	6819      	ldr	r1, [r3, #0]
 8017a7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a80:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017a84:	1c4b      	adds	r3, r1, #1
 8017a86:	6013      	str	r3, [r2, #0]
 8017a88:	2301      	movs	r3, #1
 8017a8a:	fa03 f201 	lsl.w	r2, r3, r1
 8017a8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a92:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	4013      	ands	r3, r2
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d002      	beq.n	8017aa4 <arm_softmax_s8+0x36d4>
 8017a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017aa2:	e000      	b.n	8017aa6 <arm_softmax_s8+0x36d6>
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017aaa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017aae:	601a      	str	r2, [r3, #0]
 8017ab0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ab4:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8017ab8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017abc:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017ac4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ac8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017acc:	2300      	movs	r3, #0
 8017ace:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017ad4:	f04f 0300 	mov.w	r3, #0
 8017ad8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017adc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017ae0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ae4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	0fdb      	lsrs	r3, r3, #31
 8017aec:	b2da      	uxtb	r2, r3
 8017aee:	2300      	movs	r3, #0
 8017af0:	4053      	eors	r3, r2
 8017af2:	b2db      	uxtb	r3, r3
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d010      	beq.n	8017b1a <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8017af8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b00:	2100      	movs	r1, #0
 8017b02:	f1d2 0001 	rsbs	r0, r2, #1
 8017b06:	6738      	str	r0, [r7, #112]	; 0x70
 8017b08:	eb61 0303 	sbc.w	r3, r1, r3
 8017b0c:	677b      	str	r3, [r7, #116]	; 0x74
 8017b0e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8017b12:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017b16:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017b1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b1e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	17da      	asrs	r2, r3, #31
 8017b26:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8017b2a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8017b2e:	a34c      	add	r3, pc, #304	; (adr r3, 8017c60 <arm_softmax_s8+0x3890>)
 8017b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b34:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8017b38:	fb02 f001 	mul.w	r0, r2, r1
 8017b3c:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8017b40:	fb01 f103 	mul.w	r1, r1, r3
 8017b44:	4401      	add	r1, r0
 8017b46:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8017b4a:	fba0 2302 	umull	r2, r3, r0, r2
 8017b4e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8017b52:	4613      	mov	r3, r2
 8017b54:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8017b58:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8017b5c:	18cb      	adds	r3, r1, r3
 8017b5e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8017b62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b6a:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 8017b6e:	1851      	adds	r1, r2, r1
 8017b70:	66b9      	str	r1, [r7, #104]	; 0x68
 8017b72:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8017b76:	414b      	adcs	r3, r1
 8017b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017b7a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8017b7e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017b82:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017b86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	da08      	bge.n	8017ba4 <arm_softmax_s8+0x37d4>
 8017b92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017b96:	1851      	adds	r1, r2, r1
 8017b98:	6639      	str	r1, [r7, #96]	; 0x60
 8017b9a:	f143 0300 	adc.w	r3, r3, #0
 8017b9e:	667b      	str	r3, [r7, #100]	; 0x64
 8017ba0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8017ba4:	f04f 0000 	mov.w	r0, #0
 8017ba8:	f04f 0100 	mov.w	r1, #0
 8017bac:	0fd0      	lsrs	r0, r2, #31
 8017bae:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017bb2:	17d9      	asrs	r1, r3, #31
 8017bb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bb8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017bc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bc4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017bc8:	681a      	ldr	r2, [r3, #0]
 8017bca:	4b28      	ldr	r3, [pc, #160]	; (8017c6c <arm_softmax_s8+0x389c>)
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	d10e      	bne.n	8017bee <arm_softmax_s8+0x381e>
 8017bd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bd4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017bde:	d106      	bne.n	8017bee <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8017be0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017be4:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017be8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017bec:	6013      	str	r3, [r2, #0]
    return result;
 8017bee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bf2:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8017bf6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8017bf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bfc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	ea02 0003 	and.w	r0, r2, r3
 8017c06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c0a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	43da      	mvns	r2, r3
 8017c12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c16:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	ea02 0103 	and.w	r1, r2, r3
 8017c20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c24:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017c28:	ea80 0301 	eor.w	r3, r0, r1
 8017c2c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8017c2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c32:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017c36:	6819      	ldr	r1, [r3, #0]
 8017c38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c3c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017c40:	1c4b      	adds	r3, r1, #1
 8017c42:	6013      	str	r3, [r2, #0]
 8017c44:	2301      	movs	r3, #1
 8017c46:	fa03 f201 	lsl.w	r2, r3, r1
 8017c4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c4e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4013      	ands	r3, r2
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d00e      	beq.n	8017c78 <arm_softmax_s8+0x38a8>
 8017c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c5e:	e00c      	b.n	8017c7a <arm_softmax_s8+0x38aa>
 8017c60:	1152aaa4 	.word	0x1152aaa4
 8017c64:	00000000 	.word	0x00000000
 8017c68:	2f16ac6c 	.word	0x2f16ac6c
 8017c6c:	1152aaa4 	.word	0x1152aaa4
 8017c70:	2f16ac6c 	.word	0x2f16ac6c
 8017c74:	00000000 	.word	0x00000000
 8017c78:	2200      	movs	r2, #0
 8017c7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c7e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017c82:	601a      	str	r2, [r3, #0]
 8017c84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c88:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 8017c8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c90:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017c98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c9c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017ca8:	f04f 0300 	mov.w	r3, #0
 8017cac:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8017cb0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017cb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cb8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	0fdb      	lsrs	r3, r3, #31
 8017cc0:	b2da      	uxtb	r2, r3
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	4053      	eors	r3, r2
 8017cc6:	b2db      	uxtb	r3, r3
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d010      	beq.n	8017cee <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 8017ccc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cd4:	2100      	movs	r1, #0
 8017cd6:	f1d2 0001 	rsbs	r0, r2, #1
 8017cda:	65b8      	str	r0, [r7, #88]	; 0x58
 8017cdc:	eb61 0303 	sbc.w	r3, r1, r3
 8017ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017ce2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8017ce6:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8017cea:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017cee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cf2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	17da      	asrs	r2, r3, #31
 8017cfa:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8017cfe:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8017d02:	a3bd      	add	r3, pc, #756	; (adr r3, 8017ff8 <arm_softmax_s8+0x3c28>)
 8017d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d08:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8017d0c:	fb02 f001 	mul.w	r0, r2, r1
 8017d10:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8017d14:	fb01 f103 	mul.w	r1, r1, r3
 8017d18:	4401      	add	r1, r0
 8017d1a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8017d1e:	fba0 2302 	umull	r2, r3, r0, r2
 8017d22:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8017d26:	4613      	mov	r3, r2
 8017d28:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8017d2c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8017d30:	18cb      	adds	r3, r1, r3
 8017d32:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8017d36:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d3e:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8017d42:	1851      	adds	r1, r2, r1
 8017d44:	6539      	str	r1, [r7, #80]	; 0x50
 8017d46:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8017d4a:	414b      	adcs	r3, r1
 8017d4c:	657b      	str	r3, [r7, #84]	; 0x54
 8017d4e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8017d52:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8017d56:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017d5a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	da08      	bge.n	8017d78 <arm_softmax_s8+0x39a8>
 8017d66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d6a:	1851      	adds	r1, r2, r1
 8017d6c:	64b9      	str	r1, [r7, #72]	; 0x48
 8017d6e:	f143 0300 	adc.w	r3, r3, #0
 8017d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017d78:	f04f 0000 	mov.w	r0, #0
 8017d7c:	f04f 0100 	mov.w	r1, #0
 8017d80:	0fd0      	lsrs	r0, r2, #31
 8017d82:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017d86:	17d9      	asrs	r1, r3, #31
 8017d88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d8c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017d90:	4603      	mov	r3, r0
 8017d92:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017d94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d98:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017d9c:	681a      	ldr	r2, [r3, #0]
 8017d9e:	4b94      	ldr	r3, [pc, #592]	; (8017ff0 <arm_softmax_s8+0x3c20>)
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d10e      	bne.n	8017dc2 <arm_softmax_s8+0x39f2>
 8017da4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017da8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017db2:	d106      	bne.n	8017dc2 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 8017db4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017db8:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017dbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017dc0:	6013      	str	r3, [r2, #0]
    return result;
 8017dc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dc6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8017dca:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8017dcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dd0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	ea02 0003 	and.w	r0, r2, r3
 8017dda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dde:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	43da      	mvns	r2, r3
 8017de6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dea:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	ea02 0103 	and.w	r1, r2, r3
 8017df4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017df8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017dfc:	ea80 0301 	eor.w	r3, r0, r1
 8017e00:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8017e02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e06:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017e0a:	6819      	ldr	r1, [r3, #0]
 8017e0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e10:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017e14:	1c4b      	adds	r3, r1, #1
 8017e16:	6013      	str	r3, [r2, #0]
 8017e18:	2301      	movs	r3, #1
 8017e1a:	fa03 f201 	lsl.w	r2, r3, r1
 8017e1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e22:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	4013      	ands	r3, r2
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d002      	beq.n	8017e34 <arm_softmax_s8+0x3a64>
 8017e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017e32:	e000      	b.n	8017e36 <arm_softmax_s8+0x3a66>
 8017e34:	2200      	movs	r2, #0
 8017e36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e3a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017e3e:	601a      	str	r2, [r3, #0]
 8017e40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e44:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8017e48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e4c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017e54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e58:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017e64:	f04f 0300 	mov.w	r3, #0
 8017e68:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8017e6c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017e70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e74:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	0fdb      	lsrs	r3, r3, #31
 8017e7c:	b2da      	uxtb	r2, r3
 8017e7e:	2300      	movs	r3, #0
 8017e80:	4053      	eors	r3, r2
 8017e82:	b2db      	uxtb	r3, r3
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d010      	beq.n	8017eaa <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8017e88:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e90:	2100      	movs	r1, #0
 8017e92:	f1d2 0001 	rsbs	r0, r2, #1
 8017e96:	6438      	str	r0, [r7, #64]	; 0x40
 8017e98:	eb61 0303 	sbc.w	r3, r1, r3
 8017e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8017e9e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8017ea2:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8017ea6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017eaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eae:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	17da      	asrs	r2, r3, #31
 8017eb6:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8017eba:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8017ebe:	4a4d      	ldr	r2, [pc, #308]	; (8017ff4 <arm_softmax_s8+0x3c24>)
 8017ec0:	f04f 0300 	mov.w	r3, #0
 8017ec4:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8017ec8:	fb02 f001 	mul.w	r0, r2, r1
 8017ecc:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8017ed0:	fb01 f103 	mul.w	r1, r1, r3
 8017ed4:	4401      	add	r1, r0
 8017ed6:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8017eda:	fba0 2302 	umull	r2, r3, r0, r2
 8017ede:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8017ee8:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8017eec:	18cb      	adds	r3, r1, r3
 8017eee:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8017ef2:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017efa:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8017efe:	1851      	adds	r1, r2, r1
 8017f00:	63b9      	str	r1, [r7, #56]	; 0x38
 8017f02:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8017f06:	414b      	adcs	r3, r1
 8017f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017f0a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8017f0e:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8017f12:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017f16:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	da08      	bge.n	8017f34 <arm_softmax_s8+0x3b64>
 8017f22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f26:	1851      	adds	r1, r2, r1
 8017f28:	6339      	str	r1, [r7, #48]	; 0x30
 8017f2a:	f143 0300 	adc.w	r3, r3, #0
 8017f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8017f30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8017f34:	f04f 0000 	mov.w	r0, #0
 8017f38:	f04f 0100 	mov.w	r1, #0
 8017f3c:	0fd0      	lsrs	r0, r2, #31
 8017f3e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017f42:	17d9      	asrs	r1, r3, #31
 8017f44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f48:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017f50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f54:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017f58:	681a      	ldr	r2, [r3, #0]
 8017f5a:	4b26      	ldr	r3, [pc, #152]	; (8017ff4 <arm_softmax_s8+0x3c24>)
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d10e      	bne.n	8017f7e <arm_softmax_s8+0x3bae>
 8017f60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f64:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017f6e:	d106      	bne.n	8017f7e <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 8017f70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f74:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8017f78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017f7c:	6013      	str	r3, [r2, #0]
    return result;
 8017f7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f82:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8017f86:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8017f88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f8c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	ea02 0003 	and.w	r0, r2, r3
 8017f96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f9a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	43da      	mvns	r2, r3
 8017fa2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fa6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	ea02 0103 	and.w	r1, r2, r3
 8017fb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fb4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017fb8:	ea80 0301 	eor.w	r3, r0, r1
 8017fbc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 8017fbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fc2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017fc6:	6819      	ldr	r1, [r3, #0]
 8017fc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fcc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017fd0:	1c4b      	adds	r3, r1, #1
 8017fd2:	6013      	str	r3, [r2, #0]
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	fa03 f201 	lsl.w	r2, r3, r1
 8017fda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fde:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	4013      	ands	r3, r2
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d00a      	beq.n	8018000 <arm_softmax_s8+0x3c30>
 8017fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017fee:	e008      	b.n	8018002 <arm_softmax_s8+0x3c32>
 8017ff0:	02582ab7 	.word	0x02582ab7
 8017ff4:	000afe11 	.word	0x000afe11
 8017ff8:	02582ab7 	.word	0x02582ab7
 8017ffc:	00000000 	.word	0x00000000
 8018000:	2200      	movs	r2, #0
 8018002:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018006:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801800a:	601a      	str	r2, [r3, #0]
 801800c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018010:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8018014:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018018:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018020:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018024:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018028:	2300      	movs	r3, #0
 801802a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801802c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018030:	f04f 0300 	mov.w	r3, #0
 8018034:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8018038:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801803c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018040:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	0fdb      	lsrs	r3, r3, #31
 8018048:	b2da      	uxtb	r2, r3
 801804a:	2300      	movs	r3, #0
 801804c:	4053      	eors	r3, r2
 801804e:	b2db      	uxtb	r3, r3
 8018050:	2b00      	cmp	r3, #0
 8018052:	d010      	beq.n	8018076 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8018054:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805c:	2100      	movs	r1, #0
 801805e:	f1d2 0001 	rsbs	r0, r2, #1
 8018062:	62b8      	str	r0, [r7, #40]	; 0x28
 8018064:	eb61 0303 	sbc.w	r3, r1, r3
 8018068:	62fb      	str	r3, [r7, #44]	; 0x2c
 801806a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801806e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8018072:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018076:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801807a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	17da      	asrs	r2, r3, #31
 8018082:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8018086:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 801808a:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 801808e:	f04f 0300 	mov.w	r3, #0
 8018092:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8018096:	fb02 f001 	mul.w	r0, r2, r1
 801809a:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801809e:	fb01 f103 	mul.w	r1, r1, r3
 80180a2:	4401      	add	r1, r0
 80180a4:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80180a8:	fba0 2302 	umull	r2, r3, r0, r2
 80180ac:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80180b0:	4613      	mov	r3, r2
 80180b2:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80180b6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80180ba:	18cb      	adds	r3, r1, r3
 80180bc:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80180c0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80180c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c8:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 80180cc:	1851      	adds	r1, r2, r1
 80180ce:	6239      	str	r1, [r7, #32]
 80180d0:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 80180d4:	414b      	adcs	r3, r1
 80180d6:	627b      	str	r3, [r7, #36]	; 0x24
 80180d8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80180dc:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80180e0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80180e4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80180e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	da08      	bge.n	8018102 <arm_softmax_s8+0x3d32>
 80180f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80180f4:	1851      	adds	r1, r2, r1
 80180f6:	61b9      	str	r1, [r7, #24]
 80180f8:	f143 0300 	adc.w	r3, r3, #0
 80180fc:	61fb      	str	r3, [r7, #28]
 80180fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018102:	f04f 0000 	mov.w	r0, #0
 8018106:	f04f 0100 	mov.w	r1, #0
 801810a:	0fd0      	lsrs	r0, r2, #31
 801810c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018110:	17d9      	asrs	r1, r3, #31
 8018112:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018116:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801811a:	4603      	mov	r3, r0
 801811c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801811e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018122:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	2bf2      	cmp	r3, #242	; 0xf2
 801812a:	d10e      	bne.n	801814a <arm_softmax_s8+0x3d7a>
 801812c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018130:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801813a:	d106      	bne.n	801814a <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 801813c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018140:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018144:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018148:	6013      	str	r3, [r2, #0]
    return result;
 801814a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801814e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8018152:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8018154:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018158:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	ea02 0003 	and.w	r0, r2, r3
 8018162:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018166:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	43da      	mvns	r2, r3
 801816e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018172:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	ea02 0103 	and.w	r1, r2, r3
 801817c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018180:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018184:	ea80 0301 	eor.w	r3, r0, r1
 8018188:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 801818a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801818e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d102      	bne.n	801819e <arm_softmax_s8+0x3dce>
 8018198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801819c:	e000      	b.n	80181a0 <arm_softmax_s8+0x3dd0>
 801819e:	2200      	movs	r2, #0
 80181a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181a4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80181a8:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80181aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181ae:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80181b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181bc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	43da      	mvns	r2, r3
 80181c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181c8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	4013      	ands	r3, r2
 80181d0:	4059      	eors	r1, r3
 80181d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181d6:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80181da:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 80181de:	6013      	str	r3, [r2, #0]
 80181e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181e4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80181e8:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80181ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181ee:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80181f2:	2300      	movs	r3, #0
 80181f4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80181f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80181fa:	f04f 0300 	mov.w	r3, #0
 80181fe:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8018202:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018206:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801820a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	0fdb      	lsrs	r3, r3, #31
 8018212:	b2da      	uxtb	r2, r3
 8018214:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018218:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	0fdb      	lsrs	r3, r3, #31
 8018220:	b2db      	uxtb	r3, r3
 8018222:	4053      	eors	r3, r2
 8018224:	b2db      	uxtb	r3, r3
 8018226:	2b00      	cmp	r3, #0
 8018228:	d010      	beq.n	801824c <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 801822a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018232:	2100      	movs	r1, #0
 8018234:	f1d2 0001 	rsbs	r0, r2, #1
 8018238:	6138      	str	r0, [r7, #16]
 801823a:	eb61 0303 	sbc.w	r3, r1, r3
 801823e:	617b      	str	r3, [r7, #20]
 8018240:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8018244:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8018248:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801824c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018250:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	17da      	asrs	r2, r3, #31
 8018258:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 801825c:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8018260:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018264:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	17da      	asrs	r2, r3, #31
 801826c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8018270:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8018274:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8018278:	460b      	mov	r3, r1
 801827a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801827e:	fb02 f203 	mul.w	r2, r2, r3
 8018282:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8018286:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 801828a:	4601      	mov	r1, r0
 801828c:	fb01 f303 	mul.w	r3, r1, r3
 8018290:	4413      	add	r3, r2
 8018292:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8018296:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 801829a:	fba2 1201 	umull	r1, r2, r2, r1
 801829e:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 80182a2:	460a      	mov	r2, r1
 80182a4:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 80182a8:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80182ac:	4413      	add	r3, r2
 80182ae:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80182b2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80182b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ba:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 80182be:	1851      	adds	r1, r2, r1
 80182c0:	60b9      	str	r1, [r7, #8]
 80182c2:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 80182c6:	414b      	adcs	r3, r1
 80182c8:	60fb      	str	r3, [r7, #12]
 80182ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80182ce:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80182d2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80182d6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80182da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	da08      	bge.n	80182f4 <arm_softmax_s8+0x3f24>
 80182e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80182e6:	1851      	adds	r1, r2, r1
 80182e8:	6039      	str	r1, [r7, #0]
 80182ea:	f143 0300 	adc.w	r3, r3, #0
 80182ee:	607b      	str	r3, [r7, #4]
 80182f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80182f4:	f04f 0000 	mov.w	r0, #0
 80182f8:	f04f 0100 	mov.w	r1, #0
 80182fc:	0fd0      	lsrs	r0, r2, #31
 80182fe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018302:	17d9      	asrs	r1, r3, #31
 8018304:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018308:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 801830c:	4603      	mov	r3, r0
 801830e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018314:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8018318:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801831c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018320:	6812      	ldr	r2, [r2, #0]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	429a      	cmp	r2, r3
 8018326:	d10e      	bne.n	8018346 <arm_softmax_s8+0x3f76>
 8018328:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801832c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018336:	d106      	bne.n	8018346 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8018338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801833c:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8018340:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018344:	6013      	str	r3, [r2, #0]
    return result;
 8018346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801834a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801834e:	681a      	ldr	r2, [r3, #0]
 8018350:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018354:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8018358:	601a      	str	r2, [r3, #0]
 801835a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801835e:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8018362:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8018366:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018368:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801836c:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8018370:	2300      	movs	r3, #0
 8018372:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018374:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018378:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801837c:	2201      	movs	r2, #1
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	fa02 f103 	lsl.w	r1, r2, r3
 8018384:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018388:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 801838c:	1e4b      	subs	r3, r1, #1
 801838e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018390:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018394:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8018398:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801839c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80183a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183a4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80183a8:	6812      	ldr	r2, [r2, #0]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	4013      	ands	r3, r2
 80183ae:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80183b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183b4:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 80183b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183bc:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80183c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80183c8:	6812      	ldr	r2, [r2, #0]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	fa42 f303 	asr.w	r3, r2, r3
 80183d0:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80183d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183d6:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 80183da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183de:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	105b      	asrs	r3, r3, #1
 80183e6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80183e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183ec:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	da0a      	bge.n	801840c <arm_softmax_s8+0x403c>
        threshold++;
 80183f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183fa:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 80183fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018402:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	3301      	adds	r3, #1
 801840a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801840c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018410:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8018414:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018418:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801841c:	6812      	ldr	r2, [r2, #0]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	429a      	cmp	r2, r3
 8018422:	dd0a      	ble.n	801843a <arm_softmax_s8+0x406a>
        result++;
 8018424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018428:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 801842c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018430:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	3301      	adds	r3, #1
 8018438:	6013      	str	r3, [r2, #0]
    return result;
 801843a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801843e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8018442:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8018444:	3b80      	subs	r3, #128	; 0x80
 8018446:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 801844a:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801844e:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8018452:	db09      	blt.n	8018468 <arm_softmax_s8+0x4098>
 8018454:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8018458:	2b7e      	cmp	r3, #126	; 0x7e
 801845a:	dc03      	bgt.n	8018464 <arm_softmax_s8+0x4094>
 801845c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8018460:	b259      	sxtb	r1, r3
 8018462:	e003      	b.n	801846c <arm_softmax_s8+0x409c>
 8018464:	217f      	movs	r1, #127	; 0x7f
 8018466:	e001      	b.n	801846c <arm_softmax_s8+0x409c>
 8018468:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 801846c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018470:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8018474:	441a      	add	r2, r3
 8018476:	460b      	mov	r3, r1
 8018478:	7013      	strb	r3, [r2, #0]
 801847a:	e006      	b.n	801848a <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 801847c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018480:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8018484:	441a      	add	r2, r3
 8018486:	2380      	movs	r3, #128	; 0x80
 8018488:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 801848a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801848e:	3301      	adds	r3, #1
 8018490:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8018494:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018498:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801849c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	429a      	cmp	r2, r3
 80184a4:	f6fe aa71 	blt.w	801698a <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 80184a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184ac:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80184b0:	6819      	ldr	r1, [r3, #0]
 80184b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184b6:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 80184ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184be:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	440b      	add	r3, r1
 80184c6:	6013      	str	r3, [r2, #0]
        output += row_size;
 80184c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184cc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80184d6:	4413      	add	r3, r2
 80184d8:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80184dc:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 80184e0:	3301      	adds	r3, #1
 80184e2:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 80184e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184ea:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80184ee:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	429a      	cmp	r2, r3
 80184f6:	f6fb af93 	blt.w	8014420 <arm_softmax_s8+0x50>
    }

#endif
}
 80184fa:	bf00      	nop
 80184fc:	bf00      	nop
 80184fe:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8018502:	46bd      	mov	sp, r7
 8018504:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8018508:	4770      	bx	lr
 801850a:	bf00      	nop

0801850c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 801850c:	b480      	push	{r7}
 801850e:	b089      	sub	sp, #36	; 0x24
 8018510:	af00      	add	r7, sp, #0
 8018512:	60f8      	str	r0, [r7, #12]
 8018514:	60b9      	str	r1, [r7, #8]
 8018516:	607a      	str	r2, [r7, #4]
 8018518:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018520:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	00db      	lsls	r3, r3, #3
 8018526:	68fa      	ldr	r2, [r7, #12]
 8018528:	4413      	add	r3, r2
 801852a:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 801852c:	69fb      	ldr	r3, [r7, #28]
 801852e:	ed93 7a00 	vldr	s14, [r3]
 8018532:	69bb      	ldr	r3, [r7, #24]
 8018534:	edd3 7a00 	vldr	s15, [r3]
 8018538:	ee27 7a27 	vmul.f32	s14, s14, s15
 801853c:	69fb      	ldr	r3, [r7, #28]
 801853e:	edd3 6a01 	vldr	s13, [r3, #4]
 8018542:	69bb      	ldr	r3, [r7, #24]
 8018544:	edd3 7a01 	vldr	s15, [r3, #4]
 8018548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801854c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018550:	edc7 7a04 	vstr	s15, [r7, #16]
 8018554:	69fb      	ldr	r3, [r7, #28]
 8018556:	ed93 7a00 	vldr	s14, [r3]
 801855a:	69bb      	ldr	r3, [r7, #24]
 801855c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018564:	69fb      	ldr	r3, [r7, #28]
 8018566:	edd3 6a01 	vldr	s13, [r3, #4]
 801856a:	69bb      	ldr	r3, [r7, #24]
 801856c:	edd3 7a00 	vldr	s15, [r3]
 8018570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018578:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 801857c:	68bb      	ldr	r3, [r7, #8]
 801857e:	00db      	lsls	r3, r3, #3
 8018580:	69ba      	ldr	r2, [r7, #24]
 8018582:	4413      	add	r3, r2
 8018584:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	ed93 7a00 	vldr	s14, [r3]
 801858c:	edd7 7a04 	vldr	s15, [r7, #16]
 8018590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018594:	69fb      	ldr	r3, [r7, #28]
 8018596:	edc3 7a00 	vstr	s15, [r3]
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	ed93 7a01 	vldr	s14, [r3, #4]
 80185a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80185a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80185a8:	69fb      	ldr	r3, [r7, #28]
 80185aa:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	ed93 7a00 	vldr	s14, [r3]
 80185b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80185b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	edc3 7a00 	vstr	s15, [r3]
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80185c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80185cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	3308      	adds	r3, #8
 80185da:	61fb      	str	r3, [r7, #28]
        ++Fout;
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	3308      	adds	r3, #8
 80185e0:	60fb      	str	r3, [r7, #12]
    }while (--m);
 80185e2:	683b      	ldr	r3, [r7, #0]
 80185e4:	3b01      	subs	r3, #1
 80185e6:	603b      	str	r3, [r7, #0]
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	bf14      	ite	ne
 80185ee:	2301      	movne	r3, #1
 80185f0:	2300      	moveq	r3, #0
 80185f2:	b2db      	uxtb	r3, r3
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d000      	beq.n	80185fa <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 80185f8:	e798      	b.n	801852c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 80185fa:	bf00      	nop
 80185fc:	3724      	adds	r7, #36	; 0x24
 80185fe:	46bd      	mov	sp, r7
 8018600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018604:	4770      	bx	lr

08018606 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 8018606:	b480      	push	{r7}
 8018608:	b097      	sub	sp, #92	; 0x5c
 801860a:	af00      	add	r7, sp, #0
 801860c:	60f8      	str	r0, [r7, #12]
 801860e:	60b9      	str	r1, [r7, #8]
 8018610:	607a      	str	r2, [r7, #4]
 8018612:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 8018614:	683b      	ldr	r3, [r7, #0]
 8018616:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	005b      	lsls	r3, r3, #1
 801861c:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 801861e:	683a      	ldr	r2, [r7, #0]
 8018620:	4613      	mov	r3, r2
 8018622:	005b      	lsls	r3, r3, #1
 8018624:	4413      	add	r3, r2
 8018626:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801862e:	657b      	str	r3, [r7, #84]	; 0x54
 8018630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018632:	653b      	str	r3, [r7, #80]	; 0x50
 8018634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018636:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8018638:	683b      	ldr	r3, [r7, #0]
 801863a:	00db      	lsls	r3, r3, #3
 801863c:	68fa      	ldr	r2, [r7, #12]
 801863e:	4413      	add	r3, r2
 8018640:	ed93 7a00 	vldr	s14, [r3]
 8018644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018646:	edd3 7a00 	vldr	s15, [r3]
 801864a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801864e:	683b      	ldr	r3, [r7, #0]
 8018650:	00db      	lsls	r3, r3, #3
 8018652:	68fa      	ldr	r2, [r7, #12]
 8018654:	4413      	add	r3, r2
 8018656:	edd3 6a01 	vldr	s13, [r3, #4]
 801865a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801865c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018668:	edc7 7a04 	vstr	s15, [r7, #16]
 801866c:	683b      	ldr	r3, [r7, #0]
 801866e:	00db      	lsls	r3, r3, #3
 8018670:	68fa      	ldr	r2, [r7, #12]
 8018672:	4413      	add	r3, r2
 8018674:	ed93 7a00 	vldr	s14, [r3]
 8018678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801867a:	edd3 7a01 	vldr	s15, [r3, #4]
 801867e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018682:	683b      	ldr	r3, [r7, #0]
 8018684:	00db      	lsls	r3, r3, #3
 8018686:	68fa      	ldr	r2, [r7, #12]
 8018688:	4413      	add	r3, r2
 801868a:	edd3 6a01 	vldr	s13, [r3, #4]
 801868e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018690:	edd3 7a00 	vldr	s15, [r3]
 8018694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018698:	ee77 7a27 	vadd.f32	s15, s14, s15
 801869c:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 80186a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186a2:	00db      	lsls	r3, r3, #3
 80186a4:	68fa      	ldr	r2, [r7, #12]
 80186a6:	4413      	add	r3, r2
 80186a8:	ed93 7a00 	vldr	s14, [r3]
 80186ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186ae:	edd3 7a00 	vldr	s15, [r3]
 80186b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80186b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186b8:	00db      	lsls	r3, r3, #3
 80186ba:	68fa      	ldr	r2, [r7, #12]
 80186bc:	4413      	add	r3, r2
 80186be:	edd3 6a01 	vldr	s13, [r3, #4]
 80186c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80186c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80186cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80186d0:	edc7 7a06 	vstr	s15, [r7, #24]
 80186d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186d6:	00db      	lsls	r3, r3, #3
 80186d8:	68fa      	ldr	r2, [r7, #12]
 80186da:	4413      	add	r3, r2
 80186dc:	ed93 7a00 	vldr	s14, [r3]
 80186e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80186e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80186ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186ec:	00db      	lsls	r3, r3, #3
 80186ee:	68fa      	ldr	r2, [r7, #12]
 80186f0:	4413      	add	r3, r2
 80186f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80186f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186f8:	edd3 7a00 	vldr	s15, [r3]
 80186fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018704:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8018708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801870a:	00db      	lsls	r3, r3, #3
 801870c:	68fa      	ldr	r2, [r7, #12]
 801870e:	4413      	add	r3, r2
 8018710:	ed93 7a00 	vldr	s14, [r3]
 8018714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018716:	edd3 7a00 	vldr	s15, [r3]
 801871a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801871e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018720:	00db      	lsls	r3, r3, #3
 8018722:	68fa      	ldr	r2, [r7, #12]
 8018724:	4413      	add	r3, r2
 8018726:	edd3 6a01 	vldr	s13, [r3, #4]
 801872a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801872c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018738:	edc7 7a08 	vstr	s15, [r7, #32]
 801873c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801873e:	00db      	lsls	r3, r3, #3
 8018740:	68fa      	ldr	r2, [r7, #12]
 8018742:	4413      	add	r3, r2
 8018744:	ed93 7a00 	vldr	s14, [r3]
 8018748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801874a:	edd3 7a01 	vldr	s15, [r3, #4]
 801874e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018754:	00db      	lsls	r3, r3, #3
 8018756:	68fa      	ldr	r2, [r7, #12]
 8018758:	4413      	add	r3, r2
 801875a:	edd3 6a01 	vldr	s13, [r3, #4]
 801875e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018760:	edd3 7a00 	vldr	s15, [r3]
 8018764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018768:	ee77 7a27 	vadd.f32	s15, s14, s15
 801876c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	ed93 7a00 	vldr	s14, [r3]
 8018776:	edd7 7a06 	vldr	s15, [r7, #24]
 801877a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801877e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	ed93 7a01 	vldr	s14, [r3, #4]
 8018788:	edd7 7a07 	vldr	s15, [r7, #28]
 801878c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018790:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	ed93 7a00 	vldr	s14, [r3]
 801879a:	edd7 7a06 	vldr	s15, [r7, #24]
 801879e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	edc3 7a00 	vstr	s15, [r3]
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80187ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80187b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 80187bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80187c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80187c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80187cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80187d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80187d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 80187dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80187e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80187e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80187e8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80187ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80187f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80187f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80187f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	ed93 7a00 	vldr	s14, [r3]
 8018802:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018808:	00db      	lsls	r3, r3, #3
 801880a:	68fa      	ldr	r2, [r7, #12]
 801880c:	4413      	add	r3, r2
 801880e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018812:	edc3 7a00 	vstr	s15, [r3]
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	ed93 7a01 	vldr	s14, [r3, #4]
 801881c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018822:	00db      	lsls	r3, r3, #3
 8018824:	68fa      	ldr	r2, [r7, #12]
 8018826:	4413      	add	r3, r2
 8018828:	ee77 7a67 	vsub.f32	s15, s14, s15
 801882c:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	00db      	lsls	r3, r3, #3
 8018834:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018836:	4413      	add	r3, r2
 8018838:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 801883a:	68bb      	ldr	r3, [r7, #8]
 801883c:	011b      	lsls	r3, r3, #4
 801883e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018840:	4413      	add	r3, r2
 8018842:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8018844:	68ba      	ldr	r2, [r7, #8]
 8018846:	4613      	mov	r3, r2
 8018848:	005b      	lsls	r3, r3, #1
 801884a:	4413      	add	r3, r2
 801884c:	00db      	lsls	r3, r3, #3
 801884e:	461a      	mov	r2, r3
 8018850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018852:	4413      	add	r3, r2
 8018854:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	ed93 7a00 	vldr	s14, [r3]
 801885c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	edc3 7a00 	vstr	s15, [r3]
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	ed93 7a01 	vldr	s14, [r3, #4]
 8018870:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d030      	beq.n	80188e8 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8018886:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801888a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801888e:	683b      	ldr	r3, [r7, #0]
 8018890:	00db      	lsls	r3, r3, #3
 8018892:	68fa      	ldr	r2, [r7, #12]
 8018894:	4413      	add	r3, r2
 8018896:	ee77 7a67 	vsub.f32	s15, s14, s15
 801889a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 801889e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80188a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80188a6:	683b      	ldr	r3, [r7, #0]
 80188a8:	00db      	lsls	r3, r3, #3
 80188aa:	68fa      	ldr	r2, [r7, #12]
 80188ac:	4413      	add	r3, r2
 80188ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188b2:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 80188b6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80188ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80188be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188c0:	00db      	lsls	r3, r3, #3
 80188c2:	68fa      	ldr	r2, [r7, #12]
 80188c4:	4413      	add	r3, r2
 80188c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188ca:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 80188ce:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80188d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80188d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188d8:	00db      	lsls	r3, r3, #3
 80188da:	68fa      	ldr	r2, [r7, #12]
 80188dc:	4413      	add	r3, r2
 80188de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188e2:	edc3 7a01 	vstr	s15, [r3, #4]
 80188e6:	e02f      	b.n	8018948 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 80188e8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80188ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	00db      	lsls	r3, r3, #3
 80188f4:	68fa      	ldr	r2, [r7, #12]
 80188f6:	4413      	add	r3, r2
 80188f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188fc:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8018900:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8018904:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018908:	683b      	ldr	r3, [r7, #0]
 801890a:	00db      	lsls	r3, r3, #3
 801890c:	68fa      	ldr	r2, [r7, #12]
 801890e:	4413      	add	r3, r2
 8018910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018914:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8018918:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801891c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8018920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018922:	00db      	lsls	r3, r3, #3
 8018924:	68fa      	ldr	r2, [r7, #12]
 8018926:	4413      	add	r3, r2
 8018928:	ee77 7a67 	vsub.f32	s15, s14, s15
 801892c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8018930:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8018934:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801893a:	00db      	lsls	r3, r3, #3
 801893c:	68fa      	ldr	r2, [r7, #12]
 801893e:	4413      	add	r3, r2
 8018940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018944:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	3308      	adds	r3, #8
 801894c:	60fb      	str	r3, [r7, #12]
    }while(--k);
 801894e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018950:	3b01      	subs	r3, #1
 8018952:	64bb      	str	r3, [r7, #72]	; 0x48
 8018954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018956:	2b00      	cmp	r3, #0
 8018958:	bf14      	ite	ne
 801895a:	2301      	movne	r3, #1
 801895c:	2300      	moveq	r3, #0
 801895e:	b2db      	uxtb	r3, r3
 8018960:	2b00      	cmp	r3, #0
 8018962:	d000      	beq.n	8018966 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 8018964:	e668      	b.n	8018638 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8018966:	bf00      	nop
 8018968:	375c      	adds	r7, #92	; 0x5c
 801896a:	46bd      	mov	sp, r7
 801896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018970:	4770      	bx	lr
	...

08018974 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8018974:	b5b0      	push	{r4, r5, r7, lr}
 8018976:	b094      	sub	sp, #80	; 0x50
 8018978:	af00      	add	r7, sp, #0
 801897a:	60f8      	str	r0, [r7, #12]
 801897c:	60b9      	str	r1, [r7, #8]
 801897e:	607a      	str	r2, [r7, #4]
 8018980:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8018982:	683b      	ldr	r3, [r7, #0]
 8018984:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	005b      	lsls	r3, r3, #1
 801898a:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	683a      	ldr	r2, [r7, #0]
 8018990:	fb02 f303 	mul.w	r3, r2, r3
 8018994:	6879      	ldr	r1, [r7, #4]
 8018996:	3321      	adds	r3, #33	; 0x21
 8018998:	f107 0210 	add.w	r2, r7, #16
 801899c:	00db      	lsls	r3, r3, #3
 801899e:	440b      	add	r3, r1
 80189a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189a4:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80189ae:	647b      	str	r3, [r7, #68]	; 0x44
 80189b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80189b2:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	00db      	lsls	r3, r3, #3
 80189b8:	68fa      	ldr	r2, [r7, #12]
 80189ba:	4413      	add	r3, r2
 80189bc:	ed93 7a00 	vldr	s14, [r3]
 80189c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189c2:	edd3 7a00 	vldr	s15, [r3]
 80189c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	00db      	lsls	r3, r3, #3
 80189ce:	68fa      	ldr	r2, [r7, #12]
 80189d0:	4413      	add	r3, r2
 80189d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80189d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80189dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80189e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80189e4:	edc7 7a08 	vstr	s15, [r7, #32]
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	00db      	lsls	r3, r3, #3
 80189ec:	68fa      	ldr	r2, [r7, #12]
 80189ee:	4413      	add	r3, r2
 80189f0:	ed93 7a00 	vldr	s14, [r3]
 80189f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80189fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	00db      	lsls	r3, r3, #3
 8018a02:	68fa      	ldr	r2, [r7, #12]
 8018a04:	4413      	add	r3, r2
 8018a06:	edd3 6a01 	vldr	s13, [r3, #4]
 8018a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a0c:	edd3 7a00 	vldr	s15, [r3]
 8018a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8018a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a1e:	00db      	lsls	r3, r3, #3
 8018a20:	68fa      	ldr	r2, [r7, #12]
 8018a22:	4413      	add	r3, r2
 8018a24:	ed93 7a00 	vldr	s14, [r3]
 8018a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a2a:	edd3 7a00 	vldr	s15, [r3]
 8018a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a34:	00db      	lsls	r3, r3, #3
 8018a36:	68fa      	ldr	r2, [r7, #12]
 8018a38:	4413      	add	r3, r2
 8018a3a:	edd3 6a01 	vldr	s13, [r3, #4]
 8018a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a40:	edd3 7a01 	vldr	s15, [r3, #4]
 8018a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a4c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8018a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a52:	00db      	lsls	r3, r3, #3
 8018a54:	68fa      	ldr	r2, [r7, #12]
 8018a56:	4413      	add	r3, r2
 8018a58:	ed93 7a00 	vldr	s14, [r3]
 8018a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8018a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a68:	00db      	lsls	r3, r3, #3
 8018a6a:	68fa      	ldr	r2, [r7, #12]
 8018a6c:	4413      	add	r3, r2
 8018a6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8018a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a74:	edd3 7a00 	vldr	s15, [r3]
 8018a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8018a84:	ed97 7a08 	vldr	s14, [r7, #32]
 8018a88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a90:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8018a94:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018a98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018aa0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8018aa4:	ed97 7a08 	vldr	s14, [r7, #32]
 8018aa8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ab0:	edc7 7a06 	vstr	s15, [r7, #24]
 8018ab4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018ab8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ac0:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8018ac4:	68bb      	ldr	r3, [r7, #8]
 8018ac6:	00db      	lsls	r3, r3, #3
 8018ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018aca:	4413      	add	r3, r2
 8018acc:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 8018ace:	68bb      	ldr	r3, [r7, #8]
 8018ad0:	011b      	lsls	r3, r3, #4
 8018ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018ad4:	4413      	add	r3, r2
 8018ad6:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	4618      	mov	r0, r3
 8018ade:	f7e7 fd3d 	bl	800055c <__aeabi_f2d>
 8018ae2:	4604      	mov	r4, r0
 8018ae4:	460d      	mov	r5, r1
 8018ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7e7 fd37 	bl	800055c <__aeabi_f2d>
 8018aee:	f04f 0200 	mov.w	r2, #0
 8018af2:	4b57      	ldr	r3, [pc, #348]	; (8018c50 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8018af4:	f7e7 fd8a 	bl	800060c <__aeabi_dmul>
 8018af8:	4602      	mov	r2, r0
 8018afa:	460b      	mov	r3, r1
 8018afc:	4620      	mov	r0, r4
 8018afe:	4629      	mov	r1, r5
 8018b00:	f7e7 fbcc 	bl	800029c <__aeabi_dsub>
 8018b04:	4602      	mov	r2, r0
 8018b06:	460b      	mov	r3, r1
 8018b08:	4610      	mov	r0, r2
 8018b0a:	4619      	mov	r1, r3
 8018b0c:	683b      	ldr	r3, [r7, #0]
 8018b0e:	00db      	lsls	r3, r3, #3
 8018b10:	68fa      	ldr	r2, [r7, #12]
 8018b12:	18d4      	adds	r4, r2, r3
 8018b14:	f7e8 f872 	bl	8000bfc <__aeabi_d2f>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	685b      	ldr	r3, [r3, #4]
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7e7 fd1b 	bl	800055c <__aeabi_f2d>
 8018b26:	4604      	mov	r4, r0
 8018b28:	460d      	mov	r5, r1
 8018b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7e7 fd15 	bl	800055c <__aeabi_f2d>
 8018b32:	f04f 0200 	mov.w	r2, #0
 8018b36:	4b46      	ldr	r3, [pc, #280]	; (8018c50 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8018b38:	f7e7 fd68 	bl	800060c <__aeabi_dmul>
 8018b3c:	4602      	mov	r2, r0
 8018b3e:	460b      	mov	r3, r1
 8018b40:	4620      	mov	r0, r4
 8018b42:	4629      	mov	r1, r5
 8018b44:	f7e7 fbaa 	bl	800029c <__aeabi_dsub>
 8018b48:	4602      	mov	r2, r0
 8018b4a:	460b      	mov	r3, r1
 8018b4c:	4610      	mov	r0, r2
 8018b4e:	4619      	mov	r1, r3
 8018b50:	683b      	ldr	r3, [r7, #0]
 8018b52:	00db      	lsls	r3, r3, #3
 8018b54:	68fa      	ldr	r2, [r7, #12]
 8018b56:	18d4      	adds	r4, r2, r3
 8018b58:	f7e8 f850 	bl	8000bfc <__aeabi_d2f>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8018b60:	ed97 7a06 	vldr	s14, [r7, #24]
 8018b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8018b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018b6c:	edc7 7a06 	vstr	s15, [r7, #24]
 8018b70:	ed97 7a07 	vldr	s14, [r7, #28]
 8018b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8018b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018b7c:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	ed93 7a00 	vldr	s14, [r3]
 8018b86:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	edc3 7a00 	vstr	s15, [r3]
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	ed93 7a01 	vldr	s14, [r3, #4]
 8018b9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8018b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	00db      	lsls	r3, r3, #3
 8018bac:	68fa      	ldr	r2, [r7, #12]
 8018bae:	4413      	add	r3, r2
 8018bb0:	ed93 7a00 	vldr	s14, [r3]
 8018bb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8018bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018bba:	00db      	lsls	r3, r3, #3
 8018bbc:	68fa      	ldr	r2, [r7, #12]
 8018bbe:	4413      	add	r3, r2
 8018bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018bc4:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	00db      	lsls	r3, r3, #3
 8018bcc:	68fa      	ldr	r2, [r7, #12]
 8018bce:	4413      	add	r3, r2
 8018bd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8018bd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8018bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018bda:	00db      	lsls	r3, r3, #3
 8018bdc:	68fa      	ldr	r2, [r7, #12]
 8018bde:	4413      	add	r3, r2
 8018be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018be4:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8018be8:	683b      	ldr	r3, [r7, #0]
 8018bea:	00db      	lsls	r3, r3, #3
 8018bec:	68fa      	ldr	r2, [r7, #12]
 8018bee:	4413      	add	r3, r2
 8018bf0:	ed93 7a00 	vldr	s14, [r3]
 8018bf4:	edd7 7a07 	vldr	s15, [r7, #28]
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	00db      	lsls	r3, r3, #3
 8018bfc:	68fa      	ldr	r2, [r7, #12]
 8018bfe:	4413      	add	r3, r2
 8018c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c04:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	00db      	lsls	r3, r3, #3
 8018c0c:	68fa      	ldr	r2, [r7, #12]
 8018c0e:	4413      	add	r3, r2
 8018c10:	ed93 7a01 	vldr	s14, [r3, #4]
 8018c14:	edd7 7a06 	vldr	s15, [r7, #24]
 8018c18:	683b      	ldr	r3, [r7, #0]
 8018c1a:	00db      	lsls	r3, r3, #3
 8018c1c:	68fa      	ldr	r2, [r7, #12]
 8018c1e:	4413      	add	r3, r2
 8018c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c24:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	3308      	adds	r3, #8
 8018c2c:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8018c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c30:	3b01      	subs	r3, #1
 8018c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	bf14      	ite	ne
 8018c3a:	2301      	movne	r3, #1
 8018c3c:	2300      	moveq	r3, #0
 8018c3e:	b2db      	uxtb	r3, r3
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d000      	beq.n	8018c46 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 8018c44:	e6b6      	b.n	80189b4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8018c46:	bf00      	nop
 8018c48:	3750      	adds	r7, #80	; 0x50
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8018c4e:	bf00      	nop
 8018c50:	3fe00000 	.word	0x3fe00000

08018c54 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8018c54:	b480      	push	{r7}
 8018c56:	b0ab      	sub	sp, #172	; 0xac
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	60f8      	str	r0, [r7, #12]
 8018c5c:	60b9      	str	r1, [r7, #8]
 8018c5e:	607a      	str	r2, [r7, #4]
 8018c60:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018c68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	68ba      	ldr	r2, [r7, #8]
 8018c70:	fb02 f303 	mul.w	r3, r2, r3
 8018c74:	00db      	lsls	r3, r3, #3
 8018c76:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018c7a:	441a      	add	r2, r3
 8018c7c:	f107 0318 	add.w	r3, r7, #24
 8018c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c84:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8018c88:	683b      	ldr	r3, [r7, #0]
 8018c8a:	68ba      	ldr	r2, [r7, #8]
 8018c8c:	fb02 f303 	mul.w	r3, r2, r3
 8018c90:	011b      	lsls	r3, r3, #4
 8018c92:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018c96:	441a      	add	r2, r3
 8018c98:	f107 0310 	add.w	r3, r7, #16
 8018c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ca0:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	00db      	lsls	r3, r3, #3
 8018cae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018cb2:	4413      	add	r3, r2
 8018cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	011b      	lsls	r3, r3, #4
 8018cbc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018cc0:	4413      	add	r3, r2
 8018cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8018cc6:	683a      	ldr	r2, [r7, #0]
 8018cc8:	4613      	mov	r3, r2
 8018cca:	005b      	lsls	r3, r3, #1
 8018ccc:	4413      	add	r3, r2
 8018cce:	00db      	lsls	r3, r3, #3
 8018cd0:	461a      	mov	r2, r3
 8018cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018cd6:	4413      	add	r3, r2
 8018cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	015b      	lsls	r3, r3, #5
 8018ce0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018ce4:	4413      	add	r3, r2
 8018ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018cfa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	429a      	cmp	r2, r3
 8018d02:	f280 82a9 	bge.w	8019258 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8018d06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018d0a:	f107 0320 	add.w	r3, r7, #32
 8018d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d12:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8018d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018d1a:	ed93 7a00 	vldr	s14, [r3]
 8018d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d22:	68ba      	ldr	r2, [r7, #8]
 8018d24:	fb02 f303 	mul.w	r3, r2, r3
 8018d28:	00db      	lsls	r3, r3, #3
 8018d2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d2e:	4413      	add	r3, r2
 8018d30:	edd3 7a00 	vldr	s15, [r3]
 8018d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018d3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8018d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d44:	68ba      	ldr	r2, [r7, #8]
 8018d46:	fb02 f303 	mul.w	r3, r2, r3
 8018d4a:	00db      	lsls	r3, r3, #3
 8018d4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d50:	4413      	add	r3, r2
 8018d52:	edd3 7a01 	vldr	s15, [r3, #4]
 8018d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8018d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018d66:	ed93 7a00 	vldr	s14, [r3]
 8018d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d6e:	68ba      	ldr	r2, [r7, #8]
 8018d70:	fb02 f303 	mul.w	r3, r2, r3
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d7a:	4413      	add	r3, r2
 8018d7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018d88:	edd3 6a01 	vldr	s13, [r3, #4]
 8018d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d90:	68ba      	ldr	r2, [r7, #8]
 8018d92:	fb02 f303 	mul.w	r3, r2, r3
 8018d96:	00db      	lsls	r3, r3, #3
 8018d98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018d9c:	4413      	add	r3, r2
 8018d9e:	edd3 7a00 	vldr	s15, [r3]
 8018da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018daa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8018dae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018db2:	ed93 7a00 	vldr	s14, [r3]
 8018db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018dba:	68ba      	ldr	r2, [r7, #8]
 8018dbc:	fb02 f303 	mul.w	r3, r2, r3
 8018dc0:	011b      	lsls	r3, r3, #4
 8018dc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018dc6:	4413      	add	r3, r2
 8018dc8:	edd3 7a00 	vldr	s15, [r3]
 8018dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018dd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8018dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018ddc:	68ba      	ldr	r2, [r7, #8]
 8018dde:	fb02 f303 	mul.w	r3, r2, r3
 8018de2:	011b      	lsls	r3, r3, #4
 8018de4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018de8:	4413      	add	r3, r2
 8018dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8018dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018df6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8018dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018dfe:	ed93 7a00 	vldr	s14, [r3]
 8018e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e06:	68ba      	ldr	r2, [r7, #8]
 8018e08:	fb02 f303 	mul.w	r3, r2, r3
 8018e0c:	011b      	lsls	r3, r3, #4
 8018e0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018e12:	4413      	add	r3, r2
 8018e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8018e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018e20:	edd3 6a01 	vldr	s13, [r3, #4]
 8018e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e28:	68ba      	ldr	r2, [r7, #8]
 8018e2a:	fb02 f303 	mul.w	r3, r2, r3
 8018e2e:	011b      	lsls	r3, r3, #4
 8018e30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018e34:	4413      	add	r3, r2
 8018e36:	edd3 7a00 	vldr	s15, [r3]
 8018e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e42:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8018e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018e4a:	ed93 7a00 	vldr	s14, [r3]
 8018e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e52:	68ba      	ldr	r2, [r7, #8]
 8018e54:	fb03 f202 	mul.w	r2, r3, r2
 8018e58:	4613      	mov	r3, r2
 8018e5a:	005b      	lsls	r3, r3, #1
 8018e5c:	4413      	add	r3, r2
 8018e5e:	00db      	lsls	r3, r3, #3
 8018e60:	461a      	mov	r2, r3
 8018e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e66:	4413      	add	r3, r2
 8018e68:	edd3 7a00 	vldr	s15, [r3]
 8018e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018e74:	edd3 6a01 	vldr	s13, [r3, #4]
 8018e78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e7c:	68ba      	ldr	r2, [r7, #8]
 8018e7e:	fb03 f202 	mul.w	r2, r3, r2
 8018e82:	4613      	mov	r3, r2
 8018e84:	005b      	lsls	r3, r3, #1
 8018e86:	4413      	add	r3, r2
 8018e88:	00db      	lsls	r3, r3, #3
 8018e8a:	461a      	mov	r2, r3
 8018e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e90:	4413      	add	r3, r2
 8018e92:	edd3 7a01 	vldr	s15, [r3, #4]
 8018e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018e9e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8018ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018ea6:	ed93 7a00 	vldr	s14, [r3]
 8018eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018eae:	68ba      	ldr	r2, [r7, #8]
 8018eb0:	fb03 f202 	mul.w	r2, r3, r2
 8018eb4:	4613      	mov	r3, r2
 8018eb6:	005b      	lsls	r3, r3, #1
 8018eb8:	4413      	add	r3, r2
 8018eba:	00db      	lsls	r3, r3, #3
 8018ebc:	461a      	mov	r2, r3
 8018ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018ec2:	4413      	add	r3, r2
 8018ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8018ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018ed0:	edd3 6a01 	vldr	s13, [r3, #4]
 8018ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018ed8:	68ba      	ldr	r2, [r7, #8]
 8018eda:	fb03 f202 	mul.w	r2, r3, r2
 8018ede:	4613      	mov	r3, r2
 8018ee0:	005b      	lsls	r3, r3, #1
 8018ee2:	4413      	add	r3, r2
 8018ee4:	00db      	lsls	r3, r3, #3
 8018ee6:	461a      	mov	r2, r3
 8018ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018eec:	4413      	add	r3, r2
 8018eee:	edd3 7a00 	vldr	s15, [r3]
 8018ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018efa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8018efe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018f02:	ed93 7a00 	vldr	s14, [r3]
 8018f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f0a:	68ba      	ldr	r2, [r7, #8]
 8018f0c:	fb02 f303 	mul.w	r3, r2, r3
 8018f10:	015b      	lsls	r3, r3, #5
 8018f12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018f16:	4413      	add	r3, r2
 8018f18:	edd3 7a00 	vldr	s15, [r3]
 8018f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018f24:	edd3 6a01 	vldr	s13, [r3, #4]
 8018f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f2c:	68ba      	ldr	r2, [r7, #8]
 8018f2e:	fb02 f303 	mul.w	r3, r2, r3
 8018f32:	015b      	lsls	r3, r3, #5
 8018f34:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018f38:	4413      	add	r3, r2
 8018f3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8018f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f46:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8018f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018f4e:	ed93 7a00 	vldr	s14, [r3]
 8018f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f56:	68ba      	ldr	r2, [r7, #8]
 8018f58:	fb02 f303 	mul.w	r3, r2, r3
 8018f5c:	015b      	lsls	r3, r3, #5
 8018f5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018f62:	4413      	add	r3, r2
 8018f64:	edd3 7a01 	vldr	s15, [r3, #4]
 8018f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018f70:	edd3 6a01 	vldr	s13, [r3, #4]
 8018f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f78:	68ba      	ldr	r2, [r7, #8]
 8018f7a:	fb02 f303 	mul.w	r3, r2, r3
 8018f7e:	015b      	lsls	r3, r3, #5
 8018f80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018f84:	4413      	add	r3, r2
 8018f86:	edd3 7a00 	vldr	s15, [r3]
 8018f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f92:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8018f96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018f9a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8018f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fa2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8018fa6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018faa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8018fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fb2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8018fb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018fba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8018fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fc2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8018fc6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018fca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8018fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fd2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8018fd6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8018fda:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fe2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8018fe6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8018fea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ff2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8018ff6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8018ffa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019002:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8019006:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801900a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801900e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019012:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8019016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801901a:	ed93 7a00 	vldr	s14, [r3]
 801901e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019022:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8019026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801902a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801902e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019032:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8019036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801903a:	ed93 7a01 	vldr	s14, [r3, #4]
 801903e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019042:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8019046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801904a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801904e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019052:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8019056:	ed97 7a08 	vldr	s14, [r7, #32]
 801905a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801905e:	edd7 7a06 	vldr	s15, [r7, #24]
 8019062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019066:	ee37 7a27 	vadd.f32	s14, s14, s15
 801906a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801906e:	edd7 7a04 	vldr	s15, [r7, #16]
 8019072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019076:	ee77 7a27 	vadd.f32	s15, s14, s15
 801907a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 801907e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019082:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019086:	edd7 7a06 	vldr	s15, [r7, #24]
 801908a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801908e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019092:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8019096:	edd7 7a04 	vldr	s15, [r7, #16]
 801909a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801909e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190a2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 80190a6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80190aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80190ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80190b2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80190b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80190ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80190be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190c2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 80190c6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80190ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80190ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80190d2:	eeb1 7a67 	vneg.f32	s14, s15
 80190d6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80190da:	edd7 7a05 	vldr	s15, [r7, #20]
 80190de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80190e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190e6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 80190ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80190ee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80190f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80190fa:	edc3 7a00 	vstr	s15, [r3]
 80190fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8019102:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8019106:	ee77 7a67 	vsub.f32	s15, s14, s15
 801910a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801910e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8019112:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8019116:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801911a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801911e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019122:	edc3 7a00 	vstr	s15, [r3]
 8019126:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801912a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801912e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019136:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 801913a:	ed97 7a08 	vldr	s14, [r7, #32]
 801913e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019142:	edd7 7a04 	vldr	s15, [r7, #16]
 8019146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801914a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801914e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8019152:	edd7 7a06 	vldr	s15, [r7, #24]
 8019156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801915a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801915e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8019162:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019166:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801916a:	edd7 7a04 	vldr	s15, [r7, #16]
 801916e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019176:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801917a:	edd7 7a06 	vldr	s15, [r7, #24]
 801917e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019186:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 801918a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801918e:	edd7 7a07 	vldr	s15, [r7, #28]
 8019192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019196:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 801919a:	edd7 7a05 	vldr	s15, [r7, #20]
 801919e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80191a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191a6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 80191aa:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80191ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80191b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80191b6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80191ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80191be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80191c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191c6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 80191ca:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80191ce:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80191d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80191d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80191da:	edc3 7a00 	vstr	s15, [r3]
 80191de:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80191e2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80191e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80191ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80191ee:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 80191f2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80191f6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80191fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019202:	edc3 7a00 	vstr	s15, [r3]
 8019206:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801920a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801920e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019212:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019216:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 801921a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801921e:	3308      	adds	r3, #8
 8019220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8019224:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019228:	3308      	adds	r3, #8
 801922a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801922e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019232:	3308      	adds	r3, #8
 8019234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801923c:	3308      	adds	r3, #8
 801923e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019242:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019246:	3308      	adds	r3, #8
 8019248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 801924c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019250:	3301      	adds	r3, #1
 8019252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019256:	e550      	b.n	8018cfa <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 8019258:	bf00      	nop
 801925a:	37ac      	adds	r7, #172	; 0xac
 801925c:	46bd      	mov	sp, r7
 801925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019262:	4770      	bx	lr

08019264 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b08e      	sub	sp, #56	; 0x38
 8019268:	af00      	add	r7, sp, #0
 801926a:	60f8      	str	r0, [r7, #12]
 801926c:	60b9      	str	r1, [r7, #8]
 801926e:	607a      	str	r2, [r7, #4]
 8019270:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019278:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8019280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019282:	00db      	lsls	r3, r3, #3
 8019284:	4618      	mov	r0, r3
 8019286:	f000 fe8b 	bl	8019fa0 <_Z9ei_mallocj>
 801928a:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 801928c:	2300      	movs	r3, #0
 801928e:	637b      	str	r3, [r7, #52]	; 0x34
 8019290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019292:	683b      	ldr	r3, [r7, #0]
 8019294:	429a      	cmp	r2, r3
 8019296:	f280 80b6 	bge.w	8019406 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 801929a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801929c:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801929e:	2300      	movs	r3, #0
 80192a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192a6:	429a      	cmp	r2, r3
 80192a8:	da14      	bge.n	80192d4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 80192aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ac:	00db      	lsls	r3, r3, #3
 80192ae:	68fa      	ldr	r2, [r7, #12]
 80192b0:	18d1      	adds	r1, r2, r3
 80192b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b4:	00db      	lsls	r3, r3, #3
 80192b6:	69ba      	ldr	r2, [r7, #24]
 80192b8:	4413      	add	r3, r2
 80192ba:	460a      	mov	r2, r1
 80192bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192c0:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 80192c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80192c6:	683b      	ldr	r3, [r7, #0]
 80192c8:	4413      	add	r3, r2
 80192ca:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80192cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ce:	3301      	adds	r3, #1
 80192d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192d2:	e7e6      	b.n	80192a2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 80192d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192d6:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80192d8:	2300      	movs	r3, #0
 80192da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192e0:	429a      	cmp	r2, r3
 80192e2:	f280 808c 	bge.w	80193fe <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 80192e6:	2300      	movs	r3, #0
 80192e8:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 80192ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ec:	00db      	lsls	r3, r3, #3
 80192ee:	68fa      	ldr	r2, [r7, #12]
 80192f0:	4413      	add	r3, r2
 80192f2:	69ba      	ldr	r2, [r7, #24]
 80192f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192f8:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 80192fc:	2301      	movs	r3, #1
 80192fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8019300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019304:	429a      	cmp	r2, r3
 8019306:	da72      	bge.n	80193ee <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 8019308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801930a:	68ba      	ldr	r2, [r7, #8]
 801930c:	fb03 f202 	mul.w	r2, r3, r2
 8019310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019312:	4413      	add	r3, r2
 8019314:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8019316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019318:	69fb      	ldr	r3, [r7, #28]
 801931a:	429a      	cmp	r2, r3
 801931c:	db03      	blt.n	8019326 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 801931e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019320:	69fb      	ldr	r3, [r7, #28]
 8019322:	1ad3      	subs	r3, r2, r3
 8019324:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8019326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019328:	00db      	lsls	r3, r3, #3
 801932a:	69ba      	ldr	r2, [r7, #24]
 801932c:	4413      	add	r3, r2
 801932e:	ed93 7a00 	vldr	s14, [r3]
 8019332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019334:	00db      	lsls	r3, r3, #3
 8019336:	6a3a      	ldr	r2, [r7, #32]
 8019338:	4413      	add	r3, r2
 801933a:	edd3 7a00 	vldr	s15, [r3]
 801933e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019344:	00db      	lsls	r3, r3, #3
 8019346:	69ba      	ldr	r2, [r7, #24]
 8019348:	4413      	add	r3, r2
 801934a:	edd3 6a01 	vldr	s13, [r3, #4]
 801934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019350:	00db      	lsls	r3, r3, #3
 8019352:	6a3a      	ldr	r2, [r7, #32]
 8019354:	4413      	add	r3, r2
 8019356:	edd3 7a01 	vldr	s15, [r3, #4]
 801935a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801935e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019362:	edc7 7a04 	vstr	s15, [r7, #16]
 8019366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019368:	00db      	lsls	r3, r3, #3
 801936a:	69ba      	ldr	r2, [r7, #24]
 801936c:	4413      	add	r3, r2
 801936e:	ed93 7a00 	vldr	s14, [r3]
 8019372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019374:	00db      	lsls	r3, r3, #3
 8019376:	6a3a      	ldr	r2, [r7, #32]
 8019378:	4413      	add	r3, r2
 801937a:	edd3 7a01 	vldr	s15, [r3, #4]
 801937e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019384:	00db      	lsls	r3, r3, #3
 8019386:	69ba      	ldr	r2, [r7, #24]
 8019388:	4413      	add	r3, r2
 801938a:	edd3 6a01 	vldr	s13, [r3, #4]
 801938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019390:	00db      	lsls	r3, r3, #3
 8019392:	6a3a      	ldr	r2, [r7, #32]
 8019394:	4413      	add	r3, r2
 8019396:	edd3 7a00 	vldr	s15, [r3]
 801939a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801939e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80193a2:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 80193a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193a8:	00db      	lsls	r3, r3, #3
 80193aa:	68fa      	ldr	r2, [r7, #12]
 80193ac:	4413      	add	r3, r2
 80193ae:	ed93 7a00 	vldr	s14, [r3]
 80193b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80193b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b8:	00db      	lsls	r3, r3, #3
 80193ba:	68fa      	ldr	r2, [r7, #12]
 80193bc:	4413      	add	r3, r2
 80193be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80193c2:	edc3 7a00 	vstr	s15, [r3]
 80193c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193c8:	00db      	lsls	r3, r3, #3
 80193ca:	68fa      	ldr	r2, [r7, #12]
 80193cc:	4413      	add	r3, r2
 80193ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80193d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80193d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193d8:	00db      	lsls	r3, r3, #3
 80193da:	68fa      	ldr	r2, [r7, #12]
 80193dc:	4413      	add	r3, r2
 80193de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80193e2:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 80193e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e8:	3301      	adds	r3, #1
 80193ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80193ec:	e788      	b.n	8019300 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 80193ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	4413      	add	r3, r2
 80193f4:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80193f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193f8:	3301      	adds	r3, #1
 80193fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193fc:	e76e      	b.n	80192dc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 80193fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019400:	3301      	adds	r3, #1
 8019402:	637b      	str	r3, [r7, #52]	; 0x34
 8019404:	e744      	b.n	8019290 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8019406:	69b8      	ldr	r0, [r7, #24]
 8019408:	f000 fde4 	bl	8019fd4 <_Z7ei_freePv>
}
 801940c:	bf00      	nop
 801940e:	3738      	adds	r7, #56	; 0x38
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}

08019414 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b08a      	sub	sp, #40	; 0x28
 8019418:	af02      	add	r7, sp, #8
 801941a:	60f8      	str	r0, [r7, #12]
 801941c:	60b9      	str	r1, [r7, #8]
 801941e:	607a      	str	r2, [r7, #4]
 8019420:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8019426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019428:	1d1a      	adds	r2, r3, #4
 801942a:	62ba      	str	r2, [r7, #40]	; 0x28
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 8019430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019432:	1d1a      	adds	r2, r3, #4
 8019434:	62ba      	str	r2, [r7, #40]	; 0x28
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 801943a:	69bb      	ldr	r3, [r7, #24]
 801943c:	697a      	ldr	r2, [r7, #20]
 801943e:	fb02 f303 	mul.w	r3, r2, r3
 8019442:	00db      	lsls	r3, r3, #3
 8019444:	68fa      	ldr	r2, [r7, #12]
 8019446:	4413      	add	r3, r2
 8019448:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 801944a:	697b      	ldr	r3, [r7, #20]
 801944c:	2b01      	cmp	r3, #1
 801944e:	d11a      	bne.n	8019486 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	68ba      	ldr	r2, [r7, #8]
 8019454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019458:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 801945c:	683b      	ldr	r3, [r7, #0]
 801945e:	687a      	ldr	r2, [r7, #4]
 8019460:	fb02 f303 	mul.w	r3, r2, r3
 8019464:	00db      	lsls	r3, r3, #3
 8019466:	68ba      	ldr	r2, [r7, #8]
 8019468:	4413      	add	r3, r2
 801946a:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	3308      	adds	r3, #8
 8019470:	60fb      	str	r3, [r7, #12]
 8019472:	68fa      	ldr	r2, [r7, #12]
 8019474:	693b      	ldr	r3, [r7, #16]
 8019476:	429a      	cmp	r2, r3
 8019478:	bf14      	ite	ne
 801947a:	2301      	movne	r3, #1
 801947c:	2300      	moveq	r3, #0
 801947e:	b2db      	uxtb	r3, r3
 8019480:	2b00      	cmp	r3, #0
 8019482:	d024      	beq.n	80194ce <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 8019484:	e7e4      	b.n	8019450 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8019486:	69bb      	ldr	r3, [r7, #24]
 8019488:	687a      	ldr	r2, [r7, #4]
 801948a:	fb03 f202 	mul.w	r2, r3, r2
 801948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019490:	9301      	str	r3, [sp, #4]
 8019492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019494:	9300      	str	r3, [sp, #0]
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	68b9      	ldr	r1, [r7, #8]
 801949a:	68f8      	ldr	r0, [r7, #12]
 801949c:	f7ff ffba 	bl	8019414 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 80194a0:	683b      	ldr	r3, [r7, #0]
 80194a2:	687a      	ldr	r2, [r7, #4]
 80194a4:	fb02 f303 	mul.w	r3, r2, r3
 80194a8:	00db      	lsls	r3, r3, #3
 80194aa:	68ba      	ldr	r2, [r7, #8]
 80194ac:	4413      	add	r3, r2
 80194ae:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 80194b0:	697b      	ldr	r3, [r7, #20]
 80194b2:	00db      	lsls	r3, r3, #3
 80194b4:	68fa      	ldr	r2, [r7, #12]
 80194b6:	4413      	add	r3, r2
 80194b8:	60fb      	str	r3, [r7, #12]
 80194ba:	68fa      	ldr	r2, [r7, #12]
 80194bc:	693b      	ldr	r3, [r7, #16]
 80194be:	429a      	cmp	r2, r3
 80194c0:	bf14      	ite	ne
 80194c2:	2301      	movne	r3, #1
 80194c4:	2300      	moveq	r3, #0
 80194c6:	b2db      	uxtb	r3, r3
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d000      	beq.n	80194ce <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 80194cc:	e7db      	b.n	8019486 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 80194ce:	69fb      	ldr	r3, [r7, #28]
 80194d0:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 80194d2:	69bb      	ldr	r3, [r7, #24]
 80194d4:	3b02      	subs	r3, #2
 80194d6:	2b03      	cmp	r3, #3
 80194d8:	d826      	bhi.n	8019528 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 80194da:	a201      	add	r2, pc, #4	; (adr r2, 80194e0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 80194dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194e0:	080194f1 	.word	0x080194f1
 80194e4:	080194ff 	.word	0x080194ff
 80194e8:	0801950d 	.word	0x0801950d
 80194ec:	0801951b 	.word	0x0801951b
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 80194f0:	697b      	ldr	r3, [r7, #20]
 80194f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194f4:	6879      	ldr	r1, [r7, #4]
 80194f6:	68f8      	ldr	r0, [r7, #12]
 80194f8:	f7ff f808 	bl	801850c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 80194fc:	e01d      	b.n	801953a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 80194fe:	697b      	ldr	r3, [r7, #20]
 8019500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019502:	6879      	ldr	r1, [r7, #4]
 8019504:	68f8      	ldr	r0, [r7, #12]
 8019506:	f7ff fa35 	bl	8018974 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 801950a:	e016      	b.n	801953a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019510:	6879      	ldr	r1, [r7, #4]
 8019512:	68f8      	ldr	r0, [r7, #12]
 8019514:	f7ff f877 	bl	8018606 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8019518:	e00f      	b.n	801953a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801951e:	6879      	ldr	r1, [r7, #4]
 8019520:	68f8      	ldr	r0, [r7, #12]
 8019522:	f7ff fb97 	bl	8018c54 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 8019526:	e008      	b.n	801953a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8019528:	69bb      	ldr	r3, [r7, #24]
 801952a:	9300      	str	r3, [sp, #0]
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019530:	6879      	ldr	r1, [r7, #4]
 8019532:	68f8      	ldr	r0, [r7, #12]
 8019534:	f7ff fe96 	bl	8019264 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8019538:	bf00      	nop
    }
}
 801953a:	bf00      	nop
 801953c:	3720      	adds	r7, #32
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}
 8019542:	bf00      	nop

08019544 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b086      	sub	sp, #24
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	6039      	str	r1, [r7, #0]
    int p=4;
 801954e:	2304      	movs	r3, #4
 8019550:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	f7e6 fff0 	bl	8000538 <__aeabi_i2d>
 8019558:	4602      	mov	r2, r0
 801955a:	460b      	mov	r3, r1
 801955c:	ec43 2b10 	vmov	d0, r2, r3
 8019560:	f006 fe98 	bl	8020294 <sqrt>
 8019564:	eeb0 7a40 	vmov.f32	s14, s0
 8019568:	eef0 7a60 	vmov.f32	s15, s1
 801956c:	eeb0 0a47 	vmov.f32	s0, s14
 8019570:	eef0 0a67 	vmov.f32	s1, s15
 8019574:	f006 fc48 	bl	801fe08 <floor>
 8019578:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	697a      	ldr	r2, [r7, #20]
 8019580:	fb93 f2f2 	sdiv	r2, r3, r2
 8019584:	6979      	ldr	r1, [r7, #20]
 8019586:	fb01 f202 	mul.w	r2, r1, r2
 801958a:	1a9b      	subs	r3, r3, r2
 801958c:	2b00      	cmp	r3, #0
 801958e:	d01e      	beq.n	80195ce <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 8019590:	697b      	ldr	r3, [r7, #20]
 8019592:	2b02      	cmp	r3, #2
 8019594:	d005      	beq.n	80195a2 <_ZL9kf_factoriPi+0x5e>
 8019596:	697b      	ldr	r3, [r7, #20]
 8019598:	2b04      	cmp	r3, #4
 801959a:	d105      	bne.n	80195a8 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 801959c:	2302      	movs	r3, #2
 801959e:	617b      	str	r3, [r7, #20]
 80195a0:	e006      	b.n	80195b0 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 80195a2:	2303      	movs	r3, #3
 80195a4:	617b      	str	r3, [r7, #20]
 80195a6:	e003      	b.n	80195b0 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 80195a8:	697b      	ldr	r3, [r7, #20]
 80195aa:	3302      	adds	r3, #2
 80195ac:	617b      	str	r3, [r7, #20]
 80195ae:	bf00      	nop
            }
            if (p > floor_sqrt)
 80195b0:	6978      	ldr	r0, [r7, #20]
 80195b2:	f7e6 ffc1 	bl	8000538 <__aeabi_i2d>
 80195b6:	4602      	mov	r2, r0
 80195b8:	460b      	mov	r3, r1
 80195ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80195be:	f7e7 fa97 	bl	8000af0 <__aeabi_dcmplt>
 80195c2:	4603      	mov	r3, r0
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d001      	beq.n	80195cc <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	617b      	str	r3, [r7, #20]
        while (n % p) {
 80195cc:	e7d6      	b.n	801957c <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 80195ce:	687a      	ldr	r2, [r7, #4]
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80195d6:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	1d1a      	adds	r2, r3, #4
 80195dc:	603a      	str	r2, [r7, #0]
 80195de:	697a      	ldr	r2, [r7, #20]
 80195e0:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 80195e2:	683b      	ldr	r3, [r7, #0]
 80195e4:	1d1a      	adds	r2, r3, #4
 80195e6:	603a      	str	r2, [r7, #0]
 80195e8:	687a      	ldr	r2, [r7, #4]
 80195ea:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2b01      	cmp	r3, #1
 80195f0:	dd00      	ble.n	80195f4 <_ZL9kf_factoriPi+0xb0>
    do {
 80195f2:	e7c3      	b.n	801957c <_ZL9kf_factoriPi+0x38>
}
 80195f4:	bf00      	nop
 80195f6:	3718      	adds	r7, #24
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}
 80195fc:	0000      	movs	r0, r0
	...

08019600 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 8019600:	b5b0      	push	{r4, r5, r7, lr}
 8019602:	b090      	sub	sp, #64	; 0x40
 8019604:	af00      	add	r7, sp, #0
 8019606:	60f8      	str	r0, [r7, #12]
 8019608:	60b9      	str	r1, [r7, #8]
 801960a:	607a      	str	r2, [r7, #4]
 801960c:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 801960e:	2300      	movs	r3, #0
 8019610:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 8019616:	00db      	lsls	r3, r3, #3
 8019618:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 801961a:	683b      	ldr	r3, [r7, #0]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d104      	bne.n	801962a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8019620:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019622:	f000 fcbd 	bl	8019fa0 <_Z9ei_mallocj>
 8019626:	63f8      	str	r0, [r7, #60]	; 0x3c
 8019628:	e00c      	b.n	8019644 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d006      	beq.n	801963e <kiss_fft_alloc+0x3e>
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019636:	429a      	cmp	r2, r3
 8019638:	d801      	bhi.n	801963e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019642:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 8019644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019646:	2b00      	cmp	r3, #0
 8019648:	f000 80a0 	beq.w	801978c <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 801964c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801964e:	68fa      	ldr	r2, [r7, #12]
 8019650:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8019652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019654:	68ba      	ldr	r2, [r7, #8]
 8019656:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8019658:	68bb      	ldr	r3, [r7, #8]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d048      	beq.n	80196f0 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 801965e:	2300      	movs	r3, #0
 8019660:	63bb      	str	r3, [r7, #56]	; 0x38
 8019662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	429a      	cmp	r2, r3
 8019668:	f280 808a 	bge.w	8019780 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801966c:	a34e      	add	r3, pc, #312	; (adr r3, 80197a8 <kiss_fft_alloc+0x1a8>)
 801966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019672:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 8019676:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019678:	f7e6 ff5e 	bl	8000538 <__aeabi_i2d>
 801967c:	a34c      	add	r3, pc, #304	; (adr r3, 80197b0 <kiss_fft_alloc+0x1b0>)
 801967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019682:	f7e6 ffc3 	bl	800060c <__aeabi_dmul>
 8019686:	4602      	mov	r2, r0
 8019688:	460b      	mov	r3, r1
 801968a:	4614      	mov	r4, r2
 801968c:	461d      	mov	r5, r3
 801968e:	68f8      	ldr	r0, [r7, #12]
 8019690:	f7e6 ff52 	bl	8000538 <__aeabi_i2d>
 8019694:	4602      	mov	r2, r0
 8019696:	460b      	mov	r3, r1
 8019698:	4620      	mov	r0, r4
 801969a:	4629      	mov	r1, r5
 801969c:	f7e7 f8e0 	bl	8000860 <__aeabi_ddiv>
 80196a0:	4602      	mov	r2, r0
 80196a2:	460b      	mov	r3, r1
 80196a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 80196a8:	ed97 0b04 	vldr	d0, [r7, #16]
 80196ac:	f006 fb58 	bl	801fd60 <cos>
 80196b0:	ec51 0b10 	vmov	r0, r1, d0
 80196b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196b6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80196ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196bc:	00db      	lsls	r3, r3, #3
 80196be:	18d4      	adds	r4, r2, r3
 80196c0:	f7e7 fa9c 	bl	8000bfc <__aeabi_d2f>
 80196c4:	4603      	mov	r3, r0
 80196c6:	6023      	str	r3, [r4, #0]
 80196c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80196cc:	f006 fc9c 	bl	8020008 <sin>
 80196d0:	ec51 0b10 	vmov	r0, r1, d0
 80196d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196d6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80196da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196dc:	00db      	lsls	r3, r3, #3
 80196de:	18d4      	adds	r4, r2, r3
 80196e0:	f7e7 fa8c 	bl	8000bfc <__aeabi_d2f>
 80196e4:	4603      	mov	r3, r0
 80196e6:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 80196e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ea:	3301      	adds	r3, #1
 80196ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80196ee:	e7b8      	b.n	8019662 <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 80196f0:	2300      	movs	r3, #0
 80196f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80196f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	429a      	cmp	r2, r3
 80196fa:	da41      	bge.n	8019780 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 80196fc:	a32a      	add	r3, pc, #168	; (adr r3, 80197a8 <kiss_fft_alloc+0x1a8>)
 80196fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019702:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 8019706:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019708:	f7e6 ff16 	bl	8000538 <__aeabi_i2d>
 801970c:	a32a      	add	r3, pc, #168	; (adr r3, 80197b8 <kiss_fft_alloc+0x1b8>)
 801970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019712:	f7e6 ff7b 	bl	800060c <__aeabi_dmul>
 8019716:	4602      	mov	r2, r0
 8019718:	460b      	mov	r3, r1
 801971a:	4614      	mov	r4, r2
 801971c:	461d      	mov	r5, r3
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	f7e6 ff0a 	bl	8000538 <__aeabi_i2d>
 8019724:	4602      	mov	r2, r0
 8019726:	460b      	mov	r3, r1
 8019728:	4620      	mov	r0, r4
 801972a:	4629      	mov	r1, r5
 801972c:	f7e7 f898 	bl	8000860 <__aeabi_ddiv>
 8019730:	4602      	mov	r2, r0
 8019732:	460b      	mov	r3, r1
 8019734:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8019738:	ed97 0b08 	vldr	d0, [r7, #32]
 801973c:	f006 fb10 	bl	801fd60 <cos>
 8019740:	ec51 0b10 	vmov	r0, r1, d0
 8019744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019746:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801974c:	00db      	lsls	r3, r3, #3
 801974e:	18d4      	adds	r4, r2, r3
 8019750:	f7e7 fa54 	bl	8000bfc <__aeabi_d2f>
 8019754:	4603      	mov	r3, r0
 8019756:	6023      	str	r3, [r4, #0]
 8019758:	ed97 0b08 	vldr	d0, [r7, #32]
 801975c:	f006 fc54 	bl	8020008 <sin>
 8019760:	ec51 0b10 	vmov	r0, r1, d0
 8019764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019766:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801976c:	00db      	lsls	r3, r3, #3
 801976e:	18d4      	adds	r4, r2, r3
 8019770:	f7e7 fa44 	bl	8000bfc <__aeabi_d2f>
 8019774:	4603      	mov	r3, r0
 8019776:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8019778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801977a:	3301      	adds	r3, #1
 801977c:	63bb      	str	r3, [r7, #56]	; 0x38
 801977e:	e7b9      	b.n	80196f4 <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 8019780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019782:	3308      	adds	r3, #8
 8019784:	4619      	mov	r1, r3
 8019786:	68f8      	ldr	r0, [r7, #12]
 8019788:	f7ff fedc 	bl	8019544 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 801978c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801978e:	2b00      	cmp	r3, #0
 8019790:	d002      	beq.n	8019798 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 8019792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019796:	601a      	str	r2, [r3, #0]
    }

    return st;
 8019798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801979a:	4618      	mov	r0, r3
 801979c:	3740      	adds	r7, #64	; 0x40
 801979e:	46bd      	mov	sp, r7
 80197a0:	bdb0      	pop	{r4, r5, r7, pc}
 80197a2:	bf00      	nop
 80197a4:	f3af 8000 	nop.w
 80197a8:	54442d18 	.word	0x54442d18
 80197ac:	400921fb 	.word	0x400921fb
 80197b0:	54442d18 	.word	0x54442d18
 80197b4:	401921fb 	.word	0x401921fb
 80197b8:	54442d18 	.word	0x54442d18
 80197bc:	c01921fb 	.word	0xc01921fb

080197c0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b088      	sub	sp, #32
 80197c4:	af02      	add	r7, sp, #8
 80197c6:	60f8      	str	r0, [r7, #12]
 80197c8:	60b9      	str	r1, [r7, #8]
 80197ca:	607a      	str	r2, [r7, #4]
 80197cc:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 80197ce:	68ba      	ldr	r2, [r7, #8]
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	429a      	cmp	r2, r3
 80197d4:	d11d      	bne.n	8019812 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	00db      	lsls	r3, r3, #3
 80197dc:	4618      	mov	r0, r3
 80197de:	f000 fbdf 	bl	8019fa0 <_Z9ei_mallocj>
 80197e2:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	3308      	adds	r3, #8
 80197e8:	68fa      	ldr	r2, [r7, #12]
 80197ea:	9201      	str	r2, [sp, #4]
 80197ec:	9300      	str	r3, [sp, #0]
 80197ee:	683b      	ldr	r3, [r7, #0]
 80197f0:	2201      	movs	r2, #1
 80197f2:	68b9      	ldr	r1, [r7, #8]
 80197f4:	6978      	ldr	r0, [r7, #20]
 80197f6:	f7ff fe0d 	bl	8019414 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	00db      	lsls	r3, r3, #3
 8019800:	461a      	mov	r2, r3
 8019802:	6979      	ldr	r1, [r7, #20]
 8019804:	6878      	ldr	r0, [r7, #4]
 8019806:	f009 f867 	bl	80228d8 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 801980a:	6978      	ldr	r0, [r7, #20]
 801980c:	f000 fbe2 	bl	8019fd4 <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8019810:	e00a      	b.n	8019828 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	3308      	adds	r3, #8
 8019816:	68fa      	ldr	r2, [r7, #12]
 8019818:	9201      	str	r2, [sp, #4]
 801981a:	9300      	str	r3, [sp, #0]
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	2201      	movs	r2, #1
 8019820:	68b9      	ldr	r1, [r7, #8]
 8019822:	6878      	ldr	r0, [r7, #4]
 8019824:	f7ff fdf6 	bl	8019414 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8019828:	bf00      	nop
 801982a:	3718      	adds	r7, #24
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}

08019830 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b084      	sub	sp, #16
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 801983c:	2301      	movs	r3, #1
 801983e:	687a      	ldr	r2, [r7, #4]
 8019840:	68b9      	ldr	r1, [r7, #8]
 8019842:	68f8      	ldr	r0, [r7, #12]
 8019844:	f7ff ffbc 	bl	80197c0 <kiss_fft_stride>
}
 8019848:	bf00      	nop
 801984a:	3710      	adds	r7, #16
 801984c:	46bd      	mov	sp, r7
 801984e:	bd80      	pop	{r7, pc}

08019850 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8019850:	b5b0      	push	{r4, r5, r7, lr}
 8019852:	b090      	sub	sp, #64	; 0x40
 8019854:	af02      	add	r7, sp, #8
 8019856:	60f8      	str	r0, [r7, #12]
 8019858:	60b9      	str	r1, [r7, #8]
 801985a:	607a      	str	r2, [r7, #4]
 801985c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 801985e:	2300      	movs	r3, #0
 8019860:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 8019862:	2300      	movs	r3, #0
 8019864:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	f003 0301 	and.w	r3, r3, #1
 801986c:	2b00      	cmp	r3, #0
 801986e:	d004      	beq.n	801987a <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8019870:	4885      	ldr	r0, [pc, #532]	; (8019a88 <kiss_fftr_alloc+0x238>)
 8019872:	f7ec f9c3 	bl	8005bfc <_Z9ei_printfPKcz>
        return NULL;
 8019876:	2300      	movs	r3, #0
 8019878:	e0f9      	b.n	8019a6e <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	105b      	asrs	r3, r3, #1
 801987e:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8019880:	f107 0314 	add.w	r3, r7, #20
 8019884:	2200      	movs	r2, #0
 8019886:	9200      	str	r2, [sp, #0]
 8019888:	2200      	movs	r2, #0
 801988a:	68b9      	ldr	r1, [r7, #8]
 801988c:	68f8      	ldr	r0, [r7, #12]
 801988e:	f7ff feb7 	bl	8019600 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 8019892:	68fa      	ldr	r2, [r7, #12]
 8019894:	4613      	mov	r3, r2
 8019896:	005b      	lsls	r3, r3, #1
 8019898:	4413      	add	r3, r2
 801989a:	0fda      	lsrs	r2, r3, #31
 801989c:	4413      	add	r3, r2
 801989e:	105b      	asrs	r3, r3, #1
 80198a0:	00da      	lsls	r2, r3, #3
 80198a2:	697b      	ldr	r3, [r7, #20]
 80198a4:	4413      	add	r3, r2
 80198a6:	330c      	adds	r3, #12
 80198a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 80198aa:	683b      	ldr	r3, [r7, #0]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d104      	bne.n	80198ba <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 80198b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80198b2:	f000 fb75 	bl	8019fa0 <_Z9ei_mallocj>
 80198b6:	6338      	str	r0, [r7, #48]	; 0x30
 80198b8:	e009      	b.n	80198ce <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 80198ba:	683b      	ldr	r3, [r7, #0]
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d801      	bhi.n	80198c8 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 80198c8:	683b      	ldr	r3, [r7, #0]
 80198ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198cc:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 80198ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d101      	bne.n	80198d8 <kiss_fftr_alloc+0x88>
        return NULL;
 80198d4:	2300      	movs	r3, #0
 80198d6:	e0ca      	b.n	8019a6e <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 80198d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198da:	f103 020c 	add.w	r2, r3, #12
 80198de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e0:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 80198e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e4:	681a      	ldr	r2, [r3, #0]
 80198e6:	697b      	ldr	r3, [r7, #20]
 80198e8:	441a      	add	r2, r3
 80198ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198ec:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 80198ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198f0:	685a      	ldr	r2, [r3, #4]
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	00db      	lsls	r3, r3, #3
 80198f6:	441a      	add	r2, r3
 80198f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198fa:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 80198fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198fe:	681a      	ldr	r2, [r3, #0]
 8019900:	f107 0314 	add.w	r3, r7, #20
 8019904:	2100      	movs	r1, #0
 8019906:	9100      	str	r1, [sp, #0]
 8019908:	68b9      	ldr	r1, [r7, #8]
 801990a:	68f8      	ldr	r0, [r7, #12]
 801990c:	f7ff fe78 	bl	8019600 <kiss_fft_alloc>

    if (inverse_fft) {
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d052      	beq.n	80199bc <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 8019916:	2300      	movs	r3, #0
 8019918:	637b      	str	r3, [r7, #52]	; 0x34
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	0fda      	lsrs	r2, r3, #31
 801991e:	4413      	add	r3, r2
 8019920:	105b      	asrs	r3, r3, #1
 8019922:	461a      	mov	r2, r3
 8019924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019926:	4293      	cmp	r3, r2
 8019928:	f280 809a 	bge.w	8019a60 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801992c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801992e:	3301      	adds	r3, #1
 8019930:	4618      	mov	r0, r3
 8019932:	f7e6 fe01 	bl	8000538 <__aeabi_i2d>
 8019936:	4604      	mov	r4, r0
 8019938:	460d      	mov	r5, r1
 801993a:	68f8      	ldr	r0, [r7, #12]
 801993c:	f7e6 fdfc 	bl	8000538 <__aeabi_i2d>
 8019940:	4602      	mov	r2, r0
 8019942:	460b      	mov	r3, r1
 8019944:	4620      	mov	r0, r4
 8019946:	4629      	mov	r1, r5
 8019948:	f7e6 ff8a 	bl	8000860 <__aeabi_ddiv>
 801994c:	4602      	mov	r2, r0
 801994e:	460b      	mov	r3, r1
 8019950:	4610      	mov	r0, r2
 8019952:	4619      	mov	r1, r3
 8019954:	f04f 0200 	mov.w	r2, #0
 8019958:	4b4c      	ldr	r3, [pc, #304]	; (8019a8c <kiss_fftr_alloc+0x23c>)
 801995a:	f7e6 fca1 	bl	80002a0 <__adddf3>
 801995e:	4602      	mov	r2, r0
 8019960:	460b      	mov	r3, r1
 8019962:	4610      	mov	r0, r2
 8019964:	4619      	mov	r1, r3
            double phase =
 8019966:	a344      	add	r3, pc, #272	; (adr r3, 8019a78 <kiss_fftr_alloc+0x228>)
 8019968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801996c:	f7e6 fe4e 	bl	800060c <__aeabi_dmul>
 8019970:	4602      	mov	r2, r0
 8019972:	460b      	mov	r3, r1
 8019974:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8019978:	ed97 0b06 	vldr	d0, [r7, #24]
 801997c:	f006 f9f0 	bl	801fd60 <cos>
 8019980:	ec51 0b10 	vmov	r0, r1, d0
 8019984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019986:	689a      	ldr	r2, [r3, #8]
 8019988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801998a:	00db      	lsls	r3, r3, #3
 801998c:	18d4      	adds	r4, r2, r3
 801998e:	f7e7 f935 	bl	8000bfc <__aeabi_d2f>
 8019992:	4603      	mov	r3, r0
 8019994:	6023      	str	r3, [r4, #0]
 8019996:	ed97 0b06 	vldr	d0, [r7, #24]
 801999a:	f006 fb35 	bl	8020008 <sin>
 801999e:	ec51 0b10 	vmov	r0, r1, d0
 80199a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199a4:	689a      	ldr	r2, [r3, #8]
 80199a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199a8:	00db      	lsls	r3, r3, #3
 80199aa:	18d4      	adds	r4, r2, r3
 80199ac:	f7e7 f926 	bl	8000bfc <__aeabi_d2f>
 80199b0:	4603      	mov	r3, r0
 80199b2:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 80199b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199b6:	3301      	adds	r3, #1
 80199b8:	637b      	str	r3, [r7, #52]	; 0x34
 80199ba:	e7ae      	b.n	801991a <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 80199bc:	2300      	movs	r3, #0
 80199be:	637b      	str	r3, [r7, #52]	; 0x34
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	0fda      	lsrs	r2, r3, #31
 80199c4:	4413      	add	r3, r2
 80199c6:	105b      	asrs	r3, r3, #1
 80199c8:	461a      	mov	r2, r3
 80199ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199cc:	4293      	cmp	r3, r2
 80199ce:	da47      	bge.n	8019a60 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 80199d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199d2:	3301      	adds	r3, #1
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7e6 fdaf 	bl	8000538 <__aeabi_i2d>
 80199da:	4604      	mov	r4, r0
 80199dc:	460d      	mov	r5, r1
 80199de:	68f8      	ldr	r0, [r7, #12]
 80199e0:	f7e6 fdaa 	bl	8000538 <__aeabi_i2d>
 80199e4:	4602      	mov	r2, r0
 80199e6:	460b      	mov	r3, r1
 80199e8:	4620      	mov	r0, r4
 80199ea:	4629      	mov	r1, r5
 80199ec:	f7e6 ff38 	bl	8000860 <__aeabi_ddiv>
 80199f0:	4602      	mov	r2, r0
 80199f2:	460b      	mov	r3, r1
 80199f4:	4610      	mov	r0, r2
 80199f6:	4619      	mov	r1, r3
 80199f8:	f04f 0200 	mov.w	r2, #0
 80199fc:	4b23      	ldr	r3, [pc, #140]	; (8019a8c <kiss_fftr_alloc+0x23c>)
 80199fe:	f7e6 fc4f 	bl	80002a0 <__adddf3>
 8019a02:	4602      	mov	r2, r0
 8019a04:	460b      	mov	r3, r1
 8019a06:	4610      	mov	r0, r2
 8019a08:	4619      	mov	r1, r3
            double phase =
 8019a0a:	a31d      	add	r3, pc, #116	; (adr r3, 8019a80 <kiss_fftr_alloc+0x230>)
 8019a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a10:	f7e6 fdfc 	bl	800060c <__aeabi_dmul>
 8019a14:	4602      	mov	r2, r0
 8019a16:	460b      	mov	r3, r1
 8019a18:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8019a1c:	ed97 0b08 	vldr	d0, [r7, #32]
 8019a20:	f006 f99e 	bl	801fd60 <cos>
 8019a24:	ec51 0b10 	vmov	r0, r1, d0
 8019a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a2a:	689a      	ldr	r2, [r3, #8]
 8019a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a2e:	00db      	lsls	r3, r3, #3
 8019a30:	18d4      	adds	r4, r2, r3
 8019a32:	f7e7 f8e3 	bl	8000bfc <__aeabi_d2f>
 8019a36:	4603      	mov	r3, r0
 8019a38:	6023      	str	r3, [r4, #0]
 8019a3a:	ed97 0b08 	vldr	d0, [r7, #32]
 8019a3e:	f006 fae3 	bl	8020008 <sin>
 8019a42:	ec51 0b10 	vmov	r0, r1, d0
 8019a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a48:	689a      	ldr	r2, [r3, #8]
 8019a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a4c:	00db      	lsls	r3, r3, #3
 8019a4e:	18d4      	adds	r4, r2, r3
 8019a50:	f7e7 f8d4 	bl	8000bfc <__aeabi_d2f>
 8019a54:	4603      	mov	r3, r0
 8019a56:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8019a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a5a:	3301      	adds	r3, #1
 8019a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8019a5e:	e7af      	b.n	80199c0 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 8019a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d002      	beq.n	8019a6c <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 8019a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a6a:	601a      	str	r2, [r3, #0]
    }

    return st;
 8019a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019a6e:	4618      	mov	r0, r3
 8019a70:	3738      	adds	r7, #56	; 0x38
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bdb0      	pop	{r4, r5, r7, pc}
 8019a76:	bf00      	nop
 8019a78:	54442d18 	.word	0x54442d18
 8019a7c:	400921fb 	.word	0x400921fb
 8019a80:	54442d18 	.word	0x54442d18
 8019a84:	c00921fb 	.word	0xc00921fb
 8019a88:	080264b4 	.word	0x080264b4
 8019a8c:	3fe00000 	.word	0x3fe00000

08019a90 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b092      	sub	sp, #72	; 0x48
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	685b      	ldr	r3, [r3, #4]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d002      	beq.n	8019aac <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8019aa6:	4887      	ldr	r0, [pc, #540]	; (8019cc4 <kiss_fftr+0x234>)
 8019aa8:	f7ec f8a8 	bl	8005bfc <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	6818      	ldr	r0, [r3, #0]
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	461a      	mov	r2, r3
 8019abe:	68b9      	ldr	r1, [r7, #8]
 8019ac0:	f7ff feb6 	bl	8019830 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	685b      	ldr	r3, [r3, #4]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	685b      	ldr	r3, [r3, #4]
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8019ad4:	ed97 7a04 	vldr	s14, [r7, #16]
 8019ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8019adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8019ae6:	ed97 7a04 	vldr	s14, [r7, #16]
 8019aea:	edd7 7a05 	vldr	s15, [r7, #20]
 8019aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019af0:	00db      	lsls	r3, r3, #3
 8019af2:	687a      	ldr	r2, [r7, #4]
 8019af4:	4413      	add	r3, r2
 8019af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019afa:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	f04f 0200 	mov.w	r2, #0
 8019b04:	605a      	str	r2, [r3, #4]
 8019b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b08:	00db      	lsls	r3, r3, #3
 8019b0a:	687a      	ldr	r2, [r7, #4]
 8019b0c:	4413      	add	r3, r2
 8019b0e:	687a      	ldr	r2, [r7, #4]
 8019b10:	6852      	ldr	r2, [r2, #4]
 8019b12:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8019b14:	2301      	movs	r3, #1
 8019b16:	647b      	str	r3, [r7, #68]	; 0x44
 8019b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b1a:	0fda      	lsrs	r2, r3, #31
 8019b1c:	4413      	add	r3, r2
 8019b1e:	105b      	asrs	r3, r3, #1
 8019b20:	461a      	mov	r2, r3
 8019b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b24:	4293      	cmp	r3, r2
 8019b26:	f300 80c9 	bgt.w	8019cbc <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	685a      	ldr	r2, [r3, #4]
 8019b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b30:	00db      	lsls	r3, r3, #3
 8019b32:	441a      	add	r2, r3
 8019b34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019b3c:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	685a      	ldr	r2, [r3, #4]
 8019b44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b48:	1acb      	subs	r3, r1, r3
 8019b4a:	00db      	lsls	r3, r3, #3
 8019b4c:	4413      	add	r3, r2
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	685a      	ldr	r2, [r3, #4]
 8019b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b5a:	1acb      	subs	r3, r1, r3
 8019b5c:	00db      	lsls	r3, r3, #3
 8019b5e:	4413      	add	r3, r2
 8019b60:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b64:	eef1 7a67 	vneg.f32	s15, s15
 8019b68:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8019b6c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019b70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8019b7c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019b80:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b88:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8019b8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019b90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b98:	edc7 7a08 	vstr	s15, [r7, #32]
 8019b9c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019ba0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019ba8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 8019bac:	ed97 7a08 	vldr	s14, [r7, #32]
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	689a      	ldr	r2, [r3, #8]
 8019bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bb6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019bba:	3b01      	subs	r3, #1
 8019bbc:	00db      	lsls	r3, r3, #3
 8019bbe:	4413      	add	r3, r2
 8019bc0:	edd3 7a00 	vldr	s15, [r3]
 8019bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019bc8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	689a      	ldr	r2, [r3, #8]
 8019bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bd2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019bd6:	3b01      	subs	r3, #1
 8019bd8:	00db      	lsls	r3, r3, #3
 8019bda:	4413      	add	r3, r2
 8019bdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8019be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019be8:	edc7 7a06 	vstr	s15, [r7, #24]
 8019bec:	ed97 7a08 	vldr	s14, [r7, #32]
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	689a      	ldr	r2, [r3, #8]
 8019bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bf6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019bfa:	3b01      	subs	r3, #1
 8019bfc:	00db      	lsls	r3, r3, #3
 8019bfe:	4413      	add	r3, r2
 8019c00:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019c08:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	689a      	ldr	r2, [r3, #8]
 8019c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c12:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019c16:	3b01      	subs	r3, #1
 8019c18:	00db      	lsls	r3, r3, #3
 8019c1a:	4413      	add	r3, r2
 8019c1c:	edd3 7a00 	vldr	s15, [r3]
 8019c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c28:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8019c2c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8019c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c3a:	00db      	lsls	r3, r3, #3
 8019c3c:	687a      	ldr	r2, [r7, #4]
 8019c3e:	4413      	add	r3, r2
 8019c40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c48:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8019c4c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8019c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c5a:	00db      	lsls	r3, r3, #3
 8019c5c:	687a      	ldr	r2, [r7, #4]
 8019c5e:	4413      	add	r3, r2
 8019c60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c68:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8019c6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019c70:	edd7 7a06 	vldr	s15, [r7, #24]
 8019c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c7c:	1ad3      	subs	r3, r2, r3
 8019c7e:	00db      	lsls	r3, r3, #3
 8019c80:	687a      	ldr	r2, [r7, #4]
 8019c82:	4413      	add	r3, r2
 8019c84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c8c:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8019c90:	ed97 7a07 	vldr	s14, [r7, #28]
 8019c94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ca0:	1ad3      	subs	r3, r2, r3
 8019ca2:	00db      	lsls	r3, r3, #3
 8019ca4:	687a      	ldr	r2, [r7, #4]
 8019ca6:	4413      	add	r3, r2
 8019ca8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019cb0:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 8019cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8019cba:	e72d      	b.n	8019b18 <kiss_fftr+0x88>
    }
}
 8019cbc:	bf00      	nop
 8019cbe:	3748      	adds	r7, #72	; 0x48
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	bd80      	pop	{r7, pc}
 8019cc4:	080264d0 	.word	0x080264d0

08019cc8 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8019cc8:	b580      	push	{r7, lr}
 8019cca:	b082      	sub	sp, #8
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	ed87 0a01 	vstr	s0, [r7, #4]
 8019cd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8019cd6:	f006 fb3f 	bl	8020358 <log10f>
 8019cda:	eef0 7a40 	vmov.f32	s15, s0
 8019cde:	eeb0 0a67 	vmov.f32	s0, s15
 8019ce2:	3708      	adds	r7, #8
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	bd80      	pop	{r7, pc}

08019ce8 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8019ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cea:	b083      	sub	sp, #12
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	ed87 0b00 	vstr	d0, [r7]
 8019cf2:	683c      	ldr	r4, [r7, #0]
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8019cfa:	2301      	movs	r3, #1
 8019cfc:	461e      	mov	r6, r3
 8019cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d02:	4b10      	ldr	r3, [pc, #64]	; (8019d44 <_ZSt5isinfd+0x5c>)
 8019d04:	4620      	mov	r0, r4
 8019d06:	4629      	mov	r1, r5
 8019d08:	f7e6 ff1a 	bl	8000b40 <__aeabi_dcmpun>
 8019d0c:	4603      	mov	r3, r0
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d10b      	bne.n	8019d2a <_ZSt5isinfd+0x42>
 8019d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d16:	4b0b      	ldr	r3, [pc, #44]	; (8019d44 <_ZSt5isinfd+0x5c>)
 8019d18:	4620      	mov	r0, r4
 8019d1a:	4629      	mov	r1, r5
 8019d1c:	f7e6 fef2 	bl	8000b04 <__aeabi_dcmple>
 8019d20:	4603      	mov	r3, r0
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d101      	bne.n	8019d2a <_ZSt5isinfd+0x42>
 8019d26:	2300      	movs	r3, #0
 8019d28:	461e      	mov	r6, r3
 8019d2a:	b2f3      	uxtb	r3, r6
 8019d2c:	f083 0301 	eor.w	r3, r3, #1
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	bf14      	ite	ne
 8019d36:	2301      	movne	r3, #1
 8019d38:	2300      	moveq	r3, #0
 8019d3a:	b2db      	uxtb	r3, r3
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	370c      	adds	r7, #12
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d44:	7fefffff 	.word	0x7fefffff

08019d48 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8019d48:	b480      	push	{r7}
 8019d4a:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8019d4c:	2300      	movs	r3, #0
}
 8019d4e:	4618      	mov	r0, r3
 8019d50:	46bd      	mov	sp, r7
 8019d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d56:	4770      	bx	lr

08019d58 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8019d58:	b5b0      	push	{r4, r5, r7, lr}
 8019d5a:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8019d5c:	f7ef f836 	bl	8008dcc <HAL_GetTick>
 8019d60:	4603      	mov	r3, r0
 8019d62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019d66:	fb02 f303 	mul.w	r3, r2, r3
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	461c      	mov	r4, r3
 8019d6e:	4615      	mov	r5, r2
 8019d70:	4622      	mov	r2, r4
 8019d72:	462b      	mov	r3, r5
}
 8019d74:	4610      	mov	r0, r2
 8019d76:	4619      	mov	r1, r3
 8019d78:	bdb0      	pop	{r4, r5, r7, pc}
 8019d7a:	0000      	movs	r0, r0
 8019d7c:	0000      	movs	r0, r0
	...

08019d80 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8019d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d84:	b08c      	sub	sp, #48	; 0x30
 8019d86:	af00      	add	r7, sp, #0
 8019d88:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8019d8c:	466b      	mov	r3, sp
 8019d8e:	4698      	mov	r8, r3
    float n = f;
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8019d94:	4b7e      	ldr	r3, [pc, #504]	; (8019f90 <_Z15ei_printf_floatf+0x210>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	1e5e      	subs	r6, r3, #1
 8019d9a:	623e      	str	r6, [r7, #32]
 8019d9c:	4633      	mov	r3, r6
 8019d9e:	3301      	adds	r3, #1
 8019da0:	2200      	movs	r2, #0
 8019da2:	461c      	mov	r4, r3
 8019da4:	4615      	mov	r5, r2
 8019da6:	f04f 0200 	mov.w	r2, #0
 8019daa:	f04f 0300 	mov.w	r3, #0
 8019dae:	00eb      	lsls	r3, r5, #3
 8019db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019db4:	00e2      	lsls	r2, r4, #3
 8019db6:	4633      	mov	r3, r6
 8019db8:	3301      	adds	r3, #1
 8019dba:	2200      	movs	r2, #0
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	4611      	mov	r1, r2
 8019dc0:	f04f 0200 	mov.w	r2, #0
 8019dc4:	f04f 0300 	mov.w	r3, #0
 8019dc8:	00cb      	lsls	r3, r1, #3
 8019dca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8019dce:	00c2      	lsls	r2, r0, #3
 8019dd0:	4633      	mov	r3, r6
 8019dd2:	3301      	adds	r3, #1
 8019dd4:	3307      	adds	r3, #7
 8019dd6:	08db      	lsrs	r3, r3, #3
 8019dd8:	00db      	lsls	r3, r3, #3
 8019dda:	ebad 0d03 	sub.w	sp, sp, r3
 8019dde:	466b      	mov	r3, sp
 8019de0:	3300      	adds	r3, #0
 8019de2:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8019de4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019de8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019df0:	d106      	bne.n	8019e00 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8019df2:	69fb      	ldr	r3, [r7, #28]
 8019df4:	4967      	ldr	r1, [pc, #412]	; (8019f94 <_Z15ei_printf_floatf+0x214>)
 8019df6:	461a      	mov	r2, r3
 8019df8:	460b      	mov	r3, r1
 8019dfa:	881b      	ldrh	r3, [r3, #0]
 8019dfc:	8013      	strh	r3, [r2, #0]
 8019dfe:	e0b6      	b.n	8019f6e <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8019e00:	69fb      	ldr	r3, [r7, #28]
 8019e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8019e04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e10:	bf4c      	ite	mi
 8019e12:	2301      	movmi	r3, #1
 8019e14:	2300      	movpl	r3, #0
 8019e16:	b2db      	uxtb	r3, r3
 8019e18:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8019e1a:	69bb      	ldr	r3, [r7, #24]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d005      	beq.n	8019e2c <_Z15ei_printf_floatf+0xac>
            n = -n;
 8019e20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019e24:	eef1 7a67 	vneg.f32	s15, s15
 8019e28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8019e2c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8019e30:	f7ff ff4a 	bl	8019cc8 <_ZSt5log10f>
 8019e34:	eef0 7a40 	vmov.f32	s15, s0
 8019e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e3c:	ee17 3a90 	vmov	r3, s15
 8019e40:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8019e42:	69bb      	ldr	r3, [r7, #24]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d004      	beq.n	8019e52 <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8019e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e4a:	1c5a      	adds	r2, r3, #1
 8019e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e4e:	222d      	movs	r2, #45	; 0x2d
 8019e50:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8019e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	dc01      	bgt.n	8019e5c <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8019e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e5e:	f7e6 fb7d 	bl	800055c <__aeabi_f2d>
 8019e62:	4b4d      	ldr	r3, [pc, #308]	; (8019f98 <_Z15ei_printf_floatf+0x218>)
 8019e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e68:	2401      	movs	r4, #1
 8019e6a:	f7e6 fe5f 	bl	8000b2c <__aeabi_dcmpgt>
 8019e6e:	4603      	mov	r3, r0
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d101      	bne.n	8019e78 <_Z15ei_printf_floatf+0xf8>
 8019e74:	2300      	movs	r3, #0
 8019e76:	461c      	mov	r4, r3
 8019e78:	b2e3      	uxtb	r3, r4
 8019e7a:	f083 0301 	eor.w	r3, r3, #1
 8019e7e:	b2db      	uxtb	r3, r3
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d002      	beq.n	8019e8a <_Z15ei_printf_floatf+0x10a>
 8019e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	db6e      	blt.n	8019f68 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8019e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e8c:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8019f88 <_Z15ei_printf_floatf+0x208>
 8019e90:	f000 f8ab 	bl	8019fea <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8019e94:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8019e98:	f04f 0200 	mov.w	r2, #0
 8019e9c:	f04f 0300 	mov.w	r3, #0
 8019ea0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8019ea4:	f7e6 fe42 	bl	8000b2c <__aeabi_dcmpgt>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d00b      	beq.n	8019ec6 <_Z15ei_printf_floatf+0x146>
 8019eae:	ed97 0b04 	vldr	d0, [r7, #16]
 8019eb2:	f7ff ff19 	bl	8019ce8 <_ZSt5isinfd>
 8019eb6:	4603      	mov	r3, r0
 8019eb8:	f083 0301 	eor.w	r3, r3, #1
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d001      	beq.n	8019ec6 <_Z15ei_printf_floatf+0x146>
 8019ec2:	2301      	movs	r3, #1
 8019ec4:	e000      	b.n	8019ec8 <_Z15ei_printf_floatf+0x148>
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d03a      	beq.n	8019f42 <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8019ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ece:	f7e6 fb45 	bl	800055c <__aeabi_f2d>
 8019ed2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8019ed6:	f7e6 fcc3 	bl	8000860 <__aeabi_ddiv>
 8019eda:	4602      	mov	r2, r0
 8019edc:	460b      	mov	r3, r1
 8019ede:	ec43 2b17 	vmov	d7, r2, r3
 8019ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8019ee6:	eef0 0a67 	vmov.f32	s1, s15
 8019eea:	f005 ff8d 	bl	801fe08 <floor>
 8019eee:	ec53 2b10 	vmov	r2, r3, d0
 8019ef2:	4610      	mov	r0, r2
 8019ef4:	4619      	mov	r1, r3
 8019ef6:	f7e6 fe39 	bl	8000b6c <__aeabi_d2iz>
 8019efa:	4603      	mov	r3, r0
 8019efc:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8019efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f00:	f7e6 fb2c 	bl	800055c <__aeabi_f2d>
 8019f04:	4604      	mov	r4, r0
 8019f06:	460d      	mov	r5, r1
 8019f08:	68f8      	ldr	r0, [r7, #12]
 8019f0a:	f7e6 fb15 	bl	8000538 <__aeabi_i2d>
 8019f0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8019f12:	f7e6 fb7b 	bl	800060c <__aeabi_dmul>
 8019f16:	4602      	mov	r2, r0
 8019f18:	460b      	mov	r3, r1
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	4629      	mov	r1, r5
 8019f1e:	f7e6 f9bd 	bl	800029c <__aeabi_dsub>
 8019f22:	4602      	mov	r2, r0
 8019f24:	460b      	mov	r3, r1
 8019f26:	4610      	mov	r0, r2
 8019f28:	4619      	mov	r1, r3
 8019f2a:	f7e6 fe67 	bl	8000bfc <__aeabi_d2f>
 8019f2e:	4603      	mov	r3, r0
 8019f30:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	b2da      	uxtb	r2, r3
 8019f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f38:	1c59      	adds	r1, r3, #1
 8019f3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f3c:	3230      	adds	r2, #48	; 0x30
 8019f3e:	b2d2      	uxtb	r2, r2
 8019f40:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8019f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d10b      	bne.n	8019f60 <_Z15ei_printf_floatf+0x1e0>
 8019f48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f54:	dd04      	ble.n	8019f60 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8019f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f58:	1c5a      	adds	r2, r3, #1
 8019f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019f5c:	222e      	movs	r2, #46	; 0x2e
 8019f5e:	701a      	strb	r2, [r3, #0]
            m--;
 8019f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f62:	3b01      	subs	r3, #1
 8019f64:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8019f66:	e779      	b.n	8019e5c <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8019f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8019f6e:	69f9      	ldr	r1, [r7, #28]
 8019f70:	480a      	ldr	r0, [pc, #40]	; (8019f9c <_Z15ei_printf_floatf+0x21c>)
 8019f72:	f7eb fe43 	bl	8005bfc <_Z9ei_printfPKcz>
 8019f76:	46c5      	mov	sp, r8
}
 8019f78:	bf00      	nop
 8019f7a:	3730      	adds	r7, #48	; 0x30
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f82:	bf00      	nop
 8019f84:	f3af 8000 	nop.w
 8019f88:	00000000 	.word	0x00000000
 8019f8c:	40240000 	.word	0x40240000
 8019f90:	20000100 	.word	0x20000100
 8019f94:	080264f8 	.word	0x080264f8
 8019f98:	200000f8 	.word	0x200000f8
 8019f9c:	080264fc 	.word	0x080264fc

08019fa0 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b082      	sub	sp, #8
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8019fa8:	6878      	ldr	r0, [r7, #4]
 8019faa:	f008 fc85 	bl	80228b8 <malloc>
 8019fae:	4603      	mov	r3, r0
}
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	3708      	adds	r7, #8
 8019fb4:	46bd      	mov	sp, r7
 8019fb6:	bd80      	pop	{r7, pc}

08019fb8 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b082      	sub	sp, #8
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	6078      	str	r0, [r7, #4]
 8019fc0:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8019fc2:	6839      	ldr	r1, [r7, #0]
 8019fc4:	6878      	ldr	r0, [r7, #4]
 8019fc6:	f008 fc2f 	bl	8022828 <calloc>
 8019fca:	4603      	mov	r3, r0
}
 8019fcc:	4618      	mov	r0, r3
 8019fce:	3708      	adds	r7, #8
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bd80      	pop	{r7, pc}

08019fd4 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b082      	sub	sp, #8
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
    free(ptr);
 8019fdc:	6878      	ldr	r0, [r7, #4]
 8019fde:	f008 fc73 	bl	80228c8 <free>
}
 8019fe2:	bf00      	nop
 8019fe4:	3708      	adds	r7, #8
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bd80      	pop	{r7, pc}

08019fea <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8019fea:	b580      	push	{r7, lr}
 8019fec:	b084      	sub	sp, #16
 8019fee:	af00      	add	r7, sp, #0
 8019ff0:	ed87 0b02 	vstr	d0, [r7, #8]
 8019ff4:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8019ff6:	6878      	ldr	r0, [r7, #4]
 8019ff8:	f7e6 fa9e 	bl	8000538 <__aeabi_i2d>
 8019ffc:	4602      	mov	r2, r0
 8019ffe:	460b      	mov	r3, r1
 801a000:	ec43 2b11 	vmov	d1, r2, r3
 801a004:	ed97 0b02 	vldr	d0, [r7, #8]
 801a008:	f006 f8d4 	bl	80201b4 <pow>
 801a00c:	eeb0 7a40 	vmov.f32	s14, s0
 801a010:	eef0 7a60 	vmov.f32	s15, s1
    }
 801a014:	eeb0 0a47 	vmov.f32	s0, s14
 801a018:	eef0 0a67 	vmov.f32	s1, s15
 801a01c:	3710      	adds	r7, #16
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}
	...

0801a024 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801a024:	b480      	push	{r7}
 801a026:	b083      	sub	sp, #12
 801a028:	af00      	add	r7, sp, #0
 801a02a:	4603      	mov	r3, r0
 801a02c:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 801a02e:	79fb      	ldrb	r3, [r7, #7]
 801a030:	2b10      	cmp	r3, #16
 801a032:	d847      	bhi.n	801a0c4 <TfLiteTypeGetName+0xa0>
 801a034:	a201      	add	r2, pc, #4	; (adr r2, 801a03c <TfLiteTypeGetName+0x18>)
 801a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a03a:	bf00      	nop
 801a03c:	0801a081 	.word	0x0801a081
 801a040:	0801a085 	.word	0x0801a085
 801a044:	0801a08d 	.word	0x0801a08d
 801a048:	0801a095 	.word	0x0801a095
 801a04c:	0801a09d 	.word	0x0801a09d
 801a050:	0801a0b1 	.word	0x0801a0b1
 801a054:	0801a0a5 	.word	0x0801a0a5
 801a058:	0801a089 	.word	0x0801a089
 801a05c:	0801a0a9 	.word	0x0801a0a9
 801a060:	0801a099 	.word	0x0801a099
 801a064:	0801a0b5 	.word	0x0801a0b5
 801a068:	0801a0b9 	.word	0x0801a0b9
 801a06c:	0801a0ad 	.word	0x0801a0ad
 801a070:	0801a0a1 	.word	0x0801a0a1
 801a074:	0801a0bd 	.word	0x0801a0bd
 801a078:	0801a0c1 	.word	0x0801a0c1
 801a07c:	0801a091 	.word	0x0801a091
    case kTfLiteNoType:
      return "NOTYPE";
 801a080:	4b14      	ldr	r3, [pc, #80]	; (801a0d4 <TfLiteTypeGetName+0xb0>)
 801a082:	e020      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801a084:	4b14      	ldr	r3, [pc, #80]	; (801a0d8 <TfLiteTypeGetName+0xb4>)
 801a086:	e01e      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 801a088:	4b14      	ldr	r3, [pc, #80]	; (801a0dc <TfLiteTypeGetName+0xb8>)
 801a08a:	e01c      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 801a08c:	4b14      	ldr	r3, [pc, #80]	; (801a0e0 <TfLiteTypeGetName+0xbc>)
 801a08e:	e01a      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 801a090:	4b14      	ldr	r3, [pc, #80]	; (801a0e4 <TfLiteTypeGetName+0xc0>)
 801a092:	e018      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 801a094:	4b14      	ldr	r3, [pc, #80]	; (801a0e8 <TfLiteTypeGetName+0xc4>)
 801a096:	e016      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 801a098:	4b14      	ldr	r3, [pc, #80]	; (801a0ec <TfLiteTypeGetName+0xc8>)
 801a09a:	e014      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 801a09c:	4b14      	ldr	r3, [pc, #80]	; (801a0f0 <TfLiteTypeGetName+0xcc>)
 801a09e:	e012      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 801a0a0:	4b14      	ldr	r3, [pc, #80]	; (801a0f4 <TfLiteTypeGetName+0xd0>)
 801a0a2:	e010      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 801a0a4:	4b14      	ldr	r3, [pc, #80]	; (801a0f8 <TfLiteTypeGetName+0xd4>)
 801a0a6:	e00e      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801a0a8:	4b14      	ldr	r3, [pc, #80]	; (801a0fc <TfLiteTypeGetName+0xd8>)
 801a0aa:	e00c      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801a0ac:	4b14      	ldr	r3, [pc, #80]	; (801a100 <TfLiteTypeGetName+0xdc>)
 801a0ae:	e00a      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 801a0b0:	4b14      	ldr	r3, [pc, #80]	; (801a104 <TfLiteTypeGetName+0xe0>)
 801a0b2:	e008      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801a0b4:	4b14      	ldr	r3, [pc, #80]	; (801a108 <TfLiteTypeGetName+0xe4>)
 801a0b6:	e006      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 801a0b8:	4b14      	ldr	r3, [pc, #80]	; (801a10c <TfLiteTypeGetName+0xe8>)
 801a0ba:	e004      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801a0bc:	4b14      	ldr	r3, [pc, #80]	; (801a110 <TfLiteTypeGetName+0xec>)
 801a0be:	e002      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 801a0c0:	4b14      	ldr	r3, [pc, #80]	; (801a114 <TfLiteTypeGetName+0xf0>)
 801a0c2:	e000      	b.n	801a0c6 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801a0c4:	4b14      	ldr	r3, [pc, #80]	; (801a118 <TfLiteTypeGetName+0xf4>)
}
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	370c      	adds	r7, #12
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d0:	4770      	bx	lr
 801a0d2:	bf00      	nop
 801a0d4:	08026500 	.word	0x08026500
 801a0d8:	08026508 	.word	0x08026508
 801a0dc:	08026510 	.word	0x08026510
 801a0e0:	08026518 	.word	0x08026518
 801a0e4:	08026520 	.word	0x08026520
 801a0e8:	08026528 	.word	0x08026528
 801a0ec:	08026530 	.word	0x08026530
 801a0f0:	08026538 	.word	0x08026538
 801a0f4:	08026540 	.word	0x08026540
 801a0f8:	08026548 	.word	0x08026548
 801a0fc:	08026550 	.word	0x08026550
 801a100:	0802655c 	.word	0x0802655c
 801a104:	08026568 	.word	0x08026568
 801a108:	08026570 	.word	0x08026570
 801a10c:	08026578 	.word	0x08026578
 801a110:	08026580 	.word	0x08026580
 801a114:	0802658c 	.word	0x0802658c
 801a118:	08026594 	.word	0x08026594

0801a11c <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801a11c:	b480      	push	{r7}
 801a11e:	af00      	add	r7, sp, #0
 801a120:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a124:	4618      	mov	r0, r3
 801a126:	46bd      	mov	sp, r7
 801a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12c:	4770      	bx	lr
	...

0801a130 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 801a130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a134:	b088      	sub	sp, #32
 801a136:	af00      	add	r7, sp, #0
 801a138:	ed87 0b02 	vstr	d0, [r7, #8]
 801a13c:	6078      	str	r0, [r7, #4]
 801a13e:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 801a140:	f04f 0200 	mov.w	r2, #0
 801a144:	f04f 0300 	mov.w	r3, #0
 801a148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a14c:	f7e6 fcc6 	bl	8000adc <__aeabi_dcmpeq>
 801a150:	4603      	mov	r3, r0
 801a152:	2b00      	cmp	r3, #0
 801a154:	d006      	beq.n	801a164 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	2200      	movs	r2, #0
 801a15a:	601a      	str	r2, [r3, #0]
    *shift = 0;
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	2200      	movs	r2, #0
 801a160:	601a      	str	r2, [r3, #0]
    return;
 801a162:	e068      	b.n	801a236 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801a164:	6838      	ldr	r0, [r7, #0]
 801a166:	ed97 0b02 	vldr	d0, [r7, #8]
 801a16a:	f005 fecd 	bl	801ff08 <frexp>
 801a16e:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801a172:	f04f 0200 	mov.w	r2, #0
 801a176:	4b32      	ldr	r3, [pc, #200]	; (801a240 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 801a178:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a17c:	f7e6 fa46 	bl	800060c <__aeabi_dmul>
 801a180:	4602      	mov	r2, r0
 801a182:	460b      	mov	r3, r1
 801a184:	ec43 2b17 	vmov	d7, r2, r3
 801a188:	eeb0 0a47 	vmov.f32	s0, s14
 801a18c:	eef0 0a67 	vmov.f32	s1, s15
 801a190:	f000 f962 	bl	801a458 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801a194:	ec53 2b10 	vmov	r2, r3, d0
 801a198:	4610      	mov	r0, r2
 801a19a:	4619      	mov	r1, r3
 801a19c:	f7e6 fde6 	bl	8000d6c <__aeabi_d2lz>
 801a1a0:	4602      	mov	r2, r0
 801a1a2:	460b      	mov	r3, r1
 801a1a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 801a1a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a1ac:	4925      	ldr	r1, [pc, #148]	; (801a244 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801a1ae:	428a      	cmp	r2, r1
 801a1b0:	f173 0300 	sbcs.w	r3, r3, #0
 801a1b4:	db01      	blt.n	801a1ba <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801a1b6:	f008 fb0d 	bl	80227d4 <abort>
  if (q_fixed == (1ll << 31)) {
 801a1ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a1be:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801a1c2:	430b      	orrs	r3, r1
 801a1c4:	d118      	bne.n	801a1f8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801a1c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a1ca:	0fd9      	lsrs	r1, r3, #31
 801a1cc:	2000      	movs	r0, #0
 801a1ce:	468a      	mov	sl, r1
 801a1d0:	4683      	mov	fp, r0
 801a1d2:	eb1a 0402 	adds.w	r4, sl, r2
 801a1d6:	eb4b 0503 	adc.w	r5, fp, r3
 801a1da:	f04f 0200 	mov.w	r2, #0
 801a1de:	f04f 0300 	mov.w	r3, #0
 801a1e2:	0862      	lsrs	r2, r4, #1
 801a1e4:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801a1e8:	106b      	asrs	r3, r5, #1
 801a1ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	1c5a      	adds	r2, r3, #1
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 801a1f8:	f7ff ff90 	bl	801a11c <_ZNSt14numeric_limitsIlE3maxEv>
 801a1fc:	4603      	mov	r3, r0
 801a1fe:	17da      	asrs	r2, r3, #31
 801a200:	4698      	mov	r8, r3
 801a202:	4691      	mov	r9, r2
 801a204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a208:	4590      	cmp	r8, r2
 801a20a:	eb79 0303 	sbcs.w	r3, r9, r3
 801a20e:	da01      	bge.n	801a214 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 801a210:	f008 fae0 	bl	80227d4 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	f113 0f1f 	cmn.w	r3, #31
 801a21c:	da08      	bge.n	801a230 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	2200      	movs	r2, #0
 801a222:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801a224:	f04f 0200 	mov.w	r2, #0
 801a228:	f04f 0300 	mov.w	r3, #0
 801a22c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801a230:	69ba      	ldr	r2, [r7, #24]
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	601a      	str	r2, [r3, #0]
}
 801a236:	3720      	adds	r7, #32
 801a238:	46bd      	mov	sp, r7
 801a23a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a23e:	bf00      	nop
 801a240:	41e00000 	.word	0x41e00000
 801a244:	80000001 	.word	0x80000001

0801a248 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 801a248:	b580      	push	{r7, lr}
 801a24a:	b084      	sub	sp, #16
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	ed87 0b02 	vstr	d0, [r7, #8]
 801a252:	6078      	str	r0, [r7, #4]
 801a254:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801a256:	f04f 0200 	mov.w	r2, #0
 801a25a:	4b0d      	ldr	r3, [pc, #52]	; (801a290 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 801a25c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a260:	f7e6 fc64 	bl	8000b2c <__aeabi_dcmpgt>
 801a264:	4603      	mov	r3, r0
 801a266:	2b00      	cmp	r3, #0
 801a268:	d101      	bne.n	801a26e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 801a26a:	f008 fab3 	bl	80227d4 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 801a26e:	6839      	ldr	r1, [r7, #0]
 801a270:	6878      	ldr	r0, [r7, #4]
 801a272:	ed97 0b02 	vldr	d0, [r7, #8]
 801a276:	f7ff ff5b 	bl	801a130 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801a27a:	683b      	ldr	r3, [r7, #0]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	da01      	bge.n	801a286 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801a282:	f008 faa7 	bl	80227d4 <abort>
}
 801a286:	bf00      	nop
 801a288:	3710      	adds	r7, #16
 801a28a:	46bd      	mov	sp, r7
 801a28c:	bd80      	pop	{r7, pc}
 801a28e:	bf00      	nop
 801a290:	3ff00000 	.word	0x3ff00000

0801a294 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
 801a29c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801a29e:	683b      	ldr	r3, [r7, #0]
 801a2a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2aa:	f7e6 fc21 	bl	8000af0 <__aeabi_dcmplt>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d001      	beq.n	801a2b8 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	e000      	b.n	801a2ba <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 801a2b8:	687b      	ldr	r3, [r7, #4]
    }
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	3708      	adds	r7, #8
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	bd80      	pop	{r7, pc}
 801a2c2:	0000      	movs	r0, r0
 801a2c4:	0000      	movs	r0, r0
	...

0801a2c8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 801a2c8:	b5b0      	push	{r4, r5, r7, lr}
 801a2ca:	b08e      	sub	sp, #56	; 0x38
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	ed87 0b06 	vstr	d0, [r7, #24]
 801a2d2:	ed87 1b04 	vstr	d1, [r7, #16]
 801a2d6:	60f8      	str	r0, [r7, #12]
 801a2d8:	60b9      	str	r1, [r7, #8]
 801a2da:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801a2dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a2e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a2e4:	f7e6 f992 	bl	800060c <__aeabi_dmul>
 801a2e8:	4602      	mov	r2, r0
 801a2ea:	460b      	mov	r3, r1
 801a2ec:	4614      	mov	r4, r2
 801a2ee:	461d      	mov	r5, r3
 801a2f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	fa22 f303 	lsr.w	r3, r2, r3
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f7e6 f91c 	bl	8000538 <__aeabi_i2d>
 801a300:	4602      	mov	r2, r0
 801a302:	460b      	mov	r3, r1
 801a304:	4620      	mov	r0, r4
 801a306:	4629      	mov	r1, r5
 801a308:	f7e6 f980 	bl	800060c <__aeabi_dmul>
 801a30c:	4602      	mov	r2, r0
 801a30e:	460b      	mov	r3, r1
 801a310:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801a314:	a30e      	add	r3, pc, #56	; (adr r3, 801a350 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a31a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801a31e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a322:	f107 0320 	add.w	r3, r7, #32
 801a326:	4611      	mov	r1, r2
 801a328:	4618      	mov	r0, r3
 801a32a:	f7ff ffb3 	bl	801a294 <_ZSt3minIdERKT_S2_S2_>
 801a32e:	4603      	mov	r3, r0
 801a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a334:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 801a338:	6879      	ldr	r1, [r7, #4]
 801a33a:	68b8      	ldr	r0, [r7, #8]
 801a33c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801a340:	f7ff ff82 	bl	801a248 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801a344:	bf00      	nop
 801a346:	3738      	adds	r7, #56	; 0x38
 801a348:	46bd      	mov	sp, r7
 801a34a:	bdb0      	pop	{r4, r5, r7, pc}
 801a34c:	f3af 8000 	nop.w
 801a350:	ffc00000 	.word	0xffc00000
 801a354:	41dfffff 	.word	0x41dfffff

0801a358 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 801a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a35c:	b087      	sub	sp, #28
 801a35e:	af00      	add	r7, sp, #0
 801a360:	60f8      	str	r0, [r7, #12]
 801a362:	60b9      	str	r1, [r7, #8]
 801a364:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801a366:	2201      	movs	r2, #1
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	fa02 f303 	lsl.w	r3, r2, r3
 801a36e:	3b01      	subs	r3, #1
 801a370:	4618      	mov	r0, r3
 801a372:	f7e6 f8e1 	bl	8000538 <__aeabi_i2d>
 801a376:	4682      	mov	sl, r0
 801a378:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801a37a:	687a      	ldr	r2, [r7, #4]
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	1ad1      	subs	r1, r2, r3
 801a380:	f04f 0201 	mov.w	r2, #1
 801a384:	f04f 0300 	mov.w	r3, #0
 801a388:	f1a1 0620 	sub.w	r6, r1, #32
 801a38c:	f1c1 0020 	rsb	r0, r1, #32
 801a390:	fa03 f901 	lsl.w	r9, r3, r1
 801a394:	fa02 f606 	lsl.w	r6, r2, r6
 801a398:	ea49 0906 	orr.w	r9, r9, r6
 801a39c:	fa22 f000 	lsr.w	r0, r2, r0
 801a3a0:	ea49 0900 	orr.w	r9, r9, r0
 801a3a4:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 801a3a8:	4640      	mov	r0, r8
 801a3aa:	4649      	mov	r1, r9
 801a3ac:	f7e6 f900 	bl	80005b0 <__aeabi_l2d>
 801a3b0:	4602      	mov	r2, r0
 801a3b2:	460b      	mov	r3, r1
 801a3b4:	4650      	mov	r0, sl
 801a3b6:	4659      	mov	r1, fp
 801a3b8:	f7e6 f928 	bl	800060c <__aeabi_dmul>
 801a3bc:	4602      	mov	r2, r0
 801a3be:	460b      	mov	r3, r1
 801a3c0:	4690      	mov	r8, r2
 801a3c2:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801a3c4:	f04f 0201 	mov.w	r2, #1
 801a3c8:	f04f 0300 	mov.w	r3, #0
 801a3cc:	68b9      	ldr	r1, [r7, #8]
 801a3ce:	f1a1 0620 	sub.w	r6, r1, #32
 801a3d2:	f1c1 0020 	rsb	r0, r1, #32
 801a3d6:	fa03 f501 	lsl.w	r5, r3, r1
 801a3da:	fa02 f606 	lsl.w	r6, r2, r6
 801a3de:	4335      	orrs	r5, r6
 801a3e0:	fa22 f000 	lsr.w	r0, r2, r0
 801a3e4:	4305      	orrs	r5, r0
 801a3e6:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801a3ea:	4620      	mov	r0, r4
 801a3ec:	4629      	mov	r1, r5
 801a3ee:	f7e6 f8df 	bl	80005b0 <__aeabi_l2d>
 801a3f2:	4602      	mov	r2, r0
 801a3f4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801a3f6:	4640      	mov	r0, r8
 801a3f8:	4649      	mov	r1, r9
 801a3fa:	f7e6 fa31 	bl	8000860 <__aeabi_ddiv>
 801a3fe:	4602      	mov	r2, r0
 801a400:	460b      	mov	r3, r1
 801a402:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801a406:	ed97 0b04 	vldr	d0, [r7, #16]
 801a40a:	f005 fcfd 	bl	801fe08 <floor>
 801a40e:	ec53 2b10 	vmov	r2, r3, d0
 801a412:	4610      	mov	r0, r2
 801a414:	4619      	mov	r1, r3
 801a416:	f7e6 fba9 	bl	8000b6c <__aeabi_d2iz>
 801a41a:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801a41c:	4618      	mov	r0, r3
 801a41e:	371c      	adds	r7, #28
 801a420:	46bd      	mov	sp, r7
 801a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a426 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801a426:	b480      	push	{r7}
 801a428:	b083      	sub	sp, #12
 801a42a:	af00      	add	r7, sp, #0
 801a42c:	6078      	str	r0, [r7, #4]
 801a42e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	ed93 7a00 	vldr	s14, [r3]
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	edd3 7a00 	vldr	s15, [r3]
 801a43c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a444:	d501      	bpl.n	801a44a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801a446:	683b      	ldr	r3, [r7, #0]
 801a448:	e000      	b.n	801a44c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801a44a:	687b      	ldr	r3, [r7, #4]
    }
 801a44c:	4618      	mov	r0, r3
 801a44e:	370c      	adds	r7, #12
 801a450:	46bd      	mov	sp, r7
 801a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a456:	4770      	bx	lr

0801a458 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 801a458:	b580      	push	{r7, lr}
 801a45a:	b082      	sub	sp, #8
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	ed87 0b00 	vstr	d0, [r7]
 801a462:	ed97 0b00 	vldr	d0, [r7]
 801a466:	f005 fd87 	bl	801ff78 <round>
 801a46a:	eeb0 7a40 	vmov.f32	s14, s0
 801a46e:	eef0 7a60 	vmov.f32	s15, s1
 801a472:	eeb0 0a47 	vmov.f32	s0, s14
 801a476:	eef0 0a67 	vmov.f32	s1, s15
 801a47a:	3708      	adds	r7, #8
 801a47c:	46bd      	mov	sp, r7
 801a47e:	bd80      	pop	{r7, pc}

0801a480 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 801a480:	b580      	push	{r7, lr}
 801a482:	b082      	sub	sp, #8
 801a484:	af00      	add	r7, sp, #0
 801a486:	ed87 0a01 	vstr	s0, [r7, #4]
 801a48a:	ed97 0a01 	vldr	s0, [r7, #4]
 801a48e:	f7e7 f966 	bl	800175e <_ZSt5roundf>
 801a492:	eef0 7a40 	vmov.f32	s15, s0
 801a496:	eeb0 0a67 	vmov.f32	s0, s15
 801a49a:	3708      	adds	r7, #8
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bd80      	pop	{r7, pc}

0801a4a0 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801a4a0:	b480      	push	{r7}
 801a4a2:	af00      	add	r7, sp, #0
 801a4a4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b0:	4770      	bx	lr

0801a4b2 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801a4b2:	b480      	push	{r7}
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	237f      	movs	r3, #127	; 0x7f
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c0:	4770      	bx	lr

0801a4c2 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801a4c2:	b480      	push	{r7}
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d0:	4770      	bx	lr

0801a4d2 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801a4d2:	b480      	push	{r7}
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	23ff      	movs	r3, #255	; 0xff
 801a4d8:	4618      	mov	r0, r3
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e0:	4770      	bx	lr
	...

0801a4e4 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801a4e4:	b480      	push	{r7}
 801a4e6:	af00      	add	r7, sp, #0
 801a4e8:	4b02      	ldr	r3, [pc, #8]	; (801a4f4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f2:	4770      	bx	lr
 801a4f4:	ffff8000 	.word	0xffff8000

0801a4f8 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801a4f8:	b480      	push	{r7}
 801a4fa:	af00      	add	r7, sp, #0
 801a4fc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a500:	4618      	mov	r0, r3
 801a502:	46bd      	mov	sp, r7
 801a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a508:	4770      	bx	lr

0801a50a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801a50a:	b480      	push	{r7}
 801a50c:	b083      	sub	sp, #12
 801a50e:	af00      	add	r7, sp, #0
 801a510:	6078      	str	r0, [r7, #4]
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	689b      	ldr	r3, [r3, #8]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	4618      	mov	r0, r3
 801a51a:	370c      	adds	r7, #12
 801a51c:	46bd      	mov	sp, r7
 801a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a522:	4770      	bx	lr

0801a524 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 801a524:	b480      	push	{r7}
 801a526:	b083      	sub	sp, #12
 801a528:	af00      	add	r7, sp, #0
 801a52a:	ed87 0b00 	vstr	d0, [r7]
 801a52e:	683a      	ldr	r2, [r7, #0]
 801a530:	6879      	ldr	r1, [r7, #4]
 801a532:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a536:	ec43 2b17 	vmov	d7, r2, r3
 801a53a:	eeb0 0a47 	vmov.f32	s0, s14
 801a53e:	eef0 0a67 	vmov.f32	s1, s15
 801a542:	370c      	adds	r7, #12
 801a544:	46bd      	mov	sp, r7
 801a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a54a:	4770      	bx	lr

0801a54c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b082      	sub	sp, #8
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
 801a554:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	689b      	ldr	r3, [r3, #8]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d005      	beq.n	801a56a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	689a      	ldr	r2, [r3, #8]
 801a562:	683b      	ldr	r3, [r7, #0]
 801a564:	019b      	lsls	r3, r3, #6
 801a566:	4413      	add	r3, r2
 801a568:	e006      	b.n	801a578 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a56e:	6839      	ldr	r1, [r7, #0]
 801a570:	6878      	ldr	r0, [r7, #4]
 801a572:	4798      	blx	r3
 801a574:	4603      	mov	r3, r0
 801a576:	bf00      	nop
  }
}
 801a578:	4618      	mov	r0, r3
 801a57a:	3708      	adds	r7, #8
 801a57c:	46bd      	mov	sp, r7
 801a57e:	bd80      	pop	{r7, pc}

0801a580 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 801a580:	b480      	push	{r7}
 801a582:	b087      	sub	sp, #28
 801a584:	af00      	add	r7, sp, #0
 801a586:	60f8      	str	r0, [r7, #12]
 801a588:	60b9      	str	r1, [r7, #8]
 801a58a:	607a      	str	r2, [r7, #4]
 801a58c:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 801a58e:	68bb      	ldr	r3, [r7, #8]
 801a590:	2b00      	cmp	r3, #0
 801a592:	db0f      	blt.n	801a5b4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 801a594:	68ba      	ldr	r2, [r7, #8]
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	429a      	cmp	r2, r3
 801a59a:	da0b      	bge.n	801a5b4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 801a59c:	68bb      	ldr	r3, [r7, #8]
 801a59e:	009b      	lsls	r3, r3, #2
 801a5a0:	683a      	ldr	r2, [r7, #0]
 801a5a2:	4413      	add	r3, r2
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801a5a8:	697b      	ldr	r3, [r7, #20]
 801a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a5ae:	d001      	beq.n	801a5b4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 801a5b0:	697b      	ldr	r3, [r7, #20]
 801a5b2:	e001      	b.n	801a5b8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801a5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	371c      	adds	r7, #28
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c2:	4770      	bx	lr

0801a5c4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b086      	sub	sp, #24
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	60f8      	str	r0, [r7, #12]
 801a5cc:	60b9      	str	r1, [r7, #8]
 801a5ce:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801a5d0:	68bb      	ldr	r3, [r7, #8]
 801a5d2:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801a5d4:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801a5d6:	68bb      	ldr	r3, [r7, #8]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801a5dc:	6879      	ldr	r1, [r7, #4]
 801a5de:	68f8      	ldr	r0, [r7, #12]
 801a5e0:	f7ff ffce 	bl	801a580 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801a5e4:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801a5e6:	697b      	ldr	r3, [r7, #20]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	da01      	bge.n	801a5f0 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	e005      	b.n	801a5fc <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801a5f0:	6979      	ldr	r1, [r7, #20]
 801a5f2:	68f8      	ldr	r0, [r7, #12]
 801a5f4:	f7ff ffaa 	bl	801a54c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	bf00      	nop
}
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	3718      	adds	r7, #24
 801a600:	46bd      	mov	sp, r7
 801a602:	bd80      	pop	{r7, pc}

0801a604 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801a604:	b580      	push	{r7, lr}
 801a606:	b084      	sub	sp, #16
 801a608:	af00      	add	r7, sp, #0
 801a60a:	60f8      	str	r0, [r7, #12]
 801a60c:	60b9      	str	r1, [r7, #8]
 801a60e:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 801a610:	687a      	ldr	r2, [r7, #4]
 801a612:	68b9      	ldr	r1, [r7, #8]
 801a614:	68f8      	ldr	r0, [r7, #12]
 801a616:	f7ff ffd5 	bl	801a5c4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801a61a:	4603      	mov	r3, r0
}
 801a61c:	4618      	mov	r0, r3
 801a61e:	3710      	adds	r7, #16
 801a620:	46bd      	mov	sp, r7
 801a622:	bd80      	pop	{r7, pc}

0801a624 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801a624:	b580      	push	{r7, lr}
 801a626:	b086      	sub	sp, #24
 801a628:	af00      	add	r7, sp, #0
 801a62a:	60f8      	str	r0, [r7, #12]
 801a62c:	60b9      	str	r1, [r7, #8]
 801a62e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801a634:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801a636:	68bb      	ldr	r3, [r7, #8]
 801a638:	685b      	ldr	r3, [r3, #4]
 801a63a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801a63c:	6879      	ldr	r1, [r7, #4]
 801a63e:	68f8      	ldr	r0, [r7, #12]
 801a640:	f7ff ff9e 	bl	801a580 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801a644:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801a646:	697b      	ldr	r3, [r7, #20]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	da01      	bge.n	801a650 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801a64c:	2300      	movs	r3, #0
 801a64e:	e005      	b.n	801a65c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801a650:	6979      	ldr	r1, [r7, #20]
 801a652:	68f8      	ldr	r0, [r7, #12]
 801a654:	f7ff ff7a 	bl	801a54c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801a658:	4603      	mov	r3, r0
 801a65a:	bf00      	nop
}
 801a65c:	4618      	mov	r0, r3
 801a65e:	3718      	adds	r7, #24
 801a660:	46bd      	mov	sp, r7
 801a662:	bd80      	pop	{r7, pc}

0801a664 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801a664:	b580      	push	{r7, lr}
 801a666:	b084      	sub	sp, #16
 801a668:	af00      	add	r7, sp, #0
 801a66a:	60f8      	str	r0, [r7, #12]
 801a66c:	60b9      	str	r1, [r7, #8]
 801a66e:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 801a670:	687a      	ldr	r2, [r7, #4]
 801a672:	68b9      	ldr	r1, [r7, #8]
 801a674:	68f8      	ldr	r0, [r7, #12]
 801a676:	f7ff ffc5 	bl	801a604 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a67a:	4603      	mov	r3, r0
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	3710      	adds	r7, #16
 801a680:	46bd      	mov	sp, r7
 801a682:	bd80      	pop	{r7, pc}
 801a684:	0000      	movs	r0, r0
	...

0801a688 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801a688:	b5b0      	push	{r4, r5, r7, lr}
 801a68a:	b08e      	sub	sp, #56	; 0x38
 801a68c:	af02      	add	r7, sp, #8
 801a68e:	60f8      	str	r0, [r7, #12]
 801a690:	60b9      	str	r1, [r7, #8]
 801a692:	607a      	str	r2, [r7, #4]
 801a694:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801a696:	68bb      	ldr	r3, [r7, #8]
 801a698:	68db      	ldr	r3, [r3, #12]
 801a69a:	4618      	mov	r0, r3
 801a69c:	f7e5 ff5e 	bl	800055c <__aeabi_f2d>
 801a6a0:	4604      	mov	r4, r0
 801a6a2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	68db      	ldr	r3, [r3, #12]
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	f7e5 ff57 	bl	800055c <__aeabi_f2d>
 801a6ae:	4602      	mov	r2, r0
 801a6b0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801a6b2:	4620      	mov	r0, r4
 801a6b4:	4629      	mov	r1, r5
 801a6b6:	f7e5 ffa9 	bl	800060c <__aeabi_dmul>
 801a6ba:	4602      	mov	r2, r0
 801a6bc:	460b      	mov	r3, r1
 801a6be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d04b      	beq.n	801a760 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 801a6c8:	683b      	ldr	r3, [r7, #0]
 801a6ca:	68db      	ldr	r3, [r3, #12]
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	f7e5 ff45 	bl	800055c <__aeabi_f2d>
 801a6d2:	4602      	mov	r2, r0
 801a6d4:	460b      	mov	r3, r1
 801a6d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801a6da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a6de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801a6e2:	f7e5 fddb 	bl	800029c <__aeabi_dsub>
 801a6e6:	4602      	mov	r2, r0
 801a6e8:	460b      	mov	r3, r1
 801a6ea:	ec43 2b17 	vmov	d7, r2, r3
 801a6ee:	eeb0 0a47 	vmov.f32	s0, s14
 801a6f2:	eef0 0a67 	vmov.f32	s1, s15
 801a6f6:	f7ff ff15 	bl	801a524 <_ZSt3absd>
 801a6fa:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801a6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a700:	68db      	ldr	r3, [r3, #12]
 801a702:	4618      	mov	r0, r3
 801a704:	f7e5 ff2a 	bl	800055c <__aeabi_f2d>
 801a708:	4602      	mov	r2, r0
 801a70a:	460b      	mov	r3, r1
 801a70c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 801a710:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a714:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a718:	f7e6 f8a2 	bl	8000860 <__aeabi_ddiv>
 801a71c:	4602      	mov	r2, r0
 801a71e:	460b      	mov	r3, r1
 801a720:	4610      	mov	r0, r2
 801a722:	4619      	mov	r1, r3
 801a724:	2301      	movs	r3, #1
 801a726:	461c      	mov	r4, r3
 801a728:	a318      	add	r3, pc, #96	; (adr r3, 801a78c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72e:	f7e6 f9e9 	bl	8000b04 <__aeabi_dcmple>
 801a732:	4603      	mov	r3, r0
 801a734:	2b00      	cmp	r3, #0
 801a736:	d101      	bne.n	801a73c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 801a738:	2300      	movs	r3, #0
 801a73a:	461c      	mov	r4, r3
 801a73c:	b2e3      	uxtb	r3, r4
 801a73e:	f083 0301 	eor.w	r3, r3, #1
 801a742:	b2db      	uxtb	r3, r3
 801a744:	2b00      	cmp	r3, #0
 801a746:	d00b      	beq.n	801a760 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	695c      	ldr	r4, [r3, #20]
 801a74c:	4b0c      	ldr	r3, [pc, #48]	; (801a780 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 801a74e:	9300      	str	r3, [sp, #0]
 801a750:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801a754:	4a0b      	ldr	r2, [pc, #44]	; (801a784 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801a756:	490c      	ldr	r1, [pc, #48]	; (801a788 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 801a758:	68f8      	ldr	r0, [r7, #12]
 801a75a:	47a0      	blx	r4
 801a75c:	2301      	movs	r3, #1
 801a75e:	e009      	b.n	801a774 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 801a760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a762:	9300      	str	r3, [sp, #0]
 801a764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a766:	687a      	ldr	r2, [r7, #4]
 801a768:	68b9      	ldr	r1, [r7, #8]
 801a76a:	68f8      	ldr	r0, [r7, #12]
 801a76c:	f000 f812 	bl	801a794 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 801a770:	4603      	mov	r3, r0
                                          multiplier);
 801a772:	bf00      	nop
}
 801a774:	4618      	mov	r0, r3
 801a776:	3730      	adds	r7, #48	; 0x30
 801a778:	46bd      	mov	sp, r7
 801a77a:	bdb0      	pop	{r4, r5, r7, pc}
 801a77c:	f3af 8000 	nop.w
 801a780:	08026810 	.word	0x08026810
 801a784:	08026604 	.word	0x08026604
 801a788:	080266fc 	.word	0x080266fc
 801a78c:	47ae147b 	.word	0x47ae147b
 801a790:	3f947ae1 	.word	0x3f947ae1

0801a794 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801a794:	b590      	push	{r4, r7, lr}
 801a796:	b089      	sub	sp, #36	; 0x24
 801a798:	af02      	add	r7, sp, #8
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	60b9      	str	r1, [r7, #8]
 801a79e:	607a      	str	r2, [r7, #4]
 801a7a0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	ed93 7a03 	vldr	s14, [r3, #12]
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	edd3 7a03 	vldr	s15, [r3, #12]
 801a7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801a7b2:	ee17 0a90 	vmov	r0, s15
 801a7b6:	f7e5 fed1 	bl	800055c <__aeabi_f2d>
 801a7ba:	4602      	mov	r2, r0
 801a7bc:	460b      	mov	r3, r1
 801a7be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801a7c2:	2301      	movs	r3, #1
 801a7c4:	461c      	mov	r4, r3
 801a7c6:	f04f 0200 	mov.w	r2, #0
 801a7ca:	f04f 0300 	mov.w	r3, #0
 801a7ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a7d2:	f7e6 f9a1 	bl	8000b18 <__aeabi_dcmpge>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d101      	bne.n	801a7e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801a7dc:	2300      	movs	r3, #0
 801a7de:	461c      	mov	r4, r3
 801a7e0:	b2e3      	uxtb	r3, r4
 801a7e2:	f083 0301 	eor.w	r3, r3, #1
 801a7e6:	b2db      	uxtb	r3, r3
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d00b      	beq.n	801a804 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	695c      	ldr	r4, [r3, #20]
 801a7f0:	4b0f      	ldr	r3, [pc, #60]	; (801a830 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801a7f2:	9300      	str	r3, [sp, #0]
 801a7f4:	f240 1351 	movw	r3, #337	; 0x151
 801a7f8:	4a0e      	ldr	r2, [pc, #56]	; (801a834 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801a7fa:	490f      	ldr	r1, [pc, #60]	; (801a838 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801a7fc:	68f8      	ldr	r0, [r7, #12]
 801a7fe:	47a0      	blx	r4
 801a800:	2301      	movs	r3, #1
 801a802:	e010      	b.n	801a826 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801a804:	683b      	ldr	r3, [r7, #0]
 801a806:	68db      	ldr	r3, [r3, #12]
 801a808:	4618      	mov	r0, r3
 801a80a:	f7e5 fea7 	bl	800055c <__aeabi_f2d>
 801a80e:	4602      	mov	r2, r0
 801a810:	460b      	mov	r3, r1
 801a812:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a816:	f7e6 f823 	bl	8000860 <__aeabi_ddiv>
 801a81a:	4602      	mov	r2, r0
 801a81c:	460b      	mov	r3, r1
 801a81e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a820:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801a824:	2300      	movs	r3, #0
}
 801a826:	4618      	mov	r0, r3
 801a828:	371c      	adds	r7, #28
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bd90      	pop	{r4, r7, pc}
 801a82e:	bf00      	nop
 801a830:	08026834 	.word	0x08026834
 801a834:	08026604 	.word	0x08026604
 801a838:	080266fc 	.word	0x080266fc

0801a83c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 801a83c:	b580      	push	{r7, lr}
 801a83e:	b082      	sub	sp, #8
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	ed87 0a00 	vstr	s0, [r7]
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801a84e:	ed97 7a00 	vldr	s14, [r7]
 801a852:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a856:	eeb0 0a66 	vmov.f32	s0, s13
 801a85a:	f7ff fe11 	bl	801a480 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801a85e:	eef0 7a40 	vmov.f32	s15, s0
 801a862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a866:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801a86e:	4413      	add	r3, r2
  };
 801a870:	4618      	mov	r0, r3
 801a872:	3708      	adds	r7, #8
 801a874:	46bd      	mov	sp, r7
 801a876:	bd80      	pop	{r7, pc}

0801a878 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 801a878:	b580      	push	{r7, lr}
 801a87a:	b08e      	sub	sp, #56	; 0x38
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	60b9      	str	r1, [r7, #8]
 801a880:	607a      	str	r2, [r7, #4]
 801a882:	603b      	str	r3, [r7, #0]
 801a884:	4603      	mov	r3, r0
 801a886:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	68db      	ldr	r3, [r3, #12]
 801a88c:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 801a88e:	683b      	ldr	r3, [r7, #0]
 801a890:	691b      	ldr	r3, [r3, #16]
 801a892:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801a894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a896:	617b      	str	r3, [r7, #20]
 801a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a89a:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 801a89c:	7bfb      	ldrb	r3, [r7, #15]
 801a89e:	2b01      	cmp	r3, #1
 801a8a0:	d118      	bne.n	801a8d4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801a8a2:	f107 0314 	add.w	r3, r7, #20
 801a8a6:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801a99c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801a8aa:	4618      	mov	r0, r3
 801a8ac:	f7ff ffc6 	bl	801a83c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	61fb      	str	r3, [r7, #28]
 801a8b4:	f107 021c 	add.w	r2, r7, #28
 801a8b8:	f107 0308 	add.w	r3, r7, #8
 801a8bc:	4611      	mov	r1, r2
 801a8be:	4618      	mov	r0, r3
 801a8c0:	f000 f8d6 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	681a      	ldr	r2, [r3, #0]
 801a8c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8ca:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801a8cc:	687a      	ldr	r2, [r7, #4]
 801a8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8d0:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801a8d2:	e05f      	b.n	801a994 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801a8d4:	7bfb      	ldrb	r3, [r7, #15]
 801a8d6:	2b03      	cmp	r3, #3
 801a8d8:	d129      	bne.n	801a92e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801a8da:	f107 0314 	add.w	r3, r7, #20
 801a8de:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801a99c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f7ff ffaa 	bl	801a83c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a8e8:	4603      	mov	r3, r0
 801a8ea:	623b      	str	r3, [r7, #32]
 801a8ec:	f107 0220 	add.w	r2, r7, #32
 801a8f0:	f107 0308 	add.w	r3, r7, #8
 801a8f4:	4611      	mov	r1, r2
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	f000 f8ba 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	681a      	ldr	r2, [r3, #0]
 801a900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a902:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801a904:	f107 0314 	add.w	r3, r7, #20
 801a908:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801a90c:	4618      	mov	r0, r3
 801a90e:	f7ff ff95 	bl	801a83c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a912:	4603      	mov	r3, r0
 801a914:	627b      	str	r3, [r7, #36]	; 0x24
 801a916:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a91a:	1d3b      	adds	r3, r7, #4
 801a91c:	4611      	mov	r1, r2
 801a91e:	4618      	mov	r0, r3
 801a920:	f000 f892 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801a924:	4603      	mov	r3, r0
 801a926:	681a      	ldr	r2, [r3, #0]
 801a928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a92a:	601a      	str	r2, [r3, #0]
}
 801a92c:	e032      	b.n	801a994 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 801a92e:	7bfb      	ldrb	r3, [r7, #15]
 801a930:	2b02      	cmp	r3, #2
 801a932:	d129      	bne.n	801a988 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801a934:	f107 0314 	add.w	r3, r7, #20
 801a938:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801a93c:	4618      	mov	r0, r3
 801a93e:	f7ff ff7d 	bl	801a83c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a942:	4603      	mov	r3, r0
 801a944:	62bb      	str	r3, [r7, #40]	; 0x28
 801a946:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a94a:	f107 0308 	add.w	r3, r7, #8
 801a94e:	4611      	mov	r1, r2
 801a950:	4618      	mov	r0, r3
 801a952:	f000 f88d 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801a956:	4603      	mov	r3, r0
 801a958:	681a      	ldr	r2, [r3, #0]
 801a95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a95c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 801a95e:	f107 0314 	add.w	r3, r7, #20
 801a962:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a966:	4618      	mov	r0, r3
 801a968:	f7ff ff68 	bl	801a83c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a96c:	4603      	mov	r3, r0
 801a96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a970:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801a974:	1d3b      	adds	r3, r7, #4
 801a976:	4611      	mov	r1, r2
 801a978:	4618      	mov	r0, r3
 801a97a:	f000 f865 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801a97e:	4603      	mov	r3, r0
 801a980:	681a      	ldr	r2, [r3, #0]
 801a982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a984:	601a      	str	r2, [r3, #0]
}
 801a986:	e005      	b.n	801a994 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 801a988:	68ba      	ldr	r2, [r7, #8]
 801a98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a98c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801a98e:	687a      	ldr	r2, [r7, #4]
 801a990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a992:	601a      	str	r2, [r3, #0]
}
 801a994:	bf00      	nop
 801a996:	3738      	adds	r7, #56	; 0x38
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}
 801a99c:	00000000 	.word	0x00000000

0801a9a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 801a9a0:	b590      	push	{r4, r7, lr}
 801a9a2:	b089      	sub	sp, #36	; 0x24
 801a9a4:	af02      	add	r7, sp, #8
 801a9a6:	60f8      	str	r0, [r7, #12]
 801a9a8:	607a      	str	r2, [r7, #4]
 801a9aa:	603b      	str	r3, [r7, #0]
 801a9ac:	460b      	mov	r3, r1
 801a9ae:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801a9b4:	2300      	movs	r3, #0
 801a9b6:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	781b      	ldrb	r3, [r3, #0]
 801a9bc:	2b03      	cmp	r3, #3
 801a9be:	d108      	bne.n	801a9d2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 801a9c0:	f7ff fd7f 	bl	801a4c2 <_ZNSt14numeric_limitsIhE3minEv>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 801a9c8:	f7ff fd83 	bl	801a4d2 <_ZNSt14numeric_limitsIhE3maxEv>
 801a9cc:	4603      	mov	r3, r0
 801a9ce:	613b      	str	r3, [r7, #16]
 801a9d0:	e025      	b.n	801aa1e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	781b      	ldrb	r3, [r3, #0]
 801a9d6:	2b09      	cmp	r3, #9
 801a9d8:	d108      	bne.n	801a9ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801a9da:	f7ff fd61 	bl	801a4a0 <_ZNSt14numeric_limitsIaE3minEv>
 801a9de:	4603      	mov	r3, r0
 801a9e0:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 801a9e2:	f7ff fd66 	bl	801a4b2 <_ZNSt14numeric_limitsIaE3maxEv>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	613b      	str	r3, [r7, #16]
 801a9ea:	e018      	b.n	801aa1e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	2b07      	cmp	r3, #7
 801a9f2:	d108      	bne.n	801aa06 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 801a9f4:	f7ff fd76 	bl	801a4e4 <_ZNSt14numeric_limitsIsE3minEv>
 801a9f8:	4603      	mov	r3, r0
 801a9fa:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 801a9fc:	f7ff fd7c 	bl	801a4f8 <_ZNSt14numeric_limitsIsE3maxEv>
 801aa00:	4603      	mov	r3, r0
 801aa02:	613b      	str	r3, [r7, #16]
 801aa04:	e00b      	b.n	801aa1e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	695c      	ldr	r4, [r3, #20]
 801aa0a:	4b0c      	ldr	r3, [pc, #48]	; (801aa3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 801aa0c:	9300      	str	r3, [sp, #0]
 801aa0e:	f44f 73c2 	mov.w	r3, #388	; 0x184
 801aa12:	4a0b      	ldr	r2, [pc, #44]	; (801aa40 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 801aa14:	490b      	ldr	r1, [pc, #44]	; (801aa44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 801aa16:	68f8      	ldr	r0, [r7, #12]
 801aa18:	47a0      	blx	r4
 801aa1a:	2301      	movs	r3, #1
 801aa1c:	e00a      	b.n	801aa34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 801aa1e:	7af8      	ldrb	r0, [r7, #11]
 801aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa22:	9301      	str	r3, [sp, #4]
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	9300      	str	r3, [sp, #0]
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	693a      	ldr	r2, [r7, #16]
 801aa2c:	6979      	ldr	r1, [r7, #20]
 801aa2e:	f7ff ff23 	bl	801a878 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 801aa32:	2300      	movs	r3, #0
}
 801aa34:	4618      	mov	r0, r3
 801aa36:	371c      	adds	r7, #28
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd90      	pop	{r4, r7, pc}
 801aa3c:	08026850 	.word	0x08026850
 801aa40:	08026604 	.word	0x08026604
 801aa44:	080266fc 	.word	0x080266fc

0801aa48 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801aa48:	b480      	push	{r7}
 801aa4a:	b083      	sub	sp, #12
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	6078      	str	r0, [r7, #4]
 801aa50:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	681a      	ldr	r2, [r3, #0]
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	429a      	cmp	r2, r3
 801aa5c:	da01      	bge.n	801aa62 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 801aa5e:	683b      	ldr	r3, [r7, #0]
 801aa60:	e000      	b.n	801aa64 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 801aa62:	687b      	ldr	r3, [r7, #4]
    }
 801aa64:	4618      	mov	r0, r3
 801aa66:	370c      	adds	r7, #12
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa6e:	4770      	bx	lr

0801aa70 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801aa70:	b480      	push	{r7}
 801aa72:	b083      	sub	sp, #12
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681a      	ldr	r2, [r3, #0]
 801aa7e:	683b      	ldr	r3, [r7, #0]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	429a      	cmp	r2, r3
 801aa84:	da01      	bge.n	801aa8a <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	e000      	b.n	801aa8c <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 801aa8a:	687b      	ldr	r3, [r7, #4]
    }
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	370c      	adds	r7, #12
 801aa90:	46bd      	mov	sp, r7
 801aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa96:	4770      	bx	lr

0801aa98 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 801aa98:	b480      	push	{r7}
 801aa9a:	b083      	sub	sp, #12
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	6078      	str	r0, [r7, #4]
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	2200      	movs	r2, #0
 801aaa4:	601a      	str	r2, [r3, #0]
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	370c      	adds	r7, #12
 801aaac:	46bd      	mov	sp, r7
 801aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab2:	4770      	bx	lr

0801aab4 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 801aab4:	b580      	push	{r7, lr}
 801aab6:	b084      	sub	sp, #16
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	60f8      	str	r0, [r7, #12]
 801aabc:	60b9      	str	r1, [r7, #8]
 801aabe:	607a      	str	r2, [r7, #4]
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	2200      	movs	r2, #0
 801aac4:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801aac6:	687a      	ldr	r2, [r7, #4]
 801aac8:	68b9      	ldr	r1, [r7, #8]
 801aaca:	68f8      	ldr	r0, [r7, #12]
 801aacc:	f000 f866 	bl	801ab9c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	4618      	mov	r0, r3
 801aad4:	3710      	adds	r7, #16
 801aad6:	46bd      	mov	sp, r7
 801aad8:	bd80      	pop	{r7, pc}

0801aada <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 801aada:	b580      	push	{r7, lr}
 801aadc:	b082      	sub	sp, #8
 801aade:	af00      	add	r7, sp, #0
 801aae0:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	2b05      	cmp	r3, #5
 801aae8:	dd08      	ble.n	801aafc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	685b      	ldr	r3, [r3, #4]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d004      	beq.n	801aafc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	685b      	ldr	r3, [r3, #4]
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	f005 f910 	bl	801fd1c <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	4618      	mov	r0, r3
 801ab00:	3708      	adds	r7, #8
 801ab02:	46bd      	mov	sp, r7
 801ab04:	bd80      	pop	{r7, pc}

0801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 801ab06:	b480      	push	{r7}
 801ab08:	b083      	sub	sp, #12
 801ab0a:	af00      	add	r7, sp, #0
 801ab0c:	6078      	str	r0, [r7, #4]
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	4618      	mov	r0, r3
 801ab14:	370c      	adds	r7, #12
 801ab16:	46bd      	mov	sp, r7
 801ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1c:	4770      	bx	lr

0801ab1e <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 801ab1e:	b480      	push	{r7}
 801ab20:	b083      	sub	sp, #12
 801ab22:	af00      	add	r7, sp, #0
 801ab24:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	2b05      	cmp	r3, #5
 801ab2c:	dd02      	ble.n	801ab34 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	685b      	ldr	r3, [r3, #4]
 801ab32:	e001      	b.n	801ab38 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	3304      	adds	r3, #4
  }
 801ab38:	4618      	mov	r0, r3
 801ab3a:	370c      	adds	r7, #12
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab42:	4770      	bx	lr

0801ab44 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b082      	sub	sp, #8
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
 801ab4c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	2b05      	cmp	r3, #5
 801ab54:	dd08      	ble.n	801ab68 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	685b      	ldr	r3, [r3, #4]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d004      	beq.n	801ab68 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	685b      	ldr	r3, [r3, #4]
 801ab62:	4618      	mov	r0, r3
 801ab64:	f005 f8da 	bl	801fd1c <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	683a      	ldr	r2, [r7, #0]
 801ab6c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	2b05      	cmp	r3, #5
 801ab72:	dd0f      	ble.n	801ab94 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 801ab74:	683b      	ldr	r3, [r7, #0]
 801ab76:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801ab7a:	4293      	cmp	r3, r2
 801ab7c:	d201      	bcs.n	801ab82 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 801ab7e:	009b      	lsls	r3, r3, #2
 801ab80:	e001      	b.n	801ab86 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 801ab82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ab86:	4618      	mov	r0, r3
 801ab88:	f005 f8db 	bl	801fd42 <_Znaj>
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	461a      	mov	r2, r3
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801ab94:	bf00      	nop
 801ab96:	3708      	adds	r7, #8
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	bd80      	pop	{r7, pc}

0801ab9c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 801ab9c:	b580      	push	{r7, lr}
 801ab9e:	b086      	sub	sp, #24
 801aba0:	af00      	add	r7, sp, #0
 801aba2:	60f8      	str	r0, [r7, #12]
 801aba4:	60b9      	str	r1, [r7, #8]
 801aba6:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 801aba8:	68b9      	ldr	r1, [r7, #8]
 801abaa:	68f8      	ldr	r0, [r7, #12]
 801abac:	f7ff ffca 	bl	801ab44 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 801abb0:	68f8      	ldr	r0, [r7, #12]
 801abb2:	f7ff ffb4 	bl	801ab1e <_ZN6tflite12RuntimeShape8DimsDataEv>
 801abb6:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 801abb8:	68bb      	ldr	r3, [r7, #8]
 801abba:	009b      	lsls	r3, r3, #2
 801abbc:	461a      	mov	r2, r3
 801abbe:	6879      	ldr	r1, [r7, #4]
 801abc0:	6978      	ldr	r0, [r7, #20]
 801abc2:	f007 fe89 	bl	80228d8 <memcpy>
  }
 801abc6:	bf00      	nop
 801abc8:	3718      	adds	r7, #24
 801abca:	46bd      	mov	sp, r7
 801abcc:	bd80      	pop	{r7, pc}

0801abce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801abce:	b580      	push	{r7, lr}
 801abd0:	b086      	sub	sp, #24
 801abd2:	af00      	add	r7, sp, #0
 801abd4:	6078      	str	r0, [r7, #4]
 801abd6:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 801abd8:	683b      	ldr	r3, [r7, #0]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d103      	bne.n	801abe6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801abde:	6878      	ldr	r0, [r7, #4]
 801abe0:	f7ff ff5a 	bl	801aa98 <_ZN6tflite12RuntimeShapeC1Ev>
 801abe4:	e00d      	b.n	801ac02 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801abe6:	683b      	ldr	r3, [r7, #0]
 801abe8:	689b      	ldr	r3, [r3, #8]
 801abea:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801abf2:	697b      	ldr	r3, [r7, #20]
 801abf4:	3304      	adds	r3, #4
 801abf6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801abf8:	68fa      	ldr	r2, [r7, #12]
 801abfa:	6939      	ldr	r1, [r7, #16]
 801abfc:	6878      	ldr	r0, [r7, #4]
 801abfe:	f7ff ff59 	bl	801aab4 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	3718      	adds	r7, #24
 801ac06:	46bd      	mov	sp, r7
 801ac08:	bd80      	pop	{r7, pc}

0801ac0a <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801ac0a:	b480      	push	{r7}
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ac12:	4618      	mov	r0, r3
 801ac14:	46bd      	mov	sp, r7
 801ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac1a:	4770      	bx	lr

0801ac1c <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 801ac1c:	b480      	push	{r7}
 801ac1e:	af00      	add	r7, sp, #0
 801ac20:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801ac24:	ee07 3a90 	vmov	s15, r3
 801ac28:	eeb0 0a67 	vmov.f32	s0, s15
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac32:	4770      	bx	lr

0801ac34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 801ac34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ac38:	b092      	sub	sp, #72	; 0x48
 801ac3a:	af00      	add	r7, sp, #0
 801ac3c:	61f8      	str	r0, [r7, #28]
 801ac3e:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 801ac40:	69fa      	ldr	r2, [r7, #28]
 801ac42:	69bb      	ldr	r3, [r7, #24]
 801ac44:	429a      	cmp	r2, r3
 801ac46:	d107      	bne.n	801ac58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801ac48:	f7ff ffdf 	bl	801ac0a <_ZNSt14numeric_limitsIlE3minEv>
 801ac4c:	4602      	mov	r2, r0
 801ac4e:	69fb      	ldr	r3, [r7, #28]
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d101      	bne.n	801ac58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801ac54:	2301      	movs	r3, #1
 801ac56:	e000      	b.n	801ac5a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 801ac58:	2300      	movs	r3, #0
 801ac5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 801ac5e:	69fb      	ldr	r3, [r7, #28]
 801ac60:	17da      	asrs	r2, r3, #31
 801ac62:	60bb      	str	r3, [r7, #8]
 801ac64:	60fa      	str	r2, [r7, #12]
 801ac66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ac6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 801ac6e:	69bb      	ldr	r3, [r7, #24]
 801ac70:	17da      	asrs	r2, r3, #31
 801ac72:	603b      	str	r3, [r7, #0]
 801ac74:	607a      	str	r2, [r7, #4]
 801ac76:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ac7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 801ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac82:	fb03 f202 	mul.w	r2, r3, r2
 801ac86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ac8a:	fb01 f303 	mul.w	r3, r1, r3
 801ac8e:	4413      	add	r3, r2
 801ac90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ac92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac94:	fba1 4502 	umull	r4, r5, r1, r2
 801ac98:	442b      	add	r3, r5
 801ac9a:	461d      	mov	r5, r3
 801ac9c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 801aca0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801aca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	db02      	blt.n	801acb2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 801acac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801acb0:	e000      	b.n	801acb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 801acb2:	4b1a      	ldr	r3, [pc, #104]	; (801ad1c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 801acb4:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb8:	17da      	asrs	r2, r3, #31
 801acba:	4698      	mov	r8, r3
 801acbc:	4691      	mov	r9, r2
 801acbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801acc2:	eb18 0102 	adds.w	r1, r8, r2
 801acc6:	6139      	str	r1, [r7, #16]
 801acc8:	eb49 0303 	adc.w	r3, r9, r3
 801accc:	617b      	str	r3, [r7, #20]
 801acce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	da07      	bge.n	801ace6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801acd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801acda:	eb12 0a01 	adds.w	sl, r2, r1
 801acde:	f143 0b00 	adc.w	fp, r3, #0
 801ace2:	4652      	mov	r2, sl
 801ace4:	465b      	mov	r3, fp
 801ace6:	f04f 0000 	mov.w	r0, #0
 801acea:	f04f 0100 	mov.w	r1, #0
 801acee:	0fd0      	lsrs	r0, r2, #31
 801acf0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801acf4:	17d9      	asrs	r1, r3, #31
 801acf6:	4602      	mov	r2, r0
 801acf8:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 801acfa:	4613      	mov	r3, r2
 801acfc:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 801acfe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d003      	beq.n	801ad0e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 801ad06:	f7ff fa09 	bl	801a11c <_ZNSt14numeric_limitsIlE3maxEv>
 801ad0a:	4603      	mov	r3, r0
 801ad0c:	e000      	b.n	801ad10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 801ad0e:	6a3b      	ldr	r3, [r7, #32]
}
 801ad10:	4618      	mov	r0, r3
 801ad12:	3748      	adds	r7, #72	; 0x48
 801ad14:	46bd      	mov	sp, r7
 801ad16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ad1a:	bf00      	nop
 801ad1c:	c0000001 	.word	0xc0000001

0801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b082      	sub	sp, #8
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
 801ad28:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	da01      	bge.n	801ad34 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 801ad30:	f007 fd50 	bl	80227d4 <abort>
    TFLITE_DCHECK_LT(i, size_);
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	683a      	ldr	r2, [r7, #0]
 801ad3a:	429a      	cmp	r2, r3
 801ad3c:	db01      	blt.n	801ad42 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 801ad3e:	f007 fd49 	bl	80227d4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	2b05      	cmp	r3, #5
 801ad48:	dd06      	ble.n	801ad58 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	685a      	ldr	r2, [r3, #4]
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	009b      	lsls	r3, r3, #2
 801ad52:	4413      	add	r3, r2
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	e004      	b.n	801ad62 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 801ad58:	687a      	ldr	r2, [r7, #4]
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	009b      	lsls	r3, r3, #2
 801ad5e:	4413      	add	r3, r2
 801ad60:	685b      	ldr	r3, [r3, #4]
  }
 801ad62:	4618      	mov	r0, r3
 801ad64:	3708      	adds	r7, #8
 801ad66:	46bd      	mov	sp, r7
 801ad68:	bd80      	pop	{r7, pc}

0801ad6a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 801ad6a:	b480      	push	{r7}
 801ad6c:	b083      	sub	sp, #12
 801ad6e:	af00      	add	r7, sp, #0
 801ad70:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	2b05      	cmp	r3, #5
 801ad78:	dd02      	ble.n	801ad80 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	685b      	ldr	r3, [r3, #4]
 801ad7e:	e001      	b.n	801ad84 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	3304      	adds	r3, #4
  }
 801ad84:	4618      	mov	r0, r3
 801ad86:	370c      	adds	r7, #12
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8e:	4770      	bx	lr

0801ad90 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b086      	sub	sp, #24
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 801ad98:	2301      	movs	r3, #1
 801ad9a:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 801ad9c:	6878      	ldr	r0, [r7, #4]
 801ad9e:	f7ff ffe4 	bl	801ad6a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801ada2:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801ada4:	2300      	movs	r3, #0
 801ada6:	613b      	str	r3, [r7, #16]
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	693a      	ldr	r2, [r7, #16]
 801adae:	429a      	cmp	r2, r3
 801adb0:	da0c      	bge.n	801adcc <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 801adb2:	693b      	ldr	r3, [r7, #16]
 801adb4:	009b      	lsls	r3, r3, #2
 801adb6:	68fa      	ldr	r2, [r7, #12]
 801adb8:	4413      	add	r3, r2
 801adba:	681a      	ldr	r2, [r3, #0]
 801adbc:	697b      	ldr	r3, [r7, #20]
 801adbe:	fb02 f303 	mul.w	r3, r2, r3
 801adc2:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 801adc4:	693b      	ldr	r3, [r7, #16]
 801adc6:	3301      	adds	r3, #1
 801adc8:	613b      	str	r3, [r7, #16]
 801adca:	e7ed      	b.n	801ada8 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 801adcc:	697b      	ldr	r3, [r7, #20]
  }
 801adce:	4618      	mov	r0, r3
 801add0:	3718      	adds	r7, #24
 801add2:	46bd      	mov	sp, r7
 801add4:	bd80      	pop	{r7, pc}

0801add6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801add6:	b590      	push	{r4, r7, lr}
 801add8:	b085      	sub	sp, #20
 801adda:	af00      	add	r7, sp, #0
 801addc:	6078      	str	r0, [r7, #4]
 801adde:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 801ade0:	6878      	ldr	r0, [r7, #4]
 801ade2:	f7ff fe90 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ade6:	4604      	mov	r4, r0
 801ade8:	6838      	ldr	r0, [r7, #0]
 801adea:	f7ff fe8c 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801adee:	4603      	mov	r3, r0
 801adf0:	429c      	cmp	r4, r3
 801adf2:	d001      	beq.n	801adf8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 801adf4:	f007 fcee 	bl	80227d4 <abort>
  const int dims_count = shape.DimensionsCount();
 801adf8:	6878      	ldr	r0, [r7, #4]
 801adfa:	f7ff fe84 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801adfe:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 801ae00:	2300      	movs	r3, #0
 801ae02:	60fb      	str	r3, [r7, #12]
 801ae04:	68fa      	ldr	r2, [r7, #12]
 801ae06:	68bb      	ldr	r3, [r7, #8]
 801ae08:	429a      	cmp	r2, r3
 801ae0a:	da11      	bge.n	801ae30 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801ae0c:	68f9      	ldr	r1, [r7, #12]
 801ae0e:	6878      	ldr	r0, [r7, #4]
 801ae10:	f7ff ff86 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ae14:	4604      	mov	r4, r0
 801ae16:	68f9      	ldr	r1, [r7, #12]
 801ae18:	6838      	ldr	r0, [r7, #0]
 801ae1a:	f7ff ff81 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	429c      	cmp	r4, r3
 801ae22:	d001      	beq.n	801ae28 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 801ae24:	f007 fcd6 	bl	80227d4 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	3301      	adds	r3, #1
 801ae2c:	60fb      	str	r3, [r7, #12]
 801ae2e:	e7e9      	b.n	801ae04 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 801ae30:	6878      	ldr	r0, [r7, #4]
 801ae32:	f7ff ffad 	bl	801ad90 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801ae36:	4603      	mov	r3, r0
}
 801ae38:	4618      	mov	r0, r3
 801ae3a:	3714      	adds	r7, #20
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	bd90      	pop	{r4, r7, pc}

0801ae40 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 801ae40:	b580      	push	{r7, lr}
 801ae42:	b086      	sub	sp, #24
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	60f8      	str	r0, [r7, #12]
 801ae48:	60b9      	str	r1, [r7, #8]
 801ae4a:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae52:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	dc02      	bgt.n	801ae60 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	425b      	negs	r3, r3
 801ae5e:	e000      	b.n	801ae62 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 801ae60:	2300      	movs	r3, #0
 801ae62:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 801ae64:	68fa      	ldr	r2, [r7, #12]
 801ae66:	697b      	ldr	r3, [r7, #20]
 801ae68:	fa02 f303 	lsl.w	r3, r2, r3
 801ae6c:	68b9      	ldr	r1, [r7, #8]
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f7ff fee0 	bl	801ac34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801ae74:	4603      	mov	r3, r0
 801ae76:	6939      	ldr	r1, [r7, #16]
 801ae78:	4618      	mov	r0, r3
 801ae7a:	f000 fb4b 	bl	801b514 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801ae7e:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 801ae80:	4618      	mov	r0, r3
 801ae82:	3718      	adds	r7, #24
 801ae84:	46bd      	mov	sp, r7
 801ae86:	bd80      	pop	{r7, pc}

0801ae88 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b084      	sub	sp, #16
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	60f8      	str	r0, [r7, #12]
 801ae90:	60b9      	str	r1, [r7, #8]
 801ae92:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d101      	bne.n	801ae9e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801ae9a:	f007 fc9b 	bl	80227d4 <abort>
  TFLITE_DCHECK(node != nullptr);
 801ae9e:	68bb      	ldr	r3, [r7, #8]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d101      	bne.n	801aea8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801aea4:	f007 fc96 	bl	80227d4 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	6819      	ldr	r1, [r3, #0]
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	009b      	lsls	r3, r3, #2
 801aeb4:	440b      	add	r3, r1
 801aeb6:	685b      	ldr	r3, [r3, #4]
 801aeb8:	4619      	mov	r1, r3
 801aeba:	68f8      	ldr	r0, [r7, #12]
 801aebc:	4790      	blx	r2
 801aebe:	4603      	mov	r3, r0
}
 801aec0:	4618      	mov	r0, r3
 801aec2:	3710      	adds	r7, #16
 801aec4:	46bd      	mov	sp, r7
 801aec6:	bd80      	pop	{r7, pc}

0801aec8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b084      	sub	sp, #16
 801aecc:	af00      	add	r7, sp, #0
 801aece:	60f8      	str	r0, [r7, #12]
 801aed0:	60b9      	str	r1, [r7, #8]
 801aed2:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801aed4:	687a      	ldr	r2, [r7, #4]
 801aed6:	68b9      	ldr	r1, [r7, #8]
 801aed8:	68f8      	ldr	r0, [r7, #12]
 801aeda:	f7ff ffd5 	bl	801ae88 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801aede:	4603      	mov	r3, r0
}
 801aee0:	4618      	mov	r0, r3
 801aee2:	3710      	adds	r7, #16
 801aee4:	46bd      	mov	sp, r7
 801aee6:	bd80      	pop	{r7, pc}

0801aee8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801aee8:	b580      	push	{r7, lr}
 801aeea:	b084      	sub	sp, #16
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	60f8      	str	r0, [r7, #12]
 801aef0:	60b9      	str	r1, [r7, #8]
 801aef2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d101      	bne.n	801aefe <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801aefa:	f007 fc6b 	bl	80227d4 <abort>
  TFLITE_DCHECK(node != nullptr);
 801aefe:	68bb      	ldr	r3, [r7, #8]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d101      	bne.n	801af08 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801af04:	f007 fc66 	bl	80227d4 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801af0c:	68bb      	ldr	r3, [r7, #8]
 801af0e:	6859      	ldr	r1, [r3, #4]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	009b      	lsls	r3, r3, #2
 801af14:	440b      	add	r3, r1
 801af16:	685b      	ldr	r3, [r3, #4]
 801af18:	4619      	mov	r1, r3
 801af1a:	68f8      	ldr	r0, [r7, #12]
 801af1c:	4790      	blx	r2
 801af1e:	4603      	mov	r3, r0
}
 801af20:	4618      	mov	r0, r3
 801af22:	3710      	adds	r7, #16
 801af24:	46bd      	mov	sp, r7
 801af26:	bd80      	pop	{r7, pc}

0801af28 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801af28:	b580      	push	{r7, lr}
 801af2a:	b08a      	sub	sp, #40	; 0x28
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	60f8      	str	r0, [r7, #12]
 801af30:	60b9      	str	r1, [r7, #8]
 801af32:	607a      	str	r2, [r7, #4]
 801af34:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801af36:	6879      	ldr	r1, [r7, #4]
 801af38:	68f8      	ldr	r0, [r7, #12]
 801af3a:	f7ff ff4c 	bl	801add6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801af3e:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801af40:	2300      	movs	r3, #0
 801af42:	627b      	str	r3, [r7, #36]	; 0x24
 801af44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af46:	6a3b      	ldr	r3, [r7, #32]
 801af48:	429a      	cmp	r2, r3
 801af4a:	da1d      	bge.n	801af88 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 801af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af4e:	009b      	lsls	r3, r3, #2
 801af50:	68ba      	ldr	r2, [r7, #8]
 801af52:	4413      	add	r3, r2
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 801af58:	f04f 0300 	mov.w	r3, #0
 801af5c:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 801af5e:	edd7 7a07 	vldr	s15, [r7, #28]
 801af62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801af66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af6a:	d501      	bpl.n	801af70 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 801af6c:	69bb      	ldr	r3, [r7, #24]
 801af6e:	e000      	b.n	801af72 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 801af70:	69fb      	ldr	r3, [r7, #28]
 801af72:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 801af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af76:	009b      	lsls	r3, r3, #2
 801af78:	683a      	ldr	r2, [r7, #0]
 801af7a:	4413      	add	r3, r2
 801af7c:	697a      	ldr	r2, [r7, #20]
 801af7e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af82:	3301      	adds	r3, #1
 801af84:	627b      	str	r3, [r7, #36]	; 0x24
 801af86:	e7dd      	b.n	801af44 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801af88:	bf00      	nop
 801af8a:	3728      	adds	r7, #40	; 0x28
 801af8c:	46bd      	mov	sp, r7
 801af8e:	bd80      	pop	{r7, pc}

0801af90 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 801af90:	b580      	push	{r7, lr}
 801af92:	b08a      	sub	sp, #40	; 0x28
 801af94:	af00      	add	r7, sp, #0
 801af96:	60f8      	str	r0, [r7, #12]
 801af98:	60b9      	str	r1, [r7, #8]
 801af9a:	607a      	str	r2, [r7, #4]
 801af9c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801af9e:	6879      	ldr	r1, [r7, #4]
 801afa0:	68f8      	ldr	r0, [r7, #12]
 801afa2:	f7ff ff18 	bl	801add6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801afa6:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801afa8:	2300      	movs	r3, #0
 801afaa:	627b      	str	r3, [r7, #36]	; 0x24
 801afac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801afae:	6a3b      	ldr	r3, [r7, #32]
 801afb0:	429a      	cmp	r2, r3
 801afb2:	da2a      	bge.n	801b00a <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb6:	009b      	lsls	r3, r3, #2
 801afb8:	68ba      	ldr	r2, [r7, #8]
 801afba:	4413      	add	r3, r2
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 801afc0:	4b14      	ldr	r3, [pc, #80]	; (801b014 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801afc2:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801afc4:	f04f 0300 	mov.w	r3, #0
 801afc8:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801afca:	edd7 7a07 	vldr	s15, [r7, #28]
 801afce:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801afd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801afd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afda:	dd01      	ble.n	801afe0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 801afdc:	69bb      	ldr	r3, [r7, #24]
 801afde:	e009      	b.n	801aff4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801afe0:	edd7 7a07 	vldr	s15, [r7, #28]
 801afe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801afe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afec:	d501      	bpl.n	801aff2 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801afee:	697b      	ldr	r3, [r7, #20]
 801aff0:	e000      	b.n	801aff4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801aff2:	69fb      	ldr	r3, [r7, #28]
 801aff4:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff8:	009b      	lsls	r3, r3, #2
 801affa:	683a      	ldr	r2, [r7, #0]
 801affc:	4413      	add	r3, r2
 801affe:	693a      	ldr	r2, [r7, #16]
 801b000:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b004:	3301      	adds	r3, #1
 801b006:	627b      	str	r3, [r7, #36]	; 0x24
 801b008:	e7d0      	b.n	801afac <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801b00a:	bf00      	nop
 801b00c:	3728      	adds	r7, #40	; 0x28
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}
 801b012:	bf00      	nop
 801b014:	40c00000 	.word	0x40c00000

0801b018 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801b018:	b580      	push	{r7, lr}
 801b01a:	b084      	sub	sp, #16
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	60f8      	str	r0, [r7, #12]
 801b020:	60b9      	str	r1, [r7, #8]
 801b022:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d101      	bne.n	801b030 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 801b02c:	f007 fbd2 	bl	80227d4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b034:	211c      	movs	r1, #28
 801b036:	68f8      	ldr	r0, [r7, #12]
 801b038:	4798      	blx	r3
 801b03a:	4603      	mov	r3, r0
}
 801b03c:	4618      	mov	r0, r3
 801b03e:	3710      	adds	r7, #16
 801b040:	46bd      	mov	sp, r7
 801b042:	bd80      	pop	{r7, pc}

0801b044 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801b044:	b590      	push	{r4, r7, lr}
 801b046:	b089      	sub	sp, #36	; 0x24
 801b048:	af02      	add	r7, sp, #8
 801b04a:	6078      	str	r0, [r7, #4]
 801b04c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b04e:	683b      	ldr	r3, [r7, #0]
 801b050:	691b      	ldr	r3, [r3, #16]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d101      	bne.n	801b05a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801b056:	f007 fbbd 	bl	80227d4 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	691b      	ldr	r3, [r3, #16]
 801b05e:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801b060:	2200      	movs	r2, #0
 801b062:	6839      	ldr	r1, [r7, #0]
 801b064:	6878      	ldr	r0, [r7, #4]
 801b066:	f7ff facd 	bl	801a604 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b06a:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801b06c:	693b      	ldr	r3, [r7, #16]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d10a      	bne.n	801b088 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	695c      	ldr	r4, [r3, #20]
 801b076:	4b1a      	ldr	r3, [pc, #104]	; (801b0e0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 801b078:	9300      	str	r3, [sp, #0]
 801b07a:	238e      	movs	r3, #142	; 0x8e
 801b07c:	4a19      	ldr	r2, [pc, #100]	; (801b0e4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801b07e:	491a      	ldr	r1, [pc, #104]	; (801b0e8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801b080:	6878      	ldr	r0, [r7, #4]
 801b082:	47a0      	blx	r4
 801b084:	2301      	movs	r3, #1
 801b086:	e027      	b.n	801b0d8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801b088:	2200      	movs	r2, #0
 801b08a:	6839      	ldr	r1, [r7, #0]
 801b08c:	6878      	ldr	r0, [r7, #4]
 801b08e:	f7ff fac9 	bl	801a624 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801b092:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d10a      	bne.n	801b0b0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	695c      	ldr	r4, [r3, #20]
 801b09e:	4b13      	ldr	r3, [pc, #76]	; (801b0ec <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 801b0a0:	9300      	str	r3, [sp, #0]
 801b0a2:	2390      	movs	r3, #144	; 0x90
 801b0a4:	4a0f      	ldr	r2, [pc, #60]	; (801b0e4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801b0a6:	4910      	ldr	r1, [pc, #64]	; (801b0e8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801b0a8:	6878      	ldr	r0, [r7, #4]
 801b0aa:	47a0      	blx	r4
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	e013      	b.n	801b0d8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 801b0b0:	693b      	ldr	r3, [r7, #16]
 801b0b2:	781b      	ldrb	r3, [r3, #0]
 801b0b4:	2b09      	cmp	r3, #9
 801b0b6:	d105      	bne.n	801b0c4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 801b0b8:	697a      	ldr	r2, [r7, #20]
 801b0ba:	68f9      	ldr	r1, [r7, #12]
 801b0bc:	6938      	ldr	r0, [r7, #16]
 801b0be:	f000 fa9d 	bl	801b5fc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801b0c2:	e008      	b.n	801b0d6 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801b0c4:	693b      	ldr	r3, [r7, #16]
 801b0c6:	781b      	ldrb	r3, [r3, #0]
 801b0c8:	2b03      	cmp	r3, #3
 801b0ca:	d104      	bne.n	801b0d6 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801b0cc:	697a      	ldr	r2, [r7, #20]
 801b0ce:	68f9      	ldr	r1, [r7, #12]
 801b0d0:	6938      	ldr	r0, [r7, #16]
 801b0d2:	f000 fb35 	bl	801b740 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801b0d6:	2300      	movs	r3, #0
}
 801b0d8:	4618      	mov	r0, r3
 801b0da:	371c      	adds	r7, #28
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd90      	pop	{r4, r7, pc}
 801b0e0:	08026974 	.word	0x08026974
 801b0e4:	080268d0 	.word	0x080268d0
 801b0e8:	0802695c 	.word	0x0802695c
 801b0ec:	08026988 	.word	0x08026988

0801b0f0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 801b0f0:	b590      	push	{r4, r7, lr}
 801b0f2:	b0ad      	sub	sp, #180	; 0xb4
 801b0f4:	af02      	add	r7, sp, #8
 801b0f6:	6078      	str	r0, [r7, #4]
 801b0f8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b0fa:	683b      	ldr	r3, [r7, #0]
 801b0fc:	691b      	ldr	r3, [r3, #16]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d101      	bne.n	801b106 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801b102:	f007 fb67 	bl	80227d4 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801b106:	683b      	ldr	r3, [r7, #0]
 801b108:	691b      	ldr	r3, [r3, #16]
 801b10a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801b10e:	2200      	movs	r2, #0
 801b110:	6839      	ldr	r1, [r7, #0]
 801b112:	6878      	ldr	r0, [r7, #4]
 801b114:	f7ff fed8 	bl	801aec8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801b118:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801b11c:	2200      	movs	r2, #0
 801b11e:	6839      	ldr	r1, [r7, #0]
 801b120:	6878      	ldr	r0, [r7, #4]
 801b122:	f7ff fee1 	bl	801aee8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801b126:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801b12a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b12e:	7a1b      	ldrb	r3, [r3, #8]
 801b130:	2b09      	cmp	r3, #9
 801b132:	d032      	beq.n	801b19a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801b134:	2b09      	cmp	r3, #9
 801b136:	f300 808c 	bgt.w	801b252 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801b13a:	2b01      	cmp	r3, #1
 801b13c:	d002      	beq.n	801b144 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801b13e:	2b03      	cmp	r3, #3
 801b140:	d059      	beq.n	801b1f6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801b142:	e086      	b.n	801b252 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b144:	f107 030c 	add.w	r3, r7, #12
 801b148:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b14c:	4618      	mov	r0, r3
 801b14e:	f001 fe2f 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801b152:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b156:	f000 fb95 	bl	801b884 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801b15a:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 801b15c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b160:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b164:	4618      	mov	r0, r3
 801b166:	f001 fe23 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b16a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b16e:	f000 fb98 	bl	801b8a2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801b172:	4603      	mov	r3, r0
 801b174:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b178:	f107 000c 	add.w	r0, r7, #12
 801b17c:	4621      	mov	r1, r4
 801b17e:	f7ff fed3 	bl	801af28 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801b182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b186:	4618      	mov	r0, r3
 801b188:	f7ff fca7 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b18c:	f107 030c 	add.w	r3, r7, #12
 801b190:	4618      	mov	r0, r3
 801b192:	f7ff fca2 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801b196:	2300      	movs	r3, #0
 801b198:	e069      	b.n	801b26e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b19a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b19e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	f001 fe04 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 801b1a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b1ac:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f001 fdfd 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b1b6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b1ba:	f000 fb83 	bl	801b8c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801b1be:	4604      	mov	r4, r0
 801b1c0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b1c4:	f000 fb8d 	bl	801b8e2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801b1c8:	4603      	mov	r3, r0
 801b1ca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801b1ce:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801b1d2:	9300      	str	r3, [sp, #0]
 801b1d4:	4623      	mov	r3, r4
 801b1d6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801b1da:	f000 fb93 	bl	801b904 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801b1de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	f7ff fc79 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b1e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7ff fc74 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	e03b      	b.n	801b26e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b1f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b1fa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b1fe:	4618      	mov	r0, r3
 801b200:	f001 fdd6 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 801b204:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b208:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b20c:	4618      	mov	r0, r3
 801b20e:	f001 fdcf 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b212:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b216:	f000 fbc1 	bl	801b99c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801b21a:	4604      	mov	r4, r0
 801b21c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b220:	f000 fbcb 	bl	801b9ba <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801b224:	4603      	mov	r3, r0
 801b226:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801b22a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801b22e:	9300      	str	r3, [sp, #0]
 801b230:	4623      	mov	r3, r4
 801b232:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801b236:	f000 fbd1 	bl	801b9dc <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801b23a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b23e:	4618      	mov	r0, r3
 801b240:	f7ff fc4b 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b244:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b248:	4618      	mov	r0, r3
 801b24a:	f7ff fc46 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801b24e:	2300      	movs	r3, #0
 801b250:	e00d      	b.n	801b26e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	695c      	ldr	r4, [r3, #20]
 801b256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b25a:	7a1b      	ldrb	r3, [r3, #8]
 801b25c:	4618      	mov	r0, r3
 801b25e:	f7fe fee1 	bl	801a024 <TfLiteTypeGetName>
 801b262:	4603      	mov	r3, r0
 801b264:	461a      	mov	r2, r3
 801b266:	4904      	ldr	r1, [pc, #16]	; (801b278 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 801b268:	6878      	ldr	r0, [r7, #4]
 801b26a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801b26c:	2301      	movs	r3, #1
    }
  }
}
 801b26e:	4618      	mov	r0, r3
 801b270:	37ac      	adds	r7, #172	; 0xac
 801b272:	46bd      	mov	sp, r7
 801b274:	bd90      	pop	{r4, r7, pc}
 801b276:	bf00      	nop
 801b278:	0802699c 	.word	0x0802699c

0801b27c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b084      	sub	sp, #16
 801b280:	af00      	add	r7, sp, #0
 801b282:	60f8      	str	r0, [r7, #12]
 801b284:	60b9      	str	r1, [r7, #8]
 801b286:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d101      	bne.n	801b294 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 801b290:	f007 faa0 	bl	80227d4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b298:	2104      	movs	r1, #4
 801b29a:	68f8      	ldr	r0, [r7, #12]
 801b29c:	4798      	blx	r3
 801b29e:	4603      	mov	r3, r0
}
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	3710      	adds	r7, #16
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	bd80      	pop	{r7, pc}

0801b2a8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 801b2a8:	b590      	push	{r4, r7, lr}
 801b2aa:	b087      	sub	sp, #28
 801b2ac:	af02      	add	r7, sp, #8
 801b2ae:	6078      	str	r0, [r7, #4]
 801b2b0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b2b2:	683b      	ldr	r3, [r7, #0]
 801b2b4:	691b      	ldr	r3, [r3, #16]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d101      	bne.n	801b2be <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801b2ba:	f007 fa8b 	bl	80227d4 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801b2be:	683b      	ldr	r3, [r7, #0]
 801b2c0:	691b      	ldr	r3, [r3, #16]
 801b2c2:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801b2c4:	2200      	movs	r2, #0
 801b2c6:	6839      	ldr	r1, [r7, #0]
 801b2c8:	6878      	ldr	r0, [r7, #4]
 801b2ca:	f7ff f99b 	bl	801a604 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b2ce:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d10a      	bne.n	801b2ec <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	695c      	ldr	r4, [r3, #20]
 801b2da:	4b20      	ldr	r3, [pc, #128]	; (801b35c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801b2dc:	9300      	str	r3, [sp, #0]
 801b2de:	23cd      	movs	r3, #205	; 0xcd
 801b2e0:	4a1f      	ldr	r2, [pc, #124]	; (801b360 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801b2e2:	4920      	ldr	r1, [pc, #128]	; (801b364 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 801b2e4:	6878      	ldr	r0, [r7, #4]
 801b2e6:	47a0      	blx	r4
 801b2e8:	2301      	movs	r3, #1
 801b2ea:	e033      	b.n	801b354 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 801b2ec:	68bb      	ldr	r3, [r7, #8]
 801b2ee:	781b      	ldrb	r3, [r3, #0]
 801b2f0:	2b09      	cmp	r3, #9
 801b2f2:	d115      	bne.n	801b320 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801b2f4:	68bb      	ldr	r3, [r7, #8]
 801b2f6:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801b2fa:	68bb      	ldr	r3, [r7, #8]
 801b2fc:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801b2fe:	4618      	mov	r0, r3
 801b300:	eef0 0a67 	vmov.f32	s1, s15
 801b304:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b308:	f000 fbb3 	bl	801ba72 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 801b30c:	4603      	mov	r3, r0
 801b30e:	461a      	mov	r2, r3
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 801b314:	68bb      	ldr	r3, [r7, #8]
 801b316:	691b      	ldr	r3, [r3, #16]
 801b318:	b25a      	sxtb	r2, r3
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	705a      	strb	r2, [r3, #1]
 801b31e:	e018      	b.n	801b352 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 801b320:	68bb      	ldr	r3, [r7, #8]
 801b322:	781b      	ldrb	r3, [r3, #0]
 801b324:	2b03      	cmp	r3, #3
 801b326:	d114      	bne.n	801b352 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801b328:	68bb      	ldr	r3, [r7, #8]
 801b32a:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 801b32e:	68bb      	ldr	r3, [r7, #8]
 801b330:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801b332:	4618      	mov	r0, r3
 801b334:	eef0 0a67 	vmov.f32	s1, s15
 801b338:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b33c:	f000 fbe8 	bl	801bb10 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 801b340:	4603      	mov	r3, r0
 801b342:	461a      	mov	r2, r3
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 801b348:	68bb      	ldr	r3, [r7, #8]
 801b34a:	691b      	ldr	r3, [r3, #16]
 801b34c:	b2da      	uxtb	r2, r3
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801b352:	2300      	movs	r3, #0
}
 801b354:	4618      	mov	r0, r3
 801b356:	3714      	adds	r7, #20
 801b358:	46bd      	mov	sp, r7
 801b35a:	bd90      	pop	{r4, r7, pc}
 801b35c:	08026974 	.word	0x08026974
 801b360:	080268d0 	.word	0x080268d0
 801b364:	0802695c 	.word	0x0802695c

0801b368 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 801b368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b36a:	b0ad      	sub	sp, #180	; 0xb4
 801b36c:	af02      	add	r7, sp, #8
 801b36e:	6078      	str	r0, [r7, #4]
 801b370:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	691b      	ldr	r3, [r3, #16]
 801b376:	2b00      	cmp	r3, #0
 801b378:	d101      	bne.n	801b37e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801b37a:	f007 fa2b 	bl	80227d4 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 801b37e:	683b      	ldr	r3, [r7, #0]
 801b380:	691b      	ldr	r3, [r3, #16]
 801b382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801b386:	2200      	movs	r2, #0
 801b388:	6839      	ldr	r1, [r7, #0]
 801b38a:	6878      	ldr	r0, [r7, #4]
 801b38c:	f7ff fd9c 	bl	801aec8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801b390:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801b394:	2200      	movs	r2, #0
 801b396:	6839      	ldr	r1, [r7, #0]
 801b398:	6878      	ldr	r0, [r7, #4]
 801b39a:	f7ff fda5 	bl	801aee8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801b39e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801b3a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b3a6:	7a1b      	ldrb	r3, [r3, #8]
 801b3a8:	2b09      	cmp	r3, #9
 801b3aa:	d032      	beq.n	801b412 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801b3ac:	2b09      	cmp	r3, #9
 801b3ae:	f300 809c 	bgt.w	801b4ea <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 801b3b2:	2b01      	cmp	r3, #1
 801b3b4:	d002      	beq.n	801b3bc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801b3b6:	2b03      	cmp	r3, #3
 801b3b8:	d062      	beq.n	801b480 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801b3ba:	e096      	b.n	801b4ea <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b3bc:	f107 030c 	add.w	r3, r7, #12
 801b3c0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f001 fcf3 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801b3ca:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b3ce:	f000 fa59 	bl	801b884 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801b3d2:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 801b3d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b3d8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f001 fce7 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b3e2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b3e6:	f000 fa5c 	bl	801b8a2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801b3ea:	4603      	mov	r3, r0
 801b3ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b3f0:	f107 000c 	add.w	r0, r7, #12
 801b3f4:	4621      	mov	r1, r4
 801b3f6:	f7ff fdcb 	bl	801af90 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801b3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b3fe:	4618      	mov	r0, r3
 801b400:	f7ff fb6b 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b404:	f107 030c 	add.w	r3, r7, #12
 801b408:	4618      	mov	r0, r3
 801b40a:	f7ff fb66 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801b40e:	2300      	movs	r3, #0
 801b410:	e079      	b.n	801b506 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b416:	f993 4001 	ldrsb.w	r4, [r3, #1]
 801b41a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b41e:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801b422:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b426:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b42a:	4618      	mov	r0, r3
 801b42c:	f001 fcc0 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b430:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b434:	f000 fa46 	bl	801b8c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801b438:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 801b43a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b43e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b442:	4618      	mov	r0, r3
 801b444:	f001 fcb4 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b448:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b44c:	f000 fa49 	bl	801b8e2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801b450:	4603      	mov	r3, r0
 801b452:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801b456:	9301      	str	r3, [sp, #4]
 801b458:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b45c:	9300      	str	r3, [sp, #0]
 801b45e:	4633      	mov	r3, r6
 801b460:	4629      	mov	r1, r5
 801b462:	4620      	mov	r0, r4
 801b464:	f000 fba3 	bl	801bbae <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 801b468:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b46c:	4618      	mov	r0, r3
 801b46e:	f7ff fb34 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 801b472:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b476:	4618      	mov	r0, r3
 801b478:	f7ff fb2f 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801b47c:	2300      	movs	r3, #0
 801b47e:	e042      	b.n	801b506 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b480:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b484:	78dc      	ldrb	r4, [r3, #3]
 801b486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b48a:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 801b48c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b490:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b494:	4618      	mov	r0, r3
 801b496:	f001 fc8b 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b49a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b49e:	f000 fa7d 	bl	801b99c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801b4a2:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 801b4a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b4a8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	f001 fc7f 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b4b2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b4b6:	f000 fa80 	bl	801b9ba <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801b4c0:	9301      	str	r3, [sp, #4]
 801b4c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b4c6:	9300      	str	r3, [sp, #0]
 801b4c8:	4633      	mov	r3, r6
 801b4ca:	4629      	mov	r1, r5
 801b4cc:	4620      	mov	r0, r4
 801b4ce:	f000 fbad 	bl	801bc2c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801b4d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	f7ff faff 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801b4dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f7ff fafa 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	e00d      	b.n	801b506 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	695c      	ldr	r4, [r3, #20]
 801b4ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b4f2:	7a1b      	ldrb	r3, [r3, #8]
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	f7fe fd95 	bl	801a024 <TfLiteTypeGetName>
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	461a      	mov	r2, r3
 801b4fe:	4904      	ldr	r1, [pc, #16]	; (801b510 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 801b500:	6878      	ldr	r0, [r7, #4]
 801b502:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801b504:	2301      	movs	r3, #1
    }
  }
}
 801b506:	4618      	mov	r0, r3
 801b508:	37ac      	adds	r7, #172	; 0xac
 801b50a:	46bd      	mov	sp, r7
 801b50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b50e:	bf00      	nop
 801b510:	0802699c 	.word	0x0802699c

0801b514 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 801b514:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b516:	b089      	sub	sp, #36	; 0x24
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
 801b51c:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 801b51e:	6839      	ldr	r1, [r7, #0]
 801b520:	2900      	cmp	r1, #0
 801b522:	da06      	bge.n	801b532 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 801b524:	4b31      	ldr	r3, [pc, #196]	; (801b5ec <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801b526:	4a32      	ldr	r2, [pc, #200]	; (801b5f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801b528:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801b52c:	4831      	ldr	r0, [pc, #196]	; (801b5f4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801b52e:	f007 f959 	bl	80227e4 <__assert_func>
  assert(exponent <= 31);
 801b532:	6839      	ldr	r1, [r7, #0]
 801b534:	291f      	cmp	r1, #31
 801b536:	dd06      	ble.n	801b546 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 801b538:	4b2f      	ldr	r3, [pc, #188]	; (801b5f8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801b53a:	4a2d      	ldr	r2, [pc, #180]	; (801b5f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801b53c:	f240 1167 	movw	r1, #359	; 0x167
 801b540:	482c      	ldr	r0, [pc, #176]	; (801b5f4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801b542:	f007 f94f 	bl	80227e4 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801b546:	f04f 0001 	mov.w	r0, #1
 801b54a:	f04f 0100 	mov.w	r1, #0
 801b54e:	683c      	ldr	r4, [r7, #0]
 801b550:	f1a4 0620 	sub.w	r6, r4, #32
 801b554:	f1c4 0520 	rsb	r5, r4, #32
 801b558:	fa01 f304 	lsl.w	r3, r1, r4
 801b55c:	fa00 f606 	lsl.w	r6, r0, r6
 801b560:	4333      	orrs	r3, r6
 801b562:	fa20 f505 	lsr.w	r5, r0, r5
 801b566:	432b      	orrs	r3, r5
 801b568:	fa00 f204 	lsl.w	r2, r0, r4
 801b56c:	4613      	mov	r3, r2
 801b56e:	3b01      	subs	r3, #1
 801b570:	4618      	mov	r0, r3
 801b572:	f000 fb93 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b576:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 801b578:	2000      	movs	r0, #0
 801b57a:	f000 fb8f 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b57e:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 801b580:	2001      	movs	r0, #1
 801b582:	f000 fb8b 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b586:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 801b588:	69f9      	ldr	r1, [r7, #28]
 801b58a:	6878      	ldr	r0, [r7, #4]
 801b58c:	f000 fb91 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b590:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 801b592:	2101      	movs	r1, #1
 801b594:	69f8      	ldr	r0, [r7, #28]
 801b596:	f000 fb9a 	bl	801bcce <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801b59a:	4604      	mov	r4, r0
 801b59c:	69b9      	ldr	r1, [r7, #24]
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f000 fba4 	bl	801bcec <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	6979      	ldr	r1, [r7, #20]
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f000 fb82 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	4619      	mov	r1, r3
 801b5b2:	4620      	mov	r0, r4
 801b5b4:	f000 fbae 	bl	801bd14 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801b5b8:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801b5ba:	6839      	ldr	r1, [r7, #0]
 801b5bc:	6878      	ldr	r0, [r7, #4]
 801b5be:	f000 fb86 	bl	801bcce <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801b5c2:	4604      	mov	r4, r0
 801b5c4:	68f9      	ldr	r1, [r7, #12]
 801b5c6:	6938      	ldr	r0, [r7, #16]
 801b5c8:	f000 fbb2 	bl	801bd30 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	6979      	ldr	r1, [r7, #20]
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f000 fb6e 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b5d6:	4603      	mov	r3, r0
 801b5d8:	4619      	mov	r1, r3
 801b5da:	4620      	mov	r0, r4
 801b5dc:	f000 fb9a 	bl	801bd14 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801b5e0:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	3724      	adds	r7, #36	; 0x24
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5ea:	bf00      	nop
 801b5ec:	08026a08 	.word	0x08026a08
 801b5f0:	08026a18 	.word	0x08026a18
 801b5f4:	08026a74 	.word	0x08026a74
 801b5f8:	08026afc 	.word	0x08026afc

0801b5fc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801b5fc:	b590      	push	{r4, r7, lr}
 801b5fe:	b099      	sub	sp, #100	; 0x64
 801b600:	af00      	add	r7, sp, #0
 801b602:	60f8      	str	r0, [r7, #12]
 801b604:	60b9      	str	r1, [r7, #8]
 801b606:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801b608:	f04f 0300 	mov.w	r3, #0
 801b60c:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801b60e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801b612:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801b614:	68fb      	ldr	r3, [r7, #12]
 801b616:	ed93 7a03 	vldr	s14, [r3, #12]
 801b61a:	68bb      	ldr	r3, [r7, #8]
 801b61c:	edd3 7a03 	vldr	s15, [r3, #12]
 801b620:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801b624:	ee16 0a90 	vmov	r0, s13
 801b628:	f7e4 ff98 	bl	800055c <__aeabi_f2d>
 801b62c:	4602      	mov	r2, r0
 801b62e:	460b      	mov	r3, r1
 801b630:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801b634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b638:	68f9      	ldr	r1, [r7, #12]
 801b63a:	4618      	mov	r0, r3
 801b63c:	f7ff fac7 	bl	801abce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801b640:	f107 0310 	add.w	r3, r7, #16
 801b644:	68b9      	ldr	r1, [r7, #8]
 801b646:	4618      	mov	r0, r3
 801b648:	f7ff fac1 	bl	801abce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	f103 0214 	add.w	r2, r3, #20
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	3318      	adds	r3, #24
 801b656:	4619      	mov	r1, r3
 801b658:	4610      	mov	r0, r2
 801b65a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801b65e:	f7fe fd67 	bl	801a130 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801b662:	f7fe ff1d 	bl	801a4a0 <_ZNSt14numeric_limitsIaE3minEv>
 801b666:	4603      	mov	r3, r0
 801b668:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801b66a:	68bb      	ldr	r3, [r7, #8]
 801b66c:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	edd3 7a03 	vldr	s15, [r3, #12]
 801b674:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801b678:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b67c:	eeb0 0a66 	vmov.f32	s0, s13
 801b680:	f004 fd74 	bl	802016c <roundf>
 801b684:	eef0 7a40 	vmov.f32	s15, s0
 801b688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b68c:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801b690:	4423      	add	r3, r4
 801b692:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b694:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801b698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b69c:	4611      	mov	r1, r2
 801b69e:	4618      	mov	r0, r3
 801b6a0:	f7ff f9e6 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801b6a4:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801b6a6:	681a      	ldr	r2, [r3, #0]
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801b6ac:	f7ff fab6 	bl	801ac1c <_ZNSt14numeric_limitsIfE8infinityEv>
 801b6b0:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b6b4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b6b8:	eef4 7a47 	vcmp.f32	s15, s14
 801b6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c0:	d103      	bne.n	801b6ca <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801b6c2:	f7fe fef6 	bl	801a4b2 <_ZNSt14numeric_limitsIaE3maxEv>
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	e022      	b.n	801b710 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801b6ca:	f7fe fef2 	bl	801a4b2 <_ZNSt14numeric_limitsIaE3maxEv>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801b6d2:	68bb      	ldr	r3, [r7, #8]
 801b6d4:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801b6d6:	68bb      	ldr	r3, [r7, #8]
 801b6d8:	edd3 7a03 	vldr	s15, [r3, #12]
 801b6dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801b6e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b6e4:	eeb0 0a66 	vmov.f32	s0, s13
 801b6e8:	f004 fd40 	bl	802016c <roundf>
 801b6ec:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801b6f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b6f4:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801b6f8:	4423      	add	r3, r4
 801b6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801b6fc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b700:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b704:	4611      	mov	r1, r2
 801b706:	4618      	mov	r0, r3
 801b708:	f7ff f99e 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801b70c:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b70e:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801b710:	687a      	ldr	r2, [r7, #4]
 801b712:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	691a      	ldr	r2, [r3, #16]
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	691a      	ldr	r2, [r3, #16]
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801b724:	f107 0310 	add.w	r3, r7, #16
 801b728:	4618      	mov	r0, r3
 801b72a:	f7ff f9d6 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801b72e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b732:	4618      	mov	r0, r3
 801b734:	f7ff f9d1 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b738:	bf00      	nop
 801b73a:	3764      	adds	r7, #100	; 0x64
 801b73c:	46bd      	mov	sp, r7
 801b73e:	bd90      	pop	{r4, r7, pc}

0801b740 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801b740:	b590      	push	{r4, r7, lr}
 801b742:	b099      	sub	sp, #100	; 0x64
 801b744:	af00      	add	r7, sp, #0
 801b746:	60f8      	str	r0, [r7, #12]
 801b748:	60b9      	str	r1, [r7, #8]
 801b74a:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801b74c:	f04f 0300 	mov.w	r3, #0
 801b750:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801b752:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801b756:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	ed93 7a03 	vldr	s14, [r3, #12]
 801b75e:	68bb      	ldr	r3, [r7, #8]
 801b760:	edd3 7a03 	vldr	s15, [r3, #12]
 801b764:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801b768:	ee16 0a90 	vmov	r0, s13
 801b76c:	f7e4 fef6 	bl	800055c <__aeabi_f2d>
 801b770:	4602      	mov	r2, r0
 801b772:	460b      	mov	r3, r1
 801b774:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801b778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b77c:	68f9      	ldr	r1, [r7, #12]
 801b77e:	4618      	mov	r0, r3
 801b780:	f7ff fa25 	bl	801abce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801b784:	f107 0310 	add.w	r3, r7, #16
 801b788:	68b9      	ldr	r1, [r7, #8]
 801b78a:	4618      	mov	r0, r3
 801b78c:	f7ff fa1f 	bl	801abce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	f103 0214 	add.w	r2, r3, #20
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	3318      	adds	r3, #24
 801b79a:	4619      	mov	r1, r3
 801b79c:	4610      	mov	r0, r2
 801b79e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801b7a2:	f7fe fcc5 	bl	801a130 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801b7a6:	f7fe fe8c 	bl	801a4c2 <_ZNSt14numeric_limitsIhE3minEv>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801b7ae:	68bb      	ldr	r3, [r7, #8]
 801b7b0:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b7b2:	68bb      	ldr	r3, [r7, #8]
 801b7b4:	edd3 7a03 	vldr	s15, [r3, #12]
 801b7b8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801b7bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b7c0:	eeb0 0a66 	vmov.f32	s0, s13
 801b7c4:	f004 fcd2 	bl	802016c <roundf>
 801b7c8:	eef0 7a40 	vmov.f32	s15, s0
 801b7cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7d0:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801b7d4:	4423      	add	r3, r4
 801b7d6:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b7d8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801b7dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b7e0:	4611      	mov	r1, r2
 801b7e2:	4618      	mov	r0, r3
 801b7e4:	f7ff f944 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801b7e8:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801b7ea:	681a      	ldr	r2, [r3, #0]
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801b7f0:	f7ff fa14 	bl	801ac1c <_ZNSt14numeric_limitsIfE8infinityEv>
 801b7f4:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b7f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b7fc:	eef4 7a47 	vcmp.f32	s15, s14
 801b800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b804:	d103      	bne.n	801b80e <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801b806:	f7fe fe64 	bl	801a4d2 <_ZNSt14numeric_limitsIhE3maxEv>
 801b80a:	4603      	mov	r3, r0
 801b80c:	e022      	b.n	801b854 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801b80e:	f7fe fe60 	bl	801a4d2 <_ZNSt14numeric_limitsIhE3maxEv>
 801b812:	4603      	mov	r3, r0
 801b814:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801b816:	68bb      	ldr	r3, [r7, #8]
 801b818:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801b81a:	68bb      	ldr	r3, [r7, #8]
 801b81c:	edd3 7a03 	vldr	s15, [r3, #12]
 801b820:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801b824:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b828:	eeb0 0a66 	vmov.f32	s0, s13
 801b82c:	f004 fc9e 	bl	802016c <roundf>
 801b830:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801b834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b838:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801b83c:	4423      	add	r3, r4
 801b83e:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801b840:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b844:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b848:	4611      	mov	r1, r2
 801b84a:	4618      	mov	r0, r3
 801b84c:	f7ff f8fc 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801b850:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b852:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801b854:	687a      	ldr	r2, [r7, #4]
 801b856:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	691a      	ldr	r2, [r3, #16]
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801b860:	68bb      	ldr	r3, [r7, #8]
 801b862:	691a      	ldr	r2, [r3, #16]
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801b868:	f107 0310 	add.w	r3, r7, #16
 801b86c:	4618      	mov	r0, r3
 801b86e:	f7ff f934 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801b872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b876:	4618      	mov	r0, r3
 801b878:	f7ff f92f 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b87c:	bf00      	nop
 801b87e:	3764      	adds	r7, #100	; 0x64
 801b880:	46bd      	mov	sp, r7
 801b882:	bd90      	pop	{r4, r7, pc}

0801b884 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801b884:	b580      	push	{r7, lr}
 801b886:	b082      	sub	sp, #8
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d101      	bne.n	801b896 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801b892:	f006 ff9f 	bl	80227d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	681b      	ldr	r3, [r3, #0]
}
 801b89a:	4618      	mov	r0, r3
 801b89c:	3708      	adds	r7, #8
 801b89e:	46bd      	mov	sp, r7
 801b8a0:	bd80      	pop	{r7, pc}

0801b8a2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801b8a2:	b480      	push	{r7}
 801b8a4:	b083      	sub	sp, #12
 801b8a6:	af00      	add	r7, sp, #0
 801b8a8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d002      	beq.n	801b8b6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	e000      	b.n	801b8b8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801b8b6:	2300      	movs	r3, #0
}
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	370c      	adds	r7, #12
 801b8bc:	46bd      	mov	sp, r7
 801b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8c2:	4770      	bx	lr

0801b8c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b082      	sub	sp, #8
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d101      	bne.n	801b8d6 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801b8d2:	f006 ff7f 	bl	80227d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	681b      	ldr	r3, [r3, #0]
}
 801b8da:	4618      	mov	r0, r3
 801b8dc:	3708      	adds	r7, #8
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd80      	pop	{r7, pc}

0801b8e2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801b8e2:	b480      	push	{r7}
 801b8e4:	b083      	sub	sp, #12
 801b8e6:	af00      	add	r7, sp, #0
 801b8e8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d002      	beq.n	801b8f6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	e000      	b.n	801b8f8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801b8f6:	2300      	movs	r3, #0
}
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	370c      	adds	r7, #12
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b902:	4770      	bx	lr

0801b904 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801b904:	b590      	push	{r4, r7, lr}
 801b906:	b089      	sub	sp, #36	; 0x24
 801b908:	af00      	add	r7, sp, #0
 801b90a:	60f8      	str	r0, [r7, #12]
 801b90c:	60b9      	str	r1, [r7, #8]
 801b90e:	607a      	str	r2, [r7, #4]
 801b910:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801b912:	6879      	ldr	r1, [r7, #4]
 801b914:	68b8      	ldr	r0, [r7, #8]
 801b916:	f7ff fa5e 	bl	801add6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801b91a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801b91c:	2300      	movs	r3, #0
 801b91e:	61fb      	str	r3, [r7, #28]
 801b920:	69fa      	ldr	r2, [r7, #28]
 801b922:	69bb      	ldr	r3, [r7, #24]
 801b924:	429a      	cmp	r2, r3
 801b926:	da35      	bge.n	801b994 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801b928:	69fb      	ldr	r3, [r7, #28]
 801b92a:	683a      	ldr	r2, [r7, #0]
 801b92c:	4413      	add	r3, r2
 801b92e:	f993 3000 	ldrsb.w	r3, [r3]
 801b932:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	68db      	ldr	r3, [r3, #12]
 801b93c:	697a      	ldr	r2, [r7, #20]
 801b93e:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801b948:	461a      	mov	r2, r3
 801b94a:	f7ff fa79 	bl	801ae40 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801b94e:	4603      	mov	r3, r0
        data.params.output_offset +
 801b950:	4423      	add	r3, r4
    int32_t clamped =
 801b952:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	3304      	adds	r3, #4
 801b958:	f107 0210 	add.w	r2, r7, #16
 801b95c:	4611      	mov	r1, r2
 801b95e:	4618      	mov	r0, r3
 801b960:	f7ff f886 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801b964:	4603      	mov	r3, r0
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801b96a:	68fb      	ldr	r3, [r7, #12]
 801b96c:	3308      	adds	r3, #8
 801b96e:	f107 0210 	add.w	r2, r7, #16
 801b972:	4611      	mov	r1, r2
 801b974:	4618      	mov	r0, r3
 801b976:	f7ff f867 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801b97a:	4603      	mov	r3, r0
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801b980:	6939      	ldr	r1, [r7, #16]
 801b982:	69fb      	ldr	r3, [r7, #28]
 801b984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b986:	4413      	add	r3, r2
 801b988:	b24a      	sxtb	r2, r1
 801b98a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801b98c:	69fb      	ldr	r3, [r7, #28]
 801b98e:	3301      	adds	r3, #1
 801b990:	61fb      	str	r3, [r7, #28]
 801b992:	e7c5      	b.n	801b920 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801b994:	bf00      	nop
 801b996:	3724      	adds	r7, #36	; 0x24
 801b998:	46bd      	mov	sp, r7
 801b99a:	bd90      	pop	{r4, r7, pc}

0801b99c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801b99c:	b580      	push	{r7, lr}
 801b99e:	b082      	sub	sp, #8
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d101      	bne.n	801b9ae <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801b9aa:	f006 ff13 	bl	80227d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	681b      	ldr	r3, [r3, #0]
}
 801b9b2:	4618      	mov	r0, r3
 801b9b4:	3708      	adds	r7, #8
 801b9b6:	46bd      	mov	sp, r7
 801b9b8:	bd80      	pop	{r7, pc}

0801b9ba <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801b9ba:	b480      	push	{r7}
 801b9bc:	b083      	sub	sp, #12
 801b9be:	af00      	add	r7, sp, #0
 801b9c0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d002      	beq.n	801b9ce <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	e000      	b.n	801b9d0 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 801b9ce:	2300      	movs	r3, #0
}
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	370c      	adds	r7, #12
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9da:	4770      	bx	lr

0801b9dc <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801b9dc:	b590      	push	{r4, r7, lr}
 801b9de:	b089      	sub	sp, #36	; 0x24
 801b9e0:	af00      	add	r7, sp, #0
 801b9e2:	60f8      	str	r0, [r7, #12]
 801b9e4:	60b9      	str	r1, [r7, #8]
 801b9e6:	607a      	str	r2, [r7, #4]
 801b9e8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801b9ea:	6879      	ldr	r1, [r7, #4]
 801b9ec:	68b8      	ldr	r0, [r7, #8]
 801b9ee:	f7ff f9f2 	bl	801add6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801b9f2:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801b9f4:	2300      	movs	r3, #0
 801b9f6:	61fb      	str	r3, [r7, #28]
 801b9f8:	69fa      	ldr	r2, [r7, #28]
 801b9fa:	69bb      	ldr	r3, [r7, #24]
 801b9fc:	429a      	cmp	r2, r3
 801b9fe:	da34      	bge.n	801ba6a <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801ba00:	69fb      	ldr	r3, [r7, #28]
 801ba02:	683a      	ldr	r2, [r7, #0]
 801ba04:	4413      	add	r3, r2
 801ba06:	781b      	ldrb	r3, [r3, #0]
 801ba08:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	68db      	ldr	r3, [r3, #12]
 801ba12:	697a      	ldr	r2, [r7, #20]
 801ba14:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801ba1e:	461a      	mov	r2, r3
 801ba20:	f7ff fa0e 	bl	801ae40 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801ba24:	4603      	mov	r3, r0
        data.params.output_offset +
 801ba26:	4423      	add	r3, r4
    int32_t clamped =
 801ba28:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	3304      	adds	r3, #4
 801ba2e:	f107 0210 	add.w	r2, r7, #16
 801ba32:	4611      	mov	r1, r2
 801ba34:	4618      	mov	r0, r3
 801ba36:	f7ff f81b 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801ba3a:	4603      	mov	r3, r0
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	3308      	adds	r3, #8
 801ba44:	f107 0210 	add.w	r2, r7, #16
 801ba48:	4611      	mov	r1, r2
 801ba4a:	4618      	mov	r0, r3
 801ba4c:	f7fe fffc 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801ba50:	4603      	mov	r3, r0
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801ba56:	6939      	ldr	r1, [r7, #16]
 801ba58:	69fb      	ldr	r3, [r7, #28]
 801ba5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ba5c:	4413      	add	r3, r2
 801ba5e:	b2ca      	uxtb	r2, r1
 801ba60:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801ba62:	69fb      	ldr	r3, [r7, #28]
 801ba64:	3301      	adds	r3, #1
 801ba66:	61fb      	str	r3, [r7, #28]
 801ba68:	e7c6      	b.n	801b9f8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801ba6a:	bf00      	nop
 801ba6c:	3724      	adds	r7, #36	; 0x24
 801ba6e:	46bd      	mov	sp, r7
 801ba70:	bd90      	pop	{r4, r7, pc}

0801ba72 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801ba72:	b5b0      	push	{r4, r5, r7, lr}
 801ba74:	b088      	sub	sp, #32
 801ba76:	af00      	add	r7, sp, #0
 801ba78:	ed87 0a03 	vstr	s0, [r7, #12]
 801ba7c:	edc7 0a02 	vstr	s1, [r7, #8]
 801ba80:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801ba82:	ed97 7a03 	vldr	s14, [r7, #12]
 801ba86:	edd7 7a02 	vldr	s15, [r7, #8]
 801ba8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ba8e:	ee16 0a90 	vmov	r0, s13
 801ba92:	f7e4 fd63 	bl	800055c <__aeabi_f2d>
 801ba96:	4602      	mov	r2, r0
 801ba98:	460b      	mov	r3, r1
 801ba9a:	ec43 2b10 	vmov	d0, r2, r3
 801ba9e:	f004 fa6b 	bl	801ff78 <round>
 801baa2:	ec55 4b10 	vmov	r4, r5, d0
 801baa6:	6878      	ldr	r0, [r7, #4]
 801baa8:	f7e4 fd46 	bl	8000538 <__aeabi_i2d>
 801baac:	4602      	mov	r2, r0
 801baae:	460b      	mov	r3, r1
 801bab0:	4620      	mov	r0, r4
 801bab2:	4629      	mov	r1, r5
 801bab4:	f7e4 fbf4 	bl	80002a0 <__adddf3>
 801bab8:	4602      	mov	r2, r0
 801baba:	460b      	mov	r3, r1
 801babc:	4610      	mov	r0, r2
 801babe:	4619      	mov	r1, r3
 801bac0:	f7e5 f854 	bl	8000b6c <__aeabi_d2iz>
 801bac4:	4603      	mov	r3, r0
 801bac6:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801bac8:	f7fe fcea 	bl	801a4a0 <_ZNSt14numeric_limitsIaE3minEv>
 801bacc:	4603      	mov	r3, r0
 801bace:	61bb      	str	r3, [r7, #24]
 801bad0:	f107 0214 	add.w	r2, r7, #20
 801bad4:	f107 0318 	add.w	r3, r7, #24
 801bad8:	4611      	mov	r1, r2
 801bada:	4618      	mov	r0, r3
 801badc:	f7fe ffc8 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801bae0:	4603      	mov	r3, r0
  result =
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801bae6:	f7fe fce4 	bl	801a4b2 <_ZNSt14numeric_limitsIaE3maxEv>
 801baea:	4603      	mov	r3, r0
 801baec:	61fb      	str	r3, [r7, #28]
 801baee:	f107 0214 	add.w	r2, r7, #20
 801baf2:	f107 031c 	add.w	r3, r7, #28
 801baf6:	4611      	mov	r1, r2
 801baf8:	4618      	mov	r0, r3
 801bafa:	f7fe ffa5 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801bafe:	4603      	mov	r3, r0
  result =
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	617b      	str	r3, [r7, #20]
  return result;
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	b25b      	sxtb	r3, r3
}
 801bb08:	4618      	mov	r0, r3
 801bb0a:	3720      	adds	r7, #32
 801bb0c:	46bd      	mov	sp, r7
 801bb0e:	bdb0      	pop	{r4, r5, r7, pc}

0801bb10 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801bb10:	b5b0      	push	{r4, r5, r7, lr}
 801bb12:	b088      	sub	sp, #32
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	ed87 0a03 	vstr	s0, [r7, #12]
 801bb1a:	edc7 0a02 	vstr	s1, [r7, #8]
 801bb1e:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801bb20:	ed97 7a03 	vldr	s14, [r7, #12]
 801bb24:	edd7 7a02 	vldr	s15, [r7, #8]
 801bb28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bb2c:	ee16 0a90 	vmov	r0, s13
 801bb30:	f7e4 fd14 	bl	800055c <__aeabi_f2d>
 801bb34:	4602      	mov	r2, r0
 801bb36:	460b      	mov	r3, r1
 801bb38:	ec43 2b10 	vmov	d0, r2, r3
 801bb3c:	f004 fa1c 	bl	801ff78 <round>
 801bb40:	ec55 4b10 	vmov	r4, r5, d0
 801bb44:	6878      	ldr	r0, [r7, #4]
 801bb46:	f7e4 fcf7 	bl	8000538 <__aeabi_i2d>
 801bb4a:	4602      	mov	r2, r0
 801bb4c:	460b      	mov	r3, r1
 801bb4e:	4620      	mov	r0, r4
 801bb50:	4629      	mov	r1, r5
 801bb52:	f7e4 fba5 	bl	80002a0 <__adddf3>
 801bb56:	4602      	mov	r2, r0
 801bb58:	460b      	mov	r3, r1
 801bb5a:	4610      	mov	r0, r2
 801bb5c:	4619      	mov	r1, r3
 801bb5e:	f7e5 f805 	bl	8000b6c <__aeabi_d2iz>
 801bb62:	4603      	mov	r3, r0
 801bb64:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801bb66:	f7fe fcac 	bl	801a4c2 <_ZNSt14numeric_limitsIhE3minEv>
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	61bb      	str	r3, [r7, #24]
 801bb6e:	f107 0214 	add.w	r2, r7, #20
 801bb72:	f107 0318 	add.w	r3, r7, #24
 801bb76:	4611      	mov	r1, r2
 801bb78:	4618      	mov	r0, r3
 801bb7a:	f7fe ff79 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801bb7e:	4603      	mov	r3, r0
  result =
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801bb84:	f7fe fca5 	bl	801a4d2 <_ZNSt14numeric_limitsIhE3maxEv>
 801bb88:	4603      	mov	r3, r0
 801bb8a:	61fb      	str	r3, [r7, #28]
 801bb8c:	f107 0214 	add.w	r2, r7, #20
 801bb90:	f107 031c 	add.w	r3, r7, #28
 801bb94:	4611      	mov	r1, r2
 801bb96:	4618      	mov	r0, r3
 801bb98:	f7fe ff56 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801bb9c:	4603      	mov	r3, r0
  result =
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	617b      	str	r3, [r7, #20]
  return result;
 801bba2:	697b      	ldr	r3, [r7, #20]
 801bba4:	b2db      	uxtb	r3, r3
}
 801bba6:	4618      	mov	r0, r3
 801bba8:	3720      	adds	r7, #32
 801bbaa:	46bd      	mov	sp, r7
 801bbac:	bdb0      	pop	{r4, r5, r7, pc}

0801bbae <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801bbae:	b580      	push	{r7, lr}
 801bbb0:	b088      	sub	sp, #32
 801bbb2:	af00      	add	r7, sp, #0
 801bbb4:	60ba      	str	r2, [r7, #8]
 801bbb6:	607b      	str	r3, [r7, #4]
 801bbb8:	4603      	mov	r3, r0
 801bbba:	73fb      	strb	r3, [r7, #15]
 801bbbc:	460b      	mov	r3, r1
 801bbbe:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bbc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bbc2:	68b8      	ldr	r0, [r7, #8]
 801bbc4:	f7ff f907 	bl	801add6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bbc8:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801bbca:	2300      	movs	r3, #0
 801bbcc:	61fb      	str	r3, [r7, #28]
 801bbce:	69fa      	ldr	r2, [r7, #28]
 801bbd0:	69bb      	ldr	r3, [r7, #24]
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	da26      	bge.n	801bc24 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801bbd6:	69fb      	ldr	r3, [r7, #28]
 801bbd8:	687a      	ldr	r2, [r7, #4]
 801bbda:	4413      	add	r3, r2
 801bbdc:	781b      	ldrb	r3, [r3, #0]
 801bbde:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801bbe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bbe4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801bbe8:	429a      	cmp	r2, r3
 801bbea:	dd04      	ble.n	801bbf6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 801bbec:	f107 030e 	add.w	r3, r7, #14
 801bbf0:	f993 3000 	ldrsb.w	r3, [r3]
 801bbf4:	e00c      	b.n	801bc10 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801bbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bbfa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801bbfe:	429a      	cmp	r2, r3
 801bc00:	da04      	bge.n	801bc0c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 801bc02:	f107 030f 	add.w	r3, r7, #15
 801bc06:	f993 3000 	ldrsb.w	r3, [r3]
 801bc0a:	e001      	b.n	801bc10 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801bc0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bc10:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801bc12:	69fb      	ldr	r3, [r7, #28]
 801bc14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bc16:	4413      	add	r3, r2
 801bc18:	7dba      	ldrb	r2, [r7, #22]
 801bc1a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bc1c:	69fb      	ldr	r3, [r7, #28]
 801bc1e:	3301      	adds	r3, #1
 801bc20:	61fb      	str	r3, [r7, #28]
 801bc22:	e7d4      	b.n	801bbce <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801bc24:	bf00      	nop
 801bc26:	3720      	adds	r7, #32
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	bd80      	pop	{r7, pc}

0801bc2c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801bc2c:	b580      	push	{r7, lr}
 801bc2e:	b088      	sub	sp, #32
 801bc30:	af00      	add	r7, sp, #0
 801bc32:	60ba      	str	r2, [r7, #8]
 801bc34:	607b      	str	r3, [r7, #4]
 801bc36:	4603      	mov	r3, r0
 801bc38:	73fb      	strb	r3, [r7, #15]
 801bc3a:	460b      	mov	r3, r1
 801bc3c:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bc3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bc40:	68b8      	ldr	r0, [r7, #8]
 801bc42:	f7ff f8c8 	bl	801add6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bc46:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801bc48:	2300      	movs	r3, #0
 801bc4a:	61fb      	str	r3, [r7, #28]
 801bc4c:	69fa      	ldr	r2, [r7, #28]
 801bc4e:	69bb      	ldr	r3, [r7, #24]
 801bc50:	429a      	cmp	r2, r3
 801bc52:	da1f      	bge.n	801bc94 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 801bc54:	69fb      	ldr	r3, [r7, #28]
 801bc56:	687a      	ldr	r2, [r7, #4]
 801bc58:	4413      	add	r3, r2
 801bc5a:	781b      	ldrb	r3, [r3, #0]
 801bc5c:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801bc5e:	7bbb      	ldrb	r3, [r7, #14]
 801bc60:	7dfa      	ldrb	r2, [r7, #23]
 801bc62:	429a      	cmp	r2, r3
 801bc64:	d903      	bls.n	801bc6e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 801bc66:	f107 030e 	add.w	r3, r7, #14
 801bc6a:	781b      	ldrb	r3, [r3, #0]
 801bc6c:	e008      	b.n	801bc80 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801bc6e:	7bfb      	ldrb	r3, [r7, #15]
 801bc70:	7dfa      	ldrb	r2, [r7, #23]
 801bc72:	429a      	cmp	r2, r3
 801bc74:	d203      	bcs.n	801bc7e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 801bc76:	f107 030f 	add.w	r3, r7, #15
 801bc7a:	781b      	ldrb	r3, [r3, #0]
 801bc7c:	e000      	b.n	801bc80 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801bc7e:	7dfb      	ldrb	r3, [r7, #23]
 801bc80:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801bc82:	69fb      	ldr	r3, [r7, #28]
 801bc84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bc86:	4413      	add	r3, r2
 801bc88:	7dba      	ldrb	r2, [r7, #22]
 801bc8a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bc8c:	69fb      	ldr	r3, [r7, #28]
 801bc8e:	3301      	adds	r3, #1
 801bc90:	61fb      	str	r3, [r7, #28]
 801bc92:	e7db      	b.n	801bc4c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801bc94:	bf00      	nop
 801bc96:	3720      	adds	r7, #32
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	bd80      	pop	{r7, pc}

0801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 801bc9c:	b480      	push	{r7}
 801bc9e:	b083      	sub	sp, #12
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
  return x;
 801bca4:	687b      	ldr	r3, [r7, #4]
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	370c      	adds	r7, #12
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb0:	4770      	bx	lr

0801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801bcb2:	b480      	push	{r7}
 801bcb4:	b083      	sub	sp, #12
 801bcb6:	af00      	add	r7, sp, #0
 801bcb8:	6078      	str	r0, [r7, #4]
 801bcba:	6039      	str	r1, [r7, #0]
  return a & b;
 801bcbc:	687a      	ldr	r2, [r7, #4]
 801bcbe:	683b      	ldr	r3, [r7, #0]
 801bcc0:	4013      	ands	r3, r2
}
 801bcc2:	4618      	mov	r0, r3
 801bcc4:	370c      	adds	r7, #12
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bccc:	4770      	bx	lr

0801bcce <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 801bcce:	b480      	push	{r7}
 801bcd0:	b083      	sub	sp, #12
 801bcd2:	af00      	add	r7, sp, #0
 801bcd4:	6078      	str	r0, [r7, #4]
 801bcd6:	6039      	str	r1, [r7, #0]
  return a >> offset;
 801bcd8:	687a      	ldr	r2, [r7, #4]
 801bcda:	683b      	ldr	r3, [r7, #0]
 801bcdc:	fa42 f303 	asr.w	r3, r2, r3
}
 801bce0:	4618      	mov	r0, r3
 801bce2:	370c      	adds	r7, #12
 801bce4:	46bd      	mov	sp, r7
 801bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcea:	4770      	bx	lr

0801bcec <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 801bcec:	b580      	push	{r7, lr}
 801bcee:	b082      	sub	sp, #8
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
 801bcf4:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801bcf6:	687a      	ldr	r2, [r7, #4]
 801bcf8:	683b      	ldr	r3, [r7, #0]
 801bcfa:	429a      	cmp	r2, r3
 801bcfc:	bfb4      	ite	lt
 801bcfe:	2301      	movlt	r3, #1
 801bd00:	2300      	movge	r3, #0
 801bd02:	b2db      	uxtb	r3, r3
 801bd04:	4618      	mov	r0, r3
 801bd06:	f000 f827 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801bd0a:	4603      	mov	r3, r0
}
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	3708      	adds	r7, #8
 801bd10:	46bd      	mov	sp, r7
 801bd12:	bd80      	pop	{r7, pc}

0801bd14 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 801bd14:	b480      	push	{r7}
 801bd16:	b083      	sub	sp, #12
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	6078      	str	r0, [r7, #4]
 801bd1c:	6039      	str	r1, [r7, #0]
  return a + b;
 801bd1e:	687a      	ldr	r2, [r7, #4]
 801bd20:	683b      	ldr	r3, [r7, #0]
 801bd22:	4413      	add	r3, r2
}
 801bd24:	4618      	mov	r0, r3
 801bd26:	370c      	adds	r7, #12
 801bd28:	46bd      	mov	sp, r7
 801bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd2e:	4770      	bx	lr

0801bd30 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 801bd30:	b580      	push	{r7, lr}
 801bd32:	b082      	sub	sp, #8
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
 801bd38:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 801bd3a:	687a      	ldr	r2, [r7, #4]
 801bd3c:	683b      	ldr	r3, [r7, #0]
 801bd3e:	429a      	cmp	r2, r3
 801bd40:	bfcc      	ite	gt
 801bd42:	2301      	movgt	r3, #1
 801bd44:	2300      	movle	r3, #0
 801bd46:	b2db      	uxtb	r3, r3
 801bd48:	4618      	mov	r0, r3
 801bd4a:	f000 f805 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801bd4e:	4603      	mov	r3, r0
}
 801bd50:	4618      	mov	r0, r3
 801bd52:	3708      	adds	r7, #8
 801bd54:	46bd      	mov	sp, r7
 801bd56:	bd80      	pop	{r7, pc}

0801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 801bd58:	b580      	push	{r7, lr}
 801bd5a:	b082      	sub	sp, #8
 801bd5c:	af00      	add	r7, sp, #0
 801bd5e:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d004      	beq.n	801bd70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 801bd66:	2000      	movs	r0, #0
 801bd68:	f000 f807 	bl	801bd7a <_ZN8gemmlowp6BitNotIlEET_S1_>
 801bd6c:	4603      	mov	r3, r0
 801bd6e:	e000      	b.n	801bd72 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 801bd70:	2300      	movs	r3, #0
}
 801bd72:	4618      	mov	r0, r3
 801bd74:	3708      	adds	r7, #8
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}

0801bd7a <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 801bd7a:	b480      	push	{r7}
 801bd7c:	b083      	sub	sp, #12
 801bd7e:	af00      	add	r7, sp, #0
 801bd80:	6078      	str	r0, [r7, #4]
  return ~a;
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	43db      	mvns	r3, r3
}
 801bd86:	4618      	mov	r0, r3
 801bd88:	370c      	adds	r7, #12
 801bd8a:	46bd      	mov	sp, r7
 801bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd90:	4770      	bx	lr

0801bd92 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 801bd92:	b480      	push	{r7}
 801bd94:	b083      	sub	sp, #12
 801bd96:	af00      	add	r7, sp, #0
 801bd98:	6078      	str	r0, [r7, #4]
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	4618      	mov	r0, r3
 801bda2:	370c      	adds	r7, #12
 801bda4:	46bd      	mov	sp, r7
 801bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdaa:	4770      	bx	lr

0801bdac <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801bdac:	b480      	push	{r7}
 801bdae:	b083      	sub	sp, #12
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	6078      	str	r0, [r7, #4]
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	4618      	mov	r0, r3
 801bdbc:	370c      	adds	r7, #12
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc4:	4770      	bx	lr

0801bdc6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801bdc6:	b580      	push	{r7, lr}
 801bdc8:	b082      	sub	sp, #8
 801bdca:	af00      	add	r7, sp, #0
 801bdcc:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d101      	bne.n	801bdd8 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 801bdd4:	f006 fcfe 	bl	80227d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	681b      	ldr	r3, [r3, #0]
}
 801bddc:	4618      	mov	r0, r3
 801bdde:	3708      	adds	r7, #8
 801bde0:	46bd      	mov	sp, r7
 801bde2:	bd80      	pop	{r7, pc}

0801bde4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801bde4:	b590      	push	{r4, r7, lr}
 801bde6:	b087      	sub	sp, #28
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	60f8      	str	r0, [r7, #12]
 801bdec:	60b9      	str	r1, [r7, #8]
 801bdee:	607a      	str	r2, [r7, #4]
 801bdf0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801bdf2:	68b9      	ldr	r1, [r7, #8]
 801bdf4:	68f8      	ldr	r0, [r7, #12]
 801bdf6:	f7fe ff93 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bdfa:	4604      	mov	r4, r0
 801bdfc:	6839      	ldr	r1, [r7, #0]
 801bdfe:	6878      	ldr	r0, [r7, #4]
 801be00:	f7fe ff8e 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801be04:	4603      	mov	r3, r0
 801be06:	429c      	cmp	r4, r3
 801be08:	d001      	beq.n	801be0e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 801be0a:	f006 fce3 	bl	80227d4 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 801be0e:	68b9      	ldr	r1, [r7, #8]
 801be10:	68f8      	ldr	r0, [r7, #12]
 801be12:	f7fe ff85 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801be16:	4603      	mov	r3, r0
 801be18:	613b      	str	r3, [r7, #16]
 801be1a:	6839      	ldr	r1, [r7, #0]
 801be1c:	6878      	ldr	r0, [r7, #4]
 801be1e:	f7fe ff7f 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801be22:	4603      	mov	r3, r0
 801be24:	617b      	str	r3, [r7, #20]
 801be26:	f107 0214 	add.w	r2, r7, #20
 801be2a:	f107 0310 	add.w	r3, r7, #16
 801be2e:	4611      	mov	r1, r2
 801be30:	4618      	mov	r0, r3
 801be32:	f7fe fe09 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801be36:	4603      	mov	r3, r0
 801be38:	681b      	ldr	r3, [r3, #0]
}
 801be3a:	4618      	mov	r0, r3
 801be3c:	371c      	adds	r7, #28
 801be3e:	46bd      	mov	sp, r7
 801be40:	bd90      	pop	{r4, r7, pc}

0801be42 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801be42:	b580      	push	{r7, lr}
 801be44:	b082      	sub	sp, #8
 801be46:	af00      	add	r7, sp, #0
 801be48:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d101      	bne.n	801be54 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801be50:	f006 fcc0 	bl	80227d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	681b      	ldr	r3, [r3, #0]
}
 801be58:	4618      	mov	r0, r3
 801be5a:	3708      	adds	r7, #8
 801be5c:	46bd      	mov	sp, r7
 801be5e:	bd80      	pop	{r7, pc}

0801be60 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 801be60:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801be64:	b090      	sub	sp, #64	; 0x40
 801be66:	af00      	add	r7, sp, #0
 801be68:	61f8      	str	r0, [r7, #28]
 801be6a:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 801be6c:	69fb      	ldr	r3, [r7, #28]
 801be6e:	17da      	asrs	r2, r3, #31
 801be70:	613b      	str	r3, [r7, #16]
 801be72:	617a      	str	r2, [r7, #20]
 801be74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801be78:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 801be7c:	69bb      	ldr	r3, [r7, #24]
 801be7e:	17da      	asrs	r2, r3, #31
 801be80:	60bb      	str	r3, [r7, #8]
 801be82:	60fa      	str	r2, [r7, #12]
 801be84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801be88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 801be8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801be90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801be94:	1886      	adds	r6, r0, r2
 801be96:	603e      	str	r6, [r7, #0]
 801be98:	eb41 0303 	adc.w	r3, r1, r3
 801be9c:	607b      	str	r3, [r7, #4]
 801be9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bea2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801bea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801beaa:	2b00      	cmp	r3, #0
 801beac:	db04      	blt.n	801beb8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 801beae:	f04f 0201 	mov.w	r2, #1
 801beb2:	f04f 0300 	mov.w	r3, #0
 801beb6:	e003      	b.n	801bec0 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 801beb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bec0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801bec4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801bec8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801becc:	eb10 0802 	adds.w	r8, r0, r2
 801bed0:	eb41 0903 	adc.w	r9, r1, r3
 801bed4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 801bed8:	2200      	movs	r2, #0
 801beda:	469a      	mov	sl, r3
 801bedc:	4693      	mov	fp, r2
 801bede:	eb1a 0408 	adds.w	r4, sl, r8
 801bee2:	eb4b 0509 	adc.w	r5, fp, r9
 801bee6:	f04f 0200 	mov.w	r2, #0
 801beea:	f04f 0300 	mov.w	r3, #0
 801beee:	0862      	lsrs	r2, r4, #1
 801bef0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801bef4:	106b      	asrs	r3, r5, #1
 801bef6:	4613      	mov	r3, r2
}
 801bef8:	4618      	mov	r0, r3
 801befa:	3740      	adds	r7, #64	; 0x40
 801befc:	46bd      	mov	sp, r7
 801befe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801bf02:	4770      	bx	lr

0801bf04 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b084      	sub	sp, #16
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	60f8      	str	r0, [r7, #12]
 801bf0c:	60b9      	str	r1, [r7, #8]
 801bf0e:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 801bf10:	68fa      	ldr	r2, [r7, #12]
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	fa02 f303 	lsl.w	r3, r2, r3
 801bf18:	68b9      	ldr	r1, [r7, #8]
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	f7fe fe8a 	bl	801ac34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801bf20:	4603      	mov	r3, r0
}
 801bf22:	4618      	mov	r0, r3
 801bf24:	3710      	adds	r7, #16
 801bf26:	46bd      	mov	sp, r7
 801bf28:	bd80      	pop	{r7, pc}

0801bf2a <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 801bf2a:	b580      	push	{r7, lr}
 801bf2c:	b088      	sub	sp, #32
 801bf2e:	af00      	add	r7, sp, #0
 801bf30:	60f8      	str	r0, [r7, #12]
 801bf32:	60b9      	str	r1, [r7, #8]
 801bf34:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f000 f821 	bl	801bf80 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801bf3e:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801bf40:	68ba      	ldr	r2, [r7, #8]
 801bf42:	69fb      	ldr	r3, [r7, #28]
 801bf44:	1ad2      	subs	r2, r2, r3
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 801bf4a:	68fa      	ldr	r2, [r7, #12]
 801bf4c:	69fb      	ldr	r3, [r7, #28]
 801bf4e:	fa02 f303 	lsl.w	r3, r2, r3
 801bf52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 801bf56:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801bf58:	69b8      	ldr	r0, [r7, #24]
 801bf5a:	f000 f823 	bl	801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801bf5e:	4603      	mov	r3, r0
 801bf60:	4618      	mov	r0, r3
 801bf62:	f000 f831 	bl	801bfc8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801bf66:	4603      	mov	r3, r0
 801bf68:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801bf6a:	f107 0314 	add.w	r3, r7, #20
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f000 f88a 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bf74:	4603      	mov	r3, r0
 801bf76:	681b      	ldr	r3, [r3, #0]
}
 801bf78:	4618      	mov	r0, r3
 801bf7a:	3720      	adds	r7, #32
 801bf7c:	46bd      	mov	sp, r7
 801bf7e:	bd80      	pop	{r7, pc}

0801bf80 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 801bf80:	b480      	push	{r7}
 801bf82:	b083      	sub	sp, #12
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d003      	beq.n	801bf96 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801bf94:	e000      	b.n	801bf98 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801bf96:	2320      	movs	r3, #32
}
 801bf98:	4618      	mov	r0, r3
 801bf9a:	370c      	adds	r7, #12
 801bf9c:	46bd      	mov	sp, r7
 801bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfa2:	4770      	bx	lr

0801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b084      	sub	sp, #16
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 801bfac:	f107 030c 	add.w	r3, r7, #12
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f000 f869 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801bfb6:	4602      	mov	r2, r0
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	6013      	str	r3, [r2, #0]
    return retval;
 801bfbc:	68fb      	ldr	r3, [r7, #12]
  }
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	3710      	adds	r7, #16
 801bfc2:	46bd      	mov	sp, r7
 801bfc4:	bd80      	pop	{r7, pc}
	...

0801bfc8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 801bfc8:	b580      	push	{r7, lr}
 801bfca:	b08a      	sub	sp, #40	; 0x28
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801bfd0:	f000 f879 	bl	801c0c6 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801bfd4:	4603      	mov	r3, r0
 801bfd6:	4619      	mov	r1, r3
 801bfd8:	6878      	ldr	r0, [r7, #4]
 801bfda:	f000 f87f 	bl	801c0dc <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801bfde:	4603      	mov	r3, r0
 801bfe0:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801bfe2:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801bfe6:	f000 f8ab 	bl	801c140 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801bfea:	4603      	mov	r3, r0
 801bfec:	4618      	mov	r0, r3
 801bfee:	f000 f893 	bl	801c118 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801bff2:	4603      	mov	r3, r0
 801bff4:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801bff6:	4823      	ldr	r0, [pc, #140]	; (801c084 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801bff8:	f000 f8a2 	bl	801c140 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801bffc:	4603      	mov	r3, r0
 801bffe:	4618      	mov	r0, r3
 801c000:	f000 f88a 	bl	801c118 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801c004:	4603      	mov	r3, r0
 801c006:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 801c008:	69b9      	ldr	r1, [r7, #24]
 801c00a:	6a38      	ldr	r0, [r7, #32]
 801c00c:	f000 f8a5 	bl	801c15a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c010:	4603      	mov	r3, r0
 801c012:	4619      	mov	r1, r3
 801c014:	69f8      	ldr	r0, [r7, #28]
 801c016:	f000 f8c2 	bl	801c19e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c01a:	4603      	mov	r3, r0
 801c01c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801c01e:	2300      	movs	r3, #0
 801c020:	627b      	str	r3, [r7, #36]	; 0x24
 801c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c024:	2b02      	cmp	r3, #2
 801c026:	dc21      	bgt.n	801c06c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 801c028:	6979      	ldr	r1, [r7, #20]
 801c02a:	6a38      	ldr	r0, [r7, #32]
 801c02c:	f000 f895 	bl	801c15a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c030:	4603      	mov	r3, r0
 801c032:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801c034:	f000 f8d1 	bl	801c1da <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 801c038:	4603      	mov	r3, r0
 801c03a:	6939      	ldr	r1, [r7, #16]
 801c03c:	4618      	mov	r0, r3
 801c03e:	f000 f8d5 	bl	801c1ec <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c042:	4603      	mov	r3, r0
 801c044:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801c046:	68f9      	ldr	r1, [r7, #12]
 801c048:	6978      	ldr	r0, [r7, #20]
 801c04a:	f000 f8ed 	bl	801c228 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c04e:	4603      	mov	r3, r0
 801c050:	4618      	mov	r0, r3
 801c052:	f000 f90b 	bl	801c26c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801c056:	4603      	mov	r3, r0
 801c058:	4619      	mov	r1, r3
 801c05a:	6978      	ldr	r0, [r7, #20]
 801c05c:	f000 f89f 	bl	801c19e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c060:	4603      	mov	r3, r0
 801c062:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c066:	3301      	adds	r3, #1
 801c068:	627b      	str	r3, [r7, #36]	; 0x24
 801c06a:	e7da      	b.n	801c022 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801c06c:	6978      	ldr	r0, [r7, #20]
 801c06e:	f000 f917 	bl	801c2a0 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801c072:	4603      	mov	r3, r0
 801c074:	4618      	mov	r0, r3
 801c076:	f000 f929 	bl	801c2cc <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801c07a:	4603      	mov	r3, r0
}
 801c07c:	4618      	mov	r0, r3
 801c07e:	3728      	adds	r7, #40	; 0x28
 801c080:	46bd      	mov	sp, r7
 801c082:	bd80      	pop	{r7, pc}
 801c084:	c3c3c3c4 	.word	0xc3c3c3c4

0801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 801c088:	b480      	push	{r7}
 801c08a:	b083      	sub	sp, #12
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	4618      	mov	r0, r3
 801c094:	370c      	adds	r7, #12
 801c096:	46bd      	mov	sp, r7
 801c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09c:	4770      	bx	lr

0801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801c09e:	b590      	push	{r4, r7, lr}
 801c0a0:	b085      	sub	sp, #20
 801c0a2:	af00      	add	r7, sp, #0
 801c0a4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801c0a6:	f107 030c 	add.w	r3, r7, #12
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	f7ff ffec 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c0b0:	4604      	mov	r4, r0
 801c0b2:	6878      	ldr	r0, [r7, #4]
 801c0b4:	f7ff fdf2 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c0b8:	4603      	mov	r3, r0
 801c0ba:	6023      	str	r3, [r4, #0]
    return retval;
 801c0bc:	68fb      	ldr	r3, [r7, #12]
  }
 801c0be:	4618      	mov	r0, r3
 801c0c0:	3714      	adds	r7, #20
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	bd90      	pop	{r4, r7, pc}

0801c0c6 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801c0c6:	b580      	push	{r7, lr}
 801c0c8:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801c0ca:	f000 f927 	bl	801c31c <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	f7ff ffe4 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801c0d6:	4603      	mov	r3, r0
  }
 801c0d8:	4618      	mov	r0, r3
 801c0da:	bd80      	pop	{r7, pc}

0801c0dc <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801c0dc:	b590      	push	{r4, r7, lr}
 801c0de:	b083      	sub	sp, #12
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	6078      	str	r0, [r7, #4]
 801c0e4:	6039      	str	r1, [r7, #0]
 801c0e6:	1d3b      	adds	r3, r7, #4
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	f7ff ffcd 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c0ee:	4603      	mov	r3, r0
 801c0f0:	681c      	ldr	r4, [r3, #0]
 801c0f2:	463b      	mov	r3, r7
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	f7ff ffc7 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c0fa:	4603      	mov	r3, r0
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	4619      	mov	r1, r3
 801c100:	4620      	mov	r0, r4
 801c102:	f7ff fead 	bl	801be60 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801c106:	4603      	mov	r3, r0
 801c108:	4618      	mov	r0, r3
 801c10a:	f7ff ff4b 	bl	801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801c10e:	4603      	mov	r3, r0
 801c110:	4618      	mov	r0, r3
 801c112:	370c      	adds	r7, #12
 801c114:	46bd      	mov	sp, r7
 801c116:	bd90      	pop	{r4, r7, pc}

0801c118 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801c118:	b590      	push	{r4, r7, lr}
 801c11a:	b085      	sub	sp, #20
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801c120:	f107 030c 	add.w	r3, r7, #12
 801c124:	4618      	mov	r0, r3
 801c126:	f000 f900 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c12a:	4604      	mov	r4, r0
 801c12c:	6878      	ldr	r0, [r7, #4]
 801c12e:	f7ff fdb5 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c132:	4603      	mov	r3, r0
 801c134:	6023      	str	r3, [r4, #0]
    return retval;
 801c136:	68fb      	ldr	r3, [r7, #12]
  }
 801c138:	4618      	mov	r0, r3
 801c13a:	3714      	adds	r7, #20
 801c13c:	46bd      	mov	sp, r7
 801c13e:	bd90      	pop	{r4, r7, pc}

0801c140 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801c140:	b580      	push	{r7, lr}
 801c142:	b082      	sub	sp, #8
 801c144:	af00      	add	r7, sp, #0
 801c146:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801c148:	2100      	movs	r1, #0
 801c14a:	6878      	ldr	r0, [r7, #4]
 801c14c:	f7ff f9e2 	bl	801b514 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801c150:	4603      	mov	r3, r0
}
 801c152:	4618      	mov	r0, r3
 801c154:	3708      	adds	r7, #8
 801c156:	46bd      	mov	sp, r7
 801c158:	bd80      	pop	{r7, pc}

0801c15a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801c15a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c15c:	b085      	sub	sp, #20
 801c15e:	af00      	add	r7, sp, #0
 801c160:	6078      	str	r0, [r7, #4]
 801c162:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801c164:	1d3b      	adds	r3, r7, #4
 801c166:	4618      	mov	r0, r3
 801c168:	f7ff ff8e 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c16c:	4603      	mov	r3, r0
 801c16e:	681d      	ldr	r5, [r3, #0]
 801c170:	463b      	mov	r3, r7
 801c172:	4618      	mov	r0, r3
 801c174:	f000 f8d9 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c178:	4603      	mov	r3, r0
 801c17a:	681e      	ldr	r6, [r3, #0]
 801c17c:	f107 030c 	add.w	r3, r7, #12
 801c180:	4618      	mov	r0, r3
 801c182:	f000 f8d2 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c186:	4604      	mov	r4, r0
 801c188:	4631      	mov	r1, r6
 801c18a:	4628      	mov	r0, r5
 801c18c:	f7fe fd52 	bl	801ac34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801c190:	4603      	mov	r3, r0
 801c192:	6023      	str	r3, [r4, #0]
  return c;
 801c194:	68fb      	ldr	r3, [r7, #12]
}
 801c196:	4618      	mov	r0, r3
 801c198:	3714      	adds	r7, #20
 801c19a:	46bd      	mov	sp, r7
 801c19c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c19e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801c19e:	b590      	push	{r4, r7, lr}
 801c1a0:	b083      	sub	sp, #12
 801c1a2:	af00      	add	r7, sp, #0
 801c1a4:	6078      	str	r0, [r7, #4]
 801c1a6:	6039      	str	r1, [r7, #0]
 801c1a8:	1d3b      	adds	r3, r7, #4
 801c1aa:	4618      	mov	r0, r3
 801c1ac:	f000 f8bd 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c1b0:	4603      	mov	r3, r0
 801c1b2:	681c      	ldr	r4, [r3, #0]
 801c1b4:	463b      	mov	r3, r7
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	f000 f8b7 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c1bc:	4603      	mov	r3, r0
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	4619      	mov	r1, r3
 801c1c2:	4620      	mov	r0, r4
 801c1c4:	f7ff fda6 	bl	801bd14 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c1c8:	4603      	mov	r3, r0
 801c1ca:	4618      	mov	r0, r3
 801c1cc:	f000 f8b8 	bl	801c340 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801c1d0:	4603      	mov	r3, r0
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	370c      	adds	r7, #12
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bd90      	pop	{r4, r7, pc}

0801c1da <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801c1da:	b580      	push	{r7, lr}
 801c1dc:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801c1de:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801c1e2:	f7ff ff99 	bl	801c118 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801c1e6:	4603      	mov	r3, r0
  }
 801c1e8:	4618      	mov	r0, r3
 801c1ea:	bd80      	pop	{r7, pc}

0801c1ec <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801c1ec:	b590      	push	{r4, r7, lr}
 801c1ee:	b083      	sub	sp, #12
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	6078      	str	r0, [r7, #4]
 801c1f4:	6039      	str	r1, [r7, #0]
 801c1f6:	1d3b      	adds	r3, r7, #4
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	f000 f896 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c1fe:	4603      	mov	r3, r0
 801c200:	681c      	ldr	r4, [r3, #0]
 801c202:	463b      	mov	r3, r7
 801c204:	4618      	mov	r0, r3
 801c206:	f000 f890 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c20a:	4603      	mov	r3, r0
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	4619      	mov	r1, r3
 801c210:	4620      	mov	r0, r4
 801c212:	f000 f875 	bl	801c300 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801c216:	4603      	mov	r3, r0
 801c218:	4618      	mov	r0, r3
 801c21a:	f000 f891 	bl	801c340 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801c21e:	4603      	mov	r3, r0
 801c220:	4618      	mov	r0, r3
 801c222:	370c      	adds	r7, #12
 801c224:	46bd      	mov	sp, r7
 801c226:	bd90      	pop	{r4, r7, pc}

0801c228 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801c228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c22a:	b085      	sub	sp, #20
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6078      	str	r0, [r7, #4]
 801c230:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801c232:	1d3b      	adds	r3, r7, #4
 801c234:	4618      	mov	r0, r3
 801c236:	f000 f878 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c23a:	4603      	mov	r3, r0
 801c23c:	681d      	ldr	r5, [r3, #0]
 801c23e:	463b      	mov	r3, r7
 801c240:	4618      	mov	r0, r3
 801c242:	f000 f872 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c246:	4603      	mov	r3, r0
 801c248:	681e      	ldr	r6, [r3, #0]
 801c24a:	f107 030c 	add.w	r3, r7, #12
 801c24e:	4618      	mov	r0, r3
 801c250:	f000 f887 	bl	801c362 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801c254:	4604      	mov	r4, r0
 801c256:	4631      	mov	r1, r6
 801c258:	4628      	mov	r0, r5
 801c25a:	f7fe fceb 	bl	801ac34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801c25e:	4603      	mov	r3, r0
 801c260:	6023      	str	r3, [r4, #0]
  return c;
 801c262:	68fb      	ldr	r3, [r7, #12]
}
 801c264:	4618      	mov	r0, r3
 801c266:	3714      	adds	r7, #20
 801c268:	46bd      	mov	sp, r7
 801c26a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c26c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801c26c:	b5b0      	push	{r4, r5, r7, lr}
 801c26e:	b084      	sub	sp, #16
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801c274:	1d3b      	adds	r3, r7, #4
 801c276:	4618      	mov	r0, r3
 801c278:	f000 f873 	bl	801c362 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801c27c:	4603      	mov	r3, r0
 801c27e:	681d      	ldr	r5, [r3, #0]
 801c280:	f107 030c 	add.w	r3, r7, #12
 801c284:	4618      	mov	r0, r3
 801c286:	f000 f850 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c28a:	4604      	mov	r4, r0
 801c28c:	4628      	mov	r0, r5
 801c28e:	f000 f873 	bl	801c378 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 801c292:	4603      	mov	r3, r0
 801c294:	6023      	str	r3, [r4, #0]
  return result;
 801c296:	68fb      	ldr	r3, [r7, #12]
}
 801c298:	4618      	mov	r0, r3
 801c29a:	3710      	adds	r7, #16
 801c29c:	46bd      	mov	sp, r7
 801c29e:	bdb0      	pop	{r4, r5, r7, pc}

0801c2a0 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 801c2a0:	b590      	push	{r4, r7, lr}
 801c2a2:	b085      	sub	sp, #20
 801c2a4:	af00      	add	r7, sp, #0
 801c2a6:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801c2a8:	1d3b      	adds	r3, r7, #4
 801c2aa:	4618      	mov	r0, r3
 801c2ac:	f000 f83d 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c2b0:	4604      	mov	r4, r0
 801c2b2:	f107 030c 	add.w	r3, r7, #12
 801c2b6:	4618      	mov	r0, r3
 801c2b8:	f000 f86a 	bl	801c390 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801c2bc:	4602      	mov	r2, r0
 801c2be:	6823      	ldr	r3, [r4, #0]
 801c2c0:	6013      	str	r3, [r2, #0]
  return c;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	3714      	adds	r7, #20
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd90      	pop	{r4, r7, pc}

0801c2cc <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801c2cc:	b5b0      	push	{r4, r5, r7, lr}
 801c2ce:	b084      	sub	sp, #16
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801c2d4:	1d3b      	adds	r3, r7, #4
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	f000 f85a 	bl	801c390 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801c2dc:	4603      	mov	r3, r0
 801c2de:	681d      	ldr	r5, [r3, #0]
 801c2e0:	f107 030c 	add.w	r3, r7, #12
 801c2e4:	4618      	mov	r0, r3
 801c2e6:	f7ff fecf 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c2ea:	4604      	mov	r4, r0
 801c2ec:	4628      	mov	r0, r5
 801c2ee:	f000 f85a 	bl	801c3a6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801c2f2:	4603      	mov	r3, r0
 801c2f4:	6023      	str	r3, [r4, #0]
  return result;
 801c2f6:	68fb      	ldr	r3, [r7, #12]
}
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	3710      	adds	r7, #16
 801c2fc:	46bd      	mov	sp, r7
 801c2fe:	bdb0      	pop	{r4, r5, r7, pc}

0801c300 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 801c300:	b480      	push	{r7}
 801c302:	b083      	sub	sp, #12
 801c304:	af00      	add	r7, sp, #0
 801c306:	6078      	str	r0, [r7, #4]
 801c308:	6039      	str	r1, [r7, #0]
  return a - b;
 801c30a:	687a      	ldr	r2, [r7, #4]
 801c30c:	683b      	ldr	r3, [r7, #0]
 801c30e:	1ad3      	subs	r3, r2, r3
}
 801c310:	4618      	mov	r0, r3
 801c312:	370c      	adds	r7, #12
 801c314:	46bd      	mov	sp, r7
 801c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c31a:	4770      	bx	lr

0801c31c <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801c31c:	b580      	push	{r7, lr}
 801c31e:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801c320:	f7fd fefc 	bl	801a11c <_ZNSt14numeric_limitsIlE3maxEv>
 801c324:	4603      	mov	r3, r0
  }
 801c326:	4618      	mov	r0, r3
 801c328:	bd80      	pop	{r7, pc}

0801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 801c32a:	b480      	push	{r7}
 801c32c:	b083      	sub	sp, #12
 801c32e:	af00      	add	r7, sp, #0
 801c330:	6078      	str	r0, [r7, #4]
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	4618      	mov	r0, r3
 801c336:	370c      	adds	r7, #12
 801c338:	46bd      	mov	sp, r7
 801c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c33e:	4770      	bx	lr

0801c340 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801c340:	b580      	push	{r7, lr}
 801c342:	b084      	sub	sp, #16
 801c344:	af00      	add	r7, sp, #0
 801c346:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801c348:	f107 030c 	add.w	r3, r7, #12
 801c34c:	4618      	mov	r0, r3
 801c34e:	f7ff ffec 	bl	801c32a <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c352:	4602      	mov	r2, r0
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	6013      	str	r3, [r2, #0]
    return retval;
 801c358:	68fb      	ldr	r3, [r7, #12]
  }
 801c35a:	4618      	mov	r0, r3
 801c35c:	3710      	adds	r7, #16
 801c35e:	46bd      	mov	sp, r7
 801c360:	bd80      	pop	{r7, pc}

0801c362 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801c362:	b480      	push	{r7}
 801c364:	b083      	sub	sp, #12
 801c366:	af00      	add	r7, sp, #0
 801c368:	6078      	str	r0, [r7, #4]
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	4618      	mov	r0, r3
 801c36e:	370c      	adds	r7, #12
 801c370:	46bd      	mov	sp, r7
 801c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c376:	4770      	bx	lr

0801c378 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801c378:	b580      	push	{r7, lr}
 801c37a:	b082      	sub	sp, #8
 801c37c:	af00      	add	r7, sp, #0
 801c37e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801c380:	6878      	ldr	r0, [r7, #4]
 801c382:	f000 f81d 	bl	801c3c0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801c386:	4603      	mov	r3, r0
}
 801c388:	4618      	mov	r0, r3
 801c38a:	3708      	adds	r7, #8
 801c38c:	46bd      	mov	sp, r7
 801c38e:	bd80      	pop	{r7, pc}

0801c390 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801c390:	b480      	push	{r7}
 801c392:	b083      	sub	sp, #12
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	4618      	mov	r0, r3
 801c39c:	370c      	adds	r7, #12
 801c39e:	46bd      	mov	sp, r7
 801c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3a4:	4770      	bx	lr

0801c3a6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801c3a6:	b580      	push	{r7, lr}
 801c3a8:	b082      	sub	sp, #8
 801c3aa:	af00      	add	r7, sp, #0
 801c3ac:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801c3ae:	6878      	ldr	r0, [r7, #4]
 801c3b0:	f000 f848 	bl	801c444 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801c3b4:	4603      	mov	r3, r0
}
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	3708      	adds	r7, #8
 801c3ba:	46bd      	mov	sp, r7
 801c3bc:	bd80      	pop	{r7, pc}
	...

0801c3c0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801c3c0:	b580      	push	{r7, lr}
 801c3c2:	b08a      	sub	sp, #40	; 0x28
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801c3c8:	f7fe fc1f 	bl	801ac0a <_ZNSt14numeric_limitsIlE3minEv>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	f7ff fc64 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c3d4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801c3d6:	f7fd fea1 	bl	801a11c <_ZNSt14numeric_limitsIlE3maxEv>
 801c3da:	4603      	mov	r3, r0
 801c3dc:	4618      	mov	r0, r3
 801c3de:	f7ff fc5d 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c3e2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801c3e4:	2320      	movs	r3, #32
 801c3e6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801c3e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801c3ec:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801c3ee:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801c3f2:	f7ff fc53 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c3f6:	4603      	mov	r3, r0
 801c3f8:	4619      	mov	r1, r3
 801c3fa:	6878      	ldr	r0, [r7, #4]
 801c3fc:	f7ff fc98 	bl	801bd30 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c400:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801c402:	480f      	ldr	r0, [pc, #60]	; (801c440 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801c404:	f7ff fc4a 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c408:	4603      	mov	r3, r0
 801c40a:	4619      	mov	r1, r3
 801c40c:	6878      	ldr	r0, [r7, #4]
 801c40e:	f7ff fc6d 	bl	801bcec <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c412:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801c414:	2102      	movs	r1, #2
 801c416:	6878      	ldr	r0, [r7, #4]
 801c418:	f000 f856 	bl	801c4c8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801c41c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801c41e:	68fa      	ldr	r2, [r7, #12]
 801c420:	6a39      	ldr	r1, [r7, #32]
 801c422:	6978      	ldr	r0, [r7, #20]
 801c424:	f000 f894 	bl	801c550 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c428:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801c42a:	68fa      	ldr	r2, [r7, #12]
 801c42c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c42e:	6938      	ldr	r0, [r7, #16]
 801c430:	f000 f88e 	bl	801c550 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c434:	60f8      	str	r0, [r7, #12]
    return result;
 801c436:	68fb      	ldr	r3, [r7, #12]
  }
 801c438:	4618      	mov	r0, r3
 801c43a:	3728      	adds	r7, #40	; 0x28
 801c43c:	46bd      	mov	sp, r7
 801c43e:	bd80      	pop	{r7, pc}
 801c440:	e0000001 	.word	0xe0000001

0801c444 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801c444:	b580      	push	{r7, lr}
 801c446:	b08a      	sub	sp, #40	; 0x28
 801c448:	af00      	add	r7, sp, #0
 801c44a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801c44c:	f7fe fbdd 	bl	801ac0a <_ZNSt14numeric_limitsIlE3minEv>
 801c450:	4603      	mov	r3, r0
 801c452:	4618      	mov	r0, r3
 801c454:	f7ff fc22 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c458:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801c45a:	f7fd fe5f 	bl	801a11c <_ZNSt14numeric_limitsIlE3maxEv>
 801c45e:	4603      	mov	r3, r0
 801c460:	4618      	mov	r0, r3
 801c462:	f7ff fc1b 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c466:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801c468:	2320      	movs	r3, #32
 801c46a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801c46c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801c470:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801c472:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801c476:	f7ff fc11 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c47a:	4603      	mov	r3, r0
 801c47c:	4619      	mov	r1, r3
 801c47e:	6878      	ldr	r0, [r7, #4]
 801c480:	f7ff fc56 	bl	801bd30 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c484:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801c486:	480f      	ldr	r0, [pc, #60]	; (801c4c4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 801c488:	f7ff fc08 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c48c:	4603      	mov	r3, r0
 801c48e:	4619      	mov	r1, r3
 801c490:	6878      	ldr	r0, [r7, #4]
 801c492:	f7ff fc2b 	bl	801bcec <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c496:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801c498:	2101      	movs	r1, #1
 801c49a:	6878      	ldr	r0, [r7, #4]
 801c49c:	f000 f814 	bl	801c4c8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801c4a0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801c4a2:	68fa      	ldr	r2, [r7, #12]
 801c4a4:	6a39      	ldr	r1, [r7, #32]
 801c4a6:	6978      	ldr	r0, [r7, #20]
 801c4a8:	f000 f852 	bl	801c550 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c4ac:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801c4ae:	68fa      	ldr	r2, [r7, #12]
 801c4b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c4b2:	6938      	ldr	r0, [r7, #16]
 801c4b4:	f000 f84c 	bl	801c550 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c4b8:	60f8      	str	r0, [r7, #12]
    return result;
 801c4ba:	68fb      	ldr	r3, [r7, #12]
  }
 801c4bc:	4618      	mov	r0, r3
 801c4be:	3728      	adds	r7, #40	; 0x28
 801c4c0:	46bd      	mov	sp, r7
 801c4c2:	bd80      	pop	{r7, pc}
 801c4c4:	c0000001 	.word	0xc0000001

0801c4c8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 801c4c8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801c4cc:	b089      	sub	sp, #36	; 0x24
 801c4ce:	af00      	add	r7, sp, #0
 801c4d0:	6078      	str	r0, [r7, #4]
 801c4d2:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801c4d4:	6879      	ldr	r1, [r7, #4]
 801c4d6:	17c8      	asrs	r0, r1, #31
 801c4d8:	4688      	mov	r8, r1
 801c4da:	4681      	mov	r9, r0
 801c4dc:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801c4e0:	2001      	movs	r0, #1
 801c4e2:	6839      	ldr	r1, [r7, #0]
 801c4e4:	fa00 f101 	lsl.w	r1, r0, r1
 801c4e8:	17c8      	asrs	r0, r1, #31
 801c4ea:	460c      	mov	r4, r1
 801c4ec:	4605      	mov	r5, r0
 801c4ee:	69f9      	ldr	r1, [r7, #28]
 801c4f0:	fb04 f001 	mul.w	r0, r4, r1
 801c4f4:	69b9      	ldr	r1, [r7, #24]
 801c4f6:	fb05 f101 	mul.w	r1, r5, r1
 801c4fa:	4401      	add	r1, r0
 801c4fc:	69b8      	ldr	r0, [r7, #24]
 801c4fe:	fba0 2304 	umull	r2, r3, r0, r4
 801c502:	4419      	add	r1, r3
 801c504:	460b      	mov	r3, r1
 801c506:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801c50a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801c50e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801c512:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801c514:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c518:	60bb      	str	r3, [r7, #8]
             ? min
 801c51a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c51e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801c522:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 801c526:	db0b      	blt.n	801c540 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 801c528:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c52c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801c530:	f173 0300 	sbcs.w	r3, r3, #0
 801c534:	da01      	bge.n	801c53a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801c536:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801c538:	e004      	b.n	801c544 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 801c53a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801c53e:	e001      	b.n	801c544 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 801c540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801c544:	4618      	mov	r0, r3
 801c546:	3724      	adds	r7, #36	; 0x24
 801c548:	46bd      	mov	sp, r7
 801c54a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801c54e:	4770      	bx	lr

0801c550 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 801c550:	b590      	push	{r4, r7, lr}
 801c552:	b085      	sub	sp, #20
 801c554:	af00      	add	r7, sp, #0
 801c556:	60f8      	str	r0, [r7, #12]
 801c558:	60b9      	str	r1, [r7, #8]
 801c55a:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801c55c:	68b9      	ldr	r1, [r7, #8]
 801c55e:	68f8      	ldr	r0, [r7, #12]
 801c560:	f7ff fba7 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c564:	4604      	mov	r4, r0
 801c566:	68f8      	ldr	r0, [r7, #12]
 801c568:	f7ff fc07 	bl	801bd7a <_ZN8gemmlowp6BitNotIlEET_S1_>
 801c56c:	4603      	mov	r3, r0
 801c56e:	6879      	ldr	r1, [r7, #4]
 801c570:	4618      	mov	r0, r3
 801c572:	f7ff fb9e 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c576:	4603      	mov	r3, r0
 801c578:	4619      	mov	r1, r3
 801c57a:	4620      	mov	r0, r4
 801c57c:	f000 f805 	bl	801c58a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 801c580:	4603      	mov	r3, r0
}
 801c582:	4618      	mov	r0, r3
 801c584:	3714      	adds	r7, #20
 801c586:	46bd      	mov	sp, r7
 801c588:	bd90      	pop	{r4, r7, pc}

0801c58a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801c58a:	b480      	push	{r7}
 801c58c:	b083      	sub	sp, #12
 801c58e:	af00      	add	r7, sp, #0
 801c590:	6078      	str	r0, [r7, #4]
 801c592:	6039      	str	r1, [r7, #0]
  return a ^ b;
 801c594:	687a      	ldr	r2, [r7, #4]
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	4053      	eors	r3, r2
}
 801c59a:	4618      	mov	r0, r3
 801c59c:	370c      	adds	r7, #12
 801c59e:	46bd      	mov	sp, r7
 801c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5a4:	4770      	bx	lr

0801c5a6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801c5a6:	b580      	push	{r7, lr}
 801c5a8:	b084      	sub	sp, #16
 801c5aa:	af00      	add	r7, sp, #0
 801c5ac:	60f8      	str	r0, [r7, #12]
 801c5ae:	60b9      	str	r1, [r7, #8]
 801c5b0:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d101      	bne.n	801c5be <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801c5ba:	f006 f90b 	bl	80227d4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5c2:	2124      	movs	r1, #36	; 0x24
 801c5c4:	68f8      	ldr	r0, [r7, #12]
 801c5c6:	4798      	blx	r3
 801c5c8:	4603      	mov	r3, r0
}
 801c5ca:	4618      	mov	r0, r3
 801c5cc:	3710      	adds	r7, #16
 801c5ce:	46bd      	mov	sp, r7
 801c5d0:	bd80      	pop	{r7, pc}
	...

0801c5d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801c5d4:	b5b0      	push	{r4, r5, r7, lr}
 801c5d6:	b0a0      	sub	sp, #128	; 0x80
 801c5d8:	af04      	add	r7, sp, #16
 801c5da:	6078      	str	r0, [r7, #4]
 801c5dc:	6039      	str	r1, [r7, #0]
 801c5de:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 801c5e0:	683b      	ldr	r3, [r7, #0]
 801c5e2:	691b      	ldr	r3, [r3, #16]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d101      	bne.n	801c5ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801c5e8:	f006 f8f4 	bl	80227d4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801c5ec:	683b      	ldr	r3, [r7, #0]
 801c5ee:	695b      	ldr	r3, [r3, #20]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d101      	bne.n	801c5f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801c5f4:	f006 f8ee 	bl	80227d4 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	691b      	ldr	r3, [r3, #16]
 801c5fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801c5fe:	683b      	ldr	r3, [r7, #0]
 801c600:	695b      	ldr	r3, [r3, #20]
 801c602:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 801c604:	4b81      	ldr	r3, [pc, #516]	; (801c80c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	461a      	mov	r2, r3
 801c60a:	6839      	ldr	r1, [r7, #0]
 801c60c:	6878      	ldr	r0, [r7, #4]
 801c60e:	f7fd fff9 	bl	801a604 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c612:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 801c614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c616:	2b00      	cmp	r3, #0
 801c618:	d10a      	bne.n	801c630 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	695c      	ldr	r4, [r3, #20]
 801c61e:	4b7c      	ldr	r3, [pc, #496]	; (801c810 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c620:	9300      	str	r3, [sp, #0]
 801c622:	2340      	movs	r3, #64	; 0x40
 801c624:	4a7b      	ldr	r2, [pc, #492]	; (801c814 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c626:	497c      	ldr	r1, [pc, #496]	; (801c818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c628:	6878      	ldr	r0, [r7, #4]
 801c62a:	47a0      	blx	r4
 801c62c:	2401      	movs	r4, #1
 801c62e:	e0e7      	b.n	801c800 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 801c630:	4b7a      	ldr	r3, [pc, #488]	; (801c81c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	461a      	mov	r2, r3
 801c636:	6839      	ldr	r1, [r7, #0]
 801c638:	6878      	ldr	r0, [r7, #4]
 801c63a:	f7fd ffe3 	bl	801a604 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c63e:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 801c640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c642:	2b00      	cmp	r3, #0
 801c644:	d10a      	bne.n	801c65c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	695c      	ldr	r4, [r3, #20]
 801c64a:	4b75      	ldr	r3, [pc, #468]	; (801c820 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801c64c:	9300      	str	r3, [sp, #0]
 801c64e:	2343      	movs	r3, #67	; 0x43
 801c650:	4a70      	ldr	r2, [pc, #448]	; (801c814 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c652:	4971      	ldr	r1, [pc, #452]	; (801c818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c654:	6878      	ldr	r0, [r7, #4]
 801c656:	47a0      	blx	r4
 801c658:	2401      	movs	r4, #1
 801c65a:	e0d1      	b.n	801c800 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 801c65c:	4b71      	ldr	r3, [pc, #452]	; (801c824 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	461a      	mov	r2, r3
 801c662:	6839      	ldr	r1, [r7, #0]
 801c664:	6878      	ldr	r0, [r7, #4]
 801c666:	f7fd fffd 	bl	801a664 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801c66a:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 801c66c:	4b6e      	ldr	r3, [pc, #440]	; (801c828 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	461a      	mov	r2, r3
 801c672:	6839      	ldr	r1, [r7, #0]
 801c674:	6878      	ldr	r0, [r7, #4]
 801c676:	f7fd ffd5 	bl	801a624 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801c67a:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 801c67c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d10a      	bne.n	801c698 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	695c      	ldr	r4, [r3, #20]
 801c686:	4b69      	ldr	r3, [pc, #420]	; (801c82c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801c688:	9300      	str	r3, [sp, #0]
 801c68a:	2347      	movs	r3, #71	; 0x47
 801c68c:	4a61      	ldr	r2, [pc, #388]	; (801c814 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c68e:	4962      	ldr	r1, [pc, #392]	; (801c818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c690:	6878      	ldr	r0, [r7, #4]
 801c692:	47a0      	blx	r4
 801c694:	2401      	movs	r4, #1
 801c696:	e0b3      	b.n	801c800 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801c698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c69a:	781a      	ldrb	r2, [r3, #0]
 801c69c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c69e:	781b      	ldrb	r3, [r3, #0]
 801c6a0:	429a      	cmp	r2, r3
 801c6a2:	d01a      	beq.n	801c6da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	695c      	ldr	r4, [r3, #20]
 801c6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6aa:	781b      	ldrb	r3, [r3, #0]
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	f7fd fcb9 	bl	801a024 <TfLiteTypeGetName>
 801c6b2:	4605      	mov	r5, r0
 801c6b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	f7fd fcb3 	bl	801a024 <TfLiteTypeGetName>
 801c6be:	4603      	mov	r3, r0
 801c6c0:	9303      	str	r3, [sp, #12]
 801c6c2:	9502      	str	r5, [sp, #8]
 801c6c4:	4b5a      	ldr	r3, [pc, #360]	; (801c830 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801c6c6:	9301      	str	r3, [sp, #4]
 801c6c8:	4b5a      	ldr	r3, [pc, #360]	; (801c834 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801c6ca:	9300      	str	r3, [sp, #0]
 801c6cc:	2349      	movs	r3, #73	; 0x49
 801c6ce:	4a51      	ldr	r2, [pc, #324]	; (801c814 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c6d0:	4959      	ldr	r1, [pc, #356]	; (801c838 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801c6d2:	6878      	ldr	r0, [r7, #4]
 801c6d4:	47a0      	blx	r4
 801c6d6:	2401      	movs	r4, #1
 801c6d8:	e092      	b.n	801c800 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801c6da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6dc:	781a      	ldrb	r2, [r3, #0]
 801c6de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c6e0:	781b      	ldrb	r3, [r3, #0]
 801c6e2:	429a      	cmp	r2, r3
 801c6e4:	d006      	beq.n	801c6f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	695b      	ldr	r3, [r3, #20]
 801c6ea:	4954      	ldr	r1, [pc, #336]	; (801c83c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801c6ec:	6878      	ldr	r0, [r7, #4]
 801c6ee:	4798      	blx	r3
 801c6f0:	2401      	movs	r4, #1
 801c6f2:	e085      	b.n	801c800 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801c6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c6f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c6fa:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801c6fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c6fe:	7819      	ldrb	r1, [r3, #0]
 801c700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c702:	781a      	ldrb	r2, [r3, #0]
 801c704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c706:	9303      	str	r3, [sp, #12]
 801c708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c70a:	9302      	str	r3, [sp, #8]
 801c70c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c70e:	9301      	str	r3, [sp, #4]
 801c710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c712:	9300      	str	r3, [sp, #0]
 801c714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c716:	6878      	ldr	r0, [r7, #4]
 801c718:	f000 fae4 	bl	801cce4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 801c71c:	4603      	mov	r3, r0
 801c71e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801c722:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c726:	2b00      	cmp	r3, #0
 801c728:	d002      	beq.n	801c730 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 801c72a:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 801c72e:	e067      	b.n	801c800 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 801c730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c732:	781b      	ldrb	r3, [r3, #0]
 801c734:	2b09      	cmp	r3, #9
 801c736:	d162      	bne.n	801c7fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 801c738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c73c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c73e:	4618      	mov	r0, r3
 801c740:	f7fe fa45 	bl	801abce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801c744:	f107 0318 	add.w	r3, r7, #24
 801c748:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c74a:	4618      	mov	r0, r3
 801c74c:	f7fe fa3f 	bl	801abce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801c750:	f107 0318 	add.w	r3, r7, #24
 801c754:	4618      	mov	r0, r3
 801c756:	f7fe f9d6 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c75a:	4603      	mov	r3, r0
 801c75c:	2b02      	cmp	r3, #2
 801c75e:	d001      	beq.n	801c764 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 801c760:	f006 f838 	bl	80227d4 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 801c764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c768:	4618      	mov	r0, r3
 801c76a:	f7fe f9cc 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c76e:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 801c770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c772:	1e5a      	subs	r2, r3, #1
 801c774:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c778:	4611      	mov	r1, r2
 801c77a:	4618      	mov	r0, r3
 801c77c:	f7fe fad0 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c780:	4603      	mov	r3, r0
 801c782:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 801c784:	2301      	movs	r3, #1
 801c786:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801c788:	2301      	movs	r3, #1
 801c78a:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801c78c:	f107 0318 	add.w	r3, r7, #24
 801c790:	2101      	movs	r1, #1
 801c792:	4618      	mov	r0, r3
 801c794:	f7fe fac4 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c798:	4603      	mov	r3, r0
 801c79a:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801c79c:	f107 0308 	add.w	r3, r7, #8
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	f7f5 f81f 	bl	80117e4 <arm_fully_connected_s8_get_buffer_size>
 801c7a6:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801c7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	dd11      	ble.n	801c7d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c7b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c7b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c7b6:	3220      	adds	r2, #32
 801c7b8:	6878      	ldr	r0, [r7, #4]
 801c7ba:	4798      	blx	r3
 801c7bc:	4603      	mov	r3, r0
 801c7be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801c7c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d007      	beq.n	801c7da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801c7ca:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801c7ce:	2500      	movs	r5, #0
 801c7d0:	e004      	b.n	801c7dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801c7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c7d8:	621a      	str	r2, [r3, #32]
 801c7da:	2501      	movs	r5, #1
 801c7dc:	f107 0318 	add.w	r3, r7, #24
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	f7fe f97a 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
 801c7e6:	2d01      	cmp	r5, #1
 801c7e8:	d001      	beq.n	801c7ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801c7ea:	2500      	movs	r5, #0
 801c7ec:	e000      	b.n	801c7f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801c7ee:	2501      	movs	r5, #1
 801c7f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7f4:	4618      	mov	r0, r3
 801c7f6:	f7fe f970 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
 801c7fa:	2d01      	cmp	r5, #1
 801c7fc:	d100      	bne.n	801c800 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801c7fe:	2400      	movs	r4, #0
}
 801c800:	4623      	mov	r3, r4
 801c802:	4618      	mov	r0, r3
 801c804:	3770      	adds	r7, #112	; 0x70
 801c806:	46bd      	mov	sp, r7
 801c808:	bdb0      	pop	{r4, r5, r7, pc}
 801c80a:	bf00      	nop
 801c80c:	08029be4 	.word	0x08029be4
 801c810:	08026bb4 	.word	0x08026bb4
 801c814:	08026b0c 	.word	0x08026b0c
 801c818:	08026b9c 	.word	0x08026b9c
 801c81c:	08029be8 	.word	0x08029be8
 801c820:	08026bc8 	.word	0x08026bc8
 801c824:	08029bec 	.word	0x08029bec
 801c828:	08029bf0 	.word	0x08029bf0
 801c82c:	08026bdc 	.word	0x08026bdc
 801c830:	08026c0c 	.word	0x08026c0c
 801c834:	08026c1c 	.word	0x08026c1c
 801c838:	08026bf0 	.word	0x08026bf0
 801c83c:	08026c28 	.word	0x08026c28

0801c840 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 801c840:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c842:	b0bf      	sub	sp, #252	; 0xfc
 801c844:	af08      	add	r7, sp, #32
 801c846:	6178      	str	r0, [r7, #20]
 801c848:	6139      	str	r1, [r7, #16]
 801c84a:	60fa      	str	r2, [r7, #12]
 801c84c:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801c84e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c852:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801c856:	4618      	mov	r0, r3
 801c858:	f000 faaa 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801c85c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c860:	4618      	mov	r0, r3
 801c862:	f7fe f950 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c866:	4603      	mov	r3, r0
 801c868:	2b02      	cmp	r3, #2
 801c86a:	d001      	beq.n	801c870 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 801c86c:	f005 ffb2 	bl	80227d4 <abort>
  const int batches = output_shape.Dims(0);
 801c870:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c874:	2100      	movs	r1, #0
 801c876:	4618      	mov	r0, r3
 801c878:	f7fe fa52 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c87c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 801c880:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c884:	2101      	movs	r1, #1
 801c886:	4618      	mov	r0, r3
 801c888:	f7fe fa4a 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c88c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801c890:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c894:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801c898:	4618      	mov	r0, r3
 801c89a:	f000 fa89 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801c89e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c8a2:	4618      	mov	r0, r3
 801c8a4:	f7fe f92f 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c8a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801c8ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c8b0:	1e5a      	subs	r2, r3, #1
 801c8b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c8b6:	4611      	mov	r1, r2
 801c8b8:	4618      	mov	r0, r3
 801c8ba:	f7fe fa31 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c8be:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801c8c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c8c6:	68b9      	ldr	r1, [r7, #8]
 801c8c8:	4618      	mov	r0, r3
 801c8ca:	f000 fa71 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	695b      	ldr	r3, [r3, #20]
 801c8d2:	425b      	negs	r3, r3
 801c8d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	69db      	ldr	r3, [r3, #28]
 801c8da:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	699b      	ldr	r3, [r3, #24]
 801c8e0:	425b      	negs	r3, r3
 801c8e2:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	689b      	ldr	r3, [r3, #8]
 801c8e8:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	68db      	ldr	r3, [r3, #12]
 801c8ee:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	685b      	ldr	r3, [r3, #4]
 801c8fa:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801c8fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c900:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 801c902:	2301      	movs	r3, #1
 801c904:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 801c906:	2301      	movs	r3, #1
 801c908:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 801c90a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c90e:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 801c910:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c914:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 801c916:	2301      	movs	r3, #1
 801c918:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 801c91a:	2301      	movs	r3, #1
 801c91c:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 801c91e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c922:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 801c924:	2301      	movs	r3, #1
 801c926:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 801c928:	2301      	movs	r3, #1
 801c92a:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 801c92c:	2301      	movs	r3, #1
 801c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 801c930:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c934:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801c936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c93a:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 801c93c:	2301      	movs	r3, #1
 801c93e:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 801c940:	2301      	movs	r3, #1
 801c942:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 801c944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c948:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801c94a:	2300      	movs	r3, #0
 801c94c:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 801c94e:	2300      	movs	r3, #0
 801c950:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	6a1b      	ldr	r3, [r3, #32]
 801c956:	2b00      	cmp	r3, #0
 801c958:	db08      	blt.n	801c96c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801c95a:	697b      	ldr	r3, [r7, #20]
 801c95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c95e:	68fa      	ldr	r2, [r7, #12]
 801c960:	6a12      	ldr	r2, [r2, #32]
 801c962:	4611      	mov	r1, r2
 801c964:	6978      	ldr	r0, [r7, #20]
 801c966:	4798      	blx	r3
 801c968:	4603      	mov	r3, r0
 801c96a:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 801c96c:	68b8      	ldr	r0, [r7, #8]
 801c96e:	f7fe ffa9 	bl	801b8c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c972:	4605      	mov	r5, r0
 801c974:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801c978:	f7fe ffa4 	bl	801b8c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c97c:	4606      	mov	r6, r0
 801c97e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801c982:	f7ff fa20 	bl	801bdc6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801c986:	6078      	str	r0, [r7, #4]
 801c988:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801c98c:	f7fe ffa9 	bl	801b8e2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c990:	4603      	mov	r3, r0
 801c992:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801c996:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801c99a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801c99e:	f107 001c 	add.w	r0, r7, #28
 801c9a2:	9306      	str	r3, [sp, #24]
 801c9a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c9a8:	9305      	str	r3, [sp, #20]
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	9304      	str	r3, [sp, #16]
 801c9ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c9b2:	9303      	str	r3, [sp, #12]
 801c9b4:	9602      	str	r6, [sp, #8]
 801c9b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c9ba:	9301      	str	r3, [sp, #4]
 801c9bc:	9500      	str	r5, [sp, #0]
 801c9be:	4623      	mov	r3, r4
 801c9c0:	f7f4 fec9 	bl	8011756 <arm_fully_connected_s8>
 801c9c4:	4603      	mov	r3, r0
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	bf14      	ite	ne
 801c9ca:	2301      	movne	r3, #1
 801c9cc:	2300      	moveq	r3, #0
 801c9ce:	b2db      	uxtb	r3, r3
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d03e      	beq.n	801ca52 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 801c9d4:	697b      	ldr	r3, [r7, #20]
 801c9d6:	695c      	ldr	r4, [r3, #20]
 801c9d8:	68b8      	ldr	r0, [r7, #8]
 801c9da:	f7fe ff73 	bl	801b8c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c9de:	4606      	mov	r6, r0
 801c9e0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801c9e4:	f7fe ff6e 	bl	801b8c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c9e8:	6078      	str	r0, [r7, #4]
 801c9ea:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801c9ee:	f7ff f9ea 	bl	801bdc6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801c9f2:	6038      	str	r0, [r7, #0]
 801c9f4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801c9f8:	f7fe ff73 	bl	801b8e2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	f107 0554 	add.w	r5, r7, #84	; 0x54
 801ca02:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801ca06:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801ca0a:	f107 001c 	add.w	r0, r7, #28
 801ca0e:	9306      	str	r3, [sp, #24]
 801ca10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ca14:	9305      	str	r3, [sp, #20]
 801ca16:	683b      	ldr	r3, [r7, #0]
 801ca18:	9304      	str	r3, [sp, #16]
 801ca1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ca1e:	9303      	str	r3, [sp, #12]
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	9302      	str	r3, [sp, #8]
 801ca24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ca28:	9301      	str	r3, [sp, #4]
 801ca2a:	9600      	str	r6, [sp, #0]
 801ca2c:	462b      	mov	r3, r5
 801ca2e:	f7f4 fe92 	bl	8011756 <arm_fully_connected_s8>
 801ca32:	4603      	mov	r3, r0
 801ca34:	461a      	mov	r2, r3
 801ca36:	2300      	movs	r3, #0
 801ca38:	9303      	str	r3, [sp, #12]
 801ca3a:	9202      	str	r2, [sp, #8]
 801ca3c:	4b0f      	ldr	r3, [pc, #60]	; (801ca7c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 801ca3e:	9301      	str	r3, [sp, #4]
 801ca40:	4b0f      	ldr	r3, [pc, #60]	; (801ca80 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 801ca42:	9300      	str	r3, [sp, #0]
 801ca44:	23a6      	movs	r3, #166	; 0xa6
 801ca46:	4a0f      	ldr	r2, [pc, #60]	; (801ca84 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 801ca48:	490f      	ldr	r1, [pc, #60]	; (801ca88 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 801ca4a:	6978      	ldr	r0, [r7, #20]
 801ca4c:	47a0      	blx	r4
 801ca4e:	2401      	movs	r4, #1
 801ca50:	e000      	b.n	801ca54 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 801ca52:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801ca54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ca58:	4618      	mov	r0, r3
 801ca5a:	f7fe f83e 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801ca5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ca62:	4618      	mov	r0, r3
 801ca64:	f7fe f839 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801ca68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ca6c:	4618      	mov	r0, r3
 801ca6e:	f7fe f834 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
}
 801ca72:	4623      	mov	r3, r4
 801ca74:	4618      	mov	r0, r3
 801ca76:	37dc      	adds	r7, #220	; 0xdc
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca7c:	08026d04 	.word	0x08026d04
 801ca80:	08026d18 	.word	0x08026d18
 801ca84:	08026b0c 	.word	0x08026b0c
 801ca88:	08026ce8 	.word	0x08026ce8

0801ca8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801ca8c:	b590      	push	{r4, r7, lr}
 801ca8e:	b0d1      	sub	sp, #324	; 0x144
 801ca90:	af04      	add	r7, sp, #16
 801ca92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ca9a:	6018      	str	r0, [r3, #0]
 801ca9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801caa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801caa4:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801caa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801caaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	695b      	ldr	r3, [r3, #20]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d101      	bne.n	801caba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801cab6:	f005 fe8d 	bl	80227d4 <abort>
  const auto* params =
 801caba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cabe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	695b      	ldr	r3, [r3, #20]
 801cac6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801caca:	4b67      	ldr	r3, [pc, #412]	; (801cc68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 801cacc:	681a      	ldr	r2, [r3, #0]
 801cace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cad2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cade:	6809      	ldr	r1, [r1, #0]
 801cae0:	6818      	ldr	r0, [r3, #0]
 801cae2:	f7fe f9f1 	bl	801aec8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801cae6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 801caea:	4b60      	ldr	r3, [pc, #384]	; (801cc6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 801caec:	681a      	ldr	r2, [r3, #0]
 801caee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801caf2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801caf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cafa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cafe:	6809      	ldr	r1, [r1, #0]
 801cb00:	6818      	ldr	r0, [r3, #0]
 801cb02:	f7fe f9e1 	bl	801aec8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801cb06:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 801cb0a:	4b59      	ldr	r3, [pc, #356]	; (801cc70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 801cb0c:	681a      	ldr	r2, [r3, #0]
 801cb0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb12:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cb16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cb1e:	6809      	ldr	r1, [r1, #0]
 801cb20:	6818      	ldr	r0, [r3, #0]
 801cb22:	f7fe f9d1 	bl	801aec8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801cb26:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 801cb2a:	4b52      	ldr	r3, [pc, #328]	; (801cc74 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 801cb2c:	681a      	ldr	r2, [r3, #0]
 801cb2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb32:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cb36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cb3e:	6809      	ldr	r1, [r1, #0]
 801cb40:	6818      	ldr	r0, [r3, #0]
 801cb42:	f7fe f9d1 	bl	801aee8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801cb46:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 801cb4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	691b      	ldr	r3, [r3, #16]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d101      	bne.n	801cb5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 801cb5a:	f005 fe3b 	bl	80227d4 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801cb5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	691b      	ldr	r3, [r3, #16]
 801cb6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801cb6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cb72:	7a1b      	ldrb	r3, [r3, #8]
 801cb74:	2b09      	cmp	r3, #9
 801cb76:	d021      	beq.n	801cbbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 801cb78:	2b09      	cmp	r3, #9
 801cb7a:	dc55      	bgt.n	801cc28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 801cb7c:	2b01      	cmp	r3, #1
 801cb7e:	d002      	beq.n	801cb86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 801cb80:	2b03      	cmp	r3, #3
 801cb82:	d036      	beq.n	801cbf2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 801cb84:	e050      	b.n	801cc28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801cb86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	695c      	ldr	r4, [r3, #20]
 801cb92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cb96:	7a1b      	ldrb	r3, [r3, #8]
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f7fd fa43 	bl	801a024 <TfLiteTypeGetName>
 801cb9e:	4602      	mov	r2, r0
 801cba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cba4:	7a1b      	ldrb	r3, [r3, #8]
 801cba6:	4619      	mov	r1, r3
 801cba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbac:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cbb0:	460b      	mov	r3, r1
 801cbb2:	4931      	ldr	r1, [pc, #196]	; (801cc78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801cbb4:	6800      	ldr	r0, [r0, #0]
 801cbb6:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801cbb8:	2301      	movs	r3, #1
 801cbba:	e04f      	b.n	801cc5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801cbbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbc0:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cbc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbc8:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cbcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cbd0:	9302      	str	r3, [sp, #8]
 801cbd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801cbd6:	9301      	str	r3, [sp, #4]
 801cbd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801cbdc:	9300      	str	r3, [sp, #0]
 801cbde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cbe2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801cbe6:	6809      	ldr	r1, [r1, #0]
 801cbe8:	6800      	ldr	r0, [r0, #0]
 801cbea:	f7ff fe29 	bl	801c840 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 801cbee:	4603      	mov	r3, r0
                               output);
 801cbf0:	e034      	b.n	801cc5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801cbf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	695c      	ldr	r4, [r3, #20]
 801cbfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cc02:	7a1b      	ldrb	r3, [r3, #8]
 801cc04:	4618      	mov	r0, r3
 801cc06:	f7fd fa0d 	bl	801a024 <TfLiteTypeGetName>
 801cc0a:	4602      	mov	r2, r0
 801cc0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cc10:	7a1b      	ldrb	r3, [r3, #8]
 801cc12:	4619      	mov	r1, r3
 801cc14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc18:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cc1c:	460b      	mov	r3, r1
 801cc1e:	4916      	ldr	r1, [pc, #88]	; (801cc78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801cc20:	6800      	ldr	r0, [r0, #0]
 801cc22:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801cc24:	2301      	movs	r3, #1
 801cc26:	e019      	b.n	801cc5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801cc28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	695c      	ldr	r4, [r3, #20]
 801cc34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cc38:	7a1b      	ldrb	r3, [r3, #8]
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	f7fd f9f2 	bl	801a024 <TfLiteTypeGetName>
 801cc40:	4602      	mov	r2, r0
 801cc42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cc46:	7a1b      	ldrb	r3, [r3, #8]
 801cc48:	4619      	mov	r1, r3
 801cc4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc4e:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cc52:	460b      	mov	r3, r1
 801cc54:	4908      	ldr	r1, [pc, #32]	; (801cc78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801cc56:	6800      	ldr	r0, [r0, #0]
 801cc58:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801cc5a:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801cc62:	46bd      	mov	sp, r7
 801cc64:	bd90      	pop	{r4, r7, pc}
 801cc66:	bf00      	nop
 801cc68:	08029be4 	.word	0x08029be4
 801cc6c:	08029be8 	.word	0x08029be8
 801cc70:	08029bec 	.word	0x08029bec
 801cc74:	08029bf0 	.word	0x08029bf0
 801cc78:	08026e3c 	.word	0x08026e3c

0801cc7c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 801cc7c:	b4b0      	push	{r4, r5, r7}
 801cc7e:	b083      	sub	sp, #12
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 801cc84:	4b13      	ldr	r3, [pc, #76]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc86:	4a14      	ldr	r2, [pc, #80]	; (801ccd8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 801cc88:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 801cc8a:	4b12      	ldr	r3, [pc, #72]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 801cc90:	4b10      	ldr	r3, [pc, #64]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc92:	4a12      	ldr	r2, [pc, #72]	; (801ccdc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 801cc94:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 801cc96:	4b0f      	ldr	r3, [pc, #60]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc98:	4a11      	ldr	r2, [pc, #68]	; (801cce0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 801cc9a:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 801cc9c:	4b0d      	ldr	r3, [pc, #52]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cc9e:	2200      	movs	r2, #0
 801cca0:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 801cca2:	4b0c      	ldr	r3, [pc, #48]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cca4:	2200      	movs	r2, #0
 801cca6:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 801cca8:	4b0a      	ldr	r3, [pc, #40]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801ccaa:	2200      	movs	r2, #0
 801ccac:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 801ccae:	4b09      	ldr	r3, [pc, #36]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801ccb0:	2200      	movs	r2, #0
 801ccb2:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	4a07      	ldr	r2, [pc, #28]	; (801ccd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801ccb8:	461c      	mov	r4, r3
 801ccba:	4615      	mov	r5, r2
 801ccbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ccbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ccc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ccc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801ccc8:	6878      	ldr	r0, [r7, #4]
 801ccca:	370c      	adds	r7, #12
 801cccc:	46bd      	mov	sp, r7
 801ccce:	bcb0      	pop	{r4, r5, r7}
 801ccd0:	4770      	bx	lr
 801ccd2:	bf00      	nop
 801ccd4:	2000052c 	.word	0x2000052c
 801ccd8:	0801c5a7 	.word	0x0801c5a7
 801ccdc:	0801c5d5 	.word	0x0801c5d5
 801cce0:	0801ca8d 	.word	0x0801ca8d

0801cce4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b08a      	sub	sp, #40	; 0x28
 801cce8:	af02      	add	r7, sp, #8
 801ccea:	60f8      	str	r0, [r7, #12]
 801ccec:	607b      	str	r3, [r7, #4]
 801ccee:	460b      	mov	r3, r1
 801ccf0:	72fb      	strb	r3, [r7, #11]
 801ccf2:	4613      	mov	r3, r2
 801ccf4:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 801ccf6:	7abb      	ldrb	r3, [r7, #10]
 801ccf8:	2b01      	cmp	r3, #1
 801ccfa:	d03e      	beq.n	801cd7a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 801ccfc:	f04f 0200 	mov.w	r2, #0
 801cd00:	f04f 0300 	mov.w	r3, #0
 801cd04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801cd08:	f107 0310 	add.w	r3, r7, #16
 801cd0c:	9301      	str	r3, [sp, #4]
 801cd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd10:	9300      	str	r3, [sp, #0]
 801cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cd16:	6879      	ldr	r1, [r7, #4]
 801cd18:	68f8      	ldr	r0, [r7, #12]
 801cd1a:	f7fd fcb5 	bl	801a688 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	77fb      	strb	r3, [r7, #31]
 801cd22:	7ffb      	ldrb	r3, [r7, #31]
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d001      	beq.n	801cd2c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 801cd28:	7ffb      	ldrb	r3, [r7, #31]
 801cd2a:	e027      	b.n	801cd7c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 801cd2c:	ed97 7b04 	vldr	d7, [r7, #16]
 801cd30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd34:	3304      	adds	r3, #4
 801cd36:	4619      	mov	r1, r3
 801cd38:	4610      	mov	r0, r2
 801cd3a:	eeb0 0a47 	vmov.f32	s0, s14
 801cd3e:	eef0 0a67 	vmov.f32	s1, s15
 801cd42:	f7fd f9f5 	bl	801a130 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	691a      	ldr	r2, [r3, #16]
 801cd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd4c:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 801cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd50:	691a      	ldr	r2, [r3, #16]
 801cd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd54:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 801cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd58:	691a      	ldr	r2, [r3, #16]
 801cd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd5c:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 801cd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd60:	f103 0208 	add.w	r2, r3, #8
 801cd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd66:	330c      	adds	r3, #12
 801cd68:	7af9      	ldrb	r1, [r7, #11]
 801cd6a:	9300      	str	r3, [sp, #0]
 801cd6c:	4613      	mov	r3, r2
 801cd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cd70:	68f8      	ldr	r0, [r7, #12]
 801cd72:	f7fd fe15 	bl	801a9a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801cd76:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 801cd78:	e000      	b.n	801cd7c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 801cd7a:	2300      	movs	r3, #0
}
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	3720      	adds	r7, #32
 801cd80:	46bd      	mov	sp, r7
 801cd82:	bd80      	pop	{r7, pc}

0801cd84 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801cd84:	b480      	push	{r7}
 801cd86:	b083      	sub	sp, #12
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	6078      	str	r0, [r7, #4]
 801cd8c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd94:	683b      	ldr	r3, [r7, #0]
 801cd96:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cd9a:	429a      	cmp	r2, r3
 801cd9c:	da01      	bge.n	801cda2 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 801cd9e:	683b      	ldr	r3, [r7, #0]
 801cda0:	e000      	b.n	801cda4 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 801cda2:	687b      	ldr	r3, [r7, #4]
    }
 801cda4:	4618      	mov	r0, r3
 801cda6:	370c      	adds	r7, #12
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdae:	4770      	bx	lr

0801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801cdb0:	b580      	push	{r7, lr}
 801cdb2:	b086      	sub	sp, #24
 801cdb4:	af00      	add	r7, sp, #0
 801cdb6:	6078      	str	r0, [r7, #4]
 801cdb8:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 801cdba:	683b      	ldr	r3, [r7, #0]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d003      	beq.n	801cdc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 801cdc0:	683b      	ldr	r3, [r7, #0]
 801cdc2:	685b      	ldr	r3, [r3, #4]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d103      	bne.n	801cdd0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801cdc8:	6878      	ldr	r0, [r7, #4]
 801cdca:	f7fd fe65 	bl	801aa98 <_ZN6tflite12RuntimeShapeC1Ev>
 801cdce:	e00d      	b.n	801cdec <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 801cdd0:	683b      	ldr	r3, [r7, #0]
 801cdd2:	685b      	ldr	r3, [r3, #4]
 801cdd4:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801cdd6:	697b      	ldr	r3, [r7, #20]
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801cddc:	697b      	ldr	r3, [r7, #20]
 801cdde:	3304      	adds	r3, #4
 801cde0:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801cde2:	68fa      	ldr	r2, [r7, #12]
 801cde4:	6939      	ldr	r1, [r7, #16]
 801cde6:	6878      	ldr	r0, [r7, #4]
 801cde8:	f7fd fe64 	bl	801aab4 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801cdec:	6878      	ldr	r0, [r7, #4]
 801cdee:	3718      	adds	r7, #24
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}

0801cdf4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801cdf4:	b580      	push	{r7, lr}
 801cdf6:	b086      	sub	sp, #24
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]
 801cdfc:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801cdfe:	6878      	ldr	r0, [r7, #4]
 801ce00:	f7fd fe81 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ce04:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801ce06:	683b      	ldr	r3, [r7, #0]
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	db03      	blt.n	801ce14 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801ce0c:	683a      	ldr	r2, [r7, #0]
 801ce0e:	68fb      	ldr	r3, [r7, #12]
 801ce10:	429a      	cmp	r2, r3
 801ce12:	db01      	blt.n	801ce18 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801ce14:	f005 fcde 	bl	80227d4 <abort>
  const auto* dims_data = shape.DimsData();
 801ce18:	6878      	ldr	r0, [r7, #4]
 801ce1a:	f7fd ffa6 	bl	801ad6a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801ce1e:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801ce20:	2301      	movs	r3, #1
 801ce22:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801ce24:	2300      	movs	r3, #0
 801ce26:	613b      	str	r3, [r7, #16]
 801ce28:	693a      	ldr	r2, [r7, #16]
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	429a      	cmp	r2, r3
 801ce2e:	da12      	bge.n	801ce56 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801ce30:	693a      	ldr	r2, [r7, #16]
 801ce32:	683b      	ldr	r3, [r7, #0]
 801ce34:	429a      	cmp	r2, r3
 801ce36:	d005      	beq.n	801ce44 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801ce38:	693b      	ldr	r3, [r7, #16]
 801ce3a:	009b      	lsls	r3, r3, #2
 801ce3c:	68ba      	ldr	r2, [r7, #8]
 801ce3e:	4413      	add	r3, r2
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	e000      	b.n	801ce46 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801ce44:	2301      	movs	r3, #1
 801ce46:	697a      	ldr	r2, [r7, #20]
 801ce48:	fb02 f303 	mul.w	r3, r2, r3
 801ce4c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801ce4e:	693b      	ldr	r3, [r7, #16]
 801ce50:	3301      	adds	r3, #1
 801ce52:	613b      	str	r3, [r7, #16]
 801ce54:	e7e8      	b.n	801ce28 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 801ce56:	697b      	ldr	r3, [r7, #20]
}
 801ce58:	4618      	mov	r0, r3
 801ce5a:	3718      	adds	r7, #24
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	bd80      	pop	{r7, pc}

0801ce60 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801ce60:	b590      	push	{r4, r7, lr}
 801ce62:	b087      	sub	sp, #28
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	60f8      	str	r0, [r7, #12]
 801ce68:	60b9      	str	r1, [r7, #8]
 801ce6a:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801ce6c:	68f8      	ldr	r0, [r7, #12]
 801ce6e:	f7fd fe4a 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ce72:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801ce74:	2300      	movs	r3, #0
 801ce76:	617b      	str	r3, [r7, #20]
 801ce78:	697a      	ldr	r2, [r7, #20]
 801ce7a:	693b      	ldr	r3, [r7, #16]
 801ce7c:	429a      	cmp	r2, r3
 801ce7e:	da15      	bge.n	801ceac <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801ce80:	697a      	ldr	r2, [r7, #20]
 801ce82:	68bb      	ldr	r3, [r7, #8]
 801ce84:	429a      	cmp	r2, r3
 801ce86:	d00d      	beq.n	801cea4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801ce88:	6979      	ldr	r1, [r7, #20]
 801ce8a:	68f8      	ldr	r0, [r7, #12]
 801ce8c:	f7fd ff48 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ce90:	4604      	mov	r4, r0
 801ce92:	6979      	ldr	r1, [r7, #20]
 801ce94:	6878      	ldr	r0, [r7, #4]
 801ce96:	f7fd ff43 	bl	801ad20 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	429c      	cmp	r4, r3
 801ce9e:	d001      	beq.n	801cea4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801cea0:	f005 fc98 	bl	80227d4 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801cea4:	697b      	ldr	r3, [r7, #20]
 801cea6:	3301      	adds	r3, #1
 801cea8:	617b      	str	r3, [r7, #20]
 801ceaa:	e7e5      	b.n	801ce78 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801ceac:	68b9      	ldr	r1, [r7, #8]
 801ceae:	68f8      	ldr	r0, [r7, #12]
 801ceb0:	f7ff ffa0 	bl	801cdf4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801ceb4:	4603      	mov	r3, r0
}
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	371c      	adds	r7, #28
 801ceba:	46bd      	mov	sp, r7
 801cebc:	bd90      	pop	{r4, r7, pc}

0801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801cebe:	b580      	push	{r7, lr}
 801cec0:	b082      	sub	sp, #8
 801cec2:	af00      	add	r7, sp, #0
 801cec4:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801cec6:	2100      	movs	r1, #0
 801cec8:	6878      	ldr	r0, [r7, #4]
 801ceca:	f7fe fb23 	bl	801b514 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801cece:	4603      	mov	r3, r0
}
 801ced0:	4618      	mov	r0, r3
 801ced2:	3708      	adds	r7, #8
 801ced4:	46bd      	mov	sp, r7
 801ced6:	bd80      	pop	{r7, pc}

0801ced8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801ced8:	b580      	push	{r7, lr}
 801ceda:	b082      	sub	sp, #8
 801cedc:	af00      	add	r7, sp, #0
 801cede:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801cee0:	6878      	ldr	r0, [r7, #4]
 801cee2:	f000 f805 	bl	801cef0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 801cee6:	4603      	mov	r3, r0
}
 801cee8:	4618      	mov	r0, r3
 801ceea:	3708      	adds	r7, #8
 801ceec:	46bd      	mov	sp, r7
 801ceee:	bd80      	pop	{r7, pc}

0801cef0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b082      	sub	sp, #8
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801cef8:	2101      	movs	r1, #1
 801cefa:	6878      	ldr	r0, [r7, #4]
 801cefc:	f7fe fb0a 	bl	801b514 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801cf00:	4603      	mov	r3, r0
  }
 801cf02:	4618      	mov	r0, r3
 801cf04:	3708      	adds	r7, #8
 801cf06:	46bd      	mov	sp, r7
 801cf08:	bd80      	pop	{r7, pc}

0801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 801cf0a:	b590      	push	{r4, r7, lr}
 801cf0c:	b085      	sub	sp, #20
 801cf0e:	af00      	add	r7, sp, #0
 801cf10:	60f8      	str	r0, [r7, #12]
 801cf12:	60b9      	str	r1, [r7, #8]
 801cf14:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801cf16:	f107 0308 	add.w	r3, r7, #8
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	f7ff f8b4 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cf20:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801cf22:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801cf24:	1d3b      	adds	r3, r7, #4
 801cf26:	4618      	mov	r0, r3
 801cf28:	f7ff f8ae 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cf2c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	461a      	mov	r2, r3
 801cf32:	4621      	mov	r1, r4
 801cf34:	68f8      	ldr	r0, [r7, #12]
 801cf36:	f7ff fb0b 	bl	801c550 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801cf3a:	4603      	mov	r3, r0
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f7ff f831 	bl	801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801cf42:	4603      	mov	r3, r0
}
 801cf44:	4618      	mov	r0, r3
 801cf46:	3714      	adds	r7, #20
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	bd90      	pop	{r4, r7, pc}

0801cf4c <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b082      	sub	sp, #8
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	bf0c      	ite	eq
 801cf5a:	2301      	moveq	r3, #1
 801cf5c:	2300      	movne	r3, #0
 801cf5e:	b2db      	uxtb	r3, r3
 801cf60:	4618      	mov	r0, r3
 801cf62:	f7fe fef9 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801cf66:	4603      	mov	r3, r0
}
 801cf68:	4618      	mov	r0, r3
 801cf6a:	3708      	adds	r7, #8
 801cf6c:	46bd      	mov	sp, r7
 801cf6e:	bd80      	pop	{r7, pc}

0801cf70 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b08a      	sub	sp, #40	; 0x28
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801cf78:	482c      	ldr	r0, [pc, #176]	; (801d02c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801cf7a:	f7ff ffa0 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	4618      	mov	r0, r3
 801cf82:	f7ff f88c 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801cf86:	4603      	mov	r3, r0
 801cf88:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801cf8a:	4829      	ldr	r0, [pc, #164]	; (801d030 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801cf8c:	f7ff ff97 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801cf90:	4603      	mov	r3, r0
 801cf92:	4618      	mov	r0, r3
 801cf94:	f7ff f883 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801cf98:	4603      	mov	r3, r0
 801cf9a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801cf9c:	f000 f86c 	bl	801d078 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 801cfa0:	4603      	mov	r3, r0
 801cfa2:	4619      	mov	r1, r3
 801cfa4:	6878      	ldr	r0, [r7, #4]
 801cfa6:	f000 f870 	bl	801d08a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801cfae:	69f9      	ldr	r1, [r7, #28]
 801cfb0:	69f8      	ldr	r0, [r7, #28]
 801cfb2:	f000 f83f 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801cfba:	69f9      	ldr	r1, [r7, #28]
 801cfbc:	69b8      	ldr	r0, [r7, #24]
 801cfbe:	f000 f839 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cfc2:	4603      	mov	r3, r0
 801cfc4:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801cfc6:	69b9      	ldr	r1, [r7, #24]
 801cfc8:	69b8      	ldr	r0, [r7, #24]
 801cfca:	f000 f833 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cfce:	4603      	mov	r3, r0
 801cfd0:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801cfd2:	6938      	ldr	r0, [r7, #16]
 801cfd4:	f000 f877 	bl	801d0c6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801cfd8:	4603      	mov	r3, r0
 801cfda:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801cfdc:	6979      	ldr	r1, [r7, #20]
 801cfde:	68f8      	ldr	r0, [r7, #12]
 801cfe0:	f000 f853 	bl	801d08a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	6a39      	ldr	r1, [r7, #32]
 801cfe8:	4618      	mov	r0, r3
 801cfea:	f000 f823 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cfee:	4603      	mov	r3, r0
 801cff0:	69b9      	ldr	r1, [r7, #24]
 801cff2:	4618      	mov	r0, r3
 801cff4:	f000 f849 	bl	801d08a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cff8:	4603      	mov	r3, r0
 801cffa:	4618      	mov	r0, r3
 801cffc:	f000 f879 	bl	801d0f2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801d000:	4603      	mov	r3, r0
 801d002:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801d004:	68b9      	ldr	r1, [r7, #8]
 801d006:	69f8      	ldr	r0, [r7, #28]
 801d008:	f000 f83f 	bl	801d08a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d00c:	4603      	mov	r3, r0
 801d00e:	4619      	mov	r1, r3
 801d010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d012:	f000 f80f 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d016:	4603      	mov	r3, r0
 801d018:	4619      	mov	r1, r3
 801d01a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d01c:	f000 f87f 	bl	801d11e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d020:	4603      	mov	r3, r0
}
 801d022:	4618      	mov	r0, r3
 801d024:	3728      	adds	r7, #40	; 0x28
 801d026:	46bd      	mov	sp, r7
 801d028:	bd80      	pop	{r7, pc}
 801d02a:	bf00      	nop
 801d02c:	70f5a894 	.word	0x70f5a894
 801d030:	2aaaaaab 	.word	0x2aaaaaab

0801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d036:	b085      	sub	sp, #20
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
 801d03c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801d03e:	1d3b      	adds	r3, r7, #4
 801d040:	4618      	mov	r0, r3
 801d042:	f7ff f821 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d046:	4603      	mov	r3, r0
 801d048:	681d      	ldr	r5, [r3, #0]
 801d04a:	463b      	mov	r3, r7
 801d04c:	4618      	mov	r0, r3
 801d04e:	f7ff f81b 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d052:	4603      	mov	r3, r0
 801d054:	681e      	ldr	r6, [r3, #0]
 801d056:	f107 030c 	add.w	r3, r7, #12
 801d05a:	4618      	mov	r0, r3
 801d05c:	f7ff f814 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d060:	4604      	mov	r4, r0
 801d062:	4631      	mov	r1, r6
 801d064:	4628      	mov	r0, r5
 801d066:	f7fd fde5 	bl	801ac34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801d06a:	4603      	mov	r3, r0
 801d06c:	6023      	str	r3, [r4, #0]
  return c;
 801d06e:	68fb      	ldr	r3, [r7, #12]
}
 801d070:	4618      	mov	r0, r3
 801d072:	3714      	adds	r7, #20
 801d074:	46bd      	mov	sp, r7
 801d076:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d078 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801d078:	b580      	push	{r7, lr}
 801d07a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801d07c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801d080:	f7ff f80d 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801d084:	4603      	mov	r3, r0
  }
 801d086:	4618      	mov	r0, r3
 801d088:	bd80      	pop	{r7, pc}

0801d08a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801d08a:	b590      	push	{r4, r7, lr}
 801d08c:	b083      	sub	sp, #12
 801d08e:	af00      	add	r7, sp, #0
 801d090:	6078      	str	r0, [r7, #4]
 801d092:	6039      	str	r1, [r7, #0]
 801d094:	1d3b      	adds	r3, r7, #4
 801d096:	4618      	mov	r0, r3
 801d098:	f7fe fff6 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d09c:	4603      	mov	r3, r0
 801d09e:	681c      	ldr	r4, [r3, #0]
 801d0a0:	463b      	mov	r3, r7
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f7fe fff0 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d0a8:	4603      	mov	r3, r0
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	4619      	mov	r1, r3
 801d0ae:	4620      	mov	r0, r4
 801d0b0:	f7fe fe30 	bl	801bd14 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801d0b4:	4603      	mov	r3, r0
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	f7fe ff74 	bl	801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d0bc:	4603      	mov	r3, r0
 801d0be:	4618      	mov	r0, r3
 801d0c0:	370c      	adds	r7, #12
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd90      	pop	{r4, r7, pc}

0801d0c6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801d0c6:	b580      	push	{r7, lr}
 801d0c8:	b082      	sub	sp, #8
 801d0ca:	af00      	add	r7, sp, #0
 801d0cc:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801d0ce:	1d3b      	adds	r3, r7, #4
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	f7fe ffd9 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d0d6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f000 f83d 	bl	801d15a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801d0e0:	4603      	mov	r3, r0
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7fe ff5e 	bl	801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d0e8:	4603      	mov	r3, r0
}
 801d0ea:	4618      	mov	r0, r3
 801d0ec:	3708      	adds	r7, #8
 801d0ee:	46bd      	mov	sp, r7
 801d0f0:	bd80      	pop	{r7, pc}

0801d0f2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801d0f2:	b580      	push	{r7, lr}
 801d0f4:	b082      	sub	sp, #8
 801d0f6:	af00      	add	r7, sp, #0
 801d0f8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801d0fa:	1d3b      	adds	r3, r7, #4
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	f7fe ffc3 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d102:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	4618      	mov	r0, r3
 801d108:	f7ff fee6 	bl	801ced8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801d10c:	4603      	mov	r3, r0
 801d10e:	4618      	mov	r0, r3
 801d110:	f7fe ff48 	bl	801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d114:	4603      	mov	r3, r0
}
 801d116:	4618      	mov	r0, r3
 801d118:	3708      	adds	r7, #8
 801d11a:	46bd      	mov	sp, r7
 801d11c:	bd80      	pop	{r7, pc}

0801d11e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801d11e:	b590      	push	{r4, r7, lr}
 801d120:	b083      	sub	sp, #12
 801d122:	af00      	add	r7, sp, #0
 801d124:	6078      	str	r0, [r7, #4]
 801d126:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801d128:	1d3b      	adds	r3, r7, #4
 801d12a:	4618      	mov	r0, r3
 801d12c:	f7fe ffac 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d130:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d132:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801d134:	463b      	mov	r3, r7
 801d136:	4618      	mov	r0, r3
 801d138:	f7fe ffa6 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d13c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	4619      	mov	r1, r3
 801d142:	4620      	mov	r0, r4
 801d144:	f000 f815 	bl	801d172 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801d148:	4603      	mov	r3, r0
 801d14a:	4618      	mov	r0, r3
 801d14c:	f7fe ff2a 	bl	801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d150:	4603      	mov	r3, r0
}
 801d152:	4618      	mov	r0, r3
 801d154:	370c      	adds	r7, #12
 801d156:	46bd      	mov	sp, r7
 801d158:	bd90      	pop	{r4, r7, pc}

0801d15a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801d15a:	b580      	push	{r7, lr}
 801d15c:	b082      	sub	sp, #8
 801d15e:	af00      	add	r7, sp, #0
 801d160:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801d162:	6878      	ldr	r0, [r7, #4]
 801d164:	f000 f813 	bl	801d18e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801d168:	4603      	mov	r3, r0
}
 801d16a:	4618      	mov	r0, r3
 801d16c:	3708      	adds	r7, #8
 801d16e:	46bd      	mov	sp, r7
 801d170:	bd80      	pop	{r7, pc}

0801d172 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801d172:	b580      	push	{r7, lr}
 801d174:	b082      	sub	sp, #8
 801d176:	af00      	add	r7, sp, #0
 801d178:	6078      	str	r0, [r7, #4]
 801d17a:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801d17c:	6839      	ldr	r1, [r7, #0]
 801d17e:	6878      	ldr	r0, [r7, #4]
 801d180:	f000 f812 	bl	801d1a8 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801d184:	4603      	mov	r3, r0
}
 801d186:	4618      	mov	r0, r3
 801d188:	3708      	adds	r7, #8
 801d18a:	46bd      	mov	sp, r7
 801d18c:	bd80      	pop	{r7, pc}

0801d18e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d18e:	b580      	push	{r7, lr}
 801d190:	b082      	sub	sp, #8
 801d192:	af00      	add	r7, sp, #0
 801d194:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801d196:	2102      	movs	r1, #2
 801d198:	6878      	ldr	r0, [r7, #4]
 801d19a:	f7fe f9bb 	bl	801b514 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801d19e:	4603      	mov	r3, r0
  }
 801d1a0:	4618      	mov	r0, r3
 801d1a2:	3708      	adds	r7, #8
 801d1a4:	46bd      	mov	sp, r7
 801d1a6:	bd80      	pop	{r7, pc}

0801d1a8 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801d1a8:	b580      	push	{r7, lr}
 801d1aa:	b082      	sub	sp, #8
 801d1ac:	af00      	add	r7, sp, #0
 801d1ae:	6078      	str	r0, [r7, #4]
 801d1b0:	6039      	str	r1, [r7, #0]
 801d1b2:	6839      	ldr	r1, [r7, #0]
 801d1b4:	6878      	ldr	r0, [r7, #4]
 801d1b6:	f7fe fdad 	bl	801bd14 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	4618      	mov	r0, r3
 801d1be:	3708      	adds	r7, #8
 801d1c0:	46bd      	mov	sp, r7
 801d1c2:	bd80      	pop	{r7, pc}

0801d1c4 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801d1c4:	b480      	push	{r7}
 801d1c6:	b083      	sub	sp, #12
 801d1c8:	af00      	add	r7, sp, #0
 801d1ca:	6078      	str	r0, [r7, #4]
 801d1cc:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	781a      	ldrb	r2, [r3, #0]
 801d1d2:	683b      	ldr	r3, [r7, #0]
 801d1d4:	781b      	ldrb	r3, [r3, #0]
 801d1d6:	429a      	cmp	r2, r3
 801d1d8:	d201      	bcs.n	801d1de <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801d1da:	683b      	ldr	r3, [r7, #0]
 801d1dc:	e000      	b.n	801d1e0 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801d1de:	687b      	ldr	r3, [r7, #4]
    }
 801d1e0:	4618      	mov	r0, r3
 801d1e2:	370c      	adds	r7, #12
 801d1e4:	46bd      	mov	sp, r7
 801d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1ea:	4770      	bx	lr

0801d1ec <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801d1ec:	b480      	push	{r7}
 801d1ee:	b083      	sub	sp, #12
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	d002      	beq.n	801d200 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	e000      	b.n	801d202 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801d200:	2300      	movs	r3, #0
}
 801d202:	4618      	mov	r0, r3
 801d204:	370c      	adds	r7, #12
 801d206:	46bd      	mov	sp, r7
 801d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d20c:	4770      	bx	lr
	...

0801d210 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801d210:	b580      	push	{r7, lr}
 801d212:	b086      	sub	sp, #24
 801d214:	af00      	add	r7, sp, #0
 801d216:	4603      	mov	r3, r0
 801d218:	6039      	str	r1, [r7, #0]
 801d21a:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801d21c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d220:	11db      	asrs	r3, r3, #7
 801d222:	b21b      	sxth	r3, r3
 801d224:	b29b      	uxth	r3, r3
 801d226:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d22a:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801d22c:	8afb      	ldrh	r3, [r7, #22]
 801d22e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d232:	d306      	bcc.n	801d242 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801d234:	4b1a      	ldr	r3, [pc, #104]	; (801d2a0 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801d236:	4a1b      	ldr	r2, [pc, #108]	; (801d2a4 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 801d238:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801d23c:	481a      	ldr	r0, [pc, #104]	; (801d2a8 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801d23e:	f005 fad1 	bl	80227e4 <__assert_func>
  int16_t offset = value & 0x7f;
 801d242:	88fb      	ldrh	r3, [r7, #6]
 801d244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d248:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 801d24a:	8afb      	ldrh	r3, [r7, #22]
 801d24c:	005b      	lsls	r3, r3, #1
 801d24e:	683a      	ldr	r2, [r7, #0]
 801d250:	4413      	add	r3, r2
 801d252:	881b      	ldrh	r3, [r3, #0]
 801d254:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 801d256:	8afb      	ldrh	r3, [r7, #22]
 801d258:	3301      	adds	r3, #1
 801d25a:	005b      	lsls	r3, r3, #1
 801d25c:	683a      	ldr	r2, [r7, #0]
 801d25e:	4413      	add	r3, r2
 801d260:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d264:	b29a      	uxth	r2, r3
 801d266:	8afb      	ldrh	r3, [r7, #22]
 801d268:	005b      	lsls	r3, r3, #1
 801d26a:	6839      	ldr	r1, [r7, #0]
 801d26c:	440b      	add	r3, r1
 801d26e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d272:	b29b      	uxth	r3, r3
 801d274:	1ad3      	subs	r3, r2, r3
 801d276:	b29b      	uxth	r3, r3
 801d278:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 801d27a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801d27e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d282:	fb02 f303 	mul.w	r3, r2, r3
 801d286:	3340      	adds	r3, #64	; 0x40
 801d288:	11db      	asrs	r3, r3, #7
 801d28a:	60fb      	str	r3, [r7, #12]
  return base + delta;
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	b29a      	uxth	r2, r3
 801d290:	8a7b      	ldrh	r3, [r7, #18]
 801d292:	4413      	add	r3, r2
 801d294:	b29b      	uxth	r3, r3
 801d296:	b21b      	sxth	r3, r3
}
 801d298:	4618      	mov	r0, r3
 801d29a:	3718      	adds	r7, #24
 801d29c:	46bd      	mov	sp, r7
 801d29e:	bd80      	pop	{r7, pc}
 801d2a0:	08026e58 	.word	0x08026e58
 801d2a4:	08026e84 	.word	0x08026e84
 801d2a8:	08026ec8 	.word	0x08026ec8

0801d2ac <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b08a      	sub	sp, #40	; 0x28
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	60f8      	str	r0, [r7, #12]
 801d2b4:	60b9      	str	r1, [r7, #8]
 801d2b6:	607a      	str	r2, [r7, #4]
 801d2b8:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2bc:	687a      	ldr	r2, [r7, #4]
 801d2be:	fb03 f202 	mul.w	r2, r3, r2
 801d2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2c4:	4413      	add	r3, r2
 801d2c6:	005b      	lsls	r3, r3, #1
 801d2c8:	68ba      	ldr	r2, [r7, #8]
 801d2ca:	4413      	add	r3, r2
 801d2cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d2d0:	461a      	mov	r2, r3
 801d2d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d2d6:	1ad3      	subs	r3, r2, r3
 801d2d8:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	6899      	ldr	r1, [r3, #8]
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801d2e2:	461a      	mov	r2, r3
 801d2e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d2e6:	f7fd fdab 	bl	801ae40 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801d2ea:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801d2ec:	6a3b      	ldr	r3, [r7, #32]
 801d2ee:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801d2f2:	337f      	adds	r3, #127	; 0x7f
 801d2f4:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801d2f6:	4b12      	ldr	r3, [pc, #72]	; (801d340 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801d2f8:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801d2fa:	f107 0214 	add.w	r2, r7, #20
 801d2fe:	f107 0310 	add.w	r3, r7, #16
 801d302:	4611      	mov	r1, r2
 801d304:	4618      	mov	r0, r3
 801d306:	f7fd fbb3 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801d30a:	4602      	mov	r2, r0
 801d30c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d310:	61bb      	str	r3, [r7, #24]
 801d312:	f107 0318 	add.w	r3, r7, #24
 801d316:	4619      	mov	r1, r3
 801d318:	4610      	mov	r0, r2
 801d31a:	f7fd fb95 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801d31e:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801d320:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801d322:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d328:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d32c:	4611      	mov	r1, r2
 801d32e:	4618      	mov	r0, r3
 801d330:	f7ff ff6e 	bl	801d210 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801d334:	4603      	mov	r3, r0
}
 801d336:	4618      	mov	r0, r3
 801d338:	3728      	adds	r7, #40	; 0x28
 801d33a:	46bd      	mov	sp, r7
 801d33c:	bd80      	pop	{r7, pc}
 801d33e:	bf00      	nop
 801d340:	ffff8000 	.word	0xffff8000

0801d344 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801d344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d348:	b0ab      	sub	sp, #172	; 0xac
 801d34a:	af02      	add	r7, sp, #8
 801d34c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801d34e:	63b9      	str	r1, [r7, #56]	; 0x38
 801d350:	637a      	str	r2, [r7, #52]	; 0x34
 801d352:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d356:	f7fd fbd6 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d35a:	4603      	mov	r3, r0
 801d35c:	3b01      	subs	r3, #1
 801d35e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801d362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d364:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801d368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d36a:	f7ff fd79 	bl	801ce60 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d36e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801d372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d378:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801d37c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d37e:	f7fe fd31 	bl	801bde4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d382:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801d386:	2300      	movs	r3, #0
 801d388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d38c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d394:	429a      	cmp	r2, r3
 801d396:	f280 8157 	bge.w	801d648 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801d39a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d39e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801d3a2:	2300      	movs	r3, #0
 801d3a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d3a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801d3ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d3b0:	429a      	cmp	r2, r3
 801d3b2:	da1c      	bge.n	801d3ee <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801d3b4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d3b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d3bc:	fb03 f202 	mul.w	r2, r3, r2
 801d3c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d3c4:	4413      	add	r3, r2
 801d3c6:	005a      	lsls	r2, r3, #1
 801d3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3ca:	441a      	add	r2, r3
 801d3cc:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801d3d0:	4611      	mov	r1, r2
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f7ff fcd6 	bl	801cd84 <_ZSt3maxIsERKT_S2_S2_>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801d3e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d3e6:	3301      	adds	r3, #1
 801d3e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d3ec:	e7dc      	b.n	801d3a8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801d3ee:	2300      	movs	r3, #0
 801d3f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801d3f4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d3f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d3fc:	fb02 f303 	mul.w	r3, r2, r3
 801d400:	005a      	lsls	r2, r3, #1
 801d402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d406:	4413      	add	r3, r2
 801d408:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 801d40a:	2300      	movs	r3, #0
 801d40c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d410:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d418:	429a      	cmp	r2, r3
 801d41a:	da28      	bge.n	801d46e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801d41c:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801d420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d424:	005a      	lsls	r2, r3, #1
 801d426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d428:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801d42a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d42e:	9301      	str	r3, [sp, #4]
 801d430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d434:	9300      	str	r3, [sp, #0]
 801d436:	460b      	mov	r3, r1
 801d438:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801d43c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d43e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801d440:	f7ff ff34 	bl	801d2ac <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801d444:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801d446:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 801d448:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d44c:	005a      	lsls	r2, r3, #1
 801d44e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d450:	4413      	add	r3, r2
 801d452:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d456:	461a      	mov	r2, r3
 801d458:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d45c:	4413      	add	r3, r2
 801d45e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 801d462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d466:	3301      	adds	r3, #1
 801d468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d46c:	e7d0      	b.n	801d410 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801d46e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d472:	4618      	mov	r0, r3
 801d474:	f7fe fd84 	bl	801bf80 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801d478:	4603      	mov	r3, r0
 801d47a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801d47e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d482:	17da      	asrs	r2, r3, #31
 801d484:	623b      	str	r3, [r7, #32]
 801d486:	627a      	str	r2, [r7, #36]	; 0x24
 801d488:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d48c:	1e59      	subs	r1, r3, #1
 801d48e:	f1a1 0320 	sub.w	r3, r1, #32
 801d492:	f1c1 0220 	rsb	r2, r1, #32
 801d496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d498:	fa00 f901 	lsl.w	r9, r0, r1
 801d49c:	6a38      	ldr	r0, [r7, #32]
 801d49e:	fa00 f303 	lsl.w	r3, r0, r3
 801d4a2:	ea49 0903 	orr.w	r9, r9, r3
 801d4a6:	6a3b      	ldr	r3, [r7, #32]
 801d4a8:	fa23 f202 	lsr.w	r2, r3, r2
 801d4ac:	ea49 0902 	orr.w	r9, r9, r2
 801d4b0:	6a3b      	ldr	r3, [r7, #32]
 801d4b2:	fa03 f801 	lsl.w	r8, r3, r1
 801d4b6:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801d4ba:	61bb      	str	r3, [r7, #24]
 801d4bc:	f149 0300 	adc.w	r3, r9, #0
 801d4c0:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801d4c2:	f04f 0200 	mov.w	r2, #0
 801d4c6:	f04f 0300 	mov.w	r3, #0
 801d4ca:	69b9      	ldr	r1, [r7, #24]
 801d4cc:	0b8a      	lsrs	r2, r1, #14
 801d4ce:	69f9      	ldr	r1, [r7, #28]
 801d4d0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801d4d4:	69f9      	ldr	r1, [r7, #28]
 801d4d6:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801d4d8:	4613      	mov	r3, r2
 801d4da:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801d4dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4de:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801d4e2:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801d4e4:	4b5b      	ldr	r3, [pc, #364]	; (801d654 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 801d4e6:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 801d4e8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d4ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d4f0:	4611      	mov	r1, r2
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	f7fd fabc 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801d4f8:	4602      	mov	r2, r0
 801d4fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d4fe:	657b      	str	r3, [r7, #84]	; 0x54
 801d500:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d504:	4619      	mov	r1, r3
 801d506:	4610      	mov	r0, r2
 801d508:	f7fd fa9e 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801d50c:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801d50e:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 801d510:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801d514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 801d518:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801d51c:	4611      	mov	r1, r2
 801d51e:	4618      	mov	r0, r3
 801d520:	f7ff fe76 	bl	801d210 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801d524:	4603      	mov	r3, r0
 801d526:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801d52a:	2300      	movs	r3, #0
 801d52c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d530:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d538:	429a      	cmp	r2, r3
 801d53a:	da7f      	bge.n	801d63c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 801d53c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d540:	f1c3 031f 	rsb	r3, r3, #31
 801d544:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 801d548:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801d54c:	1e5a      	subs	r2, r3, #1
 801d54e:	2301      	movs	r3, #1
 801d550:	4093      	lsls	r3, r2
 801d552:	17da      	asrs	r2, r3, #31
 801d554:	603b      	str	r3, [r7, #0]
 801d556:	607a      	str	r2, [r7, #4]
 801d558:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d55c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d564:	005a      	lsls	r2, r3, #1
 801d566:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d568:	4413      	add	r3, r2
 801d56a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d56e:	b21b      	sxth	r3, r3
 801d570:	17da      	asrs	r2, r3, #31
 801d572:	613b      	str	r3, [r7, #16]
 801d574:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801d576:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801d57a:	17da      	asrs	r2, r3, #31
 801d57c:	60bb      	str	r3, [r7, #8]
 801d57e:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d580:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d584:	460b      	mov	r3, r1
 801d586:	68ba      	ldr	r2, [r7, #8]
 801d588:	fb02 f203 	mul.w	r2, r2, r3
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801d592:	4601      	mov	r1, r0
 801d594:	fb01 f303 	mul.w	r3, r1, r3
 801d598:	4413      	add	r3, r2
 801d59a:	693a      	ldr	r2, [r7, #16]
 801d59c:	68b9      	ldr	r1, [r7, #8]
 801d59e:	fba2 ab01 	umull	sl, fp, r2, r1
 801d5a2:	445b      	add	r3, fp
 801d5a4:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801d5a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801d5aa:	eb1a 0502 	adds.w	r5, sl, r2
 801d5ae:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801d5b2:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 801d5b6:	f1c1 0320 	rsb	r3, r1, #32
 801d5ba:	f1b1 0220 	subs.w	r2, r1, #32
 801d5be:	fa25 f001 	lsr.w	r0, r5, r1
 801d5c2:	62b8      	str	r0, [r7, #40]	; 0x28
 801d5c4:	fa06 f303 	lsl.w	r3, r6, r3
 801d5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d5ca:	ea40 0003 	orr.w	r0, r0, r3
 801d5ce:	62b8      	str	r0, [r7, #40]	; 0x28
 801d5d0:	d404      	bmi.n	801d5dc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801d5d2:	fa46 f202 	asr.w	r2, r6, r2
 801d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5d8:	4313      	orrs	r3, r2
 801d5da:	62bb      	str	r3, [r7, #40]	; 0x28
 801d5dc:	fa46 f301 	asr.w	r3, r6, r1
 801d5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5e4:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801d5e6:	2300      	movs	r3, #0
 801d5e8:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801d5ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801d5ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d5f2:	4611      	mov	r1, r2
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f7fd fa3b 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801d5fa:	4602      	mov	r2, r0
 801d5fc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d600:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d606:	4619      	mov	r1, r3
 801d608:	4610      	mov	r0, r2
 801d60a:	f7fd fa1d 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801d60e:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801d610:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801d612:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d61a:	fb03 f202 	mul.w	r2, r3, r2
 801d61e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d622:	4413      	add	r3, r2
 801d624:	005a      	lsls	r2, r3, #1
 801d626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d62a:	441a      	add	r2, r3
 801d62c:	b20b      	sxth	r3, r1
 801d62e:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801d630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d634:	3301      	adds	r3, #1
 801d636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d63a:	e779      	b.n	801d530 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 801d63c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d640:	3301      	adds	r3, #1
 801d642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d646:	e6a1      	b.n	801d38c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 801d648:	bf00      	nop
 801d64a:	37a4      	adds	r7, #164	; 0xa4
 801d64c:	46bd      	mov	sp, r7
 801d64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d652:	bf00      	nop
 801d654:	ffff8000 	.word	0xffff8000

0801d658 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801d658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d65c:	b0bc      	sub	sp, #240	; 0xf0
 801d65e:	af04      	add	r7, sp, #16
 801d660:	60f8      	str	r0, [r7, #12]
 801d662:	60b9      	str	r1, [r7, #8]
 801d664:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	7a1b      	ldrb	r3, [r3, #8]
 801d66a:	2b03      	cmp	r3, #3
 801d66c:	d127      	bne.n	801d6be <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 801d66e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d672:	68f9      	ldr	r1, [r7, #12]
 801d674:	4618      	mov	r0, r3
 801d676:	f7ff fb9b 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801d67a:	68f8      	ldr	r0, [r7, #12]
 801d67c:	f7fe f98e 	bl	801b99c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801d680:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 801d682:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d686:	68b9      	ldr	r1, [r7, #8]
 801d688:	4618      	mov	r0, r3
 801d68a:	f7ff fb91 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801d68e:	68b8      	ldr	r0, [r7, #8]
 801d690:	f7fe f993 	bl	801b9ba <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801d694:	4602      	mov	r2, r0
 801d696:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d69a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801d69e:	9200      	str	r2, [sp, #0]
 801d6a0:	4622      	mov	r2, r4
 801d6a2:	6878      	ldr	r0, [r7, #4]
 801d6a4:	f000 f930 	bl	801d908 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 801d6a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f7fd fa14 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801d6b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7fd fa0f 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
 801d6bc:	e080      	b.n	801d7c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	7a1b      	ldrb	r3, [r3, #8]
 801d6c2:	2b09      	cmp	r3, #9
 801d6c4:	d153      	bne.n	801d76e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 801d6c6:	68bb      	ldr	r3, [r7, #8]
 801d6c8:	7a1b      	ldrb	r3, [r3, #8]
 801d6ca:	2b07      	cmp	r3, #7
 801d6cc:	d077      	beq.n	801d7be <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801d6ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d6d2:	68f9      	ldr	r1, [r7, #12]
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	f7ff fb6b 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801d6da:	f107 0314 	add.w	r3, r7, #20
 801d6de:	68b9      	ldr	r1, [r7, #8]
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f7ff fb65 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d6e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	f7fd fa0b 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d6f0:	4603      	mov	r3, r0
 801d6f2:	3b01      	subs	r3, #1
 801d6f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801d6f8:	f107 0214 	add.w	r2, r7, #20
 801d6fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d700:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d704:	4618      	mov	r0, r3
 801d706:	f7ff fbab 	bl	801ce60 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d70a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801d70e:	f107 0214 	add.w	r2, r7, #20
 801d712:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801d716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d71a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d71e:	f7fe fb61 	bl	801bde4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d722:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801d726:	68f8      	ldr	r0, [r7, #12]
 801d728:	f7fe f8cc 	bl	801b8c4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d72c:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	689e      	ldr	r6, [r3, #8]
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801d73a:	68b8      	ldr	r0, [r7, #8]
 801d73c:	f7fe f8d1 	bl	801b8e2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801d740:	4603      	mov	r3, r0
 801d742:	9302      	str	r3, [sp, #8]
 801d744:	9501      	str	r5, [sp, #4]
 801d746:	9400      	str	r4, [sp, #0]
 801d748:	4633      	mov	r3, r6
 801d74a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801d74e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801d752:	4640      	mov	r0, r8
 801d754:	f7f6 fe3c 	bl	80143d0 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801d758:	f107 0314 	add.w	r3, r7, #20
 801d75c:	4618      	mov	r0, r3
 801d75e:	f7fd f9bc 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801d762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d766:	4618      	mov	r0, r3
 801d768:	f7fd f9b7 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
 801d76c:	e028      	b.n	801d7c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 801d76e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d772:	68f9      	ldr	r1, [r7, #12]
 801d774:	4618      	mov	r0, r3
 801d776:	f7ff fb1b 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801d77a:	68f8      	ldr	r0, [r7, #12]
 801d77c:	f7fe fb61 	bl	801be42 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801d780:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 801d782:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d786:	68b9      	ldr	r1, [r7, #8]
 801d788:	4618      	mov	r0, r3
 801d78a:	f7ff fb11 	bl	801cdb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801d78e:	68b8      	ldr	r0, [r7, #8]
 801d790:	f7ff fd2c 	bl	801d1ec <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801d794:	4602      	mov	r2, r0
 801d796:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d79a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801d79e:	9200      	str	r2, [sp, #0]
 801d7a0:	4622      	mov	r2, r4
 801d7a2:	6878      	ldr	r0, [r7, #4]
 801d7a4:	f7ff fdce 	bl	801d344 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 801d7a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	f7fd f994 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801d7b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	f7fd f98f 	bl	801aada <_ZN6tflite12RuntimeShapeD1Ev>
 801d7bc:	e000      	b.n	801d7c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 801d7be:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 801d7c0:	37e0      	adds	r7, #224	; 0xe0
 801d7c2:	46bd      	mov	sp, r7
 801d7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d7c8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801d7c8:	b5b0      	push	{r4, r5, r7, lr}
 801d7ca:	b09e      	sub	sp, #120	; 0x78
 801d7cc:	af00      	add	r7, sp, #0
 801d7ce:	6078      	str	r0, [r7, #4]
 801d7d0:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801d7d2:	2200      	movs	r2, #0
 801d7d4:	6839      	ldr	r1, [r7, #0]
 801d7d6:	6878      	ldr	r0, [r7, #4]
 801d7d8:	f7fd fb76 	bl	801aec8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d7dc:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801d7de:	2200      	movs	r2, #0
 801d7e0:	6839      	ldr	r1, [r7, #0]
 801d7e2:	6878      	ldr	r0, [r7, #4]
 801d7e4:	f7fd fb80 	bl	801aee8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801d7e8:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801d7ea:	683b      	ldr	r3, [r7, #0]
 801d7ec:	691b      	ldr	r3, [r3, #16]
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d101      	bne.n	801d7f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801d7f2:	f004 ffef 	bl	80227d4 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801d7f6:	683b      	ldr	r3, [r7, #0]
 801d7f8:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801d7fa:	f107 0408 	add.w	r4, r7, #8
 801d7fe:	461d      	mov	r5, r3
 801d800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d80a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d80c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d810:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801d814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d816:	7a1b      	ldrb	r3, [r3, #8]
 801d818:	3b01      	subs	r3, #1
 801d81a:	2b08      	cmp	r3, #8
 801d81c:	d84a      	bhi.n	801d8b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 801d81e:	a201      	add	r2, pc, #4	; (adr r2, 801d824 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 801d820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d824:	0801d849 	.word	0x0801d849
 801d828:	0801d8b5 	.word	0x0801d8b5
 801d82c:	0801d879 	.word	0x0801d879
 801d830:	0801d8b5 	.word	0x0801d8b5
 801d834:	0801d8b5 	.word	0x0801d8b5
 801d838:	0801d8b5 	.word	0x0801d8b5
 801d83c:	0801d897 	.word	0x0801d897
 801d840:	0801d8b5 	.word	0x0801d8b5
 801d844:	0801d867 	.word	0x0801d867
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	695c      	ldr	r4, [r3, #20]
 801d84c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d84e:	7a1b      	ldrb	r3, [r3, #8]
 801d850:	4618      	mov	r0, r3
 801d852:	f7fc fbe7 	bl	801a024 <TfLiteTypeGetName>
 801d856:	4602      	mov	r2, r0
 801d858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d85a:	7a1b      	ldrb	r3, [r3, #8]
 801d85c:	491e      	ldr	r1, [pc, #120]	; (801d8d8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d85e:	6878      	ldr	r0, [r7, #4]
 801d860:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d862:	2301      	movs	r3, #1
 801d864:	e034      	b.n	801d8d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 801d866:	f107 0308 	add.w	r3, r7, #8
 801d86a:	461a      	mov	r2, r3
 801d86c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d86e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d870:	f7ff fef2 	bl	801d658 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801d874:	2300      	movs	r3, #0
 801d876:	e02b      	b.n	801d8d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	695c      	ldr	r4, [r3, #20]
 801d87c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d87e:	7a1b      	ldrb	r3, [r3, #8]
 801d880:	4618      	mov	r0, r3
 801d882:	f7fc fbcf 	bl	801a024 <TfLiteTypeGetName>
 801d886:	4602      	mov	r2, r0
 801d888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d88a:	7a1b      	ldrb	r3, [r3, #8]
 801d88c:	4912      	ldr	r1, [pc, #72]	; (801d8d8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d88e:	6878      	ldr	r0, [r7, #4]
 801d890:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d892:	2301      	movs	r3, #1
 801d894:	e01c      	b.n	801d8d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	695c      	ldr	r4, [r3, #20]
 801d89a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d89c:	7a1b      	ldrb	r3, [r3, #8]
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7fc fbc0 	bl	801a024 <TfLiteTypeGetName>
 801d8a4:	4602      	mov	r2, r0
 801d8a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d8a8:	7a1b      	ldrb	r3, [r3, #8]
 801d8aa:	490b      	ldr	r1, [pc, #44]	; (801d8d8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d8ac:	6878      	ldr	r0, [r7, #4]
 801d8ae:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d8b0:	2301      	movs	r3, #1
 801d8b2:	e00d      	b.n	801d8d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	695c      	ldr	r4, [r3, #20]
 801d8b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d8ba:	7a1b      	ldrb	r3, [r3, #8]
 801d8bc:	4618      	mov	r0, r3
 801d8be:	f7fc fbb1 	bl	801a024 <TfLiteTypeGetName>
 801d8c2:	4602      	mov	r2, r0
 801d8c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d8c6:	7a1b      	ldrb	r3, [r3, #8]
 801d8c8:	4903      	ldr	r1, [pc, #12]	; (801d8d8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d8ca:	6878      	ldr	r0, [r7, #4]
 801d8cc:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d8ce:	2301      	movs	r3, #1
  }
}
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	3778      	adds	r7, #120	; 0x78
 801d8d4:	46bd      	mov	sp, r7
 801d8d6:	bdb0      	pop	{r4, r5, r7, pc}
 801d8d8:	08026f50 	.word	0x08026f50

0801d8dc <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801d8dc:	b4b0      	push	{r4, r5, r7}
 801d8de:	b083      	sub	sp, #12
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	4a07      	ldr	r2, [pc, #28]	; (801d904 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801d8e8:	461c      	mov	r4, r3
 801d8ea:	4615      	mov	r5, r2
 801d8ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d8ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d8f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801d8f8:	6878      	ldr	r0, [r7, #4]
 801d8fa:	370c      	adds	r7, #12
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bcb0      	pop	{r4, r5, r7}
 801d900:	4770      	bx	lr
 801d902:	bf00      	nop
 801d904:	08026f6c 	.word	0x08026f6c

0801d908 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801d908:	b590      	push	{r4, r7, lr}
 801d90a:	b09f      	sub	sp, #124	; 0x7c
 801d90c:	af00      	add	r7, sp, #0
 801d90e:	60f8      	str	r0, [r7, #12]
 801d910:	60b9      	str	r1, [r7, #8]
 801d912:	607a      	str	r2, [r7, #4]
 801d914:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	689b      	ldr	r3, [r3, #8]
 801d91a:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	68db      	ldr	r3, [r3, #12]
 801d920:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	699b      	ldr	r3, [r3, #24]
 801d926:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d928:	68b8      	ldr	r0, [r7, #8]
 801d92a:	f7fd f8ec 	bl	801ab06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d92e:	4603      	mov	r3, r0
 801d930:	3b01      	subs	r3, #1
 801d932:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801d934:	683a      	ldr	r2, [r7, #0]
 801d936:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d938:	68b8      	ldr	r0, [r7, #8]
 801d93a:	f7ff fa91 	bl	801ce60 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d93e:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801d940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d942:	683a      	ldr	r2, [r7, #0]
 801d944:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d946:	68b8      	ldr	r0, [r7, #8]
 801d948:	f7fe fa4c 	bl	801bde4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d94c:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801d94e:	2300      	movs	r3, #0
 801d950:	677b      	str	r3, [r7, #116]	; 0x74
 801d952:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d956:	429a      	cmp	r2, r3
 801d958:	f280 80ed 	bge.w	801db36 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801d95c:	2300      	movs	r3, #0
 801d95e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801d962:	2300      	movs	r3, #0
 801d964:	673b      	str	r3, [r7, #112]	; 0x70
 801d966:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d96a:	429a      	cmp	r2, r3
 801d96c:	da16      	bge.n	801d99c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801d96e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d972:	fb03 f202 	mul.w	r2, r3, r2
 801d976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d978:	4413      	add	r3, r2
 801d97a:	461a      	mov	r2, r3
 801d97c:	687b      	ldr	r3, [r7, #4]
 801d97e:	441a      	add	r2, r3
 801d980:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801d984:	4611      	mov	r1, r2
 801d986:	4618      	mov	r0, r3
 801d988:	f7ff fc1c 	bl	801d1c4 <_ZSt3maxIhERKT_S2_S2_>
 801d98c:	4603      	mov	r3, r0
 801d98e:	781b      	ldrb	r3, [r3, #0]
 801d990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801d994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d996:	3301      	adds	r3, #1
 801d998:	673b      	str	r3, [r7, #112]	; 0x70
 801d99a:	e7e4      	b.n	801d966 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801d99c:	f000 f8cf 	bl	801db3e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801d9a0:	4603      	mov	r3, r0
 801d9a2:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801d9a4:	2300      	movs	r3, #0
 801d9a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d9a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9ac:	429a      	cmp	r2, r3
 801d9ae:	da2f      	bge.n	801da10 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801d9b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d9b4:	fb03 f202 	mul.w	r2, r3, r2
 801d9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d9ba:	4413      	add	r3, r2
 801d9bc:	461a      	mov	r2, r3
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	4413      	add	r3, r2
 801d9c2:	781b      	ldrb	r3, [r3, #0]
 801d9c4:	461a      	mov	r2, r3
 801d9c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801d9ca:	1ad3      	subs	r3, r2, r3
 801d9cc:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801d9ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d9d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d9d2:	429a      	cmp	r2, r3
 801d9d4:	db18      	blt.n	801da08 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801d9d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d9d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d9da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d9dc:	f7fe fa92 	bl	801bf04 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801d9e0:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801d9e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d9e4:	f000 f8b3 	bl	801db4e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801d9e8:	4603      	mov	r3, r0
 801d9ea:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801d9ec:	69f8      	ldr	r0, [r7, #28]
 801d9ee:	f000 f8dd 	bl	801dbac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801d9f2:	4603      	mov	r3, r0
 801d9f4:	4618      	mov	r0, r3
 801d9f6:	f000 fa21 	bl	801de3c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801d9fa:	4603      	mov	r3, r0
 801d9fc:	4619      	mov	r1, r3
 801d9fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801da00:	f000 f8b6 	bl	801db70 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801da04:	4603      	mov	r3, r0
 801da06:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801da08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801da0a:	3301      	adds	r3, #1
 801da0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801da0e:	e7cb      	b.n	801d9a8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801da10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801da14:	4618      	mov	r0, r3
 801da16:	f000 fa2b 	bl	801de70 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801da1a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801da22:	210c      	movs	r1, #12
 801da24:	4618      	mov	r0, r3
 801da26:	f7fe fa80 	bl	801bf2a <_ZN6tflite13GetReciprocalEliPi>
 801da2a:	4603      	mov	r3, r0
 801da2c:	4618      	mov	r0, r3
 801da2e:	f7fe fab9 	bl	801bfa4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801da32:	4603      	mov	r3, r0
 801da34:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801da36:	2300      	movs	r3, #0
 801da38:	66bb      	str	r3, [r7, #104]	; 0x68
 801da3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801da3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da3e:	429a      	cmp	r2, r3
 801da40:	da75      	bge.n	801db2e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801da42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801da46:	fb03 f202 	mul.w	r2, r3, r2
 801da4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801da4c:	4413      	add	r3, r2
 801da4e:	461a      	mov	r2, r3
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	4413      	add	r3, r2
 801da54:	781b      	ldrb	r3, [r3, #0]
 801da56:	461a      	mov	r2, r3
 801da58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801da5c:	1ad3      	subs	r3, r2, r3
 801da5e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801da60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801da62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801da64:	429a      	cmp	r2, r3
 801da66:	db50      	blt.n	801db0a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801da68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801da6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801da6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801da6e:	f7fe fa49 	bl	801bf04 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801da72:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801da74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801da76:	f000 f86a 	bl	801db4e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801da7a:	4603      	mov	r3, r0
 801da7c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801da7e:	69b8      	ldr	r0, [r7, #24]
 801da80:	f000 f894 	bl	801dbac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801da84:	4603      	mov	r3, r0
 801da86:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801da88:	6979      	ldr	r1, [r7, #20]
 801da8a:	6a38      	ldr	r0, [r7, #32]
 801da8c:	f7ff fad2 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801da90:	4603      	mov	r3, r0
 801da92:	633b      	str	r3, [r7, #48]	; 0x30
 801da94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801da98:	4618      	mov	r0, r3
 801da9a:	f7fe faf5 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801da9e:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801daa0:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801daa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801daa4:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801daa6:	4611      	mov	r1, r2
 801daa8:	4618      	mov	r0, r3
 801daaa:	f7fd fd33 	bl	801b514 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801daae:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801dab0:	f7fc fd07 	bl	801a4c2 <_ZNSt14numeric_limitsIhE3minEv>
 801dab4:	4603      	mov	r3, r0
 801dab6:	461a      	mov	r2, r3
            unsat_output +
 801dab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801daba:	4413      	add	r3, r2
        const int32_t shifted_output =
 801dabc:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801dabe:	f7fc fd08 	bl	801a4d2 <_ZNSt14numeric_limitsIhE3maxEv>
 801dac2:	4603      	mov	r3, r0
 801dac4:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801dac6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801daca:	f107 0310 	add.w	r3, r7, #16
 801dace:	4611      	mov	r1, r2
 801dad0:	4618      	mov	r0, r3
 801dad2:	f7fc ffb9 	bl	801aa48 <_ZSt3minIlERKT_S2_S2_>
 801dad6:	4604      	mov	r4, r0
 801dad8:	f7fc fcf3 	bl	801a4c2 <_ZNSt14numeric_limitsIhE3minEv>
 801dadc:	4603      	mov	r3, r0
 801dade:	63bb      	str	r3, [r7, #56]	; 0x38
 801dae0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dae4:	4619      	mov	r1, r3
 801dae6:	4620      	mov	r0, r4
 801dae8:	f7fc ffc2 	bl	801aa70 <_ZSt3maxIlERKT_S2_S2_>
 801daec:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801daee:	6819      	ldr	r1, [r3, #0]
 801daf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801daf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801daf4:	fb03 f202 	mul.w	r2, r3, r2
 801daf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dafa:	4413      	add	r3, r2
 801dafc:	461a      	mov	r2, r3
 801dafe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801db02:	4413      	add	r3, r2
 801db04:	b2ca      	uxtb	r2, r1
 801db06:	701a      	strb	r2, [r3, #0]
 801db08:	e00d      	b.n	801db26 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801db0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801db0e:	fb03 f202 	mul.w	r2, r3, r2
 801db12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801db14:	4413      	add	r3, r2
 801db16:	461a      	mov	r2, r3
 801db18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801db1c:	189c      	adds	r4, r3, r2
 801db1e:	f7fc fcd0 	bl	801a4c2 <_ZNSt14numeric_limitsIhE3minEv>
 801db22:	4603      	mov	r3, r0
 801db24:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801db26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801db28:	3301      	adds	r3, #1
 801db2a:	66bb      	str	r3, [r7, #104]	; 0x68
 801db2c:	e785      	b.n	801da3a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801db2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db30:	3301      	adds	r3, #1
 801db32:	677b      	str	r3, [r7, #116]	; 0x74
 801db34:	e70d      	b.n	801d952 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801db36:	bf00      	nop
 801db38:	377c      	adds	r7, #124	; 0x7c
 801db3a:	46bd      	mov	sp, r7
 801db3c:	bd90      	pop	{r4, r7, pc}

0801db3e <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801db3e:	b580      	push	{r7, lr}
 801db40:	af00      	add	r7, sp, #0
 801db42:	2000      	movs	r0, #0
 801db44:	f000 f99f 	bl	801de86 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801db48:	4603      	mov	r3, r0
 801db4a:	4618      	mov	r0, r3
 801db4c:	bd80      	pop	{r7, pc}

0801db4e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801db4e:	b580      	push	{r7, lr}
 801db50:	b084      	sub	sp, #16
 801db52:	af00      	add	r7, sp, #0
 801db54:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801db56:	f107 030c 	add.w	r3, r7, #12
 801db5a:	4618      	mov	r0, r3
 801db5c:	f000 f9a7 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801db60:	4602      	mov	r2, r0
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	6013      	str	r3, [r2, #0]
    return retval;
 801db66:	68fb      	ldr	r3, [r7, #12]
  }
 801db68:	4618      	mov	r0, r3
 801db6a:	3710      	adds	r7, #16
 801db6c:	46bd      	mov	sp, r7
 801db6e:	bd80      	pop	{r7, pc}

0801db70 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801db70:	b590      	push	{r4, r7, lr}
 801db72:	b083      	sub	sp, #12
 801db74:	af00      	add	r7, sp, #0
 801db76:	6078      	str	r0, [r7, #4]
 801db78:	6039      	str	r1, [r7, #0]
 801db7a:	1d3b      	adds	r3, r7, #4
 801db7c:	4618      	mov	r0, r3
 801db7e:	f000 f977 	bl	801de70 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801db82:	4603      	mov	r3, r0
 801db84:	681c      	ldr	r4, [r3, #0]
 801db86:	463b      	mov	r3, r7
 801db88:	4618      	mov	r0, r3
 801db8a:	f000 f971 	bl	801de70 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801db8e:	4603      	mov	r3, r0
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	4619      	mov	r1, r3
 801db94:	4620      	mov	r0, r4
 801db96:	f7fe f8bd 	bl	801bd14 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801db9a:	4603      	mov	r3, r0
 801db9c:	4618      	mov	r0, r3
 801db9e:	f000 f991 	bl	801dec4 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801dba2:	4603      	mov	r3, r0
 801dba4:	4618      	mov	r0, r3
 801dba6:	370c      	adds	r7, #12
 801dba8:	46bd      	mov	sp, r7
 801dbaa:	bd90      	pop	{r4, r7, pc}

0801dbac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 801dbac:	b590      	push	{r4, r7, lr}
 801dbae:	b091      	sub	sp, #68	; 0x44
 801dbb0:	af00      	add	r7, sp, #0
 801dbb2:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 801dbb4:	f000 f997 	bl	801dee6 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 801dbb8:	4603      	mov	r3, r0
 801dbba:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 801dbbc:	2001      	movs	r0, #1
 801dbbe:	f000 f99b 	bl	801def8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801dbc2:	4603      	mov	r3, r0
 801dbc4:	4619      	mov	r1, r3
 801dbc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801dbc8:	f000 f9aa 	bl	801df20 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dbcc:	4603      	mov	r3, r0
 801dbce:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801dbd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dbd2:	6878      	ldr	r0, [r7, #4]
 801dbd4:	f000 f9c2 	bl	801df5c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dbd8:	4603      	mov	r3, r0
 801dbda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801dbdc:	4618      	mov	r0, r3
 801dbde:	f000 f99f 	bl	801df20 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dbe2:	4603      	mov	r3, r0
 801dbe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 801dbe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dbe8:	f000 f9d6 	bl	801df98 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801dbec:	4603      	mov	r3, r0
 801dbee:	4618      	mov	r0, r3
 801dbf0:	f7ff f9be 	bl	801cf70 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 801dbf4:	4603      	mov	r3, r0
 801dbf6:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801dbf8:	6879      	ldr	r1, [r7, #4]
 801dbfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dbfc:	f000 f990 	bl	801df20 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dc00:	4603      	mov	r3, r0
 801dc02:	63bb      	str	r3, [r7, #56]	; 0x38
 801dc04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dc08:	4618      	mov	r0, r3
 801dc0a:	f000 f950 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801dc0e:	4603      	mov	r3, r0
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801dc14:	4883      	ldr	r0, [pc, #524]	; (801de24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801dc16:	f7ff f952 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dc1a:	4603      	mov	r3, r0
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	f7fe fa3e 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dc22:	4603      	mov	r3, r0
 801dc24:	627b      	str	r3, [r7, #36]	; 0x24
 801dc26:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801dc2a:	f7fe f837 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dc2e:	4603      	mov	r3, r0
 801dc30:	4619      	mov	r1, r3
 801dc32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dc34:	f7fe f83d 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dc38:	4603      	mov	r3, r0
 801dc3a:	4618      	mov	r0, r3
 801dc3c:	f7fe f88c 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dc40:	4604      	mov	r4, r0
 801dc42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dc44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dc46:	f7ff f9f5 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc4a:	4603      	mov	r3, r0
 801dc4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dc4e:	4619      	mov	r1, r3
 801dc50:	4620      	mov	r0, r4
 801dc52:	f7ff f95a 	bl	801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dc56:	4603      	mov	r3, r0
 801dc58:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801dc5a:	4873      	ldr	r0, [pc, #460]	; (801de28 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 801dc5c:	f7ff f92f 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dc60:	4603      	mov	r3, r0
 801dc62:	4618      	mov	r0, r3
 801dc64:	f7fe fa1b 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dc68:	4603      	mov	r3, r0
 801dc6a:	623b      	str	r3, [r7, #32]
 801dc6c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801dc70:	f7fe f814 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dc74:	4603      	mov	r3, r0
 801dc76:	4619      	mov	r1, r3
 801dc78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dc7a:	f7fe f81a 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dc7e:	4603      	mov	r3, r0
 801dc80:	4618      	mov	r0, r3
 801dc82:	f7fe f869 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dc86:	4604      	mov	r4, r0
 801dc88:	6a39      	ldr	r1, [r7, #32]
 801dc8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dc8c:	f7ff f9d2 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc90:	4603      	mov	r3, r0
 801dc92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dc94:	4619      	mov	r1, r3
 801dc96:	4620      	mov	r0, r4
 801dc98:	f7ff f937 	bl	801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dc9c:	4603      	mov	r3, r0
 801dc9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801dca0:	4862      	ldr	r0, [pc, #392]	; (801de2c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801dca2:	f7ff f90c 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dca6:	4603      	mov	r3, r0
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f7fe f9f8 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	61fb      	str	r3, [r7, #28]
 801dcb2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801dcb6:	f7fd fff1 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dcba:	4603      	mov	r3, r0
 801dcbc:	4619      	mov	r1, r3
 801dcbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dcc0:	f7fd fff7 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	f7fe f846 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dccc:	4604      	mov	r4, r0
 801dcce:	69f9      	ldr	r1, [r7, #28]
 801dcd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dcd2:	f7ff f9af 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dcda:	4619      	mov	r1, r3
 801dcdc:	4620      	mov	r0, r4
 801dcde:	f7ff f914 	bl	801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dce2:	4603      	mov	r3, r0
 801dce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 801dce6:	4852      	ldr	r0, [pc, #328]	; (801de30 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 801dce8:	f7ff f8e9 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dcec:	4603      	mov	r3, r0
 801dcee:	4618      	mov	r0, r3
 801dcf0:	f7fe f9d5 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dcf4:	4603      	mov	r3, r0
 801dcf6:	61bb      	str	r3, [r7, #24]
 801dcf8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801dcfc:	f7fd ffce 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dd00:	4603      	mov	r3, r0
 801dd02:	4619      	mov	r1, r3
 801dd04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dd06:	f7fd ffd4 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dd0a:	4603      	mov	r3, r0
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	f7fe f823 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dd12:	4604      	mov	r4, r0
 801dd14:	69b9      	ldr	r1, [r7, #24]
 801dd16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd18:	f7ff f98c 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dd1c:	4603      	mov	r3, r0
 801dd1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd20:	4619      	mov	r1, r3
 801dd22:	4620      	mov	r0, r4
 801dd24:	f7ff f8f1 	bl	801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dd28:	4603      	mov	r3, r0
 801dd2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 801dd2c:	4841      	ldr	r0, [pc, #260]	; (801de34 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801dd2e:	f7ff f8c6 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dd32:	4603      	mov	r3, r0
 801dd34:	4618      	mov	r0, r3
 801dd36:	f7fe f9b2 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dd3a:	4603      	mov	r3, r0
 801dd3c:	617b      	str	r3, [r7, #20]
 801dd3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801dd42:	f7fd ffab 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dd46:	4603      	mov	r3, r0
 801dd48:	4619      	mov	r1, r3
 801dd4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dd4c:	f7fd ffb1 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dd50:	4603      	mov	r3, r0
 801dd52:	4618      	mov	r0, r3
 801dd54:	f7fe f800 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dd58:	4604      	mov	r4, r0
 801dd5a:	6979      	ldr	r1, [r7, #20]
 801dd5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd5e:	f7ff f969 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dd62:	4603      	mov	r3, r0
 801dd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd66:	4619      	mov	r1, r3
 801dd68:	4620      	mov	r0, r4
 801dd6a:	f7ff f8ce 	bl	801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dd6e:	4603      	mov	r3, r0
 801dd70:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801dd72:	4831      	ldr	r0, [pc, #196]	; (801de38 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801dd74:	f7ff f8a3 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dd78:	4603      	mov	r3, r0
 801dd7a:	4618      	mov	r0, r3
 801dd7c:	f7fe f98f 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dd80:	4603      	mov	r3, r0
 801dd82:	613b      	str	r3, [r7, #16]
 801dd84:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801dd88:	f7fd ff88 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dd8c:	4603      	mov	r3, r0
 801dd8e:	4619      	mov	r1, r3
 801dd90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dd92:	f7fd ff8e 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dd96:	4603      	mov	r3, r0
 801dd98:	4618      	mov	r0, r3
 801dd9a:	f7fd ffdd 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dd9e:	4604      	mov	r4, r0
 801dda0:	6939      	ldr	r1, [r7, #16]
 801dda2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dda4:	f7ff f946 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dda8:	4603      	mov	r3, r0
 801ddaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ddac:	4619      	mov	r1, r3
 801ddae:	4620      	mov	r0, r4
 801ddb0:	f7ff f8ab 	bl	801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ddb4:	4603      	mov	r3, r0
 801ddb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 801ddb8:	20f2      	movs	r0, #242	; 0xf2
 801ddba:	f7ff f880 	bl	801cebe <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ddbe:	4603      	mov	r3, r0
 801ddc0:	4618      	mov	r0, r3
 801ddc2:	f7fe f96c 	bl	801c09e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ddc6:	4603      	mov	r3, r0
 801ddc8:	60fb      	str	r3, [r7, #12]
 801ddca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801ddce:	f7fd ff65 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ddd2:	4603      	mov	r3, r0
 801ddd4:	4619      	mov	r1, r3
 801ddd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ddd8:	f7fd ff6b 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dddc:	4603      	mov	r3, r0
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7fd ffba 	bl	801bd58 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dde4:	4604      	mov	r4, r0
 801dde6:	68f9      	ldr	r1, [r7, #12]
 801dde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ddea:	f7ff f923 	bl	801d034 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ddee:	4603      	mov	r3, r0
 801ddf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ddf2:	4619      	mov	r1, r3
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	f7ff f888 	bl	801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801ddfe:	6878      	ldr	r0, [r7, #4]
 801de00:	f000 f8e4 	bl	801dfcc <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801de04:	4604      	mov	r4, r0
 801de06:	f7fe f95e 	bl	801c0c6 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801de0a:	4603      	mov	r3, r0
 801de0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de0e:	4619      	mov	r1, r3
 801de10:	4620      	mov	r0, r4
 801de12:	f7ff f87a 	bl	801cf0a <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801de16:	4603      	mov	r3, r0
 801de18:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801de1c:	4618      	mov	r0, r3
 801de1e:	3744      	adds	r7, #68	; 0x44
 801de20:	46bd      	mov	sp, r7
 801de22:	bd90      	pop	{r4, r7, pc}
 801de24:	63afbe7b 	.word	0x63afbe7b
 801de28:	4da2cbf2 	.word	0x4da2cbf2
 801de2c:	2f16ac6c 	.word	0x2f16ac6c
 801de30:	1152aaa4 	.word	0x1152aaa4
 801de34:	02582ab7 	.word	0x02582ab7
 801de38:	000afe11 	.word	0x000afe11

0801de3c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801de3c:	b5b0      	push	{r4, r5, r7, lr}
 801de3e:	b084      	sub	sp, #16
 801de40:	af00      	add	r7, sp, #0
 801de42:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801de44:	1d3b      	adds	r3, r7, #4
 801de46:	4618      	mov	r0, r3
 801de48:	f7fe f91e 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801de4c:	4603      	mov	r3, r0
 801de4e:	681d      	ldr	r5, [r3, #0]
 801de50:	f107 030c 	add.w	r3, r7, #12
 801de54:	4618      	mov	r0, r3
 801de56:	f000 f80b 	bl	801de70 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801de5a:	4604      	mov	r4, r0
 801de5c:	4628      	mov	r0, r5
 801de5e:	f000 f8c7 	bl	801dff0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801de62:	4603      	mov	r3, r0
 801de64:	6023      	str	r3, [r4, #0]
  return result;
 801de66:	68fb      	ldr	r3, [r7, #12]
}
 801de68:	4618      	mov	r0, r3
 801de6a:	3710      	adds	r7, #16
 801de6c:	46bd      	mov	sp, r7
 801de6e:	bdb0      	pop	{r4, r5, r7, pc}

0801de70 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801de70:	b480      	push	{r7}
 801de72:	b083      	sub	sp, #12
 801de74:	af00      	add	r7, sp, #0
 801de76:	6078      	str	r0, [r7, #4]
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	4618      	mov	r0, r3
 801de7c:	370c      	adds	r7, #12
 801de7e:	46bd      	mov	sp, r7
 801de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de84:	4770      	bx	lr

0801de86 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801de86:	b590      	push	{r4, r7, lr}
 801de88:	b085      	sub	sp, #20
 801de8a:	af00      	add	r7, sp, #0
 801de8c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801de8e:	f107 030c 	add.w	r3, r7, #12
 801de92:	4618      	mov	r0, r3
 801de94:	f7ff ffec 	bl	801de70 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801de98:	4604      	mov	r4, r0
 801de9a:	6878      	ldr	r0, [r7, #4]
 801de9c:	f7fd fefe 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dea0:	4603      	mov	r3, r0
 801dea2:	6023      	str	r3, [r4, #0]
    return retval;
 801dea4:	68fb      	ldr	r3, [r7, #12]
  }
 801dea6:	4618      	mov	r0, r3
 801dea8:	3714      	adds	r7, #20
 801deaa:	46bd      	mov	sp, r7
 801deac:	bd90      	pop	{r4, r7, pc}

0801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801deae:	b480      	push	{r7}
 801deb0:	b083      	sub	sp, #12
 801deb2:	af00      	add	r7, sp, #0
 801deb4:	6078      	str	r0, [r7, #4]
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	4618      	mov	r0, r3
 801deba:	370c      	adds	r7, #12
 801debc:	46bd      	mov	sp, r7
 801debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dec2:	4770      	bx	lr

0801dec4 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801dec4:	b580      	push	{r7, lr}
 801dec6:	b084      	sub	sp, #16
 801dec8:	af00      	add	r7, sp, #0
 801deca:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801decc:	f107 030c 	add.w	r3, r7, #12
 801ded0:	4618      	mov	r0, r3
 801ded2:	f7ff ffcd 	bl	801de70 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801ded6:	4602      	mov	r2, r0
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	6013      	str	r3, [r2, #0]
    return retval;
 801dedc:	68fb      	ldr	r3, [r7, #12]
  }
 801dede:	4618      	mov	r0, r3
 801dee0:	3710      	adds	r7, #16
 801dee2:	46bd      	mov	sp, r7
 801dee4:	bd80      	pop	{r7, pc}

0801dee6 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801dee6:	b580      	push	{r7, lr}
 801dee8:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801deea:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801deee:	f000 f803 	bl	801def8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801def2:	4603      	mov	r3, r0
  }
 801def4:	4618      	mov	r0, r3
 801def6:	bd80      	pop	{r7, pc}

0801def8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801def8:	b590      	push	{r4, r7, lr}
 801defa:	b085      	sub	sp, #20
 801defc:	af00      	add	r7, sp, #0
 801defe:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801df00:	f107 030c 	add.w	r3, r7, #12
 801df04:	4618      	mov	r0, r3
 801df06:	f7ff ffd2 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df0a:	4604      	mov	r4, r0
 801df0c:	6878      	ldr	r0, [r7, #4]
 801df0e:	f7fd fec5 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801df12:	4603      	mov	r3, r0
 801df14:	6023      	str	r3, [r4, #0]
    return retval;
 801df16:	68fb      	ldr	r3, [r7, #12]
  }
 801df18:	4618      	mov	r0, r3
 801df1a:	3714      	adds	r7, #20
 801df1c:	46bd      	mov	sp, r7
 801df1e:	bd90      	pop	{r4, r7, pc}

0801df20 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801df20:	b590      	push	{r4, r7, lr}
 801df22:	b083      	sub	sp, #12
 801df24:	af00      	add	r7, sp, #0
 801df26:	6078      	str	r0, [r7, #4]
 801df28:	6039      	str	r1, [r7, #0]
 801df2a:	1d3b      	adds	r3, r7, #4
 801df2c:	4618      	mov	r0, r3
 801df2e:	f7ff ffbe 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df32:	4603      	mov	r3, r0
 801df34:	681c      	ldr	r4, [r3, #0]
 801df36:	463b      	mov	r3, r7
 801df38:	4618      	mov	r0, r3
 801df3a:	f7ff ffb8 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df3e:	4603      	mov	r3, r0
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	4619      	mov	r1, r3
 801df44:	4620      	mov	r0, r4
 801df46:	f7fe f9db 	bl	801c300 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801df4a:	4603      	mov	r3, r0
 801df4c:	4618      	mov	r0, r3
 801df4e:	f7ff fdfe 	bl	801db4e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801df52:	4603      	mov	r3, r0
 801df54:	4618      	mov	r0, r3
 801df56:	370c      	adds	r7, #12
 801df58:	46bd      	mov	sp, r7
 801df5a:	bd90      	pop	{r4, r7, pc}

0801df5c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801df5c:	b590      	push	{r4, r7, lr}
 801df5e:	b083      	sub	sp, #12
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
 801df64:	6039      	str	r1, [r7, #0]
 801df66:	1d3b      	adds	r3, r7, #4
 801df68:	4618      	mov	r0, r3
 801df6a:	f7ff ffa0 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df6e:	4603      	mov	r3, r0
 801df70:	681c      	ldr	r4, [r3, #0]
 801df72:	463b      	mov	r3, r7
 801df74:	4618      	mov	r0, r3
 801df76:	f7ff ff9a 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801df7a:	4603      	mov	r3, r0
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	4619      	mov	r1, r3
 801df80:	4620      	mov	r0, r4
 801df82:	f7fd fe96 	bl	801bcb2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801df86:	4603      	mov	r3, r0
 801df88:	4618      	mov	r0, r3
 801df8a:	f7ff fde0 	bl	801db4e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801df8e:	4603      	mov	r3, r0
 801df90:	4618      	mov	r0, r3
 801df92:	370c      	adds	r7, #12
 801df94:	46bd      	mov	sp, r7
 801df96:	bd90      	pop	{r4, r7, pc}

0801df98 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801df98:	b5b0      	push	{r4, r5, r7, lr}
 801df9a:	b084      	sub	sp, #16
 801df9c:	af00      	add	r7, sp, #0
 801df9e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801dfa0:	1d3b      	adds	r3, r7, #4
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f7ff ff83 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	681d      	ldr	r5, [r3, #0]
 801dfac:	f107 030c 	add.w	r3, r7, #12
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	f7fe f869 	bl	801c088 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dfb6:	4604      	mov	r4, r0
 801dfb8:	4628      	mov	r0, r5
 801dfba:	f000 f825 	bl	801e008 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801dfbe:	4603      	mov	r3, r0
 801dfc0:	6023      	str	r3, [r4, #0]
  return result;
 801dfc2:	68fb      	ldr	r3, [r7, #12]
}
 801dfc4:	4618      	mov	r0, r3
 801dfc6:	3710      	adds	r7, #16
 801dfc8:	46bd      	mov	sp, r7
 801dfca:	bdb0      	pop	{r4, r5, r7, pc}

0801dfcc <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801dfcc:	b580      	push	{r7, lr}
 801dfce:	b082      	sub	sp, #8
 801dfd0:	af00      	add	r7, sp, #0
 801dfd2:	6078      	str	r0, [r7, #4]
 801dfd4:	1d3b      	adds	r3, r7, #4
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	f7ff ff69 	bl	801deae <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801dfdc:	4603      	mov	r3, r0
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	4618      	mov	r0, r3
 801dfe2:	f7fe ffb3 	bl	801cf4c <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801dfe6:	4603      	mov	r3, r0
 801dfe8:	4618      	mov	r0, r3
 801dfea:	3708      	adds	r7, #8
 801dfec:	46bd      	mov	sp, r7
 801dfee:	bd80      	pop	{r7, pc}

0801dff0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801dff0:	b580      	push	{r7, lr}
 801dff2:	b082      	sub	sp, #8
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801dff8:	6878      	ldr	r0, [r7, #4]
 801dffa:	f000 f811 	bl	801e020 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801dffe:	4603      	mov	r3, r0
}
 801e000:	4618      	mov	r0, r3
 801e002:	3708      	adds	r7, #8
 801e004:	46bd      	mov	sp, r7
 801e006:	bd80      	pop	{r7, pc}

0801e008 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801e008:	b580      	push	{r7, lr}
 801e00a:	b082      	sub	sp, #8
 801e00c:	af00      	add	r7, sp, #0
 801e00e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801e010:	6878      	ldr	r0, [r7, #4]
 801e012:	f000 f813 	bl	801e03c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801e016:	4603      	mov	r3, r0
}
 801e018:	4618      	mov	r0, r3
 801e01a:	3708      	adds	r7, #8
 801e01c:	46bd      	mov	sp, r7
 801e01e:	bd80      	pop	{r7, pc}

0801e020 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e020:	b580      	push	{r7, lr}
 801e022:	b082      	sub	sp, #8
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801e028:	210c      	movs	r1, #12
 801e02a:	6878      	ldr	r0, [r7, #4]
 801e02c:	f7fd fa72 	bl	801b514 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e030:	4603      	mov	r3, r0
  }
 801e032:	4618      	mov	r0, r3
 801e034:	3708      	adds	r7, #8
 801e036:	46bd      	mov	sp, r7
 801e038:	bd80      	pop	{r7, pc}
	...

0801e03c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e03c:	b580      	push	{r7, lr}
 801e03e:	b08a      	sub	sp, #40	; 0x28
 801e040:	af00      	add	r7, sp, #0
 801e042:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801e044:	f7fc fde1 	bl	801ac0a <_ZNSt14numeric_limitsIlE3minEv>
 801e048:	4603      	mov	r3, r0
 801e04a:	4618      	mov	r0, r3
 801e04c:	f7fd fe26 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e050:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801e052:	f7fc f863 	bl	801a11c <_ZNSt14numeric_limitsIlE3maxEv>
 801e056:	4603      	mov	r3, r0
 801e058:	4618      	mov	r0, r3
 801e05a:	f7fd fe1f 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e05e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801e060:	2320      	movs	r3, #32
 801e062:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801e064:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801e068:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801e06a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801e06e:	f7fd fe15 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e072:	4603      	mov	r3, r0
 801e074:	4619      	mov	r1, r3
 801e076:	6878      	ldr	r0, [r7, #4]
 801e078:	f7fd fe5a 	bl	801bd30 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801e07c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801e07e:	480f      	ldr	r0, [pc, #60]	; (801e0bc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801e080:	f7fd fe0c 	bl	801bc9c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e084:	4603      	mov	r3, r0
 801e086:	4619      	mov	r1, r3
 801e088:	6878      	ldr	r0, [r7, #4]
 801e08a:	f7fd fe2f 	bl	801bcec <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801e08e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801e090:	2105      	movs	r1, #5
 801e092:	6878      	ldr	r0, [r7, #4]
 801e094:	f7fe fa18 	bl	801c4c8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801e098:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801e09a:	68fa      	ldr	r2, [r7, #12]
 801e09c:	6a39      	ldr	r1, [r7, #32]
 801e09e:	6978      	ldr	r0, [r7, #20]
 801e0a0:	f7fe fa56 	bl	801c550 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e0a4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801e0a6:	68fa      	ldr	r2, [r7, #12]
 801e0a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e0aa:	6938      	ldr	r0, [r7, #16]
 801e0ac:	f7fe fa50 	bl	801c550 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e0b0:	60f8      	str	r0, [r7, #12]
    return result;
 801e0b2:	68fb      	ldr	r3, [r7, #12]
  }
 801e0b4:	4618      	mov	r0, r3
 801e0b6:	3728      	adds	r7, #40	; 0x28
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	bd80      	pop	{r7, pc}
 801e0bc:	fc000001 	.word	0xfc000001

0801e0c0 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 801e0c0:	b580      	push	{r7, lr}
 801e0c2:	ed2d 8b02 	vpush	{d8}
 801e0c6:	b094      	sub	sp, #80	; 0x50
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	6178      	str	r0, [r7, #20]
 801e0cc:	ed87 0a04 	vstr	s0, [r7, #16]
 801e0d0:	edc7 0a03 	vstr	s1, [r7, #12]
 801e0d4:	60b9      	str	r1, [r7, #8]
 801e0d6:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 801e0d8:	ed97 7a03 	vldr	s14, [r7, #12]
 801e0dc:	edd7 7a04 	vldr	s15, [r7, #16]
 801e0e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	3b01      	subs	r3, #1
 801e0e8:	ee07 3a90 	vmov	s15, r3
 801e0ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e0f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 801e0f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801e0fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801e104:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 801e108:	2300      	movs	r3, #0
 801e10a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	3b01      	subs	r3, #1
 801e110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e112:	429a      	cmp	r2, r3
 801e114:	f280 80c0 	bge.w	801e298 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 801e118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e11a:	ee07 3a90 	vmov	s15, r3
 801e11e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e122:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e126:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e12a:	edd7 7a04 	vldr	s15, [r7, #16]
 801e12e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e132:	697b      	ldr	r3, [r7, #20]
 801e134:	eeb0 0a67 	vmov.f32	s0, s15
 801e138:	4798      	blx	r3
 801e13a:	eef0 7a40 	vmov.f32	s15, s0
 801e13e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801e310 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e142:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e146:	eeb0 0a67 	vmov.f32	s0, s15
 801e14a:	f7fc f999 	bl	801a480 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e14e:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801e152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e154:	3301      	adds	r3, #1
 801e156:	ee07 3a90 	vmov	s15, r3
 801e15a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e15e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e162:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e166:	edd7 7a04 	vldr	s15, [r7, #16]
 801e16a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e16e:	697b      	ldr	r3, [r7, #20]
 801e170:	eeb0 0a67 	vmov.f32	s0, s15
 801e174:	4798      	blx	r3
 801e176:	eef0 7a40 	vmov.f32	s15, s0
 801e17a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801e310 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e17e:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 801e182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e184:	ee07 3a90 	vmov	s15, r3
 801e188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e18c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e190:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e194:	edd7 7a04 	vldr	s15, [r7, #16]
 801e198:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e19c:	697b      	ldr	r3, [r7, #20]
 801e19e:	eeb0 0a67 	vmov.f32	s0, s15
 801e1a2:	4798      	blx	r3
 801e1a4:	eef0 7a40 	vmov.f32	s15, s0
 801e1a8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801e310 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e1ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e1b0:	eeb0 0a67 	vmov.f32	s0, s15
 801e1b4:	f7fc f964 	bl	801a480 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e1b8:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801e1bc:	ee78 7a27 	vadd.f32	s15, s16, s15
 801e1c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e1c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e1c8:	eeb0 0a47 	vmov.f32	s0, s14
 801e1cc:	f7fc f958 	bl	801a480 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e1d0:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 801e1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e1d6:	ee07 3a90 	vmov	s15, r3
 801e1da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e1de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e1e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e1e6:	edd7 7a04 	vldr	s15, [r7, #16]
 801e1ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e1ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801e1f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e1f6:	697b      	ldr	r3, [r7, #20]
 801e1f8:	eeb0 0a67 	vmov.f32	s0, s15
 801e1fc:	4798      	blx	r3
 801e1fe:	eef0 7a40 	vmov.f32	s15, s0
 801e202:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801e310 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e206:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e20a:	eeb0 0a67 	vmov.f32	s0, s15
 801e20e:	f7fc f937 	bl	801a480 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e212:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801e216:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801e21a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801e21e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e222:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801e226:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801e22a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e22e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e232:	eeb0 0a47 	vmov.f32	s0, s14
 801e236:	f7fc f923 	bl	801a480 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e23a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801e23e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801e242:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801e246:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e24a:	edc7 7a06 	vstr	s15, [r7, #24]
 801e24e:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801e252:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 801e254:	f107 021c 	add.w	r2, r7, #28
 801e258:	f107 0318 	add.w	r3, r7, #24
 801e25c:	4611      	mov	r1, r2
 801e25e:	4618      	mov	r0, r3
 801e260:	f7e7 ffb5 	bl	80061ce <_ZSt3maxIfERKT_S2_S2_>
 801e264:	4602      	mov	r2, r0
 801e266:	4b2b      	ldr	r3, [pc, #172]	; (801e314 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801e268:	623b      	str	r3, [r7, #32]
 801e26a:	f107 0320 	add.w	r3, r7, #32
 801e26e:	4619      	mov	r1, r3
 801e270:	4610      	mov	r0, r2
 801e272:	f7fc f8d8 	bl	801a426 <_ZSt3minIfERKT_S2_S2_>
 801e276:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801e278:	edd3 7a00 	vldr	s15, [r3]
 801e27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e27e:	005b      	lsls	r3, r3, #1
 801e280:	68ba      	ldr	r2, [r7, #8]
 801e282:	4413      	add	r3, r2
 801e284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e288:	ee17 2a90 	vmov	r2, s15
 801e28c:	b212      	sxth	r2, r2
 801e28e:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 801e290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e292:	3301      	adds	r3, #1
 801e294:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e296:	e739      	b.n	801e10c <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 801e298:	697b      	ldr	r3, [r7, #20]
 801e29a:	ed97 0a03 	vldr	s0, [r7, #12]
 801e29e:	4798      	blx	r3
 801e2a0:	eef0 7a40 	vmov.f32	s15, s0
 801e2a4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801e310 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e2a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e2ac:	eeb0 0a67 	vmov.f32	s0, s15
 801e2b0:	f7fc f8e6 	bl	801a480 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e2b4:	eef0 7a40 	vmov.f32	s15, s0
 801e2b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801e2bc:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801e2c0:	62bb      	str	r3, [r7, #40]	; 0x28
 801e2c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e2c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e2ca:	4611      	mov	r1, r2
 801e2cc:	4618      	mov	r0, r3
 801e2ce:	f7e7 ff7e 	bl	80061ce <_ZSt3maxIfERKT_S2_S2_>
 801e2d2:	4602      	mov	r2, r0
 801e2d4:	4b0f      	ldr	r3, [pc, #60]	; (801e314 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801e2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e2d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e2dc:	4619      	mov	r1, r3
 801e2de:	4610      	mov	r0, r2
 801e2e0:	f7fc f8a1 	bl	801a426 <_ZSt3minIfERKT_S2_S2_>
 801e2e4:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 801e2e6:	edd3 7a00 	vldr	s15, [r3]
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e2f0:	3b01      	subs	r3, #1
 801e2f2:	005b      	lsls	r3, r3, #1
 801e2f4:	68ba      	ldr	r2, [r7, #8]
 801e2f6:	4413      	add	r3, r2
 801e2f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e2fc:	ee17 2a90 	vmov	r2, s15
 801e300:	b212      	sxth	r2, r2
 801e302:	801a      	strh	r2, [r3, #0]
}
 801e304:	bf00      	nop
 801e306:	3750      	adds	r7, #80	; 0x50
 801e308:	46bd      	mov	sp, r7
 801e30a:	ecbd 8b02 	vpop	{d8}
 801e30e:	bd80      	pop	{r7, pc}
 801e310:	47000000 	.word	0x47000000
 801e314:	46fffe00 	.word	0x46fffe00

0801e318 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801e318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e31c:	b090      	sub	sp, #64	; 0x40
 801e31e:	af06      	add	r7, sp, #24
 801e320:	60f8      	str	r0, [r7, #12]
 801e322:	60b9      	str	r1, [r7, #8]
 801e324:	607a      	str	r2, [r7, #4]
 801e326:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801e328:	68bb      	ldr	r3, [r7, #8]
 801e32a:	781b      	ldrb	r3, [r3, #0]
 801e32c:	2b09      	cmp	r3, #9
 801e32e:	d004      	beq.n	801e33a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 801e330:	68bb      	ldr	r3, [r7, #8]
 801e332:	781b      	ldrb	r3, [r3, #0]
 801e334:	2b07      	cmp	r3, #7
 801e336:	f040 81b6 	bne.w	801e6a6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801e33a:	68bb      	ldr	r3, [r7, #8]
 801e33c:	781b      	ldrb	r3, [r3, #0]
 801e33e:	2b07      	cmp	r3, #7
 801e340:	d156      	bne.n	801e3f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	691b      	ldr	r3, [r3, #16]
 801e346:	2b00      	cmp	r3, #0
 801e348:	d011      	beq.n	801e36e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 801e34a:	68fb      	ldr	r3, [r7, #12]
 801e34c:	695c      	ldr	r4, [r3, #20]
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	691b      	ldr	r3, [r3, #16]
 801e352:	2200      	movs	r2, #0
 801e354:	9203      	str	r2, [sp, #12]
 801e356:	9302      	str	r3, [sp, #8]
 801e358:	4ba1      	ldr	r3, [pc, #644]	; (801e5e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801e35a:	9301      	str	r3, [sp, #4]
 801e35c:	4ba1      	ldr	r3, [pc, #644]	; (801e5e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e35e:	9300      	str	r3, [sp, #0]
 801e360:	2325      	movs	r3, #37	; 0x25
 801e362:	4aa1      	ldr	r2, [pc, #644]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e364:	49a1      	ldr	r1, [pc, #644]	; (801e5ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e366:	68f8      	ldr	r0, [r7, #12]
 801e368:	47a0      	blx	r4
 801e36a:	2301      	movs	r3, #1
 801e36c:	e1e0      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	edd3 7a03 	vldr	s15, [r3, #12]
 801e374:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 801e5f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e378:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e380:	dd07      	ble.n	801e392 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	edd3 7a03 	vldr	s15, [r3, #12]
 801e388:	ed9f 7a99 	vldr	s14, [pc, #612]	; 801e5f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e38c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e390:	e006      	b.n	801e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	edd3 7a03 	vldr	s15, [r3, #12]
 801e398:	ed9f 7a95 	vldr	s14, [pc, #596]	; 801e5f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e39c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e3a0:	edc7 7a08 	vstr	s15, [r7, #32]
 801e3a4:	edd7 7a08 	vldr	s15, [r7, #32]
 801e3a8:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801e5f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801e3ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3b4:	f340 80dd 	ble.w	801e572 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	695c      	ldr	r4, [r3, #20]
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	68db      	ldr	r3, [r3, #12]
 801e3c0:	4618      	mov	r0, r3
 801e3c2:	f7e2 f8cb 	bl	800055c <__aeabi_f2d>
 801e3c6:	4602      	mov	r2, r0
 801e3c8:	460b      	mov	r3, r1
 801e3ca:	f04f 0000 	mov.w	r0, #0
 801e3ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801e3d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e3d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e3da:	4b87      	ldr	r3, [pc, #540]	; (801e5f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801e3dc:	9301      	str	r3, [sp, #4]
 801e3de:	4b87      	ldr	r3, [pc, #540]	; (801e5fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801e3e0:	9300      	str	r3, [sp, #0]
 801e3e2:	2326      	movs	r3, #38	; 0x26
 801e3e4:	4a80      	ldr	r2, [pc, #512]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e3e6:	4986      	ldr	r1, [pc, #536]	; (801e600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801e3e8:	68f8      	ldr	r0, [r7, #12]
 801e3ea:	47a0      	blx	r4
 801e3ec:	2301      	movs	r3, #1
 801e3ee:	e19f      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801e3f0:	68bb      	ldr	r3, [r7, #8]
 801e3f2:	781b      	ldrb	r3, [r3, #0]
 801e3f4:	2b09      	cmp	r3, #9
 801e3f6:	d018      	beq.n	801e42a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	695c      	ldr	r4, [r3, #20]
 801e3fc:	68bb      	ldr	r3, [r7, #8]
 801e3fe:	781b      	ldrb	r3, [r3, #0]
 801e400:	4618      	mov	r0, r3
 801e402:	f7fb fe0f 	bl	801a024 <TfLiteTypeGetName>
 801e406:	4605      	mov	r5, r0
 801e408:	2009      	movs	r0, #9
 801e40a:	f7fb fe0b 	bl	801a024 <TfLiteTypeGetName>
 801e40e:	4603      	mov	r3, r0
 801e410:	9303      	str	r3, [sp, #12]
 801e412:	9502      	str	r5, [sp, #8]
 801e414:	4b7b      	ldr	r3, [pc, #492]	; (801e604 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801e416:	9301      	str	r3, [sp, #4]
 801e418:	4b7b      	ldr	r3, [pc, #492]	; (801e608 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801e41a:	9300      	str	r3, [sp, #0]
 801e41c:	2329      	movs	r3, #41	; 0x29
 801e41e:	4a72      	ldr	r2, [pc, #456]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e420:	497a      	ldr	r1, [pc, #488]	; (801e60c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801e422:	68f8      	ldr	r0, [r7, #12]
 801e424:	47a0      	blx	r4
 801e426:	2301      	movs	r3, #1
 801e428:	e182      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	781b      	ldrb	r3, [r3, #0]
 801e42e:	2b07      	cmp	r3, #7
 801e430:	d155      	bne.n	801e4de <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	691b      	ldr	r3, [r3, #16]
 801e436:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e43a:	d011      	beq.n	801e460 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801e43c:	68fb      	ldr	r3, [r7, #12]
 801e43e:	695c      	ldr	r4, [r3, #20]
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	691b      	ldr	r3, [r3, #16]
 801e444:	4a72      	ldr	r2, [pc, #456]	; (801e610 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801e446:	9203      	str	r2, [sp, #12]
 801e448:	9302      	str	r3, [sp, #8]
 801e44a:	4b72      	ldr	r3, [pc, #456]	; (801e614 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 801e44c:	9301      	str	r3, [sp, #4]
 801e44e:	4b65      	ldr	r3, [pc, #404]	; (801e5e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e450:	9300      	str	r3, [sp, #0]
 801e452:	232b      	movs	r3, #43	; 0x2b
 801e454:	4a64      	ldr	r2, [pc, #400]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e456:	4965      	ldr	r1, [pc, #404]	; (801e5ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e458:	68f8      	ldr	r0, [r7, #12]
 801e45a:	47a0      	blx	r4
 801e45c:	2301      	movs	r3, #1
 801e45e:	e167      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	edd3 7a03 	vldr	s15, [r3, #12]
 801e466:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801e618 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e46a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e472:	dd07      	ble.n	801e484 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	edd3 7a03 	vldr	s15, [r3, #12]
 801e47a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801e618 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e47e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e482:	e006      	b.n	801e492 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	edd3 7a03 	vldr	s15, [r3, #12]
 801e48a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801e618 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e492:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801e496:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801e49a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801e61c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801e49e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4a6:	dd64      	ble.n	801e572 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	695c      	ldr	r4, [r3, #20]
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	68db      	ldr	r3, [r3, #12]
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	f7e2 f853 	bl	800055c <__aeabi_f2d>
 801e4b6:	4602      	mov	r2, r0
 801e4b8:	460b      	mov	r3, r1
 801e4ba:	f04f 0000 	mov.w	r0, #0
 801e4be:	4958      	ldr	r1, [pc, #352]	; (801e620 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 801e4c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e4c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e4c8:	4b56      	ldr	r3, [pc, #344]	; (801e624 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801e4ca:	9301      	str	r3, [sp, #4]
 801e4cc:	4b4b      	ldr	r3, [pc, #300]	; (801e5fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801e4ce:	9300      	str	r3, [sp, #0]
 801e4d0:	232c      	movs	r3, #44	; 0x2c
 801e4d2:	4a45      	ldr	r2, [pc, #276]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e4d4:	494a      	ldr	r1, [pc, #296]	; (801e600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801e4d6:	68f8      	ldr	r0, [r7, #12]
 801e4d8:	47a0      	blx	r4
 801e4da:	2301      	movs	r3, #1
 801e4dc:	e128      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	781b      	ldrb	r3, [r3, #0]
 801e4e2:	2b09      	cmp	r3, #9
 801e4e4:	d018      	beq.n	801e518 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	695c      	ldr	r4, [r3, #20]
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	781b      	ldrb	r3, [r3, #0]
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	f7fb fd98 	bl	801a024 <TfLiteTypeGetName>
 801e4f4:	4605      	mov	r5, r0
 801e4f6:	2009      	movs	r0, #9
 801e4f8:	f7fb fd94 	bl	801a024 <TfLiteTypeGetName>
 801e4fc:	4603      	mov	r3, r0
 801e4fe:	9303      	str	r3, [sp, #12]
 801e500:	9502      	str	r5, [sp, #8]
 801e502:	4b40      	ldr	r3, [pc, #256]	; (801e604 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801e504:	9301      	str	r3, [sp, #4]
 801e506:	4b48      	ldr	r3, [pc, #288]	; (801e628 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 801e508:	9300      	str	r3, [sp, #0]
 801e50a:	232f      	movs	r3, #47	; 0x2f
 801e50c:	4a36      	ldr	r2, [pc, #216]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e50e:	493f      	ldr	r1, [pc, #252]	; (801e60c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801e510:	68f8      	ldr	r0, [r7, #12]
 801e512:	47a0      	blx	r4
 801e514:	2301      	movs	r3, #1
 801e516:	e10b      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	691b      	ldr	r3, [r3, #16]
 801e51c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801e520:	d012      	beq.n	801e548 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801e522:	68fb      	ldr	r3, [r7, #12]
 801e524:	695c      	ldr	r4, [r3, #20]
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	691b      	ldr	r3, [r3, #16]
 801e52a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801e52e:	9203      	str	r2, [sp, #12]
 801e530:	9302      	str	r3, [sp, #8]
 801e532:	4b3e      	ldr	r3, [pc, #248]	; (801e62c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801e534:	9301      	str	r3, [sp, #4]
 801e536:	4b2b      	ldr	r3, [pc, #172]	; (801e5e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e538:	9300      	str	r3, [sp, #0]
 801e53a:	2330      	movs	r3, #48	; 0x30
 801e53c:	4a2a      	ldr	r2, [pc, #168]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e53e:	492b      	ldr	r1, [pc, #172]	; (801e5ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e540:	68f8      	ldr	r0, [r7, #12]
 801e542:	47a0      	blx	r4
 801e544:	2301      	movs	r3, #1
 801e546:	e0f3      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	edd3 7a03 	vldr	s15, [r3, #12]
 801e54e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801e630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801e552:	eef4 7a47 	vcmp.f32	s15, s14
 801e556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e55a:	d00a      	beq.n	801e572 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	695c      	ldr	r4, [r3, #20]
 801e560:	4b34      	ldr	r3, [pc, #208]	; (801e634 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801e562:	9300      	str	r3, [sp, #0]
 801e564:	2331      	movs	r3, #49	; 0x31
 801e566:	4a20      	ldr	r2, [pc, #128]	; (801e5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e568:	4933      	ldr	r1, [pc, #204]	; (801e638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801e56a:	68f8      	ldr	r0, [r7, #12]
 801e56c:	47a0      	blx	r4
 801e56e:	2301      	movs	r3, #1
 801e570:	e0de      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801e572:	68bb      	ldr	r3, [r7, #8]
 801e574:	781b      	ldrb	r3, [r3, #0]
 801e576:	2b07      	cmp	r3, #7
 801e578:	d160      	bne.n	801e63c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801e57a:	68bb      	ldr	r3, [r7, #8]
 801e57c:	68db      	ldr	r3, [r3, #12]
 801e57e:	4618      	mov	r0, r3
 801e580:	f7e1 ffec 	bl	800055c <__aeabi_f2d>
 801e584:	4604      	mov	r4, r0
 801e586:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 801e588:	683b      	ldr	r3, [r7, #0]
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	4618      	mov	r0, r3
 801e58e:	f7e1 ffe5 	bl	800055c <__aeabi_f2d>
 801e592:	4602      	mov	r2, r0
 801e594:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801e596:	4620      	mov	r0, r4
 801e598:	4629      	mov	r1, r5
 801e59a:	f7e2 f837 	bl	800060c <__aeabi_dmul>
 801e59e:	4602      	mov	r2, r0
 801e5a0:	460b      	mov	r3, r1
 801e5a2:	4610      	mov	r0, r2
 801e5a4:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 801e5a6:	a30c      	add	r3, pc, #48	; (adr r3, 801e5d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801e5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5ac:	f7e2 f958 	bl	8000860 <__aeabi_ddiv>
 801e5b0:	4602      	mov	r2, r0
 801e5b2:	460b      	mov	r3, r1
 801e5b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 801e5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e5ba:	3308      	adds	r3, #8
 801e5bc:	f107 0214 	add.w	r2, r7, #20
 801e5c0:	4611      	mov	r1, r2
 801e5c2:	4618      	mov	r0, r3
 801e5c4:	ed97 0b06 	vldr	d0, [r7, #24]
 801e5c8:	f7fb fdb2 	bl	801a130 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801e5cc:	697a      	ldr	r2, [r7, #20]
 801e5ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e5d0:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801e5d2:	e0ac      	b.n	801e72e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801e5d4:	f3af 8000 	nop.w
 801e5d8:	00140014 	.word	0x00140014
 801e5dc:	3f240014 	.word	0x3f240014
 801e5e0:	08027138 	.word	0x08027138
 801e5e4:	0802713c 	.word	0x0802713c
 801e5e8:	08027090 	.word	0x08027090
 801e5ec:	0802711c 	.word	0x0802711c
 801e5f0:	38000000 	.word	0x38000000
 801e5f4:	3303126f 	.word	0x3303126f
 801e5f8:	08027178 	.word	0x08027178
 801e5fc:	08027184 	.word	0x08027184
 801e600:	08027158 	.word	0x08027158
 801e604:	080271b8 	.word	0x080271b8
 801e608:	080271c4 	.word	0x080271c4
 801e60c:	0802719c 	.word	0x0802719c
 801e610:	ffff8000 	.word	0xffff8000
 801e614:	080271d0 	.word	0x080271d0
 801e618:	37800000 	.word	0x37800000
 801e61c:	3283126f 	.word	0x3283126f
 801e620:	3ef00000 	.word	0x3ef00000
 801e624:	080271d8 	.word	0x080271d8
 801e628:	080271e4 	.word	0x080271e4
 801e62c:	080271f4 	.word	0x080271f4
 801e630:	3b800000 	.word	0x3b800000
 801e634:	08027214 	.word	0x08027214
 801e638:	080271fc 	.word	0x080271fc
          static_cast<double>(params->beta),
 801e63c:	683b      	ldr	r3, [r7, #0]
 801e63e:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 801e640:	4618      	mov	r0, r3
 801e642:	f7e1 ff8b 	bl	800055c <__aeabi_f2d>
 801e646:	4680      	mov	r8, r0
 801e648:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801e64a:	68bb      	ldr	r3, [r7, #8]
 801e64c:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801e64e:	4618      	mov	r0, r3
 801e650:	f7e1 ff84 	bl	800055c <__aeabi_f2d>
 801e654:	4682      	mov	sl, r0
 801e656:	468b      	mov	fp, r1
 801e658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e65a:	3308      	adds	r3, #8
 801e65c:	f107 0210 	add.w	r2, r7, #16
 801e660:	4619      	mov	r1, r3
 801e662:	2005      	movs	r0, #5
 801e664:	ec4b ab11 	vmov	d1, sl, fp
 801e668:	ec49 8b10 	vmov	d0, r8, r9
 801e66c:	f7fb fe2c 	bl	801a2c8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 801e670:	693a      	ldr	r2, [r7, #16]
 801e672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e674:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801e676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e678:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801e67a:	221f      	movs	r2, #31
 801e67c:	4619      	mov	r1, r3
 801e67e:	2005      	movs	r0, #5
 801e680:	f7fb fe6a 	bl	801a358 <_ZN6tflite20CalculateInputRadiusEiii>
 801e684:	4603      	mov	r3, r0
 801e686:	4618      	mov	r0, r3
 801e688:	f7e1 ff56 	bl	8000538 <__aeabi_i2d>
 801e68c:	4602      	mov	r2, r0
 801e68e:	460b      	mov	r3, r1
 801e690:	4614      	mov	r4, r2
 801e692:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801e696:	4620      	mov	r0, r4
 801e698:	4629      	mov	r1, r5
 801e69a:	f7e2 fa67 	bl	8000b6c <__aeabi_d2iz>
 801e69e:	4602      	mov	r2, r0
 801e6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e6a2:	619a      	str	r2, [r3, #24]
    }
 801e6a4:	e043      	b.n	801e72e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801e6a6:	68bb      	ldr	r3, [r7, #8]
 801e6a8:	781b      	ldrb	r3, [r3, #0]
 801e6aa:	2b01      	cmp	r3, #1
 801e6ac:	d018      	beq.n	801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801e6ae:	68fb      	ldr	r3, [r7, #12]
 801e6b0:	695c      	ldr	r4, [r3, #20]
 801e6b2:	68bb      	ldr	r3, [r7, #8]
 801e6b4:	781b      	ldrb	r3, [r3, #0]
 801e6b6:	4618      	mov	r0, r3
 801e6b8:	f7fb fcb4 	bl	801a024 <TfLiteTypeGetName>
 801e6bc:	4605      	mov	r5, r0
 801e6be:	2001      	movs	r0, #1
 801e6c0:	f7fb fcb0 	bl	801a024 <TfLiteTypeGetName>
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	9303      	str	r3, [sp, #12]
 801e6c8:	9502      	str	r5, [sp, #8]
 801e6ca:	4b1c      	ldr	r3, [pc, #112]	; (801e73c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801e6cc:	9301      	str	r3, [sp, #4]
 801e6ce:	4b1c      	ldr	r3, [pc, #112]	; (801e740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 801e6d0:	9300      	str	r3, [sp, #0]
 801e6d2:	234e      	movs	r3, #78	; 0x4e
 801e6d4:	4a1b      	ldr	r2, [pc, #108]	; (801e744 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801e6d6:	491c      	ldr	r1, [pc, #112]	; (801e748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801e6d8:	68f8      	ldr	r0, [r7, #12]
 801e6da:	47a0      	blx	r4
 801e6dc:	2301      	movs	r3, #1
 801e6de:	e027      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	781b      	ldrb	r3, [r3, #0]
 801e6e4:	2b01      	cmp	r3, #1
 801e6e6:	d018      	beq.n	801e71a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	695c      	ldr	r4, [r3, #20]
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	781b      	ldrb	r3, [r3, #0]
 801e6f0:	4618      	mov	r0, r3
 801e6f2:	f7fb fc97 	bl	801a024 <TfLiteTypeGetName>
 801e6f6:	4605      	mov	r5, r0
 801e6f8:	2001      	movs	r0, #1
 801e6fa:	f7fb fc93 	bl	801a024 <TfLiteTypeGetName>
 801e6fe:	4603      	mov	r3, r0
 801e700:	9303      	str	r3, [sp, #12]
 801e702:	9502      	str	r5, [sp, #8]
 801e704:	4b0d      	ldr	r3, [pc, #52]	; (801e73c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801e706:	9301      	str	r3, [sp, #4]
 801e708:	4b10      	ldr	r3, [pc, #64]	; (801e74c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801e70a:	9300      	str	r3, [sp, #0]
 801e70c:	234f      	movs	r3, #79	; 0x4f
 801e70e:	4a0d      	ldr	r2, [pc, #52]	; (801e744 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801e710:	490d      	ldr	r1, [pc, #52]	; (801e748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801e712:	68f8      	ldr	r0, [r7, #12]
 801e714:	47a0      	blx	r4
 801e716:	2301      	movs	r3, #1
 801e718:	e00a      	b.n	801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801e71a:	683b      	ldr	r3, [r7, #0]
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	4618      	mov	r0, r3
 801e720:	f7e1 ff1c 	bl	800055c <__aeabi_f2d>
 801e724:	4602      	mov	r2, r0
 801e726:	460b      	mov	r3, r1
 801e728:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801e72a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801e72e:	2300      	movs	r3, #0
}
 801e730:	4618      	mov	r0, r3
 801e732:	3728      	adds	r7, #40	; 0x28
 801e734:	46bd      	mov	sp, r7
 801e736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e73a:	bf00      	nop
 801e73c:	08027238 	.word	0x08027238
 801e740:	080271c4 	.word	0x080271c4
 801e744:	08027090 	.word	0x08027090
 801e748:	0802719c 	.word	0x0802719c
 801e74c:	080271e4 	.word	0x080271e4

0801e750 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 801e750:	b580      	push	{r7, lr}
 801e752:	b084      	sub	sp, #16
 801e754:	af00      	add	r7, sp, #0
 801e756:	60f8      	str	r0, [r7, #12]
 801e758:	60b9      	str	r1, [r7, #8]
 801e75a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801e75c:	68fb      	ldr	r3, [r7, #12]
 801e75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e760:	2b00      	cmp	r3, #0
 801e762:	d101      	bne.n	801e768 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801e764:	f004 f836 	bl	80227d4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 801e768:	68fb      	ldr	r3, [r7, #12]
 801e76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e76c:	2138      	movs	r1, #56	; 0x38
 801e76e:	68f8      	ldr	r0, [r7, #12]
 801e770:	4798      	blx	r3
 801e772:	4603      	mov	r3, r0
}
 801e774:	4618      	mov	r0, r3
 801e776:	3710      	adds	r7, #16
 801e778:	46bd      	mov	sp, r7
 801e77a:	bd80      	pop	{r7, pc}

0801e77c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801e77c:	b580      	push	{r7, lr}
 801e77e:	b082      	sub	sp, #8
 801e780:	af00      	add	r7, sp, #0
 801e782:	6078      	str	r0, [r7, #4]
 801e784:	ed87 0a00 	vstr	s0, [r7]
 801e788:	ed97 0a00 	vldr	s0, [r7]
 801e78c:	f7e2 ffd7 	bl	800173e <_ZSt3expf>
 801e790:	eef0 7a40 	vmov.f32	s15, s0
 801e794:	eeb0 0a67 	vmov.f32	s0, s15
 801e798:	3708      	adds	r7, #8
 801e79a:	46bd      	mov	sp, r7
 801e79c:	bd80      	pop	{r7, pc}

0801e79e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801e79e:	b580      	push	{r7, lr}
 801e7a0:	b082      	sub	sp, #8
 801e7a2:	af00      	add	r7, sp, #0
 801e7a4:	ed87 0a01 	vstr	s0, [r7, #4]
 801e7a8:	ed97 0a01 	vldr	s0, [r7, #4]
 801e7ac:	2000      	movs	r0, #0
 801e7ae:	f7ff ffe5 	bl	801e77c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801e7b2:	eef0 7a40 	vmov.f32	s15, s0
 801e7b6:	eeb0 0a67 	vmov.f32	s0, s15
 801e7ba:	3708      	adds	r7, #8
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	bd80      	pop	{r7, pc}

0801e7c0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 801e7c0:	b480      	push	{r7}
 801e7c2:	b083      	sub	sp, #12
 801e7c4:	af00      	add	r7, sp, #0
 801e7c6:	6078      	str	r0, [r7, #4]
 801e7c8:	4b03      	ldr	r3, [pc, #12]	; (801e7d8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	370c      	adds	r7, #12
 801e7ce:	46bd      	mov	sp, r7
 801e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7d4:	4770      	bx	lr
 801e7d6:	bf00      	nop
 801e7d8:	0801e79f 	.word	0x0801e79f

0801e7dc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801e7dc:	b480      	push	{r7}
 801e7de:	b083      	sub	sp, #12
 801e7e0:	af00      	add	r7, sp, #0
 801e7e2:	6078      	str	r0, [r7, #4]
 801e7e4:	ed87 0a00 	vstr	s0, [r7]
 801e7e8:	edd7 7a00 	vldr	s15, [r7]
 801e7ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e7f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e7f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e7f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e7fc:	eef0 7a66 	vmov.f32	s15, s13
 801e800:	eeb0 0a67 	vmov.f32	s0, s15
 801e804:	370c      	adds	r7, #12
 801e806:	46bd      	mov	sp, r7
 801e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e80c:	4770      	bx	lr

0801e80e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801e80e:	b580      	push	{r7, lr}
 801e810:	b082      	sub	sp, #8
 801e812:	af00      	add	r7, sp, #0
 801e814:	ed87 0a01 	vstr	s0, [r7, #4]
 801e818:	ed97 0a01 	vldr	s0, [r7, #4]
 801e81c:	2000      	movs	r0, #0
 801e81e:	f7ff ffdd 	bl	801e7dc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801e822:	eef0 7a40 	vmov.f32	s15, s0
 801e826:	eeb0 0a67 	vmov.f32	s0, s15
 801e82a:	3708      	adds	r7, #8
 801e82c:	46bd      	mov	sp, r7
 801e82e:	bd80      	pop	{r7, pc}

0801e830 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 801e830:	b480      	push	{r7}
 801e832:	b083      	sub	sp, #12
 801e834:	af00      	add	r7, sp, #0
 801e836:	6078      	str	r0, [r7, #4]
 801e838:	4b03      	ldr	r3, [pc, #12]	; (801e848 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801e83a:	4618      	mov	r0, r3
 801e83c:	370c      	adds	r7, #12
 801e83e:	46bd      	mov	sp, r7
 801e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e844:	4770      	bx	lr
 801e846:	bf00      	nop
 801e848:	0801e80f 	.word	0x0801e80f

0801e84c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801e84c:	b590      	push	{r4, r7, lr}
 801e84e:	b08f      	sub	sp, #60	; 0x3c
 801e850:	af04      	add	r7, sp, #16
 801e852:	6078      	str	r0, [r7, #4]
 801e854:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801e856:	6838      	ldr	r0, [r7, #0]
 801e858:	f7fd fa9b 	bl	801bd92 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801e85c:	4603      	mov	r3, r0
 801e85e:	2b01      	cmp	r3, #1
 801e860:	bf14      	ite	ne
 801e862:	2301      	movne	r3, #1
 801e864:	2300      	moveq	r3, #0
 801e866:	b2db      	uxtb	r3, r3
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d013      	beq.n	801e894 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	695c      	ldr	r4, [r3, #20]
 801e870:	6838      	ldr	r0, [r7, #0]
 801e872:	f7fd fa8e 	bl	801bd92 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801e876:	4603      	mov	r3, r0
 801e878:	2201      	movs	r2, #1
 801e87a:	9203      	str	r2, [sp, #12]
 801e87c:	9302      	str	r3, [sp, #8]
 801e87e:	4b7c      	ldr	r3, [pc, #496]	; (801ea70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801e880:	9301      	str	r3, [sp, #4]
 801e882:	4b7c      	ldr	r3, [pc, #496]	; (801ea74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801e884:	9300      	str	r3, [sp, #0]
 801e886:	235d      	movs	r3, #93	; 0x5d
 801e888:	4a7b      	ldr	r2, [pc, #492]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e88a:	497c      	ldr	r1, [pc, #496]	; (801ea7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801e88c:	6878      	ldr	r0, [r7, #4]
 801e88e:	47a0      	blx	r4
 801e890:	2301      	movs	r3, #1
 801e892:	e146      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801e894:	6838      	ldr	r0, [r7, #0]
 801e896:	f7fd fa89 	bl	801bdac <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801e89a:	4603      	mov	r3, r0
 801e89c:	2b01      	cmp	r3, #1
 801e89e:	bf14      	ite	ne
 801e8a0:	2301      	movne	r3, #1
 801e8a2:	2300      	moveq	r3, #0
 801e8a4:	b2db      	uxtb	r3, r3
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d013      	beq.n	801e8d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	695c      	ldr	r4, [r3, #20]
 801e8ae:	6838      	ldr	r0, [r7, #0]
 801e8b0:	f7fd fa7c 	bl	801bdac <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801e8b4:	4603      	mov	r3, r0
 801e8b6:	2201      	movs	r2, #1
 801e8b8:	9203      	str	r2, [sp, #12]
 801e8ba:	9302      	str	r3, [sp, #8]
 801e8bc:	4b6c      	ldr	r3, [pc, #432]	; (801ea70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801e8be:	9301      	str	r3, [sp, #4]
 801e8c0:	4b6f      	ldr	r3, [pc, #444]	; (801ea80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801e8c2:	9300      	str	r3, [sp, #0]
 801e8c4:	235e      	movs	r3, #94	; 0x5e
 801e8c6:	4a6c      	ldr	r2, [pc, #432]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e8c8:	496c      	ldr	r1, [pc, #432]	; (801ea7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801e8ca:	6878      	ldr	r0, [r7, #4]
 801e8cc:	47a0      	blx	r4
 801e8ce:	2301      	movs	r3, #1
 801e8d0:	e127      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801e8d2:	2200      	movs	r2, #0
 801e8d4:	6839      	ldr	r1, [r7, #0]
 801e8d6:	6878      	ldr	r0, [r7, #4]
 801e8d8:	f7fb fe94 	bl	801a604 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801e8dc:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801e8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d10a      	bne.n	801e8fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	695c      	ldr	r4, [r3, #20]
 801e8e8:	4b66      	ldr	r3, [pc, #408]	; (801ea84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801e8ea:	9300      	str	r3, [sp, #0]
 801e8ec:	2360      	movs	r3, #96	; 0x60
 801e8ee:	4a62      	ldr	r2, [pc, #392]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e8f0:	4965      	ldr	r1, [pc, #404]	; (801ea88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e8f2:	6878      	ldr	r0, [r7, #4]
 801e8f4:	47a0      	blx	r4
 801e8f6:	2301      	movs	r3, #1
 801e8f8:	e113      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801e8fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e8fc:	f7fb fe05 	bl	801a50a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801e900:	4603      	mov	r3, r0
 801e902:	2b00      	cmp	r3, #0
 801e904:	bfd4      	ite	le
 801e906:	2301      	movle	r3, #1
 801e908:	2300      	movgt	r3, #0
 801e90a:	b2db      	uxtb	r3, r3
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d00a      	beq.n	801e926 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	695c      	ldr	r4, [r3, #20]
 801e914:	4b5d      	ldr	r3, [pc, #372]	; (801ea8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801e916:	9300      	str	r3, [sp, #0]
 801e918:	2361      	movs	r3, #97	; 0x61
 801e91a:	4a57      	ldr	r2, [pc, #348]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e91c:	495a      	ldr	r1, [pc, #360]	; (801ea88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e91e:	6878      	ldr	r0, [r7, #4]
 801e920:	47a0      	blx	r4
 801e922:	2301      	movs	r3, #1
 801e924:	e0fd      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801e926:	2200      	movs	r2, #0
 801e928:	6839      	ldr	r1, [r7, #0]
 801e92a:	6878      	ldr	r0, [r7, #4]
 801e92c:	f7fb fe7a 	bl	801a624 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801e930:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801e932:	6a3b      	ldr	r3, [r7, #32]
 801e934:	2b00      	cmp	r3, #0
 801e936:	d10a      	bne.n	801e94e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	695c      	ldr	r4, [r3, #20]
 801e93c:	4b54      	ldr	r3, [pc, #336]	; (801ea90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801e93e:	9300      	str	r3, [sp, #0]
 801e940:	2363      	movs	r3, #99	; 0x63
 801e942:	4a4d      	ldr	r2, [pc, #308]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e944:	4950      	ldr	r1, [pc, #320]	; (801ea88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e946:	6878      	ldr	r0, [r7, #4]
 801e948:	47a0      	blx	r4
 801e94a:	2301      	movs	r3, #1
 801e94c:	e0e9      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801e94e:	683b      	ldr	r3, [r7, #0]
 801e950:	691b      	ldr	r3, [r3, #16]
 801e952:	2b00      	cmp	r3, #0
 801e954:	d10a      	bne.n	801e96c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	695c      	ldr	r4, [r3, #20]
 801e95a:	4b4e      	ldr	r3, [pc, #312]	; (801ea94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801e95c:	9300      	str	r3, [sp, #0]
 801e95e:	2365      	movs	r3, #101	; 0x65
 801e960:	4a45      	ldr	r2, [pc, #276]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e962:	4949      	ldr	r1, [pc, #292]	; (801ea88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e964:	6878      	ldr	r0, [r7, #4]
 801e966:	47a0      	blx	r4
 801e968:	2301      	movs	r3, #1
 801e96a:	e0da      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801e96c:	683b      	ldr	r3, [r7, #0]
 801e96e:	691b      	ldr	r3, [r3, #16]
 801e970:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e974:	781b      	ldrb	r3, [r3, #0]
 801e976:	2b07      	cmp	r3, #7
 801e978:	d12f      	bne.n	801e9da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e97e:	f240 4102 	movw	r1, #1026	; 0x402
 801e982:	6878      	ldr	r0, [r7, #4]
 801e984:	4798      	blx	r3
 801e986:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 801e988:	69bb      	ldr	r3, [r7, #24]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d10a      	bne.n	801e9a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	695c      	ldr	r4, [r3, #20]
 801e992:	4b41      	ldr	r3, [pc, #260]	; (801ea98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801e994:	9300      	str	r3, [sp, #0]
 801e996:	236b      	movs	r3, #107	; 0x6b
 801e998:	4a37      	ldr	r2, [pc, #220]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e99a:	493b      	ldr	r1, [pc, #236]	; (801ea88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e99c:	6878      	ldr	r0, [r7, #4]
 801e99e:	47a0      	blx	r4
 801e9a0:	2301      	movs	r3, #1
 801e9a2:	e0be      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801e9a4:	69fb      	ldr	r3, [r7, #28]
 801e9a6:	69ba      	ldr	r2, [r7, #24]
 801e9a8:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e9ae:	f240 4102 	movw	r1, #1026	; 0x402
 801e9b2:	6878      	ldr	r0, [r7, #4]
 801e9b4:	4798      	blx	r3
 801e9b6:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 801e9b8:	697b      	ldr	r3, [r7, #20]
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d10a      	bne.n	801e9d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801e9be:	687b      	ldr	r3, [r7, #4]
 801e9c0:	695c      	ldr	r4, [r3, #20]
 801e9c2:	4b36      	ldr	r3, [pc, #216]	; (801ea9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801e9c4:	9300      	str	r3, [sp, #0]
 801e9c6:	236f      	movs	r3, #111	; 0x6f
 801e9c8:	4a2b      	ldr	r2, [pc, #172]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e9ca:	492f      	ldr	r1, [pc, #188]	; (801ea88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e9cc:	6878      	ldr	r0, [r7, #4]
 801e9ce:	47a0      	blx	r4
 801e9d0:	2301      	movs	r3, #1
 801e9d2:	e0a6      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801e9d4:	69fb      	ldr	r3, [r7, #28]
 801e9d6:	697a      	ldr	r2, [r7, #20]
 801e9d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801e9da:	6a3b      	ldr	r3, [r7, #32]
 801e9dc:	781b      	ldrb	r3, [r3, #0]
 801e9de:	2b07      	cmp	r3, #7
 801e9e0:	d112      	bne.n	801ea08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801e9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9e4:	781b      	ldrb	r3, [r3, #0]
 801e9e6:	2b09      	cmp	r3, #9
 801e9e8:	d028      	beq.n	801ea3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9ec:	781b      	ldrb	r3, [r3, #0]
 801e9ee:	2b07      	cmp	r3, #7
 801e9f0:	d024      	beq.n	801ea3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	695c      	ldr	r4, [r3, #20]
 801e9f6:	4b2a      	ldr	r3, [pc, #168]	; (801eaa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801e9f8:	9300      	str	r3, [sp, #0]
 801e9fa:	2375      	movs	r3, #117	; 0x75
 801e9fc:	4a1e      	ldr	r2, [pc, #120]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e9fe:	4922      	ldr	r1, [pc, #136]	; (801ea88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801ea00:	6878      	ldr	r0, [r7, #4]
 801ea02:	47a0      	blx	r4
 801ea04:	2301      	movs	r3, #1
 801ea06:	e08c      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea0a:	781a      	ldrb	r2, [r3, #0]
 801ea0c:	6a3b      	ldr	r3, [r7, #32]
 801ea0e:	781b      	ldrb	r3, [r3, #0]
 801ea10:	429a      	cmp	r2, r3
 801ea12:	d013      	beq.n	801ea3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	695c      	ldr	r4, [r3, #20]
 801ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea1a:	781b      	ldrb	r3, [r3, #0]
 801ea1c:	461a      	mov	r2, r3
 801ea1e:	6a3b      	ldr	r3, [r7, #32]
 801ea20:	781b      	ldrb	r3, [r3, #0]
 801ea22:	9303      	str	r3, [sp, #12]
 801ea24:	9202      	str	r2, [sp, #8]
 801ea26:	4b1f      	ldr	r3, [pc, #124]	; (801eaa4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801ea28:	9301      	str	r3, [sp, #4]
 801ea2a:	4b1f      	ldr	r3, [pc, #124]	; (801eaa8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801ea2c:	9300      	str	r3, [sp, #0]
 801ea2e:	2378      	movs	r3, #120	; 0x78
 801ea30:	4a11      	ldr	r2, [pc, #68]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801ea32:	4912      	ldr	r1, [pc, #72]	; (801ea7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801ea34:	6878      	ldr	r0, [r7, #4]
 801ea36:	47a0      	blx	r4
 801ea38:	2301      	movs	r3, #1
 801ea3a:	e072      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 801ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea3e:	781b      	ldrb	r3, [r3, #0]
 801ea40:	2b07      	cmp	r3, #7
 801ea42:	d161      	bne.n	801eb08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801ea44:	6a3b      	ldr	r3, [r7, #32]
 801ea46:	691b      	ldr	r3, [r3, #16]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	d035      	beq.n	801eab8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	695c      	ldr	r4, [r3, #20]
 801ea50:	6a3b      	ldr	r3, [r7, #32]
 801ea52:	691b      	ldr	r3, [r3, #16]
 801ea54:	2200      	movs	r2, #0
 801ea56:	9203      	str	r2, [sp, #12]
 801ea58:	9302      	str	r3, [sp, #8]
 801ea5a:	4b14      	ldr	r3, [pc, #80]	; (801eaac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801ea5c:	9301      	str	r3, [sp, #4]
 801ea5e:	4b14      	ldr	r3, [pc, #80]	; (801eab0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801ea60:	9300      	str	r3, [sp, #0]
 801ea62:	237d      	movs	r3, #125	; 0x7d
 801ea64:	4a04      	ldr	r2, [pc, #16]	; (801ea78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801ea66:	4905      	ldr	r1, [pc, #20]	; (801ea7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801ea68:	6878      	ldr	r0, [r7, #4]
 801ea6a:	47a0      	blx	r4
 801ea6c:	2301      	movs	r3, #1
 801ea6e:	e058      	b.n	801eb22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 801ea70:	08027248 	.word	0x08027248
 801ea74:	0802724c 	.word	0x0802724c
 801ea78:	08027090 	.word	0x08027090
 801ea7c:	0802711c 	.word	0x0802711c
 801ea80:	0802725c 	.word	0x0802725c
 801ea84:	08027270 	.word	0x08027270
 801ea88:	080271fc 	.word	0x080271fc
 801ea8c:	08027284 	.word	0x08027284
 801ea90:	080272a0 	.word	0x080272a0
 801ea94:	080272b4 	.word	0x080272b4
 801ea98:	080272d0 	.word	0x080272d0
 801ea9c:	080272e8 	.word	0x080272e8
 801eaa0:	0802730c 	.word	0x0802730c
 801eaa4:	080271e4 	.word	0x080271e4
 801eaa8:	080271c4 	.word	0x080271c4
 801eaac:	08027138 	.word	0x08027138
 801eab0:	0802713c 	.word	0x0802713c
 801eab4:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801eab8:	f107 0308 	add.w	r3, r7, #8
 801eabc:	4618      	mov	r0, r3
 801eabe:	f7ff fe7f 	bl	801e7c0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801eac2:	69fb      	ldr	r3, [r7, #28]
 801eac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eac6:	f240 2201 	movw	r2, #513	; 0x201
 801eaca:	4619      	mov	r1, r3
 801eacc:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801eab4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801ead0:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801ead4:	f7ff faf4 	bl	801e0c0 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801ead8:	f107 030c 	add.w	r3, r7, #12
 801eadc:	4618      	mov	r0, r3
 801eade:	f7ff fea7 	bl	801e830 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801eae2:	69fb      	ldr	r3, [r7, #28]
 801eae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eae6:	f240 2201 	movw	r2, #513	; 0x201
 801eaea:	4619      	mov	r1, r3
 801eaec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801eaf0:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801eab4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801eaf4:	f7ff fae4 	bl	801e0c0 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 801eaf8:	6a3b      	ldr	r3, [r7, #32]
 801eafa:	691a      	ldr	r2, [r3, #16]
 801eafc:	69fb      	ldr	r3, [r7, #28]
 801eafe:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 801eb00:	6a3b      	ldr	r3, [r7, #32]
 801eb02:	68da      	ldr	r2, [r3, #12]
 801eb04:	69fb      	ldr	r3, [r7, #28]
 801eb06:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801eb08:	683b      	ldr	r3, [r7, #0]
 801eb0a:	695b      	ldr	r3, [r3, #20]
 801eb0c:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801eb0e:	69fb      	ldr	r3, [r7, #28]
 801eb10:	9300      	str	r3, [sp, #0]
 801eb12:	693b      	ldr	r3, [r7, #16]
 801eb14:	6a3a      	ldr	r2, [r7, #32]
 801eb16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801eb18:	6878      	ldr	r0, [r7, #4]
 801eb1a:	f7ff fbfd 	bl	801e318 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801eb1e:	4603      	mov	r3, r0
 801eb20:	bf00      	nop
}
 801eb22:	4618      	mov	r0, r3
 801eb24:	372c      	adds	r7, #44	; 0x2c
 801eb26:	46bd      	mov	sp, r7
 801eb28:	bd90      	pop	{r4, r7, pc}
 801eb2a:	bf00      	nop

0801eb2c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 801eb2c:	b580      	push	{r7, lr}
 801eb2e:	b084      	sub	sp, #16
 801eb30:	af00      	add	r7, sp, #0
 801eb32:	6078      	str	r0, [r7, #4]
 801eb34:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 801eb36:	4b21      	ldr	r3, [pc, #132]	; (801ebbc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801eb38:	681a      	ldr	r2, [r3, #0]
 801eb3a:	683b      	ldr	r3, [r7, #0]
 801eb3c:	425b      	negs	r3, r3
 801eb3e:	441a      	add	r2, r3
 801eb40:	4b1f      	ldr	r3, [pc, #124]	; (801ebc0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	429a      	cmp	r2, r3
 801eb46:	d224      	bcs.n	801eb92 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 801eb48:	4b1e      	ldr	r3, [pc, #120]	; (801ebc4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	2b09      	cmp	r3, #9
 801eb4e:	d906      	bls.n	801eb5e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 801eb50:	683b      	ldr	r3, [r7, #0]
 801eb52:	4619      	mov	r1, r3
 801eb54:	481c      	ldr	r0, [pc, #112]	; (801ebc8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 801eb56:	f7e7 f851 	bl	8005bfc <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 801eb5a:	2300      	movs	r3, #0
 801eb5c:	e029      	b.n	801ebb2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801eb5e:	2101      	movs	r1, #1
 801eb60:	6838      	ldr	r0, [r7, #0]
 801eb62:	f7fb fa29 	bl	8019fb8 <_Z9ei_callocjj>
 801eb66:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 801eb68:	68fb      	ldr	r3, [r7, #12]
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	d106      	bne.n	801eb7c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801eb6e:	683b      	ldr	r3, [r7, #0]
 801eb70:	4619      	mov	r1, r3
 801eb72:	4816      	ldr	r0, [pc, #88]	; (801ebcc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 801eb74:	f7e7 f842 	bl	8005bfc <_Z9ei_printfPKcz>
      return NULL;
 801eb78:	2300      	movs	r3, #0
 801eb7a:	e01a      	b.n	801ebb2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 801eb7c:	4b11      	ldr	r3, [pc, #68]	; (801ebc4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801eb7e:	681b      	ldr	r3, [r3, #0]
 801eb80:	1c5a      	adds	r2, r3, #1
 801eb82:	4910      	ldr	r1, [pc, #64]	; (801ebc4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801eb84:	600a      	str	r2, [r1, #0]
 801eb86:	4912      	ldr	r1, [pc, #72]	; (801ebd0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 801eb88:	68fa      	ldr	r2, [r7, #12]
 801eb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 801eb8e:	68fb      	ldr	r3, [r7, #12]
 801eb90:	e00f      	b.n	801ebb2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 801eb92:	4b0a      	ldr	r3, [pc, #40]	; (801ebbc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801eb94:	681a      	ldr	r2, [r3, #0]
 801eb96:	683b      	ldr	r3, [r7, #0]
 801eb98:	425b      	negs	r3, r3
 801eb9a:	4413      	add	r3, r2
 801eb9c:	4a07      	ldr	r2, [pc, #28]	; (801ebbc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801eb9e:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801eba0:	4b06      	ldr	r3, [pc, #24]	; (801ebbc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 801eba6:	683a      	ldr	r2, [r7, #0]
 801eba8:	2100      	movs	r1, #0
 801ebaa:	68f8      	ldr	r0, [r7, #12]
 801ebac:	f003 febc 	bl	8022928 <memset>

  return ptr;
 801ebb0:	68fb      	ldr	r3, [r7, #12]
}
 801ebb2:	4618      	mov	r0, r3
 801ebb4:	3710      	adds	r7, #16
 801ebb6:	46bd      	mov	sp, r7
 801ebb8:	bd80      	pop	{r7, pc}
 801ebba:	bf00      	nop
 801ebbc:	20000554 	.word	0x20000554
 801ebc0:	20000550 	.word	0x20000550
 801ebc4:	200009ec 	.word	0x200009ec
 801ebc8:	0802735c 	.word	0x0802735c
 801ebcc:	080273dc 	.word	0x080273dc
 801ebd0:	200009c4 	.word	0x200009c4

0801ebd4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801ebd4:	b580      	push	{r7, lr}
 801ebd6:	b086      	sub	sp, #24
 801ebd8:	af00      	add	r7, sp, #0
 801ebda:	60f8      	str	r0, [r7, #12]
 801ebdc:	60b9      	str	r1, [r7, #8]
 801ebde:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 801ebe0:	4b1b      	ldr	r3, [pc, #108]	; (801ec50 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	2b03      	cmp	r3, #3
 801ebe6:	d906      	bls.n	801ebf6 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 801ebe8:	68bb      	ldr	r3, [r7, #8]
 801ebea:	4619      	mov	r1, r3
 801ebec:	4819      	ldr	r0, [pc, #100]	; (801ec54 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 801ebee:	f7e7 f805 	bl	8005bfc <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801ebf2:	2301      	movs	r3, #1
 801ebf4:	e028      	b.n	801ec48 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 801ebf6:	68bb      	ldr	r3, [r7, #8]
 801ebf8:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 801ebfa:	693b      	ldr	r3, [r7, #16]
 801ebfc:	4619      	mov	r1, r3
 801ebfe:	68f8      	ldr	r0, [r7, #12]
 801ec00:	f7ff ff94 	bl	801eb2c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 801ec04:	4603      	mov	r3, r0
 801ec06:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 801ec08:	697b      	ldr	r3, [r7, #20]
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d106      	bne.n	801ec1c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 801ec0e:	68bb      	ldr	r3, [r7, #8]
 801ec10:	4619      	mov	r1, r3
 801ec12:	4811      	ldr	r0, [pc, #68]	; (801ec58 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 801ec14:	f7e6 fff2 	bl	8005bfc <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801ec18:	2301      	movs	r3, #1
 801ec1a:	e015      	b.n	801ec48 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 801ec1c:	4b0c      	ldr	r3, [pc, #48]	; (801ec50 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	4a0e      	ldr	r2, [pc, #56]	; (801ec5c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 801ec22:	00db      	lsls	r3, r3, #3
 801ec24:	4413      	add	r3, r2
 801ec26:	f107 0210 	add.w	r2, r7, #16
 801ec2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ec2e:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 801ec32:	4b07      	ldr	r3, [pc, #28]	; (801ec50 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	461a      	mov	r2, r3
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 801ec3c:	4b04      	ldr	r3, [pc, #16]	; (801ec50 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ec3e:	681b      	ldr	r3, [r3, #0]
 801ec40:	3301      	adds	r3, #1
 801ec42:	4a03      	ldr	r2, [pc, #12]	; (801ec50 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ec44:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 801ec46:	2300      	movs	r3, #0
}
 801ec48:	4618      	mov	r0, r3
 801ec4a:	3718      	adds	r7, #24
 801ec4c:	46bd      	mov	sp, r7
 801ec4e:	bd80      	pop	{r7, pc}
 801ec50:	20000a10 	.word	0x20000a10
 801ec54:	08027414 	.word	0x08027414
 801ec58:	0802746c 	.word	0x0802746c
 801ec5c:	200009f0 	.word	0x200009f0

0801ec60 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 801ec60:	b480      	push	{r7}
 801ec62:	b083      	sub	sp, #12
 801ec64:	af00      	add	r7, sp, #0
 801ec66:	6078      	str	r0, [r7, #4]
 801ec68:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801ec6a:	4b09      	ldr	r3, [pc, #36]	; (801ec90 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	461a      	mov	r2, r3
 801ec70:	683b      	ldr	r3, [r7, #0]
 801ec72:	4293      	cmp	r3, r2
 801ec74:	dd01      	ble.n	801ec7a <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 801ec76:	2300      	movs	r3, #0
 801ec78:	e004      	b.n	801ec84 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801ec7a:	4a06      	ldr	r2, [pc, #24]	; (801ec94 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 801ec7c:	683b      	ldr	r3, [r7, #0]
 801ec7e:	00db      	lsls	r3, r3, #3
 801ec80:	4413      	add	r3, r2
 801ec82:	685b      	ldr	r3, [r3, #4]
}
 801ec84:	4618      	mov	r0, r3
 801ec86:	370c      	adds	r7, #12
 801ec88:	46bd      	mov	sp, r7
 801ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec8e:	4770      	bx	lr
 801ec90:	20000a10 	.word	0x20000a10
 801ec94:	200009f0 	.word	0x200009f0

0801ec98 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 801ec98:	b480      	push	{r7}
 801ec9a:	b083      	sub	sp, #12
 801ec9c:	af00      	add	r7, sp, #0
 801ec9e:	6078      	str	r0, [r7, #4]
 801eca0:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801eca2:	683b      	ldr	r3, [r7, #0]
 801eca4:	019b      	lsls	r3, r3, #6
 801eca6:	4a04      	ldr	r2, [pc, #16]	; (801ecb8 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 801eca8:	4413      	add	r3, r2
}
 801ecaa:	4618      	mov	r0, r3
 801ecac:	370c      	adds	r7, #12
 801ecae:	46bd      	mov	sp, r7
 801ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecb4:	4770      	bx	lr
 801ecb6:	bf00      	nop
 801ecb8:	200005b0 	.word	0x200005b0

0801ecbc <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 801ecbc:	b480      	push	{r7}
 801ecbe:	b083      	sub	sp, #12
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	6078      	str	r0, [r7, #4]
 801ecc4:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 801ecc6:	683a      	ldr	r2, [r7, #0]
 801ecc8:	4613      	mov	r3, r2
 801ecca:	005b      	lsls	r3, r3, #1
 801eccc:	4413      	add	r3, r2
 801ecce:	009b      	lsls	r3, r3, #2
 801ecd0:	4a03      	ldr	r2, [pc, #12]	; (801ece0 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801ecd2:	4413      	add	r3, r2
}
 801ecd4:	4618      	mov	r0, r3
 801ecd6:	370c      	adds	r7, #12
 801ecd8:	46bd      	mov	sp, r7
 801ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecde:	4770      	bx	lr
 801ece0:	20000870 	.word	0x20000870

0801ece4 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801ece4:	b5b0      	push	{r4, r5, r7, lr}
 801ece6:	b092      	sub	sp, #72	; 0x48
 801ece8:	af00      	add	r7, sp, #0
 801ecea:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecee:	f44f 7188 	mov.w	r1, #272	; 0x110
 801ecf2:	2010      	movs	r0, #16
 801ecf4:	4798      	blx	r3
 801ecf6:	4603      	mov	r3, r0
 801ecf8:	4aa3      	ldr	r2, [pc, #652]	; (801ef88 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ecfa:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801ecfc:	4ba2      	ldr	r3, [pc, #648]	; (801ef88 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d104      	bne.n	801ed0e <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 801ed04:	48a1      	ldr	r0, [pc, #644]	; (801ef8c <_Z18trained_model_initPFPvjjE+0x2a8>)
 801ed06:	f7e6 ff79 	bl	8005bfc <_Z9ei_printfPKcz>
    return kTfLiteError;
 801ed0a:	2301      	movs	r3, #1
 801ed0c:	e21d      	b.n	801f14a <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801ed0e:	4b9e      	ldr	r3, [pc, #632]	; (801ef88 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	4a9f      	ldr	r2, [pc, #636]	; (801ef90 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ed14:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801ed16:	4b9c      	ldr	r3, [pc, #624]	; (801ef88 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801ed1e:	4a9d      	ldr	r2, [pc, #628]	; (801ef94 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801ed20:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801ed22:	4b9d      	ldr	r3, [pc, #628]	; (801ef98 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ed24:	4a9d      	ldr	r2, [pc, #628]	; (801ef9c <_Z18trained_model_initPFPvjjE+0x2b8>)
 801ed26:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 801ed28:	4b9b      	ldr	r3, [pc, #620]	; (801ef98 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ed2a:	4a9d      	ldr	r2, [pc, #628]	; (801efa0 <_Z18trained_model_initPFPvjjE+0x2bc>)
 801ed2c:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801ed2e:	4b9a      	ldr	r3, [pc, #616]	; (801ef98 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ed30:	4a9c      	ldr	r2, [pc, #624]	; (801efa4 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801ed32:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 801ed34:	4b98      	ldr	r3, [pc, #608]	; (801ef98 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ed36:	4a9c      	ldr	r2, [pc, #624]	; (801efa8 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801ed38:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 801ed3a:	4b97      	ldr	r3, [pc, #604]	; (801ef98 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ed3c:	4a9b      	ldr	r2, [pc, #620]	; (801efac <_Z18trained_model_initPFPvjjE+0x2c8>)
 801ed3e:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 801ed40:	4b95      	ldr	r3, [pc, #596]	; (801ef98 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ed42:	4a9b      	ldr	r2, [pc, #620]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ed44:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 801ed46:	4b94      	ldr	r3, [pc, #592]	; (801ef98 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ed48:	220b      	movs	r2, #11
 801ed4a:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 801ed4c:	2300      	movs	r3, #0
 801ed4e:	647b      	str	r3, [r7, #68]	; 0x44
 801ed50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ed52:	2b0a      	cmp	r3, #10
 801ed54:	f200 810c 	bhi.w	801ef70 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 801ed58:	4996      	ldr	r1, [pc, #600]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ed5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed5c:	4613      	mov	r3, r2
 801ed5e:	005b      	lsls	r3, r3, #1
 801ed60:	4413      	add	r3, r2
 801ed62:	00db      	lsls	r3, r3, #3
 801ed64:	440b      	add	r3, r1
 801ed66:	3301      	adds	r3, #1
 801ed68:	7819      	ldrb	r1, [r3, #0]
 801ed6a:	4a91      	ldr	r2, [pc, #580]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ed6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ed6e:	019b      	lsls	r3, r3, #6
 801ed70:	4413      	add	r3, r2
 801ed72:	460a      	mov	r2, r1
 801ed74:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 801ed76:	498f      	ldr	r1, [pc, #572]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ed78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed7a:	4613      	mov	r3, r2
 801ed7c:	005b      	lsls	r3, r3, #1
 801ed7e:	4413      	add	r3, r2
 801ed80:	00db      	lsls	r3, r3, #3
 801ed82:	440b      	add	r3, r1
 801ed84:	3301      	adds	r3, #1
 801ed86:	7818      	ldrb	r0, [r3, #0]
 801ed88:	498b      	ldr	r1, [pc, #556]	; (801efb8 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ed8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed8c:	4613      	mov	r3, r2
 801ed8e:	005b      	lsls	r3, r3, #1
 801ed90:	4413      	add	r3, r2
 801ed92:	009b      	lsls	r3, r3, #2
 801ed94:	440b      	add	r3, r1
 801ed96:	3308      	adds	r3, #8
 801ed98:	4602      	mov	r2, r0
 801ed9a:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 801ed9c:	4a84      	ldr	r2, [pc, #528]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ed9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eda0:	019b      	lsls	r3, r3, #6
 801eda2:	4413      	add	r3, r2
 801eda4:	332d      	adds	r3, #45	; 0x2d
 801eda6:	2200      	movs	r2, #0
 801eda8:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 801edaa:	4982      	ldr	r1, [pc, #520]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801edac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801edae:	4613      	mov	r3, r2
 801edb0:	005b      	lsls	r3, r3, #1
 801edb2:	4413      	add	r3, r2
 801edb4:	00db      	lsls	r3, r3, #3
 801edb6:	440b      	add	r3, r1
 801edb8:	7819      	ldrb	r1, [r3, #0]
 801edba:	4a7d      	ldr	r2, [pc, #500]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801edbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801edbe:	019b      	lsls	r3, r3, #6
 801edc0:	4413      	add	r3, r2
 801edc2:	3314      	adds	r3, #20
 801edc4:	460a      	mov	r2, r1
 801edc6:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801edc8:	497a      	ldr	r1, [pc, #488]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801edca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801edcc:	4613      	mov	r3, r2
 801edce:	005b      	lsls	r3, r3, #1
 801edd0:	4413      	add	r3, r2
 801edd2:	00db      	lsls	r3, r3, #3
 801edd4:	440b      	add	r3, r1
 801edd6:	330c      	adds	r3, #12
 801edd8:	681a      	ldr	r2, [r3, #0]
 801edda:	4975      	ldr	r1, [pc, #468]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801edde:	019b      	lsls	r3, r3, #6
 801ede0:	440b      	add	r3, r1
 801ede2:	3318      	adds	r3, #24
 801ede4:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 801ede6:	4973      	ldr	r1, [pc, #460]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ede8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801edea:	4613      	mov	r3, r2
 801edec:	005b      	lsls	r3, r3, #1
 801edee:	4413      	add	r3, r2
 801edf0:	00db      	lsls	r3, r3, #3
 801edf2:	440b      	add	r3, r1
 801edf4:	3308      	adds	r3, #8
 801edf6:	681a      	ldr	r2, [r3, #0]
 801edf8:	496d      	ldr	r1, [pc, #436]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801edfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801edfc:	019b      	lsls	r3, r3, #6
 801edfe:	440b      	add	r3, r1
 801ee00:	3308      	adds	r3, #8
 801ee02:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 801ee04:	496b      	ldr	r1, [pc, #428]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee08:	4613      	mov	r3, r2
 801ee0a:	005b      	lsls	r3, r3, #1
 801ee0c:	4413      	add	r3, r2
 801ee0e:	00db      	lsls	r3, r3, #3
 801ee10:	440b      	add	r3, r1
 801ee12:	3308      	adds	r3, #8
 801ee14:	6819      	ldr	r1, [r3, #0]
 801ee16:	4868      	ldr	r0, [pc, #416]	; (801efb8 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ee18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee1a:	4613      	mov	r3, r2
 801ee1c:	005b      	lsls	r3, r3, #1
 801ee1e:	4413      	add	r3, r2
 801ee20:	009b      	lsls	r3, r3, #2
 801ee22:	4403      	add	r3, r0
 801ee24:	3304      	adds	r3, #4
 801ee26:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801ee28:	4a61      	ldr	r2, [pc, #388]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee2c:	019b      	lsls	r3, r3, #6
 801ee2e:	4413      	add	r3, r2
 801ee30:	3314      	adds	r3, #20
 801ee32:	781b      	ldrb	r3, [r3, #0]
 801ee34:	2b02      	cmp	r3, #2
 801ee36:	d11e      	bne.n	801ee76 <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801ee38:	495e      	ldr	r1, [pc, #376]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee3c:	4613      	mov	r3, r2
 801ee3e:	005b      	lsls	r3, r3, #1
 801ee40:	4413      	add	r3, r2
 801ee42:	00db      	lsls	r3, r3, #3
 801ee44:	440b      	add	r3, r1
 801ee46:	3304      	adds	r3, #4
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	461a      	mov	r2, r3
 801ee4c:	4b4e      	ldr	r3, [pc, #312]	; (801ef88 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	4413      	add	r3, r2
 801ee52:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 801ee54:	4a56      	ldr	r2, [pc, #344]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee58:	019b      	lsls	r3, r3, #6
 801ee5a:	4413      	add	r3, r2
 801ee5c:	3304      	adds	r3, #4
 801ee5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ee60:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 801ee62:	4955      	ldr	r1, [pc, #340]	; (801efb8 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ee64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee66:	4613      	mov	r3, r2
 801ee68:	005b      	lsls	r3, r3, #1
 801ee6a:	4413      	add	r3, r2
 801ee6c:	009b      	lsls	r3, r3, #2
 801ee6e:	440b      	add	r3, r1
 801ee70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ee72:	601a      	str	r2, [r3, #0]
 801ee74:	e01f      	b.n	801eeb6 <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 801ee76:	494f      	ldr	r1, [pc, #316]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee7a:	4613      	mov	r3, r2
 801ee7c:	005b      	lsls	r3, r3, #1
 801ee7e:	4413      	add	r3, r2
 801ee80:	00db      	lsls	r3, r3, #3
 801ee82:	440b      	add	r3, r1
 801ee84:	3304      	adds	r3, #4
 801ee86:	681a      	ldr	r2, [r3, #0]
 801ee88:	4949      	ldr	r1, [pc, #292]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee8c:	019b      	lsls	r3, r3, #6
 801ee8e:	440b      	add	r3, r1
 801ee90:	3304      	adds	r3, #4
 801ee92:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 801ee94:	4947      	ldr	r1, [pc, #284]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee98:	4613      	mov	r3, r2
 801ee9a:	005b      	lsls	r3, r3, #1
 801ee9c:	4413      	add	r3, r2
 801ee9e:	00db      	lsls	r3, r3, #3
 801eea0:	440b      	add	r3, r1
 801eea2:	3304      	adds	r3, #4
 801eea4:	6819      	ldr	r1, [r3, #0]
 801eea6:	4844      	ldr	r0, [pc, #272]	; (801efb8 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801eea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eeaa:	4613      	mov	r3, r2
 801eeac:	005b      	lsls	r3, r3, #1
 801eeae:	4413      	add	r3, r2
 801eeb0:	009b      	lsls	r3, r3, #2
 801eeb2:	4403      	add	r3, r0
 801eeb4:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 801eeb6:	4a3e      	ldr	r2, [pc, #248]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eeb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eeba:	019b      	lsls	r3, r3, #6
 801eebc:	4413      	add	r3, r2
 801eebe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801eec2:	493c      	ldr	r1, [pc, #240]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801eec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eec6:	4613      	mov	r3, r2
 801eec8:	005b      	lsls	r3, r3, #1
 801eeca:	4413      	add	r3, r2
 801eecc:	00db      	lsls	r3, r3, #3
 801eece:	440b      	add	r3, r1
 801eed0:	f103 0210 	add.w	r2, r3, #16
 801eed4:	4603      	mov	r3, r0
 801eed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801eeda:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801eede:	4a34      	ldr	r2, [pc, #208]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eee2:	019b      	lsls	r3, r3, #6
 801eee4:	4413      	add	r3, r2
 801eee6:	3330      	adds	r3, #48	; 0x30
 801eee8:	781b      	ldrb	r3, [r3, #0]
 801eeea:	2b01      	cmp	r3, #1
 801eeec:	d11b      	bne.n	801ef26 <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801eeee:	4931      	ldr	r1, [pc, #196]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801eef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eef2:	4613      	mov	r3, r2
 801eef4:	005b      	lsls	r3, r3, #1
 801eef6:	4413      	add	r3, r2
 801eef8:	00db      	lsls	r3, r3, #3
 801eefa:	440b      	add	r3, r1
 801eefc:	3314      	adds	r3, #20
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801ef02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	685a      	ldr	r2, [r3, #4]
 801ef08:	4929      	ldr	r1, [pc, #164]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ef0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef0c:	019b      	lsls	r3, r3, #6
 801ef0e:	440b      	add	r3, r1
 801ef10:	330c      	adds	r3, #12
 801ef12:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 801ef14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef16:	685b      	ldr	r3, [r3, #4]
 801ef18:	685a      	ldr	r2, [r3, #4]
 801ef1a:	4925      	ldr	r1, [pc, #148]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ef1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef1e:	019b      	lsls	r3, r3, #6
 801ef20:	440b      	add	r3, r1
 801ef22:	3310      	adds	r3, #16
 801ef24:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 801ef26:	4a22      	ldr	r2, [pc, #136]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ef28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef2a:	019b      	lsls	r3, r3, #6
 801ef2c:	4413      	add	r3, r2
 801ef2e:	3314      	adds	r3, #20
 801ef30:	781b      	ldrb	r3, [r3, #0]
 801ef32:	2b02      	cmp	r3, #2
 801ef34:	d118      	bne.n	801ef68 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 801ef36:	4a1e      	ldr	r2, [pc, #120]	; (801efb0 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ef38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef3a:	019b      	lsls	r3, r3, #6
 801ef3c:	4413      	add	r3, r2
 801ef3e:	3304      	adds	r3, #4
 801ef40:	6819      	ldr	r1, [r3, #0]
 801ef42:	481c      	ldr	r0, [pc, #112]	; (801efb4 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ef44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef46:	4613      	mov	r3, r2
 801ef48:	005b      	lsls	r3, r3, #1
 801ef4a:	4413      	add	r3, r2
 801ef4c:	00db      	lsls	r3, r3, #3
 801ef4e:	4403      	add	r3, r0
 801ef50:	330c      	adds	r3, #12
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	440b      	add	r3, r1
 801ef56:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 801ef58:	4b0d      	ldr	r3, [pc, #52]	; (801ef90 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ef5e:	429a      	cmp	r2, r3
 801ef60:	d902      	bls.n	801ef68 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 801ef62:	4a0b      	ldr	r2, [pc, #44]	; (801ef90 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ef64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef66:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 801ef68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef6a:	3301      	adds	r3, #1
 801ef6c:	647b      	str	r3, [r7, #68]	; 0x44
 801ef6e:	e6ef      	b.n	801ed50 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801ef70:	4b07      	ldr	r3, [pc, #28]	; (801ef90 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ef72:	681a      	ldr	r2, [r3, #0]
 801ef74:	4b07      	ldr	r3, [pc, #28]	; (801ef94 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	429a      	cmp	r2, r3
 801ef7a:	d921      	bls.n	801efc0 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 801ef7c:	480f      	ldr	r0, [pc, #60]	; (801efbc <_Z18trained_model_initPFPvjjE+0x2d8>)
 801ef7e:	f7e6 fe3d 	bl	8005bfc <_Z9ei_printfPKcz>
    return kTfLiteError;
 801ef82:	2301      	movs	r3, #1
 801ef84:	e0e1      	b.n	801f14a <_Z18trained_model_initPFPvjjE+0x466>
 801ef86:	bf00      	nop
 801ef88:	2000054c 	.word	0x2000054c
 801ef8c:	080274a0 	.word	0x080274a0
 801ef90:	20000550 	.word	0x20000550
 801ef94:	20000554 	.word	0x20000554
 801ef98:	20000558 	.word	0x20000558
 801ef9c:	0801eb2d 	.word	0x0801eb2d
 801efa0:	0801ebd5 	.word	0x0801ebd5
 801efa4:	0801ec61 	.word	0x0801ec61
 801efa8:	0801ec99 	.word	0x0801ec99
 801efac:	0801ecbd 	.word	0x0801ecbd
 801efb0:	200005b0 	.word	0x200005b0
 801efb4:	20000104 	.word	0x20000104
 801efb8:	20000870 	.word	0x20000870
 801efbc:	080274c8 	.word	0x080274c8
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801efc0:	4c64      	ldr	r4, [pc, #400]	; (801f154 <_Z18trained_model_initPFPvjjE+0x470>)
 801efc2:	463b      	mov	r3, r7
 801efc4:	4618      	mov	r0, r3
 801efc6:	f7fd fe59 	bl	801cc7c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801efca:	4625      	mov	r5, r4
 801efcc:	463c      	mov	r4, r7
 801efce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801efd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801efd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801efd6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801efda:	4c5e      	ldr	r4, [pc, #376]	; (801f154 <_Z18trained_model_initPFPvjjE+0x470>)
 801efdc:	463b      	mov	r3, r7
 801efde:	4618      	mov	r0, r3
 801efe0:	f7fe fc7c 	bl	801d8dc <_ZN6tflite16Register_SOFTMAXEv>
 801efe4:	3420      	adds	r4, #32
 801efe6:	463d      	mov	r5, r7
 801efe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801efea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801efec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801eff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 801eff4:	2300      	movs	r3, #0
 801eff6:	643b      	str	r3, [r7, #64]	; 0x40
 801eff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801effa:	2b03      	cmp	r3, #3
 801effc:	d86f      	bhi.n	801f0de <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 801effe:	4a56      	ldr	r2, [pc, #344]	; (801f158 <_Z18trained_model_initPFPvjjE+0x474>)
 801f000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f002:	011b      	lsls	r3, r3, #4
 801f004:	4413      	add	r3, r2
 801f006:	6819      	ldr	r1, [r3, #0]
 801f008:	4854      	ldr	r0, [pc, #336]	; (801f15c <_Z18trained_model_initPFPvjjE+0x478>)
 801f00a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f00c:	4613      	mov	r3, r2
 801f00e:	00db      	lsls	r3, r3, #3
 801f010:	4413      	add	r3, r2
 801f012:	009b      	lsls	r3, r3, #2
 801f014:	4403      	add	r3, r0
 801f016:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 801f018:	4a4f      	ldr	r2, [pc, #316]	; (801f158 <_Z18trained_model_initPFPvjjE+0x474>)
 801f01a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f01c:	011b      	lsls	r3, r3, #4
 801f01e:	4413      	add	r3, r2
 801f020:	3304      	adds	r3, #4
 801f022:	6819      	ldr	r1, [r3, #0]
 801f024:	484d      	ldr	r0, [pc, #308]	; (801f15c <_Z18trained_model_initPFPvjjE+0x478>)
 801f026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f028:	4613      	mov	r3, r2
 801f02a:	00db      	lsls	r3, r3, #3
 801f02c:	4413      	add	r3, r2
 801f02e:	009b      	lsls	r3, r3, #2
 801f030:	4403      	add	r3, r0
 801f032:	3304      	adds	r3, #4
 801f034:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801f036:	4a48      	ldr	r2, [pc, #288]	; (801f158 <_Z18trained_model_initPFPvjjE+0x474>)
 801f038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f03a:	011b      	lsls	r3, r3, #4
 801f03c:	4413      	add	r3, r2
 801f03e:	3308      	adds	r3, #8
 801f040:	6819      	ldr	r1, [r3, #0]
 801f042:	4846      	ldr	r0, [pc, #280]	; (801f15c <_Z18trained_model_initPFPvjjE+0x478>)
 801f044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f046:	4613      	mov	r3, r2
 801f048:	00db      	lsls	r3, r3, #3
 801f04a:	4413      	add	r3, r2
 801f04c:	009b      	lsls	r3, r3, #2
 801f04e:	4403      	add	r3, r0
 801f050:	3314      	adds	r3, #20
 801f052:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 801f054:	4941      	ldr	r1, [pc, #260]	; (801f15c <_Z18trained_model_initPFPvjjE+0x478>)
 801f056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f058:	4613      	mov	r3, r2
 801f05a:	00db      	lsls	r3, r3, #3
 801f05c:	4413      	add	r3, r2
 801f05e:	009b      	lsls	r3, r3, #2
 801f060:	440b      	add	r3, r1
 801f062:	3318      	adds	r3, #24
 801f064:	2200      	movs	r2, #0
 801f066:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 801f068:	493c      	ldr	r1, [pc, #240]	; (801f15c <_Z18trained_model_initPFPvjjE+0x478>)
 801f06a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f06c:	4613      	mov	r3, r2
 801f06e:	00db      	lsls	r3, r3, #3
 801f070:	4413      	add	r3, r2
 801f072:	009b      	lsls	r3, r3, #2
 801f074:	440b      	add	r3, r1
 801f076:	331c      	adds	r3, #28
 801f078:	2200      	movs	r2, #0
 801f07a:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 801f07c:	4a36      	ldr	r2, [pc, #216]	; (801f158 <_Z18trained_model_initPFPvjjE+0x474>)
 801f07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f080:	011b      	lsls	r3, r3, #4
 801f082:	4413      	add	r3, r2
 801f084:	330c      	adds	r3, #12
 801f086:	781b      	ldrb	r3, [r3, #0]
 801f088:	4a32      	ldr	r2, [pc, #200]	; (801f154 <_Z18trained_model_initPFPvjjE+0x470>)
 801f08a:	015b      	lsls	r3, r3, #5
 801f08c:	4413      	add	r3, r2
 801f08e:	681b      	ldr	r3, [r3, #0]
 801f090:	2b00      	cmp	r3, #0
 801f092:	d020      	beq.n	801f0d6 <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801f094:	4a30      	ldr	r2, [pc, #192]	; (801f158 <_Z18trained_model_initPFPvjjE+0x474>)
 801f096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f098:	011b      	lsls	r3, r3, #4
 801f09a:	4413      	add	r3, r2
 801f09c:	330c      	adds	r3, #12
 801f09e:	781b      	ldrb	r3, [r3, #0]
 801f0a0:	4a2c      	ldr	r2, [pc, #176]	; (801f154 <_Z18trained_model_initPFPvjjE+0x470>)
 801f0a2:	015b      	lsls	r3, r3, #5
 801f0a4:	4413      	add	r3, r2
 801f0a6:	681c      	ldr	r4, [r3, #0]
 801f0a8:	492c      	ldr	r1, [pc, #176]	; (801f15c <_Z18trained_model_initPFPvjjE+0x478>)
 801f0aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f0ac:	4613      	mov	r3, r2
 801f0ae:	00db      	lsls	r3, r3, #3
 801f0b0:	4413      	add	r3, r2
 801f0b2:	009b      	lsls	r3, r3, #2
 801f0b4:	440b      	add	r3, r1
 801f0b6:	3314      	adds	r3, #20
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	4619      	mov	r1, r3
 801f0be:	4828      	ldr	r0, [pc, #160]	; (801f160 <_Z18trained_model_initPFPvjjE+0x47c>)
 801f0c0:	47a0      	blx	r4
 801f0c2:	4601      	mov	r1, r0
 801f0c4:	4825      	ldr	r0, [pc, #148]	; (801f15c <_Z18trained_model_initPFPvjjE+0x478>)
 801f0c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f0c8:	4613      	mov	r3, r2
 801f0ca:	00db      	lsls	r3, r3, #3
 801f0cc:	4413      	add	r3, r2
 801f0ce:	009b      	lsls	r3, r3, #2
 801f0d0:	4403      	add	r3, r0
 801f0d2:	3310      	adds	r3, #16
 801f0d4:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 801f0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0d8:	3301      	adds	r3, #1
 801f0da:	643b      	str	r3, [r7, #64]	; 0x40
 801f0dc:	e78c      	b.n	801eff8 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 801f0de:	2300      	movs	r3, #0
 801f0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0e4:	2b03      	cmp	r3, #3
 801f0e6:	d82f      	bhi.n	801f148 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 801f0e8:	4a1b      	ldr	r2, [pc, #108]	; (801f158 <_Z18trained_model_initPFPvjjE+0x474>)
 801f0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0ec:	011b      	lsls	r3, r3, #4
 801f0ee:	4413      	add	r3, r2
 801f0f0:	330c      	adds	r3, #12
 801f0f2:	781b      	ldrb	r3, [r3, #0]
 801f0f4:	4a17      	ldr	r2, [pc, #92]	; (801f154 <_Z18trained_model_initPFPvjjE+0x470>)
 801f0f6:	015b      	lsls	r3, r3, #5
 801f0f8:	4413      	add	r3, r2
 801f0fa:	3308      	adds	r3, #8
 801f0fc:	681b      	ldr	r3, [r3, #0]
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d01e      	beq.n	801f140 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801f102:	4a15      	ldr	r2, [pc, #84]	; (801f158 <_Z18trained_model_initPFPvjjE+0x474>)
 801f104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f106:	011b      	lsls	r3, r3, #4
 801f108:	4413      	add	r3, r2
 801f10a:	330c      	adds	r3, #12
 801f10c:	781b      	ldrb	r3, [r3, #0]
 801f10e:	4a11      	ldr	r2, [pc, #68]	; (801f154 <_Z18trained_model_initPFPvjjE+0x470>)
 801f110:	015b      	lsls	r3, r3, #5
 801f112:	4413      	add	r3, r2
 801f114:	3308      	adds	r3, #8
 801f116:	681c      	ldr	r4, [r3, #0]
 801f118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f11a:	4613      	mov	r3, r2
 801f11c:	00db      	lsls	r3, r3, #3
 801f11e:	4413      	add	r3, r2
 801f120:	009b      	lsls	r3, r3, #2
 801f122:	4a0e      	ldr	r2, [pc, #56]	; (801f15c <_Z18trained_model_initPFPvjjE+0x478>)
 801f124:	4413      	add	r3, r2
 801f126:	4619      	mov	r1, r3
 801f128:	480d      	ldr	r0, [pc, #52]	; (801f160 <_Z18trained_model_initPFPvjjE+0x47c>)
 801f12a:	47a0      	blx	r4
 801f12c:	4603      	mov	r3, r0
 801f12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801f132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f136:	2b00      	cmp	r3, #0
 801f138:	d002      	beq.n	801f140 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 801f13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f13e:	e004      	b.n	801f14a <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 801f140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f142:	3301      	adds	r3, #1
 801f144:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f146:	e7cc      	b.n	801f0e2 <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 801f148:	2300      	movs	r3, #0
}
 801f14a:	4618      	mov	r0, r3
 801f14c:	3748      	adds	r7, #72	; 0x48
 801f14e:	46bd      	mov	sp, r7
 801f150:	bdb0      	pop	{r4, r5, r7, pc}
 801f152:	bf00      	nop
 801f154:	200008f4 	.word	0x200008f4
 801f158:	0802a214 	.word	0x0802a214
 801f15c:	20000934 	.word	0x20000934
 801f160:	20000558 	.word	0x20000558

0801f164 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 801f164:	b480      	push	{r7}
 801f166:	b083      	sub	sp, #12
 801f168:	af00      	add	r7, sp, #0
 801f16a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801f16c:	4b05      	ldr	r3, [pc, #20]	; (801f184 <_Z19trained_model_inputi+0x20>)
 801f16e:	689a      	ldr	r2, [r3, #8]
 801f170:	2300      	movs	r3, #0
 801f172:	019b      	lsls	r3, r3, #6
 801f174:	4413      	add	r3, r2
}
 801f176:	4618      	mov	r0, r3
 801f178:	370c      	adds	r7, #12
 801f17a:	46bd      	mov	sp, r7
 801f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f180:	4770      	bx	lr
 801f182:	bf00      	nop
 801f184:	20000558 	.word	0x20000558

0801f188 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 801f188:	b480      	push	{r7}
 801f18a:	b083      	sub	sp, #12
 801f18c:	af00      	add	r7, sp, #0
 801f18e:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 801f190:	4b05      	ldr	r3, [pc, #20]	; (801f1a8 <_Z20trained_model_outputi+0x20>)
 801f192:	689a      	ldr	r2, [r3, #8]
 801f194:	230a      	movs	r3, #10
 801f196:	019b      	lsls	r3, r3, #6
 801f198:	4413      	add	r3, r2
}
 801f19a:	4618      	mov	r0, r3
 801f19c:	370c      	adds	r7, #12
 801f19e:	46bd      	mov	sp, r7
 801f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1a4:	4770      	bx	lr
 801f1a6:	bf00      	nop
 801f1a8:	20000558 	.word	0x20000558

0801f1ac <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 801f1ac:	b590      	push	{r4, r7, lr}
 801f1ae:	b083      	sub	sp, #12
 801f1b0:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	607b      	str	r3, [r7, #4]
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	2b03      	cmp	r3, #3
 801f1ba:	d81f      	bhi.n	801f1fc <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 801f1bc:	4a12      	ldr	r2, [pc, #72]	; (801f208 <_Z20trained_model_invokev+0x5c>)
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	011b      	lsls	r3, r3, #4
 801f1c2:	4413      	add	r3, r2
 801f1c4:	330c      	adds	r3, #12
 801f1c6:	781b      	ldrb	r3, [r3, #0]
 801f1c8:	4a10      	ldr	r2, [pc, #64]	; (801f20c <_Z20trained_model_invokev+0x60>)
 801f1ca:	015b      	lsls	r3, r3, #5
 801f1cc:	4413      	add	r3, r2
 801f1ce:	330c      	adds	r3, #12
 801f1d0:	681c      	ldr	r4, [r3, #0]
 801f1d2:	687a      	ldr	r2, [r7, #4]
 801f1d4:	4613      	mov	r3, r2
 801f1d6:	00db      	lsls	r3, r3, #3
 801f1d8:	4413      	add	r3, r2
 801f1da:	009b      	lsls	r3, r3, #2
 801f1dc:	4a0c      	ldr	r2, [pc, #48]	; (801f210 <_Z20trained_model_invokev+0x64>)
 801f1de:	4413      	add	r3, r2
 801f1e0:	4619      	mov	r1, r3
 801f1e2:	480c      	ldr	r0, [pc, #48]	; (801f214 <_Z20trained_model_invokev+0x68>)
 801f1e4:	47a0      	blx	r4
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801f1ea:	78fb      	ldrb	r3, [r7, #3]
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d001      	beq.n	801f1f4 <_Z20trained_model_invokev+0x48>
      return status;
 801f1f0:	78fb      	ldrb	r3, [r7, #3]
 801f1f2:	e004      	b.n	801f1fe <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	3301      	adds	r3, #1
 801f1f8:	607b      	str	r3, [r7, #4]
 801f1fa:	e7dc      	b.n	801f1b6 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801f1fc:	2300      	movs	r3, #0
}
 801f1fe:	4618      	mov	r0, r3
 801f200:	370c      	adds	r7, #12
 801f202:	46bd      	mov	sp, r7
 801f204:	bd90      	pop	{r4, r7, pc}
 801f206:	bf00      	nop
 801f208:	0802a214 	.word	0x0802a214
 801f20c:	200008f4 	.word	0x200008f4
 801f210:	20000934 	.word	0x20000934
 801f214:	20000558 	.word	0x20000558

0801f218 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 801f218:	b580      	push	{r7, lr}
 801f21a:	b084      	sub	sp, #16
 801f21c:	af00      	add	r7, sp, #0
 801f21e:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 801f220:	4b10      	ldr	r3, [pc, #64]	; (801f264 <_Z19trained_model_resetPFvPvE+0x4c>)
 801f222:	681a      	ldr	r2, [r3, #0]
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	4610      	mov	r0, r2
 801f228:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 801f22a:	4b0f      	ldr	r3, [pc, #60]	; (801f268 <_Z19trained_model_resetPFvPvE+0x50>)
 801f22c:	2200      	movs	r2, #0
 801f22e:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801f230:	2300      	movs	r3, #0
 801f232:	60fb      	str	r3, [r7, #12]
 801f234:	4b0d      	ldr	r3, [pc, #52]	; (801f26c <_Z19trained_model_resetPFvPvE+0x54>)
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	68fa      	ldr	r2, [r7, #12]
 801f23a:	429a      	cmp	r2, r3
 801f23c:	d20a      	bcs.n	801f254 <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 801f23e:	4a0c      	ldr	r2, [pc, #48]	; (801f270 <_Z19trained_model_resetPFvPvE+0x58>)
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f246:	4618      	mov	r0, r3
 801f248:	f7fa fec4 	bl	8019fd4 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	3301      	adds	r3, #1
 801f250:	60fb      	str	r3, [r7, #12]
 801f252:	e7ef      	b.n	801f234 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 801f254:	4b05      	ldr	r3, [pc, #20]	; (801f26c <_Z19trained_model_resetPFvPvE+0x54>)
 801f256:	2200      	movs	r2, #0
 801f258:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801f25a:	2300      	movs	r3, #0
}
 801f25c:	4618      	mov	r0, r3
 801f25e:	3710      	adds	r7, #16
 801f260:	46bd      	mov	sp, r7
 801f262:	bd80      	pop	{r7, pc}
 801f264:	2000054c 	.word	0x2000054c
 801f268:	20000a10 	.word	0x20000a10
 801f26c:	200009ec 	.word	0x200009ec
 801f270:	200009c4 	.word	0x200009c4

0801f274 <_Z41__static_initialization_and_destruction_0ii>:
 801f274:	b480      	push	{r7}
 801f276:	b083      	sub	sp, #12
 801f278:	af00      	add	r7, sp, #0
 801f27a:	6078      	str	r0, [r7, #4]
 801f27c:	6039      	str	r1, [r7, #0]
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	2b01      	cmp	r3, #1
 801f282:	d11e      	bne.n	801f2c2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 801f284:	683b      	ldr	r3, [r7, #0]
 801f286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f28a:	4293      	cmp	r3, r2
 801f28c:	d119      	bne.n	801f2c2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
};const NodeInfo_t nodeData[] = {
 801f28e:	4b10      	ldr	r3, [pc, #64]	; (801f2d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f290:	681b      	ldr	r3, [r3, #0]
 801f292:	4a10      	ldr	r2, [pc, #64]	; (801f2d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f294:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 801f296:	4b0e      	ldr	r3, [pc, #56]	; (801f2d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 801f29c:	4a0d      	ldr	r2, [pc, #52]	; (801f2d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f29e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 801f2a2:	4b0b      	ldr	r3, [pc, #44]	; (801f2d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	4a0b      	ldr	r2, [pc, #44]	; (801f2d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f2a8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 801f2ac:	4b08      	ldr	r3, [pc, #32]	; (801f2d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 801f2b2:	4a08      	ldr	r2, [pc, #32]	; (801f2d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f2b4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801f2b8:	4b05      	ldr	r3, [pc, #20]	; (801f2d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	4a05      	ldr	r2, [pc, #20]	; (801f2d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f2be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 801f2c2:	bf00      	nop
 801f2c4:	370c      	adds	r7, #12
 801f2c6:	46bd      	mov	sp, r7
 801f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2cc:	4770      	bx	lr
 801f2ce:	bf00      	nop
 801f2d0:	2000054c 	.word	0x2000054c
 801f2d4:	20000104 	.word	0x20000104

0801f2d8 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 801f2d8:	b580      	push	{r7, lr}
 801f2da:	af00      	add	r7, sp, #0
 801f2dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f2e0:	2001      	movs	r0, #1
 801f2e2:	f7ff ffc7 	bl	801f274 <_Z41__static_initialization_and_destruction_0ii>
 801f2e6:	bd80      	pop	{r7, pc}

0801f2e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f2e8:	b580      	push	{r7, lr}
 801f2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f2ec:	2200      	movs	r2, #0
 801f2ee:	4912      	ldr	r1, [pc, #72]	; (801f338 <MX_USB_DEVICE_Init+0x50>)
 801f2f0:	4812      	ldr	r0, [pc, #72]	; (801f33c <MX_USB_DEVICE_Init+0x54>)
 801f2f2:	f7ee fb43 	bl	800d97c <USBD_Init>
 801f2f6:	4603      	mov	r3, r0
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	d001      	beq.n	801f300 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801f2fc:	f7e6 fe74 	bl	8005fe8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f300:	490f      	ldr	r1, [pc, #60]	; (801f340 <MX_USB_DEVICE_Init+0x58>)
 801f302:	480e      	ldr	r0, [pc, #56]	; (801f33c <MX_USB_DEVICE_Init+0x54>)
 801f304:	f7ee fb6a 	bl	800d9dc <USBD_RegisterClass>
 801f308:	4603      	mov	r3, r0
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d001      	beq.n	801f312 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801f30e:	f7e6 fe6b 	bl	8005fe8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f312:	490c      	ldr	r1, [pc, #48]	; (801f344 <MX_USB_DEVICE_Init+0x5c>)
 801f314:	4809      	ldr	r0, [pc, #36]	; (801f33c <MX_USB_DEVICE_Init+0x54>)
 801f316:	f7ee fa5b 	bl	800d7d0 <USBD_CDC_RegisterInterface>
 801f31a:	4603      	mov	r3, r0
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d001      	beq.n	801f324 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801f320:	f7e6 fe62 	bl	8005fe8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f324:	4805      	ldr	r0, [pc, #20]	; (801f33c <MX_USB_DEVICE_Init+0x54>)
 801f326:	f7ee fb8f 	bl	800da48 <USBD_Start>
 801f32a:	4603      	mov	r3, r0
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d001      	beq.n	801f334 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801f330:	f7e6 fe5a 	bl	8005fe8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f334:	bf00      	nop
 801f336:	bd80      	pop	{r7, pc}
 801f338:	20000220 	.word	0x20000220
 801f33c:	20000a14 	.word	0x20000a14
 801f340:	20000078 	.word	0x20000078
 801f344:	2000020c 	.word	0x2000020c

0801f348 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801f348:	b580      	push	{r7, lr}
 801f34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f34c:	2200      	movs	r2, #0
 801f34e:	4905      	ldr	r1, [pc, #20]	; (801f364 <CDC_Init_FS+0x1c>)
 801f350:	4805      	ldr	r0, [pc, #20]	; (801f368 <CDC_Init_FS+0x20>)
 801f352:	f7ee fa57 	bl	800d804 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f356:	4905      	ldr	r1, [pc, #20]	; (801f36c <CDC_Init_FS+0x24>)
 801f358:	4803      	ldr	r0, [pc, #12]	; (801f368 <CDC_Init_FS+0x20>)
 801f35a:	f7ee fa75 	bl	800d848 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801f35e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801f360:	4618      	mov	r0, r3
 801f362:	bd80      	pop	{r7, pc}
 801f364:	200014f0 	.word	0x200014f0
 801f368:	20000a14 	.word	0x20000a14
 801f36c:	20000cf0 	.word	0x20000cf0

0801f370 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801f370:	b480      	push	{r7}
 801f372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801f374:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801f376:	4618      	mov	r0, r3
 801f378:	46bd      	mov	sp, r7
 801f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f37e:	4770      	bx	lr

0801f380 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801f380:	b480      	push	{r7}
 801f382:	b083      	sub	sp, #12
 801f384:	af00      	add	r7, sp, #0
 801f386:	4603      	mov	r3, r0
 801f388:	6039      	str	r1, [r7, #0]
 801f38a:	71fb      	strb	r3, [r7, #7]
 801f38c:	4613      	mov	r3, r2
 801f38e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801f390:	79fb      	ldrb	r3, [r7, #7]
 801f392:	2b23      	cmp	r3, #35	; 0x23
 801f394:	d84a      	bhi.n	801f42c <CDC_Control_FS+0xac>
 801f396:	a201      	add	r2, pc, #4	; (adr r2, 801f39c <CDC_Control_FS+0x1c>)
 801f398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f39c:	0801f42d 	.word	0x0801f42d
 801f3a0:	0801f42d 	.word	0x0801f42d
 801f3a4:	0801f42d 	.word	0x0801f42d
 801f3a8:	0801f42d 	.word	0x0801f42d
 801f3ac:	0801f42d 	.word	0x0801f42d
 801f3b0:	0801f42d 	.word	0x0801f42d
 801f3b4:	0801f42d 	.word	0x0801f42d
 801f3b8:	0801f42d 	.word	0x0801f42d
 801f3bc:	0801f42d 	.word	0x0801f42d
 801f3c0:	0801f42d 	.word	0x0801f42d
 801f3c4:	0801f42d 	.word	0x0801f42d
 801f3c8:	0801f42d 	.word	0x0801f42d
 801f3cc:	0801f42d 	.word	0x0801f42d
 801f3d0:	0801f42d 	.word	0x0801f42d
 801f3d4:	0801f42d 	.word	0x0801f42d
 801f3d8:	0801f42d 	.word	0x0801f42d
 801f3dc:	0801f42d 	.word	0x0801f42d
 801f3e0:	0801f42d 	.word	0x0801f42d
 801f3e4:	0801f42d 	.word	0x0801f42d
 801f3e8:	0801f42d 	.word	0x0801f42d
 801f3ec:	0801f42d 	.word	0x0801f42d
 801f3f0:	0801f42d 	.word	0x0801f42d
 801f3f4:	0801f42d 	.word	0x0801f42d
 801f3f8:	0801f42d 	.word	0x0801f42d
 801f3fc:	0801f42d 	.word	0x0801f42d
 801f400:	0801f42d 	.word	0x0801f42d
 801f404:	0801f42d 	.word	0x0801f42d
 801f408:	0801f42d 	.word	0x0801f42d
 801f40c:	0801f42d 	.word	0x0801f42d
 801f410:	0801f42d 	.word	0x0801f42d
 801f414:	0801f42d 	.word	0x0801f42d
 801f418:	0801f42d 	.word	0x0801f42d
 801f41c:	0801f42d 	.word	0x0801f42d
 801f420:	0801f42d 	.word	0x0801f42d
 801f424:	0801f42d 	.word	0x0801f42d
 801f428:	0801f42d 	.word	0x0801f42d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801f42c:	bf00      	nop
  }

  return (USBD_OK);
 801f42e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801f430:	4618      	mov	r0, r3
 801f432:	370c      	adds	r7, #12
 801f434:	46bd      	mov	sp, r7
 801f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f43a:	4770      	bx	lr

0801f43c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801f43c:	b580      	push	{r7, lr}
 801f43e:	b082      	sub	sp, #8
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
 801f444:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f446:	6879      	ldr	r1, [r7, #4]
 801f448:	4805      	ldr	r0, [pc, #20]	; (801f460 <CDC_Receive_FS+0x24>)
 801f44a:	f7ee f9fd 	bl	800d848 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f44e:	4804      	ldr	r0, [pc, #16]	; (801f460 <CDC_Receive_FS+0x24>)
 801f450:	f7ee fa5e 	bl	800d910 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801f454:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801f456:	4618      	mov	r0, r3
 801f458:	3708      	adds	r7, #8
 801f45a:	46bd      	mov	sp, r7
 801f45c:	bd80      	pop	{r7, pc}
 801f45e:	bf00      	nop
 801f460:	20000a14 	.word	0x20000a14

0801f464 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801f464:	b580      	push	{r7, lr}
 801f466:	b084      	sub	sp, #16
 801f468:	af00      	add	r7, sp, #0
 801f46a:	6078      	str	r0, [r7, #4]
 801f46c:	460b      	mov	r3, r1
 801f46e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801f470:	2300      	movs	r3, #0
 801f472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801f474:	4b0d      	ldr	r3, [pc, #52]	; (801f4ac <CDC_Transmit_FS+0x48>)
 801f476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f47a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801f47c:	68bb      	ldr	r3, [r7, #8]
 801f47e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801f482:	2b00      	cmp	r3, #0
 801f484:	d001      	beq.n	801f48a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801f486:	2301      	movs	r3, #1
 801f488:	e00b      	b.n	801f4a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801f48a:	887b      	ldrh	r3, [r7, #2]
 801f48c:	461a      	mov	r2, r3
 801f48e:	6879      	ldr	r1, [r7, #4]
 801f490:	4806      	ldr	r0, [pc, #24]	; (801f4ac <CDC_Transmit_FS+0x48>)
 801f492:	f7ee f9b7 	bl	800d804 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801f496:	4805      	ldr	r0, [pc, #20]	; (801f4ac <CDC_Transmit_FS+0x48>)
 801f498:	f7ee f9f4 	bl	800d884 <USBD_CDC_TransmitPacket>
 801f49c:	4603      	mov	r3, r0
 801f49e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801f4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801f4a2:	4618      	mov	r0, r3
 801f4a4:	3710      	adds	r7, #16
 801f4a6:	46bd      	mov	sp, r7
 801f4a8:	bd80      	pop	{r7, pc}
 801f4aa:	bf00      	nop
 801f4ac:	20000a14 	.word	0x20000a14

0801f4b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801f4b0:	b480      	push	{r7}
 801f4b2:	b087      	sub	sp, #28
 801f4b4:	af00      	add	r7, sp, #0
 801f4b6:	60f8      	str	r0, [r7, #12]
 801f4b8:	60b9      	str	r1, [r7, #8]
 801f4ba:	4613      	mov	r3, r2
 801f4bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801f4be:	2300      	movs	r3, #0
 801f4c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801f4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f4c6:	4618      	mov	r0, r3
 801f4c8:	371c      	adds	r7, #28
 801f4ca:	46bd      	mov	sp, r7
 801f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4d0:	4770      	bx	lr
	...

0801f4d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f4d4:	b480      	push	{r7}
 801f4d6:	b083      	sub	sp, #12
 801f4d8:	af00      	add	r7, sp, #0
 801f4da:	4603      	mov	r3, r0
 801f4dc:	6039      	str	r1, [r7, #0]
 801f4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f4e0:	683b      	ldr	r3, [r7, #0]
 801f4e2:	2212      	movs	r2, #18
 801f4e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801f4e6:	4b03      	ldr	r3, [pc, #12]	; (801f4f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801f4e8:	4618      	mov	r0, r3
 801f4ea:	370c      	adds	r7, #12
 801f4ec:	46bd      	mov	sp, r7
 801f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4f2:	4770      	bx	lr
 801f4f4:	2000023c 	.word	0x2000023c

0801f4f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f4f8:	b480      	push	{r7}
 801f4fa:	b083      	sub	sp, #12
 801f4fc:	af00      	add	r7, sp, #0
 801f4fe:	4603      	mov	r3, r0
 801f500:	6039      	str	r1, [r7, #0]
 801f502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f504:	683b      	ldr	r3, [r7, #0]
 801f506:	2204      	movs	r2, #4
 801f508:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801f50a:	4b03      	ldr	r3, [pc, #12]	; (801f518 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801f50c:	4618      	mov	r0, r3
 801f50e:	370c      	adds	r7, #12
 801f510:	46bd      	mov	sp, r7
 801f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f516:	4770      	bx	lr
 801f518:	20000250 	.word	0x20000250

0801f51c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f51c:	b580      	push	{r7, lr}
 801f51e:	b082      	sub	sp, #8
 801f520:	af00      	add	r7, sp, #0
 801f522:	4603      	mov	r3, r0
 801f524:	6039      	str	r1, [r7, #0]
 801f526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801f528:	79fb      	ldrb	r3, [r7, #7]
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	d105      	bne.n	801f53a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f52e:	683a      	ldr	r2, [r7, #0]
 801f530:	4907      	ldr	r1, [pc, #28]	; (801f550 <USBD_FS_ProductStrDescriptor+0x34>)
 801f532:	4808      	ldr	r0, [pc, #32]	; (801f554 <USBD_FS_ProductStrDescriptor+0x38>)
 801f534:	f7ef fc34 	bl	800eda0 <USBD_GetString>
 801f538:	e004      	b.n	801f544 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f53a:	683a      	ldr	r2, [r7, #0]
 801f53c:	4904      	ldr	r1, [pc, #16]	; (801f550 <USBD_FS_ProductStrDescriptor+0x34>)
 801f53e:	4805      	ldr	r0, [pc, #20]	; (801f554 <USBD_FS_ProductStrDescriptor+0x38>)
 801f540:	f7ef fc2e 	bl	800eda0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f544:	4b02      	ldr	r3, [pc, #8]	; (801f550 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801f546:	4618      	mov	r0, r3
 801f548:	3708      	adds	r7, #8
 801f54a:	46bd      	mov	sp, r7
 801f54c:	bd80      	pop	{r7, pc}
 801f54e:	bf00      	nop
 801f550:	20001cf0 	.word	0x20001cf0
 801f554:	0802751c 	.word	0x0802751c

0801f558 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f558:	b580      	push	{r7, lr}
 801f55a:	b082      	sub	sp, #8
 801f55c:	af00      	add	r7, sp, #0
 801f55e:	4603      	mov	r3, r0
 801f560:	6039      	str	r1, [r7, #0]
 801f562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f564:	683a      	ldr	r2, [r7, #0]
 801f566:	4904      	ldr	r1, [pc, #16]	; (801f578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801f568:	4804      	ldr	r0, [pc, #16]	; (801f57c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801f56a:	f7ef fc19 	bl	800eda0 <USBD_GetString>
  return USBD_StrDesc;
 801f56e:	4b02      	ldr	r3, [pc, #8]	; (801f578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801f570:	4618      	mov	r0, r3
 801f572:	3708      	adds	r7, #8
 801f574:	46bd      	mov	sp, r7
 801f576:	bd80      	pop	{r7, pc}
 801f578:	20001cf0 	.word	0x20001cf0
 801f57c:	08027534 	.word	0x08027534

0801f580 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f580:	b580      	push	{r7, lr}
 801f582:	b082      	sub	sp, #8
 801f584:	af00      	add	r7, sp, #0
 801f586:	4603      	mov	r3, r0
 801f588:	6039      	str	r1, [r7, #0]
 801f58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801f58c:	683b      	ldr	r3, [r7, #0]
 801f58e:	221a      	movs	r2, #26
 801f590:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801f592:	f000 f843 	bl	801f61c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801f596:	4b02      	ldr	r3, [pc, #8]	; (801f5a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801f598:	4618      	mov	r0, r3
 801f59a:	3708      	adds	r7, #8
 801f59c:	46bd      	mov	sp, r7
 801f59e:	bd80      	pop	{r7, pc}
 801f5a0:	20000254 	.word	0x20000254

0801f5a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f5a4:	b580      	push	{r7, lr}
 801f5a6:	b082      	sub	sp, #8
 801f5a8:	af00      	add	r7, sp, #0
 801f5aa:	4603      	mov	r3, r0
 801f5ac:	6039      	str	r1, [r7, #0]
 801f5ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801f5b0:	79fb      	ldrb	r3, [r7, #7]
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d105      	bne.n	801f5c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f5b6:	683a      	ldr	r2, [r7, #0]
 801f5b8:	4907      	ldr	r1, [pc, #28]	; (801f5d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801f5ba:	4808      	ldr	r0, [pc, #32]	; (801f5dc <USBD_FS_ConfigStrDescriptor+0x38>)
 801f5bc:	f7ef fbf0 	bl	800eda0 <USBD_GetString>
 801f5c0:	e004      	b.n	801f5cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f5c2:	683a      	ldr	r2, [r7, #0]
 801f5c4:	4904      	ldr	r1, [pc, #16]	; (801f5d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801f5c6:	4805      	ldr	r0, [pc, #20]	; (801f5dc <USBD_FS_ConfigStrDescriptor+0x38>)
 801f5c8:	f7ef fbea 	bl	800eda0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f5cc:	4b02      	ldr	r3, [pc, #8]	; (801f5d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	3708      	adds	r7, #8
 801f5d2:	46bd      	mov	sp, r7
 801f5d4:	bd80      	pop	{r7, pc}
 801f5d6:	bf00      	nop
 801f5d8:	20001cf0 	.word	0x20001cf0
 801f5dc:	08027548 	.word	0x08027548

0801f5e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f5e0:	b580      	push	{r7, lr}
 801f5e2:	b082      	sub	sp, #8
 801f5e4:	af00      	add	r7, sp, #0
 801f5e6:	4603      	mov	r3, r0
 801f5e8:	6039      	str	r1, [r7, #0]
 801f5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801f5ec:	79fb      	ldrb	r3, [r7, #7]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	d105      	bne.n	801f5fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f5f2:	683a      	ldr	r2, [r7, #0]
 801f5f4:	4907      	ldr	r1, [pc, #28]	; (801f614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801f5f6:	4808      	ldr	r0, [pc, #32]	; (801f618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801f5f8:	f7ef fbd2 	bl	800eda0 <USBD_GetString>
 801f5fc:	e004      	b.n	801f608 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f5fe:	683a      	ldr	r2, [r7, #0]
 801f600:	4904      	ldr	r1, [pc, #16]	; (801f614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801f602:	4805      	ldr	r0, [pc, #20]	; (801f618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801f604:	f7ef fbcc 	bl	800eda0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f608:	4b02      	ldr	r3, [pc, #8]	; (801f614 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801f60a:	4618      	mov	r0, r3
 801f60c:	3708      	adds	r7, #8
 801f60e:	46bd      	mov	sp, r7
 801f610:	bd80      	pop	{r7, pc}
 801f612:	bf00      	nop
 801f614:	20001cf0 	.word	0x20001cf0
 801f618:	08027554 	.word	0x08027554

0801f61c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801f61c:	b580      	push	{r7, lr}
 801f61e:	b084      	sub	sp, #16
 801f620:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f622:	4b0f      	ldr	r3, [pc, #60]	; (801f660 <Get_SerialNum+0x44>)
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f628:	4b0e      	ldr	r3, [pc, #56]	; (801f664 <Get_SerialNum+0x48>)
 801f62a:	681b      	ldr	r3, [r3, #0]
 801f62c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f62e:	4b0e      	ldr	r3, [pc, #56]	; (801f668 <Get_SerialNum+0x4c>)
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801f634:	68fa      	ldr	r2, [r7, #12]
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	4413      	add	r3, r2
 801f63a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801f63c:	68fb      	ldr	r3, [r7, #12]
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d009      	beq.n	801f656 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f642:	2208      	movs	r2, #8
 801f644:	4909      	ldr	r1, [pc, #36]	; (801f66c <Get_SerialNum+0x50>)
 801f646:	68f8      	ldr	r0, [r7, #12]
 801f648:	f000 f814 	bl	801f674 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f64c:	2204      	movs	r2, #4
 801f64e:	4908      	ldr	r1, [pc, #32]	; (801f670 <Get_SerialNum+0x54>)
 801f650:	68b8      	ldr	r0, [r7, #8]
 801f652:	f000 f80f 	bl	801f674 <IntToUnicode>
  }
}
 801f656:	bf00      	nop
 801f658:	3710      	adds	r7, #16
 801f65a:	46bd      	mov	sp, r7
 801f65c:	bd80      	pop	{r7, pc}
 801f65e:	bf00      	nop
 801f660:	1fff7a10 	.word	0x1fff7a10
 801f664:	1fff7a14 	.word	0x1fff7a14
 801f668:	1fff7a18 	.word	0x1fff7a18
 801f66c:	20000256 	.word	0x20000256
 801f670:	20000266 	.word	0x20000266

0801f674 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f674:	b480      	push	{r7}
 801f676:	b087      	sub	sp, #28
 801f678:	af00      	add	r7, sp, #0
 801f67a:	60f8      	str	r0, [r7, #12]
 801f67c:	60b9      	str	r1, [r7, #8]
 801f67e:	4613      	mov	r3, r2
 801f680:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801f682:	2300      	movs	r3, #0
 801f684:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801f686:	2300      	movs	r3, #0
 801f688:	75fb      	strb	r3, [r7, #23]
 801f68a:	e027      	b.n	801f6dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801f68c:	68fb      	ldr	r3, [r7, #12]
 801f68e:	0f1b      	lsrs	r3, r3, #28
 801f690:	2b09      	cmp	r3, #9
 801f692:	d80b      	bhi.n	801f6ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801f694:	68fb      	ldr	r3, [r7, #12]
 801f696:	0f1b      	lsrs	r3, r3, #28
 801f698:	b2da      	uxtb	r2, r3
 801f69a:	7dfb      	ldrb	r3, [r7, #23]
 801f69c:	005b      	lsls	r3, r3, #1
 801f69e:	4619      	mov	r1, r3
 801f6a0:	68bb      	ldr	r3, [r7, #8]
 801f6a2:	440b      	add	r3, r1
 801f6a4:	3230      	adds	r2, #48	; 0x30
 801f6a6:	b2d2      	uxtb	r2, r2
 801f6a8:	701a      	strb	r2, [r3, #0]
 801f6aa:	e00a      	b.n	801f6c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f6ac:	68fb      	ldr	r3, [r7, #12]
 801f6ae:	0f1b      	lsrs	r3, r3, #28
 801f6b0:	b2da      	uxtb	r2, r3
 801f6b2:	7dfb      	ldrb	r3, [r7, #23]
 801f6b4:	005b      	lsls	r3, r3, #1
 801f6b6:	4619      	mov	r1, r3
 801f6b8:	68bb      	ldr	r3, [r7, #8]
 801f6ba:	440b      	add	r3, r1
 801f6bc:	3237      	adds	r2, #55	; 0x37
 801f6be:	b2d2      	uxtb	r2, r2
 801f6c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801f6c2:	68fb      	ldr	r3, [r7, #12]
 801f6c4:	011b      	lsls	r3, r3, #4
 801f6c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801f6c8:	7dfb      	ldrb	r3, [r7, #23]
 801f6ca:	005b      	lsls	r3, r3, #1
 801f6cc:	3301      	adds	r3, #1
 801f6ce:	68ba      	ldr	r2, [r7, #8]
 801f6d0:	4413      	add	r3, r2
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801f6d6:	7dfb      	ldrb	r3, [r7, #23]
 801f6d8:	3301      	adds	r3, #1
 801f6da:	75fb      	strb	r3, [r7, #23]
 801f6dc:	7dfa      	ldrb	r2, [r7, #23]
 801f6de:	79fb      	ldrb	r3, [r7, #7]
 801f6e0:	429a      	cmp	r2, r3
 801f6e2:	d3d3      	bcc.n	801f68c <IntToUnicode+0x18>
  }
}
 801f6e4:	bf00      	nop
 801f6e6:	bf00      	nop
 801f6e8:	371c      	adds	r7, #28
 801f6ea:	46bd      	mov	sp, r7
 801f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6f0:	4770      	bx	lr
	...

0801f6f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801f6f4:	b580      	push	{r7, lr}
 801f6f6:	b08a      	sub	sp, #40	; 0x28
 801f6f8:	af00      	add	r7, sp, #0
 801f6fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f6fc:	f107 0314 	add.w	r3, r7, #20
 801f700:	2200      	movs	r2, #0
 801f702:	601a      	str	r2, [r3, #0]
 801f704:	605a      	str	r2, [r3, #4]
 801f706:	609a      	str	r2, [r3, #8]
 801f708:	60da      	str	r2, [r3, #12]
 801f70a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801f70c:	687b      	ldr	r3, [r7, #4]
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801f714:	d13a      	bne.n	801f78c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f716:	2300      	movs	r3, #0
 801f718:	613b      	str	r3, [r7, #16]
 801f71a:	4b1e      	ldr	r3, [pc, #120]	; (801f794 <HAL_PCD_MspInit+0xa0>)
 801f71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f71e:	4a1d      	ldr	r2, [pc, #116]	; (801f794 <HAL_PCD_MspInit+0xa0>)
 801f720:	f043 0301 	orr.w	r3, r3, #1
 801f724:	6313      	str	r3, [r2, #48]	; 0x30
 801f726:	4b1b      	ldr	r3, [pc, #108]	; (801f794 <HAL_PCD_MspInit+0xa0>)
 801f728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f72a:	f003 0301 	and.w	r3, r3, #1
 801f72e:	613b      	str	r3, [r7, #16]
 801f730:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801f732:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801f736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f738:	2302      	movs	r3, #2
 801f73a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f73c:	2300      	movs	r3, #0
 801f73e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f740:	2303      	movs	r3, #3
 801f742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f744:	230a      	movs	r3, #10
 801f746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f748:	f107 0314 	add.w	r3, r7, #20
 801f74c:	4619      	mov	r1, r3
 801f74e:	4812      	ldr	r0, [pc, #72]	; (801f798 <HAL_PCD_MspInit+0xa4>)
 801f750:	f7e9 fc9a 	bl	8009088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f754:	4b0f      	ldr	r3, [pc, #60]	; (801f794 <HAL_PCD_MspInit+0xa0>)
 801f756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f758:	4a0e      	ldr	r2, [pc, #56]	; (801f794 <HAL_PCD_MspInit+0xa0>)
 801f75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f75e:	6353      	str	r3, [r2, #52]	; 0x34
 801f760:	2300      	movs	r3, #0
 801f762:	60fb      	str	r3, [r7, #12]
 801f764:	4b0b      	ldr	r3, [pc, #44]	; (801f794 <HAL_PCD_MspInit+0xa0>)
 801f766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f768:	4a0a      	ldr	r2, [pc, #40]	; (801f794 <HAL_PCD_MspInit+0xa0>)
 801f76a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f76e:	6453      	str	r3, [r2, #68]	; 0x44
 801f770:	4b08      	ldr	r3, [pc, #32]	; (801f794 <HAL_PCD_MspInit+0xa0>)
 801f772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f778:	60fb      	str	r3, [r7, #12]
 801f77a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801f77c:	2200      	movs	r2, #0
 801f77e:	2100      	movs	r1, #0
 801f780:	2043      	movs	r0, #67	; 0x43
 801f782:	f7e9 fc2e 	bl	8008fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f786:	2043      	movs	r0, #67	; 0x43
 801f788:	f7e9 fc47 	bl	800901a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f78c:	bf00      	nop
 801f78e:	3728      	adds	r7, #40	; 0x28
 801f790:	46bd      	mov	sp, r7
 801f792:	bd80      	pop	{r7, pc}
 801f794:	40023800 	.word	0x40023800
 801f798:	40020000 	.word	0x40020000

0801f79c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f79c:	b580      	push	{r7, lr}
 801f79e:	b082      	sub	sp, #8
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801f7b0:	4619      	mov	r1, r3
 801f7b2:	4610      	mov	r0, r2
 801f7b4:	f7ee f995 	bl	800dae2 <USBD_LL_SetupStage>
}
 801f7b8:	bf00      	nop
 801f7ba:	3708      	adds	r7, #8
 801f7bc:	46bd      	mov	sp, r7
 801f7be:	bd80      	pop	{r7, pc}

0801f7c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f7c0:	b580      	push	{r7, lr}
 801f7c2:	b082      	sub	sp, #8
 801f7c4:	af00      	add	r7, sp, #0
 801f7c6:	6078      	str	r0, [r7, #4]
 801f7c8:	460b      	mov	r3, r1
 801f7ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801f7d2:	78fa      	ldrb	r2, [r7, #3]
 801f7d4:	6879      	ldr	r1, [r7, #4]
 801f7d6:	4613      	mov	r3, r2
 801f7d8:	00db      	lsls	r3, r3, #3
 801f7da:	4413      	add	r3, r2
 801f7dc:	009b      	lsls	r3, r3, #2
 801f7de:	440b      	add	r3, r1
 801f7e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801f7e4:	681a      	ldr	r2, [r3, #0]
 801f7e6:	78fb      	ldrb	r3, [r7, #3]
 801f7e8:	4619      	mov	r1, r3
 801f7ea:	f7ee f9cf 	bl	800db8c <USBD_LL_DataOutStage>
}
 801f7ee:	bf00      	nop
 801f7f0:	3708      	adds	r7, #8
 801f7f2:	46bd      	mov	sp, r7
 801f7f4:	bd80      	pop	{r7, pc}

0801f7f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f7f6:	b580      	push	{r7, lr}
 801f7f8:	b082      	sub	sp, #8
 801f7fa:	af00      	add	r7, sp, #0
 801f7fc:	6078      	str	r0, [r7, #4]
 801f7fe:	460b      	mov	r3, r1
 801f800:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801f808:	78fa      	ldrb	r2, [r7, #3]
 801f80a:	6879      	ldr	r1, [r7, #4]
 801f80c:	4613      	mov	r3, r2
 801f80e:	00db      	lsls	r3, r3, #3
 801f810:	4413      	add	r3, r2
 801f812:	009b      	lsls	r3, r3, #2
 801f814:	440b      	add	r3, r1
 801f816:	334c      	adds	r3, #76	; 0x4c
 801f818:	681a      	ldr	r2, [r3, #0]
 801f81a:	78fb      	ldrb	r3, [r7, #3]
 801f81c:	4619      	mov	r1, r3
 801f81e:	f7ee fa68 	bl	800dcf2 <USBD_LL_DataInStage>
}
 801f822:	bf00      	nop
 801f824:	3708      	adds	r7, #8
 801f826:	46bd      	mov	sp, r7
 801f828:	bd80      	pop	{r7, pc}

0801f82a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f82a:	b580      	push	{r7, lr}
 801f82c:	b082      	sub	sp, #8
 801f82e:	af00      	add	r7, sp, #0
 801f830:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f838:	4618      	mov	r0, r3
 801f83a:	f7ee fb9c 	bl	800df76 <USBD_LL_SOF>
}
 801f83e:	bf00      	nop
 801f840:	3708      	adds	r7, #8
 801f842:	46bd      	mov	sp, r7
 801f844:	bd80      	pop	{r7, pc}

0801f846 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f846:	b580      	push	{r7, lr}
 801f848:	b084      	sub	sp, #16
 801f84a:	af00      	add	r7, sp, #0
 801f84c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f84e:	2301      	movs	r3, #1
 801f850:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	68db      	ldr	r3, [r3, #12]
 801f856:	2b00      	cmp	r3, #0
 801f858:	d102      	bne.n	801f860 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801f85a:	2300      	movs	r3, #0
 801f85c:	73fb      	strb	r3, [r7, #15]
 801f85e:	e008      	b.n	801f872 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	68db      	ldr	r3, [r3, #12]
 801f864:	2b02      	cmp	r3, #2
 801f866:	d102      	bne.n	801f86e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801f868:	2301      	movs	r3, #1
 801f86a:	73fb      	strb	r3, [r7, #15]
 801f86c:	e001      	b.n	801f872 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801f86e:	f7e6 fbbb 	bl	8005fe8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f878:	7bfa      	ldrb	r2, [r7, #15]
 801f87a:	4611      	mov	r1, r2
 801f87c:	4618      	mov	r0, r3
 801f87e:	f7ee fb3c 	bl	800defa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f888:	4618      	mov	r0, r3
 801f88a:	f7ee fae4 	bl	800de56 <USBD_LL_Reset>
}
 801f88e:	bf00      	nop
 801f890:	3710      	adds	r7, #16
 801f892:	46bd      	mov	sp, r7
 801f894:	bd80      	pop	{r7, pc}
	...

0801f898 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f898:	b580      	push	{r7, lr}
 801f89a:	b082      	sub	sp, #8
 801f89c:	af00      	add	r7, sp, #0
 801f89e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	f7ee fb37 	bl	800df1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	687a      	ldr	r2, [r7, #4]
 801f8b8:	6812      	ldr	r2, [r2, #0]
 801f8ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f8be:	f043 0301 	orr.w	r3, r3, #1
 801f8c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	6a1b      	ldr	r3, [r3, #32]
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d005      	beq.n	801f8d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f8cc:	4b04      	ldr	r3, [pc, #16]	; (801f8e0 <HAL_PCD_SuspendCallback+0x48>)
 801f8ce:	691b      	ldr	r3, [r3, #16]
 801f8d0:	4a03      	ldr	r2, [pc, #12]	; (801f8e0 <HAL_PCD_SuspendCallback+0x48>)
 801f8d2:	f043 0306 	orr.w	r3, r3, #6
 801f8d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801f8d8:	bf00      	nop
 801f8da:	3708      	adds	r7, #8
 801f8dc:	46bd      	mov	sp, r7
 801f8de:	bd80      	pop	{r7, pc}
 801f8e0:	e000ed00 	.word	0xe000ed00

0801f8e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f8e4:	b580      	push	{r7, lr}
 801f8e6:	b082      	sub	sp, #8
 801f8e8:	af00      	add	r7, sp, #0
 801f8ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f8f2:	4618      	mov	r0, r3
 801f8f4:	f7ee fb27 	bl	800df46 <USBD_LL_Resume>
}
 801f8f8:	bf00      	nop
 801f8fa:	3708      	adds	r7, #8
 801f8fc:	46bd      	mov	sp, r7
 801f8fe:	bd80      	pop	{r7, pc}

0801f900 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f900:	b580      	push	{r7, lr}
 801f902:	b082      	sub	sp, #8
 801f904:	af00      	add	r7, sp, #0
 801f906:	6078      	str	r0, [r7, #4]
 801f908:	460b      	mov	r3, r1
 801f90a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f912:	78fa      	ldrb	r2, [r7, #3]
 801f914:	4611      	mov	r1, r2
 801f916:	4618      	mov	r0, r3
 801f918:	f7ee fb7f 	bl	800e01a <USBD_LL_IsoOUTIncomplete>
}
 801f91c:	bf00      	nop
 801f91e:	3708      	adds	r7, #8
 801f920:	46bd      	mov	sp, r7
 801f922:	bd80      	pop	{r7, pc}

0801f924 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f924:	b580      	push	{r7, lr}
 801f926:	b082      	sub	sp, #8
 801f928:	af00      	add	r7, sp, #0
 801f92a:	6078      	str	r0, [r7, #4]
 801f92c:	460b      	mov	r3, r1
 801f92e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f936:	78fa      	ldrb	r2, [r7, #3]
 801f938:	4611      	mov	r1, r2
 801f93a:	4618      	mov	r0, r3
 801f93c:	f7ee fb3b 	bl	800dfb6 <USBD_LL_IsoINIncomplete>
}
 801f940:	bf00      	nop
 801f942:	3708      	adds	r7, #8
 801f944:	46bd      	mov	sp, r7
 801f946:	bd80      	pop	{r7, pc}

0801f948 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f948:	b580      	push	{r7, lr}
 801f94a:	b082      	sub	sp, #8
 801f94c:	af00      	add	r7, sp, #0
 801f94e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f956:	4618      	mov	r0, r3
 801f958:	f7ee fb91 	bl	800e07e <USBD_LL_DevConnected>
}
 801f95c:	bf00      	nop
 801f95e:	3708      	adds	r7, #8
 801f960:	46bd      	mov	sp, r7
 801f962:	bd80      	pop	{r7, pc}

0801f964 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f964:	b580      	push	{r7, lr}
 801f966:	b082      	sub	sp, #8
 801f968:	af00      	add	r7, sp, #0
 801f96a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f972:	4618      	mov	r0, r3
 801f974:	f7ee fb8e 	bl	800e094 <USBD_LL_DevDisconnected>
}
 801f978:	bf00      	nop
 801f97a:	3708      	adds	r7, #8
 801f97c:	46bd      	mov	sp, r7
 801f97e:	bd80      	pop	{r7, pc}

0801f980 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801f980:	b580      	push	{r7, lr}
 801f982:	b082      	sub	sp, #8
 801f984:	af00      	add	r7, sp, #0
 801f986:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	781b      	ldrb	r3, [r3, #0]
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	d13c      	bne.n	801fa0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801f990:	4a20      	ldr	r2, [pc, #128]	; (801fa14 <USBD_LL_Init+0x94>)
 801f992:	687b      	ldr	r3, [r7, #4]
 801f994:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	4a1e      	ldr	r2, [pc, #120]	; (801fa14 <USBD_LL_Init+0x94>)
 801f99c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801f9a0:	4b1c      	ldr	r3, [pc, #112]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801f9a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801f9a8:	4b1a      	ldr	r3, [pc, #104]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9aa:	2204      	movs	r2, #4
 801f9ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801f9ae:	4b19      	ldr	r3, [pc, #100]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9b0:	2202      	movs	r2, #2
 801f9b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801f9b4:	4b17      	ldr	r3, [pc, #92]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9b6:	2200      	movs	r2, #0
 801f9b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801f9ba:	4b16      	ldr	r3, [pc, #88]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9bc:	2202      	movs	r2, #2
 801f9be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801f9c0:	4b14      	ldr	r3, [pc, #80]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9c2:	2200      	movs	r2, #0
 801f9c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801f9c6:	4b13      	ldr	r3, [pc, #76]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9c8:	2200      	movs	r2, #0
 801f9ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801f9cc:	4b11      	ldr	r3, [pc, #68]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9ce:	2200      	movs	r2, #0
 801f9d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801f9d2:	4b10      	ldr	r3, [pc, #64]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9d4:	2200      	movs	r2, #0
 801f9d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801f9d8:	4b0e      	ldr	r3, [pc, #56]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9da:	2200      	movs	r2, #0
 801f9dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f9de:	480d      	ldr	r0, [pc, #52]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9e0:	f7e9 fd2b 	bl	800943a <HAL_PCD_Init>
 801f9e4:	4603      	mov	r3, r0
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d001      	beq.n	801f9ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801f9ea:	f7e6 fafd 	bl	8005fe8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801f9ee:	2180      	movs	r1, #128	; 0x80
 801f9f0:	4808      	ldr	r0, [pc, #32]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9f2:	f7ea ff82 	bl	800a8fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801f9f6:	2240      	movs	r2, #64	; 0x40
 801f9f8:	2100      	movs	r1, #0
 801f9fa:	4806      	ldr	r0, [pc, #24]	; (801fa14 <USBD_LL_Init+0x94>)
 801f9fc:	f7ea ff36 	bl	800a86c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801fa00:	2280      	movs	r2, #128	; 0x80
 801fa02:	2101      	movs	r1, #1
 801fa04:	4803      	ldr	r0, [pc, #12]	; (801fa14 <USBD_LL_Init+0x94>)
 801fa06:	f7ea ff31 	bl	800a86c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801fa0a:	2300      	movs	r3, #0
}
 801fa0c:	4618      	mov	r0, r3
 801fa0e:	3708      	adds	r7, #8
 801fa10:	46bd      	mov	sp, r7
 801fa12:	bd80      	pop	{r7, pc}
 801fa14:	20001ef0 	.word	0x20001ef0

0801fa18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801fa18:	b580      	push	{r7, lr}
 801fa1a:	b084      	sub	sp, #16
 801fa1c:	af00      	add	r7, sp, #0
 801fa1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fa20:	2300      	movs	r3, #0
 801fa22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fa24:	2300      	movs	r3, #0
 801fa26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fa2e:	4618      	mov	r0, r3
 801fa30:	f7e9 fe20 	bl	8009674 <HAL_PCD_Start>
 801fa34:	4603      	mov	r3, r0
 801fa36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fa38:	7bfb      	ldrb	r3, [r7, #15]
 801fa3a:	4618      	mov	r0, r3
 801fa3c:	f000 f942 	bl	801fcc4 <USBD_Get_USB_Status>
 801fa40:	4603      	mov	r3, r0
 801fa42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fa44:	7bbb      	ldrb	r3, [r7, #14]
}
 801fa46:	4618      	mov	r0, r3
 801fa48:	3710      	adds	r7, #16
 801fa4a:	46bd      	mov	sp, r7
 801fa4c:	bd80      	pop	{r7, pc}

0801fa4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801fa4e:	b580      	push	{r7, lr}
 801fa50:	b084      	sub	sp, #16
 801fa52:	af00      	add	r7, sp, #0
 801fa54:	6078      	str	r0, [r7, #4]
 801fa56:	4608      	mov	r0, r1
 801fa58:	4611      	mov	r1, r2
 801fa5a:	461a      	mov	r2, r3
 801fa5c:	4603      	mov	r3, r0
 801fa5e:	70fb      	strb	r3, [r7, #3]
 801fa60:	460b      	mov	r3, r1
 801fa62:	70bb      	strb	r3, [r7, #2]
 801fa64:	4613      	mov	r3, r2
 801fa66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fa68:	2300      	movs	r3, #0
 801fa6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fa6c:	2300      	movs	r3, #0
 801fa6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fa76:	78bb      	ldrb	r3, [r7, #2]
 801fa78:	883a      	ldrh	r2, [r7, #0]
 801fa7a:	78f9      	ldrb	r1, [r7, #3]
 801fa7c:	f7ea faf1 	bl	800a062 <HAL_PCD_EP_Open>
 801fa80:	4603      	mov	r3, r0
 801fa82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fa84:	7bfb      	ldrb	r3, [r7, #15]
 801fa86:	4618      	mov	r0, r3
 801fa88:	f000 f91c 	bl	801fcc4 <USBD_Get_USB_Status>
 801fa8c:	4603      	mov	r3, r0
 801fa8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fa90:	7bbb      	ldrb	r3, [r7, #14]
}
 801fa92:	4618      	mov	r0, r3
 801fa94:	3710      	adds	r7, #16
 801fa96:	46bd      	mov	sp, r7
 801fa98:	bd80      	pop	{r7, pc}

0801fa9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fa9a:	b580      	push	{r7, lr}
 801fa9c:	b084      	sub	sp, #16
 801fa9e:	af00      	add	r7, sp, #0
 801faa0:	6078      	str	r0, [r7, #4]
 801faa2:	460b      	mov	r3, r1
 801faa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801faa6:	2300      	movs	r3, #0
 801faa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801faaa:	2300      	movs	r3, #0
 801faac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fab4:	78fa      	ldrb	r2, [r7, #3]
 801fab6:	4611      	mov	r1, r2
 801fab8:	4618      	mov	r0, r3
 801faba:	f7ea fb3a 	bl	800a132 <HAL_PCD_EP_Close>
 801fabe:	4603      	mov	r3, r0
 801fac0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fac2:	7bfb      	ldrb	r3, [r7, #15]
 801fac4:	4618      	mov	r0, r3
 801fac6:	f000 f8fd 	bl	801fcc4 <USBD_Get_USB_Status>
 801faca:	4603      	mov	r3, r0
 801facc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801face:	7bbb      	ldrb	r3, [r7, #14]
}
 801fad0:	4618      	mov	r0, r3
 801fad2:	3710      	adds	r7, #16
 801fad4:	46bd      	mov	sp, r7
 801fad6:	bd80      	pop	{r7, pc}

0801fad8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fad8:	b580      	push	{r7, lr}
 801fada:	b084      	sub	sp, #16
 801fadc:	af00      	add	r7, sp, #0
 801fade:	6078      	str	r0, [r7, #4]
 801fae0:	460b      	mov	r3, r1
 801fae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fae4:	2300      	movs	r3, #0
 801fae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fae8:	2300      	movs	r3, #0
 801faea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801faf2:	78fa      	ldrb	r2, [r7, #3]
 801faf4:	4611      	mov	r1, r2
 801faf6:	4618      	mov	r0, r3
 801faf8:	f7ea fc12 	bl	800a320 <HAL_PCD_EP_SetStall>
 801fafc:	4603      	mov	r3, r0
 801fafe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fb00:	7bfb      	ldrb	r3, [r7, #15]
 801fb02:	4618      	mov	r0, r3
 801fb04:	f000 f8de 	bl	801fcc4 <USBD_Get_USB_Status>
 801fb08:	4603      	mov	r3, r0
 801fb0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fb0c:	7bbb      	ldrb	r3, [r7, #14]
}
 801fb0e:	4618      	mov	r0, r3
 801fb10:	3710      	adds	r7, #16
 801fb12:	46bd      	mov	sp, r7
 801fb14:	bd80      	pop	{r7, pc}

0801fb16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fb16:	b580      	push	{r7, lr}
 801fb18:	b084      	sub	sp, #16
 801fb1a:	af00      	add	r7, sp, #0
 801fb1c:	6078      	str	r0, [r7, #4]
 801fb1e:	460b      	mov	r3, r1
 801fb20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fb22:	2300      	movs	r3, #0
 801fb24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fb26:	2300      	movs	r3, #0
 801fb28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801fb2a:	687b      	ldr	r3, [r7, #4]
 801fb2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fb30:	78fa      	ldrb	r2, [r7, #3]
 801fb32:	4611      	mov	r1, r2
 801fb34:	4618      	mov	r0, r3
 801fb36:	f7ea fc57 	bl	800a3e8 <HAL_PCD_EP_ClrStall>
 801fb3a:	4603      	mov	r3, r0
 801fb3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fb3e:	7bfb      	ldrb	r3, [r7, #15]
 801fb40:	4618      	mov	r0, r3
 801fb42:	f000 f8bf 	bl	801fcc4 <USBD_Get_USB_Status>
 801fb46:	4603      	mov	r3, r0
 801fb48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fb4a:	7bbb      	ldrb	r3, [r7, #14]
}
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	3710      	adds	r7, #16
 801fb50:	46bd      	mov	sp, r7
 801fb52:	bd80      	pop	{r7, pc}

0801fb54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fb54:	b480      	push	{r7}
 801fb56:	b085      	sub	sp, #20
 801fb58:	af00      	add	r7, sp, #0
 801fb5a:	6078      	str	r0, [r7, #4]
 801fb5c:	460b      	mov	r3, r1
 801fb5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fb66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801fb68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	da0b      	bge.n	801fb88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801fb70:	78fb      	ldrb	r3, [r7, #3]
 801fb72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801fb76:	68f9      	ldr	r1, [r7, #12]
 801fb78:	4613      	mov	r3, r2
 801fb7a:	00db      	lsls	r3, r3, #3
 801fb7c:	4413      	add	r3, r2
 801fb7e:	009b      	lsls	r3, r3, #2
 801fb80:	440b      	add	r3, r1
 801fb82:	333e      	adds	r3, #62	; 0x3e
 801fb84:	781b      	ldrb	r3, [r3, #0]
 801fb86:	e00b      	b.n	801fba0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801fb88:	78fb      	ldrb	r3, [r7, #3]
 801fb8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801fb8e:	68f9      	ldr	r1, [r7, #12]
 801fb90:	4613      	mov	r3, r2
 801fb92:	00db      	lsls	r3, r3, #3
 801fb94:	4413      	add	r3, r2
 801fb96:	009b      	lsls	r3, r3, #2
 801fb98:	440b      	add	r3, r1
 801fb9a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801fb9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fba0:	4618      	mov	r0, r3
 801fba2:	3714      	adds	r7, #20
 801fba4:	46bd      	mov	sp, r7
 801fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbaa:	4770      	bx	lr

0801fbac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801fbac:	b580      	push	{r7, lr}
 801fbae:	b084      	sub	sp, #16
 801fbb0:	af00      	add	r7, sp, #0
 801fbb2:	6078      	str	r0, [r7, #4]
 801fbb4:	460b      	mov	r3, r1
 801fbb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fbb8:	2300      	movs	r3, #0
 801fbba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fbbc:	2300      	movs	r3, #0
 801fbbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801fbc0:	687b      	ldr	r3, [r7, #4]
 801fbc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fbc6:	78fa      	ldrb	r2, [r7, #3]
 801fbc8:	4611      	mov	r1, r2
 801fbca:	4618      	mov	r0, r3
 801fbcc:	f7ea fa24 	bl	800a018 <HAL_PCD_SetAddress>
 801fbd0:	4603      	mov	r3, r0
 801fbd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fbd4:	7bfb      	ldrb	r3, [r7, #15]
 801fbd6:	4618      	mov	r0, r3
 801fbd8:	f000 f874 	bl	801fcc4 <USBD_Get_USB_Status>
 801fbdc:	4603      	mov	r3, r0
 801fbde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fbe0:	7bbb      	ldrb	r3, [r7, #14]
}
 801fbe2:	4618      	mov	r0, r3
 801fbe4:	3710      	adds	r7, #16
 801fbe6:	46bd      	mov	sp, r7
 801fbe8:	bd80      	pop	{r7, pc}

0801fbea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801fbea:	b580      	push	{r7, lr}
 801fbec:	b086      	sub	sp, #24
 801fbee:	af00      	add	r7, sp, #0
 801fbf0:	60f8      	str	r0, [r7, #12]
 801fbf2:	607a      	str	r2, [r7, #4]
 801fbf4:	603b      	str	r3, [r7, #0]
 801fbf6:	460b      	mov	r3, r1
 801fbf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fbfa:	2300      	movs	r3, #0
 801fbfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fbfe:	2300      	movs	r3, #0
 801fc00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801fc02:	68fb      	ldr	r3, [r7, #12]
 801fc04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fc08:	7af9      	ldrb	r1, [r7, #11]
 801fc0a:	683b      	ldr	r3, [r7, #0]
 801fc0c:	687a      	ldr	r2, [r7, #4]
 801fc0e:	f7ea fb3d 	bl	800a28c <HAL_PCD_EP_Transmit>
 801fc12:	4603      	mov	r3, r0
 801fc14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc16:	7dfb      	ldrb	r3, [r7, #23]
 801fc18:	4618      	mov	r0, r3
 801fc1a:	f000 f853 	bl	801fcc4 <USBD_Get_USB_Status>
 801fc1e:	4603      	mov	r3, r0
 801fc20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801fc22:	7dbb      	ldrb	r3, [r7, #22]
}
 801fc24:	4618      	mov	r0, r3
 801fc26:	3718      	adds	r7, #24
 801fc28:	46bd      	mov	sp, r7
 801fc2a:	bd80      	pop	{r7, pc}

0801fc2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801fc2c:	b580      	push	{r7, lr}
 801fc2e:	b086      	sub	sp, #24
 801fc30:	af00      	add	r7, sp, #0
 801fc32:	60f8      	str	r0, [r7, #12]
 801fc34:	607a      	str	r2, [r7, #4]
 801fc36:	603b      	str	r3, [r7, #0]
 801fc38:	460b      	mov	r3, r1
 801fc3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fc40:	2300      	movs	r3, #0
 801fc42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801fc44:	68fb      	ldr	r3, [r7, #12]
 801fc46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fc4a:	7af9      	ldrb	r1, [r7, #11]
 801fc4c:	683b      	ldr	r3, [r7, #0]
 801fc4e:	687a      	ldr	r2, [r7, #4]
 801fc50:	f7ea fab9 	bl	800a1c6 <HAL_PCD_EP_Receive>
 801fc54:	4603      	mov	r3, r0
 801fc56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc58:	7dfb      	ldrb	r3, [r7, #23]
 801fc5a:	4618      	mov	r0, r3
 801fc5c:	f000 f832 	bl	801fcc4 <USBD_Get_USB_Status>
 801fc60:	4603      	mov	r3, r0
 801fc62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801fc64:	7dbb      	ldrb	r3, [r7, #22]
}
 801fc66:	4618      	mov	r0, r3
 801fc68:	3718      	adds	r7, #24
 801fc6a:	46bd      	mov	sp, r7
 801fc6c:	bd80      	pop	{r7, pc}

0801fc6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fc6e:	b580      	push	{r7, lr}
 801fc70:	b082      	sub	sp, #8
 801fc72:	af00      	add	r7, sp, #0
 801fc74:	6078      	str	r0, [r7, #4]
 801fc76:	460b      	mov	r3, r1
 801fc78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fc80:	78fa      	ldrb	r2, [r7, #3]
 801fc82:	4611      	mov	r1, r2
 801fc84:	4618      	mov	r0, r3
 801fc86:	f7ea fae9 	bl	800a25c <HAL_PCD_EP_GetRxCount>
 801fc8a:	4603      	mov	r3, r0
}
 801fc8c:	4618      	mov	r0, r3
 801fc8e:	3708      	adds	r7, #8
 801fc90:	46bd      	mov	sp, r7
 801fc92:	bd80      	pop	{r7, pc}

0801fc94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801fc94:	b480      	push	{r7}
 801fc96:	b083      	sub	sp, #12
 801fc98:	af00      	add	r7, sp, #0
 801fc9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801fc9c:	4b03      	ldr	r3, [pc, #12]	; (801fcac <USBD_static_malloc+0x18>)
}
 801fc9e:	4618      	mov	r0, r3
 801fca0:	370c      	adds	r7, #12
 801fca2:	46bd      	mov	sp, r7
 801fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fca8:	4770      	bx	lr
 801fcaa:	bf00      	nop
 801fcac:	200023fc 	.word	0x200023fc

0801fcb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801fcb0:	b480      	push	{r7}
 801fcb2:	b083      	sub	sp, #12
 801fcb4:	af00      	add	r7, sp, #0
 801fcb6:	6078      	str	r0, [r7, #4]

}
 801fcb8:	bf00      	nop
 801fcba:	370c      	adds	r7, #12
 801fcbc:	46bd      	mov	sp, r7
 801fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcc2:	4770      	bx	lr

0801fcc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801fcc4:	b480      	push	{r7}
 801fcc6:	b085      	sub	sp, #20
 801fcc8:	af00      	add	r7, sp, #0
 801fcca:	4603      	mov	r3, r0
 801fccc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fcce:	2300      	movs	r3, #0
 801fcd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801fcd2:	79fb      	ldrb	r3, [r7, #7]
 801fcd4:	2b03      	cmp	r3, #3
 801fcd6:	d817      	bhi.n	801fd08 <USBD_Get_USB_Status+0x44>
 801fcd8:	a201      	add	r2, pc, #4	; (adr r2, 801fce0 <USBD_Get_USB_Status+0x1c>)
 801fcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fcde:	bf00      	nop
 801fce0:	0801fcf1 	.word	0x0801fcf1
 801fce4:	0801fcf7 	.word	0x0801fcf7
 801fce8:	0801fcfd 	.word	0x0801fcfd
 801fcec:	0801fd03 	.word	0x0801fd03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801fcf0:	2300      	movs	r3, #0
 801fcf2:	73fb      	strb	r3, [r7, #15]
    break;
 801fcf4:	e00b      	b.n	801fd0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801fcf6:	2303      	movs	r3, #3
 801fcf8:	73fb      	strb	r3, [r7, #15]
    break;
 801fcfa:	e008      	b.n	801fd0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801fcfc:	2301      	movs	r3, #1
 801fcfe:	73fb      	strb	r3, [r7, #15]
    break;
 801fd00:	e005      	b.n	801fd0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801fd02:	2303      	movs	r3, #3
 801fd04:	73fb      	strb	r3, [r7, #15]
    break;
 801fd06:	e002      	b.n	801fd0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801fd08:	2303      	movs	r3, #3
 801fd0a:	73fb      	strb	r3, [r7, #15]
    break;
 801fd0c:	bf00      	nop
  }
  return usb_status;
 801fd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 801fd10:	4618      	mov	r0, r3
 801fd12:	3714      	adds	r7, #20
 801fd14:	46bd      	mov	sp, r7
 801fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd1a:	4770      	bx	lr

0801fd1c <_ZdaPv>:
 801fd1c:	f000 b816 	b.w	801fd4c <_ZdlPv>

0801fd20 <_Znwj>:
 801fd20:	2801      	cmp	r0, #1
 801fd22:	bf38      	it	cc
 801fd24:	2001      	movcc	r0, #1
 801fd26:	b510      	push	{r4, lr}
 801fd28:	4604      	mov	r4, r0
 801fd2a:	4620      	mov	r0, r4
 801fd2c:	f002 fdc4 	bl	80228b8 <malloc>
 801fd30:	b930      	cbnz	r0, 801fd40 <_Znwj+0x20>
 801fd32:	f000 f80d 	bl	801fd50 <_ZSt15get_new_handlerv>
 801fd36:	b908      	cbnz	r0, 801fd3c <_Znwj+0x1c>
 801fd38:	f002 fd4c 	bl	80227d4 <abort>
 801fd3c:	4780      	blx	r0
 801fd3e:	e7f4      	b.n	801fd2a <_Znwj+0xa>
 801fd40:	bd10      	pop	{r4, pc}

0801fd42 <_Znaj>:
 801fd42:	f7ff bfed 	b.w	801fd20 <_Znwj>

0801fd46 <_ZSt20__throw_length_errorPKc>:
 801fd46:	b508      	push	{r3, lr}
 801fd48:	f002 fd44 	bl	80227d4 <abort>

0801fd4c <_ZdlPv>:
 801fd4c:	f002 bdbc 	b.w	80228c8 <free>

0801fd50 <_ZSt15get_new_handlerv>:
 801fd50:	4b02      	ldr	r3, [pc, #8]	; (801fd5c <_ZSt15get_new_handlerv+0xc>)
 801fd52:	6818      	ldr	r0, [r3, #0]
 801fd54:	f3bf 8f5b 	dmb	ish
 801fd58:	4770      	bx	lr
 801fd5a:	bf00      	nop
 801fd5c:	2000261c 	.word	0x2000261c

0801fd60 <cos>:
 801fd60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fd62:	ec53 2b10 	vmov	r2, r3, d0
 801fd66:	4826      	ldr	r0, [pc, #152]	; (801fe00 <cos+0xa0>)
 801fd68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801fd6c:	4281      	cmp	r1, r0
 801fd6e:	dc06      	bgt.n	801fd7e <cos+0x1e>
 801fd70:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801fdf8 <cos+0x98>
 801fd74:	b005      	add	sp, #20
 801fd76:	f85d eb04 	ldr.w	lr, [sp], #4
 801fd7a:	f001 bd41 	b.w	8021800 <__kernel_cos>
 801fd7e:	4821      	ldr	r0, [pc, #132]	; (801fe04 <cos+0xa4>)
 801fd80:	4281      	cmp	r1, r0
 801fd82:	dd09      	ble.n	801fd98 <cos+0x38>
 801fd84:	ee10 0a10 	vmov	r0, s0
 801fd88:	4619      	mov	r1, r3
 801fd8a:	f7e0 fa87 	bl	800029c <__aeabi_dsub>
 801fd8e:	ec41 0b10 	vmov	d0, r0, r1
 801fd92:	b005      	add	sp, #20
 801fd94:	f85d fb04 	ldr.w	pc, [sp], #4
 801fd98:	4668      	mov	r0, sp
 801fd9a:	f001 f859 	bl	8020e50 <__ieee754_rem_pio2>
 801fd9e:	f000 0003 	and.w	r0, r0, #3
 801fda2:	2801      	cmp	r0, #1
 801fda4:	d00b      	beq.n	801fdbe <cos+0x5e>
 801fda6:	2802      	cmp	r0, #2
 801fda8:	d016      	beq.n	801fdd8 <cos+0x78>
 801fdaa:	b9e0      	cbnz	r0, 801fde6 <cos+0x86>
 801fdac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fdb0:	ed9d 0b00 	vldr	d0, [sp]
 801fdb4:	f001 fd24 	bl	8021800 <__kernel_cos>
 801fdb8:	ec51 0b10 	vmov	r0, r1, d0
 801fdbc:	e7e7      	b.n	801fd8e <cos+0x2e>
 801fdbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fdc2:	ed9d 0b00 	vldr	d0, [sp]
 801fdc6:	f002 f933 	bl	8022030 <__kernel_sin>
 801fdca:	ec53 2b10 	vmov	r2, r3, d0
 801fdce:	ee10 0a10 	vmov	r0, s0
 801fdd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fdd6:	e7da      	b.n	801fd8e <cos+0x2e>
 801fdd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fddc:	ed9d 0b00 	vldr	d0, [sp]
 801fde0:	f001 fd0e 	bl	8021800 <__kernel_cos>
 801fde4:	e7f1      	b.n	801fdca <cos+0x6a>
 801fde6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fdea:	ed9d 0b00 	vldr	d0, [sp]
 801fdee:	2001      	movs	r0, #1
 801fdf0:	f002 f91e 	bl	8022030 <__kernel_sin>
 801fdf4:	e7e0      	b.n	801fdb8 <cos+0x58>
 801fdf6:	bf00      	nop
	...
 801fe00:	3fe921fb 	.word	0x3fe921fb
 801fe04:	7fefffff 	.word	0x7fefffff

0801fe08 <floor>:
 801fe08:	ec51 0b10 	vmov	r0, r1, d0
 801fe0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801fe14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801fe18:	2e13      	cmp	r6, #19
 801fe1a:	ee10 5a10 	vmov	r5, s0
 801fe1e:	ee10 8a10 	vmov	r8, s0
 801fe22:	460c      	mov	r4, r1
 801fe24:	dc32      	bgt.n	801fe8c <floor+0x84>
 801fe26:	2e00      	cmp	r6, #0
 801fe28:	da14      	bge.n	801fe54 <floor+0x4c>
 801fe2a:	a333      	add	r3, pc, #204	; (adr r3, 801fef8 <floor+0xf0>)
 801fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe30:	f7e0 fa36 	bl	80002a0 <__adddf3>
 801fe34:	2200      	movs	r2, #0
 801fe36:	2300      	movs	r3, #0
 801fe38:	f7e0 fe78 	bl	8000b2c <__aeabi_dcmpgt>
 801fe3c:	b138      	cbz	r0, 801fe4e <floor+0x46>
 801fe3e:	2c00      	cmp	r4, #0
 801fe40:	da57      	bge.n	801fef2 <floor+0xea>
 801fe42:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801fe46:	431d      	orrs	r5, r3
 801fe48:	d001      	beq.n	801fe4e <floor+0x46>
 801fe4a:	4c2d      	ldr	r4, [pc, #180]	; (801ff00 <floor+0xf8>)
 801fe4c:	2500      	movs	r5, #0
 801fe4e:	4621      	mov	r1, r4
 801fe50:	4628      	mov	r0, r5
 801fe52:	e025      	b.n	801fea0 <floor+0x98>
 801fe54:	4f2b      	ldr	r7, [pc, #172]	; (801ff04 <floor+0xfc>)
 801fe56:	4137      	asrs	r7, r6
 801fe58:	ea01 0307 	and.w	r3, r1, r7
 801fe5c:	4303      	orrs	r3, r0
 801fe5e:	d01f      	beq.n	801fea0 <floor+0x98>
 801fe60:	a325      	add	r3, pc, #148	; (adr r3, 801fef8 <floor+0xf0>)
 801fe62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe66:	f7e0 fa1b 	bl	80002a0 <__adddf3>
 801fe6a:	2200      	movs	r2, #0
 801fe6c:	2300      	movs	r3, #0
 801fe6e:	f7e0 fe5d 	bl	8000b2c <__aeabi_dcmpgt>
 801fe72:	2800      	cmp	r0, #0
 801fe74:	d0eb      	beq.n	801fe4e <floor+0x46>
 801fe76:	2c00      	cmp	r4, #0
 801fe78:	bfbe      	ittt	lt
 801fe7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801fe7e:	fa43 f606 	asrlt.w	r6, r3, r6
 801fe82:	19a4      	addlt	r4, r4, r6
 801fe84:	ea24 0407 	bic.w	r4, r4, r7
 801fe88:	2500      	movs	r5, #0
 801fe8a:	e7e0      	b.n	801fe4e <floor+0x46>
 801fe8c:	2e33      	cmp	r6, #51	; 0x33
 801fe8e:	dd0b      	ble.n	801fea8 <floor+0xa0>
 801fe90:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fe94:	d104      	bne.n	801fea0 <floor+0x98>
 801fe96:	ee10 2a10 	vmov	r2, s0
 801fe9a:	460b      	mov	r3, r1
 801fe9c:	f7e0 fa00 	bl	80002a0 <__adddf3>
 801fea0:	ec41 0b10 	vmov	d0, r0, r1
 801fea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fea8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801feac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801feb0:	fa23 f707 	lsr.w	r7, r3, r7
 801feb4:	4207      	tst	r7, r0
 801feb6:	d0f3      	beq.n	801fea0 <floor+0x98>
 801feb8:	a30f      	add	r3, pc, #60	; (adr r3, 801fef8 <floor+0xf0>)
 801feba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801febe:	f7e0 f9ef 	bl	80002a0 <__adddf3>
 801fec2:	2200      	movs	r2, #0
 801fec4:	2300      	movs	r3, #0
 801fec6:	f7e0 fe31 	bl	8000b2c <__aeabi_dcmpgt>
 801feca:	2800      	cmp	r0, #0
 801fecc:	d0bf      	beq.n	801fe4e <floor+0x46>
 801fece:	2c00      	cmp	r4, #0
 801fed0:	da02      	bge.n	801fed8 <floor+0xd0>
 801fed2:	2e14      	cmp	r6, #20
 801fed4:	d103      	bne.n	801fede <floor+0xd6>
 801fed6:	3401      	adds	r4, #1
 801fed8:	ea25 0507 	bic.w	r5, r5, r7
 801fedc:	e7b7      	b.n	801fe4e <floor+0x46>
 801fede:	2301      	movs	r3, #1
 801fee0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801fee4:	fa03 f606 	lsl.w	r6, r3, r6
 801fee8:	4435      	add	r5, r6
 801feea:	4545      	cmp	r5, r8
 801feec:	bf38      	it	cc
 801feee:	18e4      	addcc	r4, r4, r3
 801fef0:	e7f2      	b.n	801fed8 <floor+0xd0>
 801fef2:	2500      	movs	r5, #0
 801fef4:	462c      	mov	r4, r5
 801fef6:	e7aa      	b.n	801fe4e <floor+0x46>
 801fef8:	8800759c 	.word	0x8800759c
 801fefc:	7e37e43c 	.word	0x7e37e43c
 801ff00:	bff00000 	.word	0xbff00000
 801ff04:	000fffff 	.word	0x000fffff

0801ff08 <frexp>:
 801ff08:	b570      	push	{r4, r5, r6, lr}
 801ff0a:	2100      	movs	r1, #0
 801ff0c:	ec55 4b10 	vmov	r4, r5, d0
 801ff10:	6001      	str	r1, [r0, #0]
 801ff12:	4916      	ldr	r1, [pc, #88]	; (801ff6c <frexp+0x64>)
 801ff14:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801ff18:	428a      	cmp	r2, r1
 801ff1a:	4606      	mov	r6, r0
 801ff1c:	462b      	mov	r3, r5
 801ff1e:	dc22      	bgt.n	801ff66 <frexp+0x5e>
 801ff20:	ee10 1a10 	vmov	r1, s0
 801ff24:	4311      	orrs	r1, r2
 801ff26:	d01e      	beq.n	801ff66 <frexp+0x5e>
 801ff28:	4911      	ldr	r1, [pc, #68]	; (801ff70 <frexp+0x68>)
 801ff2a:	4029      	ands	r1, r5
 801ff2c:	b969      	cbnz	r1, 801ff4a <frexp+0x42>
 801ff2e:	4b11      	ldr	r3, [pc, #68]	; (801ff74 <frexp+0x6c>)
 801ff30:	2200      	movs	r2, #0
 801ff32:	ee10 0a10 	vmov	r0, s0
 801ff36:	4629      	mov	r1, r5
 801ff38:	f7e0 fb68 	bl	800060c <__aeabi_dmul>
 801ff3c:	460b      	mov	r3, r1
 801ff3e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801ff42:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801ff46:	4604      	mov	r4, r0
 801ff48:	6031      	str	r1, [r6, #0]
 801ff4a:	6831      	ldr	r1, [r6, #0]
 801ff4c:	1512      	asrs	r2, r2, #20
 801ff4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ff52:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801ff56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ff5a:	440a      	add	r2, r1
 801ff5c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801ff60:	6032      	str	r2, [r6, #0]
 801ff62:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801ff66:	ec45 4b10 	vmov	d0, r4, r5
 801ff6a:	bd70      	pop	{r4, r5, r6, pc}
 801ff6c:	7fefffff 	.word	0x7fefffff
 801ff70:	7ff00000 	.word	0x7ff00000
 801ff74:	43500000 	.word	0x43500000

0801ff78 <round>:
 801ff78:	ec51 0b10 	vmov	r0, r1, d0
 801ff7c:	b570      	push	{r4, r5, r6, lr}
 801ff7e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801ff82:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801ff86:	2c13      	cmp	r4, #19
 801ff88:	ee10 2a10 	vmov	r2, s0
 801ff8c:	460b      	mov	r3, r1
 801ff8e:	dc19      	bgt.n	801ffc4 <round+0x4c>
 801ff90:	2c00      	cmp	r4, #0
 801ff92:	da09      	bge.n	801ffa8 <round+0x30>
 801ff94:	3401      	adds	r4, #1
 801ff96:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801ff9a:	d103      	bne.n	801ffa4 <round+0x2c>
 801ff9c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801ffa0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ffa4:	2200      	movs	r2, #0
 801ffa6:	e028      	b.n	801fffa <round+0x82>
 801ffa8:	4d15      	ldr	r5, [pc, #84]	; (8020000 <round+0x88>)
 801ffaa:	4125      	asrs	r5, r4
 801ffac:	ea01 0605 	and.w	r6, r1, r5
 801ffb0:	4332      	orrs	r2, r6
 801ffb2:	d00e      	beq.n	801ffd2 <round+0x5a>
 801ffb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801ffb8:	fa42 f404 	asr.w	r4, r2, r4
 801ffbc:	4423      	add	r3, r4
 801ffbe:	ea23 0305 	bic.w	r3, r3, r5
 801ffc2:	e7ef      	b.n	801ffa4 <round+0x2c>
 801ffc4:	2c33      	cmp	r4, #51	; 0x33
 801ffc6:	dd07      	ble.n	801ffd8 <round+0x60>
 801ffc8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801ffcc:	d101      	bne.n	801ffd2 <round+0x5a>
 801ffce:	f7e0 f967 	bl	80002a0 <__adddf3>
 801ffd2:	ec41 0b10 	vmov	d0, r0, r1
 801ffd6:	bd70      	pop	{r4, r5, r6, pc}
 801ffd8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801ffdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ffe0:	40f5      	lsrs	r5, r6
 801ffe2:	4228      	tst	r0, r5
 801ffe4:	d0f5      	beq.n	801ffd2 <round+0x5a>
 801ffe6:	2101      	movs	r1, #1
 801ffe8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801ffec:	fa01 f404 	lsl.w	r4, r1, r4
 801fff0:	1912      	adds	r2, r2, r4
 801fff2:	bf28      	it	cs
 801fff4:	185b      	addcs	r3, r3, r1
 801fff6:	ea22 0205 	bic.w	r2, r2, r5
 801fffa:	4619      	mov	r1, r3
 801fffc:	4610      	mov	r0, r2
 801fffe:	e7e8      	b.n	801ffd2 <round+0x5a>
 8020000:	000fffff 	.word	0x000fffff
 8020004:	00000000 	.word	0x00000000

08020008 <sin>:
 8020008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802000a:	ec53 2b10 	vmov	r2, r3, d0
 802000e:	4828      	ldr	r0, [pc, #160]	; (80200b0 <sin+0xa8>)
 8020010:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020014:	4281      	cmp	r1, r0
 8020016:	dc07      	bgt.n	8020028 <sin+0x20>
 8020018:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80200a8 <sin+0xa0>
 802001c:	2000      	movs	r0, #0
 802001e:	b005      	add	sp, #20
 8020020:	f85d eb04 	ldr.w	lr, [sp], #4
 8020024:	f002 b804 	b.w	8022030 <__kernel_sin>
 8020028:	4822      	ldr	r0, [pc, #136]	; (80200b4 <sin+0xac>)
 802002a:	4281      	cmp	r1, r0
 802002c:	dd09      	ble.n	8020042 <sin+0x3a>
 802002e:	ee10 0a10 	vmov	r0, s0
 8020032:	4619      	mov	r1, r3
 8020034:	f7e0 f932 	bl	800029c <__aeabi_dsub>
 8020038:	ec41 0b10 	vmov	d0, r0, r1
 802003c:	b005      	add	sp, #20
 802003e:	f85d fb04 	ldr.w	pc, [sp], #4
 8020042:	4668      	mov	r0, sp
 8020044:	f000 ff04 	bl	8020e50 <__ieee754_rem_pio2>
 8020048:	f000 0003 	and.w	r0, r0, #3
 802004c:	2801      	cmp	r0, #1
 802004e:	d00c      	beq.n	802006a <sin+0x62>
 8020050:	2802      	cmp	r0, #2
 8020052:	d011      	beq.n	8020078 <sin+0x70>
 8020054:	b9f0      	cbnz	r0, 8020094 <sin+0x8c>
 8020056:	ed9d 1b02 	vldr	d1, [sp, #8]
 802005a:	ed9d 0b00 	vldr	d0, [sp]
 802005e:	2001      	movs	r0, #1
 8020060:	f001 ffe6 	bl	8022030 <__kernel_sin>
 8020064:	ec51 0b10 	vmov	r0, r1, d0
 8020068:	e7e6      	b.n	8020038 <sin+0x30>
 802006a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802006e:	ed9d 0b00 	vldr	d0, [sp]
 8020072:	f001 fbc5 	bl	8021800 <__kernel_cos>
 8020076:	e7f5      	b.n	8020064 <sin+0x5c>
 8020078:	ed9d 1b02 	vldr	d1, [sp, #8]
 802007c:	ed9d 0b00 	vldr	d0, [sp]
 8020080:	2001      	movs	r0, #1
 8020082:	f001 ffd5 	bl	8022030 <__kernel_sin>
 8020086:	ec53 2b10 	vmov	r2, r3, d0
 802008a:	ee10 0a10 	vmov	r0, s0
 802008e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020092:	e7d1      	b.n	8020038 <sin+0x30>
 8020094:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020098:	ed9d 0b00 	vldr	d0, [sp]
 802009c:	f001 fbb0 	bl	8021800 <__kernel_cos>
 80200a0:	e7f1      	b.n	8020086 <sin+0x7e>
 80200a2:	bf00      	nop
 80200a4:	f3af 8000 	nop.w
	...
 80200b0:	3fe921fb 	.word	0x3fe921fb
 80200b4:	7fefffff 	.word	0x7fefffff

080200b8 <tan>:
 80200b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80200ba:	ec53 2b10 	vmov	r2, r3, d0
 80200be:	4816      	ldr	r0, [pc, #88]	; (8020118 <tan+0x60>)
 80200c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80200c4:	4281      	cmp	r1, r0
 80200c6:	dc07      	bgt.n	80200d8 <tan+0x20>
 80200c8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8020110 <tan+0x58>
 80200cc:	2001      	movs	r0, #1
 80200ce:	b005      	add	sp, #20
 80200d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80200d4:	f002 b86c 	b.w	80221b0 <__kernel_tan>
 80200d8:	4810      	ldr	r0, [pc, #64]	; (802011c <tan+0x64>)
 80200da:	4281      	cmp	r1, r0
 80200dc:	dd09      	ble.n	80200f2 <tan+0x3a>
 80200de:	ee10 0a10 	vmov	r0, s0
 80200e2:	4619      	mov	r1, r3
 80200e4:	f7e0 f8da 	bl	800029c <__aeabi_dsub>
 80200e8:	ec41 0b10 	vmov	d0, r0, r1
 80200ec:	b005      	add	sp, #20
 80200ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80200f2:	4668      	mov	r0, sp
 80200f4:	f000 feac 	bl	8020e50 <__ieee754_rem_pio2>
 80200f8:	0040      	lsls	r0, r0, #1
 80200fa:	f000 0002 	and.w	r0, r0, #2
 80200fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020102:	ed9d 0b00 	vldr	d0, [sp]
 8020106:	f1c0 0001 	rsb	r0, r0, #1
 802010a:	f002 f851 	bl	80221b0 <__kernel_tan>
 802010e:	e7ed      	b.n	80200ec <tan+0x34>
	...
 8020118:	3fe921fb 	.word	0x3fe921fb
 802011c:	7fefffff 	.word	0x7fefffff

08020120 <frexpf>:
 8020120:	ee10 3a10 	vmov	r3, s0
 8020124:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020128:	2100      	movs	r1, #0
 802012a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802012e:	6001      	str	r1, [r0, #0]
 8020130:	da19      	bge.n	8020166 <frexpf+0x46>
 8020132:	b1c2      	cbz	r2, 8020166 <frexpf+0x46>
 8020134:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8020138:	d10a      	bne.n	8020150 <frexpf+0x30>
 802013a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8020168 <frexpf+0x48>
 802013e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020142:	f06f 0118 	mvn.w	r1, #24
 8020146:	ee17 3a90 	vmov	r3, s15
 802014a:	6001      	str	r1, [r0, #0]
 802014c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020150:	6801      	ldr	r1, [r0, #0]
 8020152:	15d2      	asrs	r2, r2, #23
 8020154:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020158:	3a7e      	subs	r2, #126	; 0x7e
 802015a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 802015e:	440a      	add	r2, r1
 8020160:	ee00 3a10 	vmov	s0, r3
 8020164:	6002      	str	r2, [r0, #0]
 8020166:	4770      	bx	lr
 8020168:	4c000000 	.word	0x4c000000

0802016c <roundf>:
 802016c:	ee10 0a10 	vmov	r0, s0
 8020170:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8020174:	3a7f      	subs	r2, #127	; 0x7f
 8020176:	2a16      	cmp	r2, #22
 8020178:	dc15      	bgt.n	80201a6 <roundf+0x3a>
 802017a:	2a00      	cmp	r2, #0
 802017c:	da08      	bge.n	8020190 <roundf+0x24>
 802017e:	3201      	adds	r2, #1
 8020180:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8020184:	d101      	bne.n	802018a <roundf+0x1e>
 8020186:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 802018a:	ee00 3a10 	vmov	s0, r3
 802018e:	4770      	bx	lr
 8020190:	4907      	ldr	r1, [pc, #28]	; (80201b0 <roundf+0x44>)
 8020192:	4111      	asrs	r1, r2
 8020194:	4208      	tst	r0, r1
 8020196:	d0fa      	beq.n	802018e <roundf+0x22>
 8020198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802019c:	4113      	asrs	r3, r2
 802019e:	4403      	add	r3, r0
 80201a0:	ea23 0301 	bic.w	r3, r3, r1
 80201a4:	e7f1      	b.n	802018a <roundf+0x1e>
 80201a6:	2a80      	cmp	r2, #128	; 0x80
 80201a8:	d1f1      	bne.n	802018e <roundf+0x22>
 80201aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80201ae:	4770      	bx	lr
 80201b0:	007fffff 	.word	0x007fffff

080201b4 <pow>:
 80201b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201b6:	ed2d 8b02 	vpush	{d8}
 80201ba:	eeb0 8a40 	vmov.f32	s16, s0
 80201be:	eef0 8a60 	vmov.f32	s17, s1
 80201c2:	ec55 4b11 	vmov	r4, r5, d1
 80201c6:	f000 f913 	bl	80203f0 <__ieee754_pow>
 80201ca:	4622      	mov	r2, r4
 80201cc:	462b      	mov	r3, r5
 80201ce:	4620      	mov	r0, r4
 80201d0:	4629      	mov	r1, r5
 80201d2:	ec57 6b10 	vmov	r6, r7, d0
 80201d6:	f7e0 fcb3 	bl	8000b40 <__aeabi_dcmpun>
 80201da:	2800      	cmp	r0, #0
 80201dc:	d13b      	bne.n	8020256 <pow+0xa2>
 80201de:	ec51 0b18 	vmov	r0, r1, d8
 80201e2:	2200      	movs	r2, #0
 80201e4:	2300      	movs	r3, #0
 80201e6:	f7e0 fc79 	bl	8000adc <__aeabi_dcmpeq>
 80201ea:	b1b8      	cbz	r0, 802021c <pow+0x68>
 80201ec:	2200      	movs	r2, #0
 80201ee:	2300      	movs	r3, #0
 80201f0:	4620      	mov	r0, r4
 80201f2:	4629      	mov	r1, r5
 80201f4:	f7e0 fc72 	bl	8000adc <__aeabi_dcmpeq>
 80201f8:	2800      	cmp	r0, #0
 80201fa:	d146      	bne.n	802028a <pow+0xd6>
 80201fc:	ec45 4b10 	vmov	d0, r4, r5
 8020200:	f002 fa3b 	bl	802267a <finite>
 8020204:	b338      	cbz	r0, 8020256 <pow+0xa2>
 8020206:	2200      	movs	r2, #0
 8020208:	2300      	movs	r3, #0
 802020a:	4620      	mov	r0, r4
 802020c:	4629      	mov	r1, r5
 802020e:	f7e0 fc6f 	bl	8000af0 <__aeabi_dcmplt>
 8020212:	b300      	cbz	r0, 8020256 <pow+0xa2>
 8020214:	f002 fb10 	bl	8022838 <__errno>
 8020218:	2322      	movs	r3, #34	; 0x22
 802021a:	e01b      	b.n	8020254 <pow+0xa0>
 802021c:	ec47 6b10 	vmov	d0, r6, r7
 8020220:	f002 fa2b 	bl	802267a <finite>
 8020224:	b9e0      	cbnz	r0, 8020260 <pow+0xac>
 8020226:	eeb0 0a48 	vmov.f32	s0, s16
 802022a:	eef0 0a68 	vmov.f32	s1, s17
 802022e:	f002 fa24 	bl	802267a <finite>
 8020232:	b1a8      	cbz	r0, 8020260 <pow+0xac>
 8020234:	ec45 4b10 	vmov	d0, r4, r5
 8020238:	f002 fa1f 	bl	802267a <finite>
 802023c:	b180      	cbz	r0, 8020260 <pow+0xac>
 802023e:	4632      	mov	r2, r6
 8020240:	463b      	mov	r3, r7
 8020242:	4630      	mov	r0, r6
 8020244:	4639      	mov	r1, r7
 8020246:	f7e0 fc7b 	bl	8000b40 <__aeabi_dcmpun>
 802024a:	2800      	cmp	r0, #0
 802024c:	d0e2      	beq.n	8020214 <pow+0x60>
 802024e:	f002 faf3 	bl	8022838 <__errno>
 8020252:	2321      	movs	r3, #33	; 0x21
 8020254:	6003      	str	r3, [r0, #0]
 8020256:	ecbd 8b02 	vpop	{d8}
 802025a:	ec47 6b10 	vmov	d0, r6, r7
 802025e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020260:	2200      	movs	r2, #0
 8020262:	2300      	movs	r3, #0
 8020264:	4630      	mov	r0, r6
 8020266:	4639      	mov	r1, r7
 8020268:	f7e0 fc38 	bl	8000adc <__aeabi_dcmpeq>
 802026c:	2800      	cmp	r0, #0
 802026e:	d0f2      	beq.n	8020256 <pow+0xa2>
 8020270:	eeb0 0a48 	vmov.f32	s0, s16
 8020274:	eef0 0a68 	vmov.f32	s1, s17
 8020278:	f002 f9ff 	bl	802267a <finite>
 802027c:	2800      	cmp	r0, #0
 802027e:	d0ea      	beq.n	8020256 <pow+0xa2>
 8020280:	ec45 4b10 	vmov	d0, r4, r5
 8020284:	f002 f9f9 	bl	802267a <finite>
 8020288:	e7c3      	b.n	8020212 <pow+0x5e>
 802028a:	4f01      	ldr	r7, [pc, #4]	; (8020290 <pow+0xdc>)
 802028c:	2600      	movs	r6, #0
 802028e:	e7e2      	b.n	8020256 <pow+0xa2>
 8020290:	3ff00000 	.word	0x3ff00000

08020294 <sqrt>:
 8020294:	b538      	push	{r3, r4, r5, lr}
 8020296:	ed2d 8b02 	vpush	{d8}
 802029a:	ec55 4b10 	vmov	r4, r5, d0
 802029e:	f000 ffe3 	bl	8021268 <__ieee754_sqrt>
 80202a2:	4622      	mov	r2, r4
 80202a4:	462b      	mov	r3, r5
 80202a6:	4620      	mov	r0, r4
 80202a8:	4629      	mov	r1, r5
 80202aa:	eeb0 8a40 	vmov.f32	s16, s0
 80202ae:	eef0 8a60 	vmov.f32	s17, s1
 80202b2:	f7e0 fc45 	bl	8000b40 <__aeabi_dcmpun>
 80202b6:	b990      	cbnz	r0, 80202de <sqrt+0x4a>
 80202b8:	2200      	movs	r2, #0
 80202ba:	2300      	movs	r3, #0
 80202bc:	4620      	mov	r0, r4
 80202be:	4629      	mov	r1, r5
 80202c0:	f7e0 fc16 	bl	8000af0 <__aeabi_dcmplt>
 80202c4:	b158      	cbz	r0, 80202de <sqrt+0x4a>
 80202c6:	f002 fab7 	bl	8022838 <__errno>
 80202ca:	2321      	movs	r3, #33	; 0x21
 80202cc:	6003      	str	r3, [r0, #0]
 80202ce:	2200      	movs	r2, #0
 80202d0:	2300      	movs	r3, #0
 80202d2:	4610      	mov	r0, r2
 80202d4:	4619      	mov	r1, r3
 80202d6:	f7e0 fac3 	bl	8000860 <__aeabi_ddiv>
 80202da:	ec41 0b18 	vmov	d8, r0, r1
 80202de:	eeb0 0a48 	vmov.f32	s0, s16
 80202e2:	eef0 0a68 	vmov.f32	s1, s17
 80202e6:	ecbd 8b02 	vpop	{d8}
 80202ea:	bd38      	pop	{r3, r4, r5, pc}

080202ec <expf>:
 80202ec:	b508      	push	{r3, lr}
 80202ee:	ed2d 8b02 	vpush	{d8}
 80202f2:	eef0 8a40 	vmov.f32	s17, s0
 80202f6:	f001 f869 	bl	80213cc <__ieee754_expf>
 80202fa:	eeb0 8a40 	vmov.f32	s16, s0
 80202fe:	eeb0 0a68 	vmov.f32	s0, s17
 8020302:	f002 fa53 	bl	80227ac <finitef>
 8020306:	b160      	cbz	r0, 8020322 <expf+0x36>
 8020308:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8020348 <expf+0x5c>
 802030c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020314:	dd0a      	ble.n	802032c <expf+0x40>
 8020316:	f002 fa8f 	bl	8022838 <__errno>
 802031a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 802034c <expf+0x60>
 802031e:	2322      	movs	r3, #34	; 0x22
 8020320:	6003      	str	r3, [r0, #0]
 8020322:	eeb0 0a48 	vmov.f32	s0, s16
 8020326:	ecbd 8b02 	vpop	{d8}
 802032a:	bd08      	pop	{r3, pc}
 802032c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8020350 <expf+0x64>
 8020330:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020338:	d5f3      	bpl.n	8020322 <expf+0x36>
 802033a:	f002 fa7d 	bl	8022838 <__errno>
 802033e:	2322      	movs	r3, #34	; 0x22
 8020340:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8020354 <expf+0x68>
 8020344:	6003      	str	r3, [r0, #0]
 8020346:	e7ec      	b.n	8020322 <expf+0x36>
 8020348:	42b17180 	.word	0x42b17180
 802034c:	7f800000 	.word	0x7f800000
 8020350:	c2cff1b5 	.word	0xc2cff1b5
 8020354:	00000000 	.word	0x00000000

08020358 <log10f>:
 8020358:	b508      	push	{r3, lr}
 802035a:	ed2d 8b02 	vpush	{d8}
 802035e:	eeb0 8a40 	vmov.f32	s16, s0
 8020362:	f001 f9f1 	bl	8021748 <__ieee754_log10f>
 8020366:	eeb4 8a48 	vcmp.f32	s16, s16
 802036a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802036e:	d60f      	bvs.n	8020390 <log10f+0x38>
 8020370:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8020374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020378:	d80a      	bhi.n	8020390 <log10f+0x38>
 802037a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802037e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020382:	d108      	bne.n	8020396 <log10f+0x3e>
 8020384:	f002 fa58 	bl	8022838 <__errno>
 8020388:	2322      	movs	r3, #34	; 0x22
 802038a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80203ac <log10f+0x54>
 802038e:	6003      	str	r3, [r0, #0]
 8020390:	ecbd 8b02 	vpop	{d8}
 8020394:	bd08      	pop	{r3, pc}
 8020396:	f002 fa4f 	bl	8022838 <__errno>
 802039a:	ecbd 8b02 	vpop	{d8}
 802039e:	2321      	movs	r3, #33	; 0x21
 80203a0:	6003      	str	r3, [r0, #0]
 80203a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80203a6:	4802      	ldr	r0, [pc, #8]	; (80203b0 <log10f+0x58>)
 80203a8:	f002 ba0e 	b.w	80227c8 <nanf>
 80203ac:	ff800000 	.word	0xff800000
 80203b0:	0802a4b3 	.word	0x0802a4b3

080203b4 <sqrtf>:
 80203b4:	b508      	push	{r3, lr}
 80203b6:	ed2d 8b02 	vpush	{d8}
 80203ba:	eeb0 8a40 	vmov.f32	s16, s0
 80203be:	f001 fa1b 	bl	80217f8 <__ieee754_sqrtf>
 80203c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80203c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203ca:	d60c      	bvs.n	80203e6 <sqrtf+0x32>
 80203cc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80203ec <sqrtf+0x38>
 80203d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80203d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203d8:	d505      	bpl.n	80203e6 <sqrtf+0x32>
 80203da:	f002 fa2d 	bl	8022838 <__errno>
 80203de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80203e2:	2321      	movs	r3, #33	; 0x21
 80203e4:	6003      	str	r3, [r0, #0]
 80203e6:	ecbd 8b02 	vpop	{d8}
 80203ea:	bd08      	pop	{r3, pc}
 80203ec:	00000000 	.word	0x00000000

080203f0 <__ieee754_pow>:
 80203f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203f4:	ed2d 8b06 	vpush	{d8-d10}
 80203f8:	b089      	sub	sp, #36	; 0x24
 80203fa:	ed8d 1b00 	vstr	d1, [sp]
 80203fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8020402:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8020406:	ea58 0102 	orrs.w	r1, r8, r2
 802040a:	ec57 6b10 	vmov	r6, r7, d0
 802040e:	d115      	bne.n	802043c <__ieee754_pow+0x4c>
 8020410:	19b3      	adds	r3, r6, r6
 8020412:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8020416:	4152      	adcs	r2, r2
 8020418:	4299      	cmp	r1, r3
 802041a:	4b89      	ldr	r3, [pc, #548]	; (8020640 <__ieee754_pow+0x250>)
 802041c:	4193      	sbcs	r3, r2
 802041e:	f080 84d2 	bcs.w	8020dc6 <__ieee754_pow+0x9d6>
 8020422:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020426:	4630      	mov	r0, r6
 8020428:	4639      	mov	r1, r7
 802042a:	f7df ff39 	bl	80002a0 <__adddf3>
 802042e:	ec41 0b10 	vmov	d0, r0, r1
 8020432:	b009      	add	sp, #36	; 0x24
 8020434:	ecbd 8b06 	vpop	{d8-d10}
 8020438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802043c:	4b81      	ldr	r3, [pc, #516]	; (8020644 <__ieee754_pow+0x254>)
 802043e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8020442:	429c      	cmp	r4, r3
 8020444:	ee10 aa10 	vmov	sl, s0
 8020448:	463d      	mov	r5, r7
 802044a:	dc06      	bgt.n	802045a <__ieee754_pow+0x6a>
 802044c:	d101      	bne.n	8020452 <__ieee754_pow+0x62>
 802044e:	2e00      	cmp	r6, #0
 8020450:	d1e7      	bne.n	8020422 <__ieee754_pow+0x32>
 8020452:	4598      	cmp	r8, r3
 8020454:	dc01      	bgt.n	802045a <__ieee754_pow+0x6a>
 8020456:	d10f      	bne.n	8020478 <__ieee754_pow+0x88>
 8020458:	b172      	cbz	r2, 8020478 <__ieee754_pow+0x88>
 802045a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 802045e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8020462:	ea55 050a 	orrs.w	r5, r5, sl
 8020466:	d1dc      	bne.n	8020422 <__ieee754_pow+0x32>
 8020468:	e9dd 3200 	ldrd	r3, r2, [sp]
 802046c:	18db      	adds	r3, r3, r3
 802046e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8020472:	4152      	adcs	r2, r2
 8020474:	429d      	cmp	r5, r3
 8020476:	e7d0      	b.n	802041a <__ieee754_pow+0x2a>
 8020478:	2d00      	cmp	r5, #0
 802047a:	da3b      	bge.n	80204f4 <__ieee754_pow+0x104>
 802047c:	4b72      	ldr	r3, [pc, #456]	; (8020648 <__ieee754_pow+0x258>)
 802047e:	4598      	cmp	r8, r3
 8020480:	dc51      	bgt.n	8020526 <__ieee754_pow+0x136>
 8020482:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8020486:	4598      	cmp	r8, r3
 8020488:	f340 84ac 	ble.w	8020de4 <__ieee754_pow+0x9f4>
 802048c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020490:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020494:	2b14      	cmp	r3, #20
 8020496:	dd0f      	ble.n	80204b8 <__ieee754_pow+0xc8>
 8020498:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802049c:	fa22 f103 	lsr.w	r1, r2, r3
 80204a0:	fa01 f303 	lsl.w	r3, r1, r3
 80204a4:	4293      	cmp	r3, r2
 80204a6:	f040 849d 	bne.w	8020de4 <__ieee754_pow+0x9f4>
 80204aa:	f001 0101 	and.w	r1, r1, #1
 80204ae:	f1c1 0302 	rsb	r3, r1, #2
 80204b2:	9304      	str	r3, [sp, #16]
 80204b4:	b182      	cbz	r2, 80204d8 <__ieee754_pow+0xe8>
 80204b6:	e05f      	b.n	8020578 <__ieee754_pow+0x188>
 80204b8:	2a00      	cmp	r2, #0
 80204ba:	d15b      	bne.n	8020574 <__ieee754_pow+0x184>
 80204bc:	f1c3 0314 	rsb	r3, r3, #20
 80204c0:	fa48 f103 	asr.w	r1, r8, r3
 80204c4:	fa01 f303 	lsl.w	r3, r1, r3
 80204c8:	4543      	cmp	r3, r8
 80204ca:	f040 8488 	bne.w	8020dde <__ieee754_pow+0x9ee>
 80204ce:	f001 0101 	and.w	r1, r1, #1
 80204d2:	f1c1 0302 	rsb	r3, r1, #2
 80204d6:	9304      	str	r3, [sp, #16]
 80204d8:	4b5c      	ldr	r3, [pc, #368]	; (802064c <__ieee754_pow+0x25c>)
 80204da:	4598      	cmp	r8, r3
 80204dc:	d132      	bne.n	8020544 <__ieee754_pow+0x154>
 80204de:	f1b9 0f00 	cmp.w	r9, #0
 80204e2:	f280 8478 	bge.w	8020dd6 <__ieee754_pow+0x9e6>
 80204e6:	4959      	ldr	r1, [pc, #356]	; (802064c <__ieee754_pow+0x25c>)
 80204e8:	4632      	mov	r2, r6
 80204ea:	463b      	mov	r3, r7
 80204ec:	2000      	movs	r0, #0
 80204ee:	f7e0 f9b7 	bl	8000860 <__aeabi_ddiv>
 80204f2:	e79c      	b.n	802042e <__ieee754_pow+0x3e>
 80204f4:	2300      	movs	r3, #0
 80204f6:	9304      	str	r3, [sp, #16]
 80204f8:	2a00      	cmp	r2, #0
 80204fa:	d13d      	bne.n	8020578 <__ieee754_pow+0x188>
 80204fc:	4b51      	ldr	r3, [pc, #324]	; (8020644 <__ieee754_pow+0x254>)
 80204fe:	4598      	cmp	r8, r3
 8020500:	d1ea      	bne.n	80204d8 <__ieee754_pow+0xe8>
 8020502:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8020506:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802050a:	ea53 030a 	orrs.w	r3, r3, sl
 802050e:	f000 845a 	beq.w	8020dc6 <__ieee754_pow+0x9d6>
 8020512:	4b4f      	ldr	r3, [pc, #316]	; (8020650 <__ieee754_pow+0x260>)
 8020514:	429c      	cmp	r4, r3
 8020516:	dd08      	ble.n	802052a <__ieee754_pow+0x13a>
 8020518:	f1b9 0f00 	cmp.w	r9, #0
 802051c:	f2c0 8457 	blt.w	8020dce <__ieee754_pow+0x9de>
 8020520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020524:	e783      	b.n	802042e <__ieee754_pow+0x3e>
 8020526:	2302      	movs	r3, #2
 8020528:	e7e5      	b.n	80204f6 <__ieee754_pow+0x106>
 802052a:	f1b9 0f00 	cmp.w	r9, #0
 802052e:	f04f 0000 	mov.w	r0, #0
 8020532:	f04f 0100 	mov.w	r1, #0
 8020536:	f6bf af7a 	bge.w	802042e <__ieee754_pow+0x3e>
 802053a:	e9dd 0300 	ldrd	r0, r3, [sp]
 802053e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020542:	e774      	b.n	802042e <__ieee754_pow+0x3e>
 8020544:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8020548:	d106      	bne.n	8020558 <__ieee754_pow+0x168>
 802054a:	4632      	mov	r2, r6
 802054c:	463b      	mov	r3, r7
 802054e:	4630      	mov	r0, r6
 8020550:	4639      	mov	r1, r7
 8020552:	f7e0 f85b 	bl	800060c <__aeabi_dmul>
 8020556:	e76a      	b.n	802042e <__ieee754_pow+0x3e>
 8020558:	4b3e      	ldr	r3, [pc, #248]	; (8020654 <__ieee754_pow+0x264>)
 802055a:	4599      	cmp	r9, r3
 802055c:	d10c      	bne.n	8020578 <__ieee754_pow+0x188>
 802055e:	2d00      	cmp	r5, #0
 8020560:	db0a      	blt.n	8020578 <__ieee754_pow+0x188>
 8020562:	ec47 6b10 	vmov	d0, r6, r7
 8020566:	b009      	add	sp, #36	; 0x24
 8020568:	ecbd 8b06 	vpop	{d8-d10}
 802056c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020570:	f000 be7a 	b.w	8021268 <__ieee754_sqrt>
 8020574:	2300      	movs	r3, #0
 8020576:	9304      	str	r3, [sp, #16]
 8020578:	ec47 6b10 	vmov	d0, r6, r7
 802057c:	f002 f874 	bl	8022668 <fabs>
 8020580:	ec51 0b10 	vmov	r0, r1, d0
 8020584:	f1ba 0f00 	cmp.w	sl, #0
 8020588:	d129      	bne.n	80205de <__ieee754_pow+0x1ee>
 802058a:	b124      	cbz	r4, 8020596 <__ieee754_pow+0x1a6>
 802058c:	4b2f      	ldr	r3, [pc, #188]	; (802064c <__ieee754_pow+0x25c>)
 802058e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8020592:	429a      	cmp	r2, r3
 8020594:	d123      	bne.n	80205de <__ieee754_pow+0x1ee>
 8020596:	f1b9 0f00 	cmp.w	r9, #0
 802059a:	da05      	bge.n	80205a8 <__ieee754_pow+0x1b8>
 802059c:	4602      	mov	r2, r0
 802059e:	460b      	mov	r3, r1
 80205a0:	2000      	movs	r0, #0
 80205a2:	492a      	ldr	r1, [pc, #168]	; (802064c <__ieee754_pow+0x25c>)
 80205a4:	f7e0 f95c 	bl	8000860 <__aeabi_ddiv>
 80205a8:	2d00      	cmp	r5, #0
 80205aa:	f6bf af40 	bge.w	802042e <__ieee754_pow+0x3e>
 80205ae:	9b04      	ldr	r3, [sp, #16]
 80205b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80205b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80205b8:	4323      	orrs	r3, r4
 80205ba:	d108      	bne.n	80205ce <__ieee754_pow+0x1de>
 80205bc:	4602      	mov	r2, r0
 80205be:	460b      	mov	r3, r1
 80205c0:	4610      	mov	r0, r2
 80205c2:	4619      	mov	r1, r3
 80205c4:	f7df fe6a 	bl	800029c <__aeabi_dsub>
 80205c8:	4602      	mov	r2, r0
 80205ca:	460b      	mov	r3, r1
 80205cc:	e78f      	b.n	80204ee <__ieee754_pow+0xfe>
 80205ce:	9b04      	ldr	r3, [sp, #16]
 80205d0:	2b01      	cmp	r3, #1
 80205d2:	f47f af2c 	bne.w	802042e <__ieee754_pow+0x3e>
 80205d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80205da:	4619      	mov	r1, r3
 80205dc:	e727      	b.n	802042e <__ieee754_pow+0x3e>
 80205de:	0feb      	lsrs	r3, r5, #31
 80205e0:	3b01      	subs	r3, #1
 80205e2:	9306      	str	r3, [sp, #24]
 80205e4:	9a06      	ldr	r2, [sp, #24]
 80205e6:	9b04      	ldr	r3, [sp, #16]
 80205e8:	4313      	orrs	r3, r2
 80205ea:	d102      	bne.n	80205f2 <__ieee754_pow+0x202>
 80205ec:	4632      	mov	r2, r6
 80205ee:	463b      	mov	r3, r7
 80205f0:	e7e6      	b.n	80205c0 <__ieee754_pow+0x1d0>
 80205f2:	4b19      	ldr	r3, [pc, #100]	; (8020658 <__ieee754_pow+0x268>)
 80205f4:	4598      	cmp	r8, r3
 80205f6:	f340 80fb 	ble.w	80207f0 <__ieee754_pow+0x400>
 80205fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80205fe:	4598      	cmp	r8, r3
 8020600:	4b13      	ldr	r3, [pc, #76]	; (8020650 <__ieee754_pow+0x260>)
 8020602:	dd0c      	ble.n	802061e <__ieee754_pow+0x22e>
 8020604:	429c      	cmp	r4, r3
 8020606:	dc0f      	bgt.n	8020628 <__ieee754_pow+0x238>
 8020608:	f1b9 0f00 	cmp.w	r9, #0
 802060c:	da0f      	bge.n	802062e <__ieee754_pow+0x23e>
 802060e:	2000      	movs	r0, #0
 8020610:	b009      	add	sp, #36	; 0x24
 8020612:	ecbd 8b06 	vpop	{d8-d10}
 8020616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802061a:	f001 bffa 	b.w	8022612 <__math_oflow>
 802061e:	429c      	cmp	r4, r3
 8020620:	dbf2      	blt.n	8020608 <__ieee754_pow+0x218>
 8020622:	4b0a      	ldr	r3, [pc, #40]	; (802064c <__ieee754_pow+0x25c>)
 8020624:	429c      	cmp	r4, r3
 8020626:	dd19      	ble.n	802065c <__ieee754_pow+0x26c>
 8020628:	f1b9 0f00 	cmp.w	r9, #0
 802062c:	dcef      	bgt.n	802060e <__ieee754_pow+0x21e>
 802062e:	2000      	movs	r0, #0
 8020630:	b009      	add	sp, #36	; 0x24
 8020632:	ecbd 8b06 	vpop	{d8-d10}
 8020636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802063a:	f001 bfe1 	b.w	8022600 <__math_uflow>
 802063e:	bf00      	nop
 8020640:	fff00000 	.word	0xfff00000
 8020644:	7ff00000 	.word	0x7ff00000
 8020648:	433fffff 	.word	0x433fffff
 802064c:	3ff00000 	.word	0x3ff00000
 8020650:	3fefffff 	.word	0x3fefffff
 8020654:	3fe00000 	.word	0x3fe00000
 8020658:	41e00000 	.word	0x41e00000
 802065c:	4b60      	ldr	r3, [pc, #384]	; (80207e0 <__ieee754_pow+0x3f0>)
 802065e:	2200      	movs	r2, #0
 8020660:	f7df fe1c 	bl	800029c <__aeabi_dsub>
 8020664:	a354      	add	r3, pc, #336	; (adr r3, 80207b8 <__ieee754_pow+0x3c8>)
 8020666:	e9d3 2300 	ldrd	r2, r3, [r3]
 802066a:	4604      	mov	r4, r0
 802066c:	460d      	mov	r5, r1
 802066e:	f7df ffcd 	bl	800060c <__aeabi_dmul>
 8020672:	a353      	add	r3, pc, #332	; (adr r3, 80207c0 <__ieee754_pow+0x3d0>)
 8020674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020678:	4606      	mov	r6, r0
 802067a:	460f      	mov	r7, r1
 802067c:	4620      	mov	r0, r4
 802067e:	4629      	mov	r1, r5
 8020680:	f7df ffc4 	bl	800060c <__aeabi_dmul>
 8020684:	4b57      	ldr	r3, [pc, #348]	; (80207e4 <__ieee754_pow+0x3f4>)
 8020686:	4682      	mov	sl, r0
 8020688:	468b      	mov	fp, r1
 802068a:	2200      	movs	r2, #0
 802068c:	4620      	mov	r0, r4
 802068e:	4629      	mov	r1, r5
 8020690:	f7df ffbc 	bl	800060c <__aeabi_dmul>
 8020694:	4602      	mov	r2, r0
 8020696:	460b      	mov	r3, r1
 8020698:	a14b      	add	r1, pc, #300	; (adr r1, 80207c8 <__ieee754_pow+0x3d8>)
 802069a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802069e:	f7df fdfd 	bl	800029c <__aeabi_dsub>
 80206a2:	4622      	mov	r2, r4
 80206a4:	462b      	mov	r3, r5
 80206a6:	f7df ffb1 	bl	800060c <__aeabi_dmul>
 80206aa:	4602      	mov	r2, r0
 80206ac:	460b      	mov	r3, r1
 80206ae:	2000      	movs	r0, #0
 80206b0:	494d      	ldr	r1, [pc, #308]	; (80207e8 <__ieee754_pow+0x3f8>)
 80206b2:	f7df fdf3 	bl	800029c <__aeabi_dsub>
 80206b6:	4622      	mov	r2, r4
 80206b8:	4680      	mov	r8, r0
 80206ba:	4689      	mov	r9, r1
 80206bc:	462b      	mov	r3, r5
 80206be:	4620      	mov	r0, r4
 80206c0:	4629      	mov	r1, r5
 80206c2:	f7df ffa3 	bl	800060c <__aeabi_dmul>
 80206c6:	4602      	mov	r2, r0
 80206c8:	460b      	mov	r3, r1
 80206ca:	4640      	mov	r0, r8
 80206cc:	4649      	mov	r1, r9
 80206ce:	f7df ff9d 	bl	800060c <__aeabi_dmul>
 80206d2:	a33f      	add	r3, pc, #252	; (adr r3, 80207d0 <__ieee754_pow+0x3e0>)
 80206d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206d8:	f7df ff98 	bl	800060c <__aeabi_dmul>
 80206dc:	4602      	mov	r2, r0
 80206de:	460b      	mov	r3, r1
 80206e0:	4650      	mov	r0, sl
 80206e2:	4659      	mov	r1, fp
 80206e4:	f7df fdda 	bl	800029c <__aeabi_dsub>
 80206e8:	4602      	mov	r2, r0
 80206ea:	460b      	mov	r3, r1
 80206ec:	4680      	mov	r8, r0
 80206ee:	4689      	mov	r9, r1
 80206f0:	4630      	mov	r0, r6
 80206f2:	4639      	mov	r1, r7
 80206f4:	f7df fdd4 	bl	80002a0 <__adddf3>
 80206f8:	2000      	movs	r0, #0
 80206fa:	4632      	mov	r2, r6
 80206fc:	463b      	mov	r3, r7
 80206fe:	4604      	mov	r4, r0
 8020700:	460d      	mov	r5, r1
 8020702:	f7df fdcb 	bl	800029c <__aeabi_dsub>
 8020706:	4602      	mov	r2, r0
 8020708:	460b      	mov	r3, r1
 802070a:	4640      	mov	r0, r8
 802070c:	4649      	mov	r1, r9
 802070e:	f7df fdc5 	bl	800029c <__aeabi_dsub>
 8020712:	9b04      	ldr	r3, [sp, #16]
 8020714:	9a06      	ldr	r2, [sp, #24]
 8020716:	3b01      	subs	r3, #1
 8020718:	4313      	orrs	r3, r2
 802071a:	4682      	mov	sl, r0
 802071c:	468b      	mov	fp, r1
 802071e:	f040 81e7 	bne.w	8020af0 <__ieee754_pow+0x700>
 8020722:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80207d8 <__ieee754_pow+0x3e8>
 8020726:	eeb0 8a47 	vmov.f32	s16, s14
 802072a:	eef0 8a67 	vmov.f32	s17, s15
 802072e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020732:	2600      	movs	r6, #0
 8020734:	4632      	mov	r2, r6
 8020736:	463b      	mov	r3, r7
 8020738:	e9dd 0100 	ldrd	r0, r1, [sp]
 802073c:	f7df fdae 	bl	800029c <__aeabi_dsub>
 8020740:	4622      	mov	r2, r4
 8020742:	462b      	mov	r3, r5
 8020744:	f7df ff62 	bl	800060c <__aeabi_dmul>
 8020748:	e9dd 2300 	ldrd	r2, r3, [sp]
 802074c:	4680      	mov	r8, r0
 802074e:	4689      	mov	r9, r1
 8020750:	4650      	mov	r0, sl
 8020752:	4659      	mov	r1, fp
 8020754:	f7df ff5a 	bl	800060c <__aeabi_dmul>
 8020758:	4602      	mov	r2, r0
 802075a:	460b      	mov	r3, r1
 802075c:	4640      	mov	r0, r8
 802075e:	4649      	mov	r1, r9
 8020760:	f7df fd9e 	bl	80002a0 <__adddf3>
 8020764:	4632      	mov	r2, r6
 8020766:	463b      	mov	r3, r7
 8020768:	4680      	mov	r8, r0
 802076a:	4689      	mov	r9, r1
 802076c:	4620      	mov	r0, r4
 802076e:	4629      	mov	r1, r5
 8020770:	f7df ff4c 	bl	800060c <__aeabi_dmul>
 8020774:	460b      	mov	r3, r1
 8020776:	4604      	mov	r4, r0
 8020778:	460d      	mov	r5, r1
 802077a:	4602      	mov	r2, r0
 802077c:	4649      	mov	r1, r9
 802077e:	4640      	mov	r0, r8
 8020780:	f7df fd8e 	bl	80002a0 <__adddf3>
 8020784:	4b19      	ldr	r3, [pc, #100]	; (80207ec <__ieee754_pow+0x3fc>)
 8020786:	4299      	cmp	r1, r3
 8020788:	ec45 4b19 	vmov	d9, r4, r5
 802078c:	4606      	mov	r6, r0
 802078e:	460f      	mov	r7, r1
 8020790:	468b      	mov	fp, r1
 8020792:	f340 82f1 	ble.w	8020d78 <__ieee754_pow+0x988>
 8020796:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802079a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802079e:	4303      	orrs	r3, r0
 80207a0:	f000 81e4 	beq.w	8020b6c <__ieee754_pow+0x77c>
 80207a4:	ec51 0b18 	vmov	r0, r1, d8
 80207a8:	2200      	movs	r2, #0
 80207aa:	2300      	movs	r3, #0
 80207ac:	f7e0 f9a0 	bl	8000af0 <__aeabi_dcmplt>
 80207b0:	3800      	subs	r0, #0
 80207b2:	bf18      	it	ne
 80207b4:	2001      	movne	r0, #1
 80207b6:	e72b      	b.n	8020610 <__ieee754_pow+0x220>
 80207b8:	60000000 	.word	0x60000000
 80207bc:	3ff71547 	.word	0x3ff71547
 80207c0:	f85ddf44 	.word	0xf85ddf44
 80207c4:	3e54ae0b 	.word	0x3e54ae0b
 80207c8:	55555555 	.word	0x55555555
 80207cc:	3fd55555 	.word	0x3fd55555
 80207d0:	652b82fe 	.word	0x652b82fe
 80207d4:	3ff71547 	.word	0x3ff71547
 80207d8:	00000000 	.word	0x00000000
 80207dc:	bff00000 	.word	0xbff00000
 80207e0:	3ff00000 	.word	0x3ff00000
 80207e4:	3fd00000 	.word	0x3fd00000
 80207e8:	3fe00000 	.word	0x3fe00000
 80207ec:	408fffff 	.word	0x408fffff
 80207f0:	4bd5      	ldr	r3, [pc, #852]	; (8020b48 <__ieee754_pow+0x758>)
 80207f2:	402b      	ands	r3, r5
 80207f4:	2200      	movs	r2, #0
 80207f6:	b92b      	cbnz	r3, 8020804 <__ieee754_pow+0x414>
 80207f8:	4bd4      	ldr	r3, [pc, #848]	; (8020b4c <__ieee754_pow+0x75c>)
 80207fa:	f7df ff07 	bl	800060c <__aeabi_dmul>
 80207fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020802:	460c      	mov	r4, r1
 8020804:	1523      	asrs	r3, r4, #20
 8020806:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802080a:	4413      	add	r3, r2
 802080c:	9305      	str	r3, [sp, #20]
 802080e:	4bd0      	ldr	r3, [pc, #832]	; (8020b50 <__ieee754_pow+0x760>)
 8020810:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020814:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020818:	429c      	cmp	r4, r3
 802081a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802081e:	dd08      	ble.n	8020832 <__ieee754_pow+0x442>
 8020820:	4bcc      	ldr	r3, [pc, #816]	; (8020b54 <__ieee754_pow+0x764>)
 8020822:	429c      	cmp	r4, r3
 8020824:	f340 8162 	ble.w	8020aec <__ieee754_pow+0x6fc>
 8020828:	9b05      	ldr	r3, [sp, #20]
 802082a:	3301      	adds	r3, #1
 802082c:	9305      	str	r3, [sp, #20]
 802082e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020832:	2400      	movs	r4, #0
 8020834:	00e3      	lsls	r3, r4, #3
 8020836:	9307      	str	r3, [sp, #28]
 8020838:	4bc7      	ldr	r3, [pc, #796]	; (8020b58 <__ieee754_pow+0x768>)
 802083a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802083e:	ed93 7b00 	vldr	d7, [r3]
 8020842:	4629      	mov	r1, r5
 8020844:	ec53 2b17 	vmov	r2, r3, d7
 8020848:	eeb0 9a47 	vmov.f32	s18, s14
 802084c:	eef0 9a67 	vmov.f32	s19, s15
 8020850:	4682      	mov	sl, r0
 8020852:	f7df fd23 	bl	800029c <__aeabi_dsub>
 8020856:	4652      	mov	r2, sl
 8020858:	4606      	mov	r6, r0
 802085a:	460f      	mov	r7, r1
 802085c:	462b      	mov	r3, r5
 802085e:	ec51 0b19 	vmov	r0, r1, d9
 8020862:	f7df fd1d 	bl	80002a0 <__adddf3>
 8020866:	4602      	mov	r2, r0
 8020868:	460b      	mov	r3, r1
 802086a:	2000      	movs	r0, #0
 802086c:	49bb      	ldr	r1, [pc, #748]	; (8020b5c <__ieee754_pow+0x76c>)
 802086e:	f7df fff7 	bl	8000860 <__aeabi_ddiv>
 8020872:	ec41 0b1a 	vmov	d10, r0, r1
 8020876:	4602      	mov	r2, r0
 8020878:	460b      	mov	r3, r1
 802087a:	4630      	mov	r0, r6
 802087c:	4639      	mov	r1, r7
 802087e:	f7df fec5 	bl	800060c <__aeabi_dmul>
 8020882:	2300      	movs	r3, #0
 8020884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020888:	9302      	str	r3, [sp, #8]
 802088a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802088e:	46ab      	mov	fp, r5
 8020890:	106d      	asrs	r5, r5, #1
 8020892:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8020896:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802089a:	ec41 0b18 	vmov	d8, r0, r1
 802089e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80208a2:	2200      	movs	r2, #0
 80208a4:	4640      	mov	r0, r8
 80208a6:	4649      	mov	r1, r9
 80208a8:	4614      	mov	r4, r2
 80208aa:	461d      	mov	r5, r3
 80208ac:	f7df feae 	bl	800060c <__aeabi_dmul>
 80208b0:	4602      	mov	r2, r0
 80208b2:	460b      	mov	r3, r1
 80208b4:	4630      	mov	r0, r6
 80208b6:	4639      	mov	r1, r7
 80208b8:	f7df fcf0 	bl	800029c <__aeabi_dsub>
 80208bc:	ec53 2b19 	vmov	r2, r3, d9
 80208c0:	4606      	mov	r6, r0
 80208c2:	460f      	mov	r7, r1
 80208c4:	4620      	mov	r0, r4
 80208c6:	4629      	mov	r1, r5
 80208c8:	f7df fce8 	bl	800029c <__aeabi_dsub>
 80208cc:	4602      	mov	r2, r0
 80208ce:	460b      	mov	r3, r1
 80208d0:	4650      	mov	r0, sl
 80208d2:	4659      	mov	r1, fp
 80208d4:	f7df fce2 	bl	800029c <__aeabi_dsub>
 80208d8:	4642      	mov	r2, r8
 80208da:	464b      	mov	r3, r9
 80208dc:	f7df fe96 	bl	800060c <__aeabi_dmul>
 80208e0:	4602      	mov	r2, r0
 80208e2:	460b      	mov	r3, r1
 80208e4:	4630      	mov	r0, r6
 80208e6:	4639      	mov	r1, r7
 80208e8:	f7df fcd8 	bl	800029c <__aeabi_dsub>
 80208ec:	ec53 2b1a 	vmov	r2, r3, d10
 80208f0:	f7df fe8c 	bl	800060c <__aeabi_dmul>
 80208f4:	ec53 2b18 	vmov	r2, r3, d8
 80208f8:	ec41 0b19 	vmov	d9, r0, r1
 80208fc:	ec51 0b18 	vmov	r0, r1, d8
 8020900:	f7df fe84 	bl	800060c <__aeabi_dmul>
 8020904:	a37c      	add	r3, pc, #496	; (adr r3, 8020af8 <__ieee754_pow+0x708>)
 8020906:	e9d3 2300 	ldrd	r2, r3, [r3]
 802090a:	4604      	mov	r4, r0
 802090c:	460d      	mov	r5, r1
 802090e:	f7df fe7d 	bl	800060c <__aeabi_dmul>
 8020912:	a37b      	add	r3, pc, #492	; (adr r3, 8020b00 <__ieee754_pow+0x710>)
 8020914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020918:	f7df fcc2 	bl	80002a0 <__adddf3>
 802091c:	4622      	mov	r2, r4
 802091e:	462b      	mov	r3, r5
 8020920:	f7df fe74 	bl	800060c <__aeabi_dmul>
 8020924:	a378      	add	r3, pc, #480	; (adr r3, 8020b08 <__ieee754_pow+0x718>)
 8020926:	e9d3 2300 	ldrd	r2, r3, [r3]
 802092a:	f7df fcb9 	bl	80002a0 <__adddf3>
 802092e:	4622      	mov	r2, r4
 8020930:	462b      	mov	r3, r5
 8020932:	f7df fe6b 	bl	800060c <__aeabi_dmul>
 8020936:	a376      	add	r3, pc, #472	; (adr r3, 8020b10 <__ieee754_pow+0x720>)
 8020938:	e9d3 2300 	ldrd	r2, r3, [r3]
 802093c:	f7df fcb0 	bl	80002a0 <__adddf3>
 8020940:	4622      	mov	r2, r4
 8020942:	462b      	mov	r3, r5
 8020944:	f7df fe62 	bl	800060c <__aeabi_dmul>
 8020948:	a373      	add	r3, pc, #460	; (adr r3, 8020b18 <__ieee754_pow+0x728>)
 802094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802094e:	f7df fca7 	bl	80002a0 <__adddf3>
 8020952:	4622      	mov	r2, r4
 8020954:	462b      	mov	r3, r5
 8020956:	f7df fe59 	bl	800060c <__aeabi_dmul>
 802095a:	a371      	add	r3, pc, #452	; (adr r3, 8020b20 <__ieee754_pow+0x730>)
 802095c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020960:	f7df fc9e 	bl	80002a0 <__adddf3>
 8020964:	4622      	mov	r2, r4
 8020966:	4606      	mov	r6, r0
 8020968:	460f      	mov	r7, r1
 802096a:	462b      	mov	r3, r5
 802096c:	4620      	mov	r0, r4
 802096e:	4629      	mov	r1, r5
 8020970:	f7df fe4c 	bl	800060c <__aeabi_dmul>
 8020974:	4602      	mov	r2, r0
 8020976:	460b      	mov	r3, r1
 8020978:	4630      	mov	r0, r6
 802097a:	4639      	mov	r1, r7
 802097c:	f7df fe46 	bl	800060c <__aeabi_dmul>
 8020980:	4642      	mov	r2, r8
 8020982:	4604      	mov	r4, r0
 8020984:	460d      	mov	r5, r1
 8020986:	464b      	mov	r3, r9
 8020988:	ec51 0b18 	vmov	r0, r1, d8
 802098c:	f7df fc88 	bl	80002a0 <__adddf3>
 8020990:	ec53 2b19 	vmov	r2, r3, d9
 8020994:	f7df fe3a 	bl	800060c <__aeabi_dmul>
 8020998:	4622      	mov	r2, r4
 802099a:	462b      	mov	r3, r5
 802099c:	f7df fc80 	bl	80002a0 <__adddf3>
 80209a0:	4642      	mov	r2, r8
 80209a2:	4682      	mov	sl, r0
 80209a4:	468b      	mov	fp, r1
 80209a6:	464b      	mov	r3, r9
 80209a8:	4640      	mov	r0, r8
 80209aa:	4649      	mov	r1, r9
 80209ac:	f7df fe2e 	bl	800060c <__aeabi_dmul>
 80209b0:	4b6b      	ldr	r3, [pc, #428]	; (8020b60 <__ieee754_pow+0x770>)
 80209b2:	2200      	movs	r2, #0
 80209b4:	4606      	mov	r6, r0
 80209b6:	460f      	mov	r7, r1
 80209b8:	f7df fc72 	bl	80002a0 <__adddf3>
 80209bc:	4652      	mov	r2, sl
 80209be:	465b      	mov	r3, fp
 80209c0:	f7df fc6e 	bl	80002a0 <__adddf3>
 80209c4:	2000      	movs	r0, #0
 80209c6:	4604      	mov	r4, r0
 80209c8:	460d      	mov	r5, r1
 80209ca:	4602      	mov	r2, r0
 80209cc:	460b      	mov	r3, r1
 80209ce:	4640      	mov	r0, r8
 80209d0:	4649      	mov	r1, r9
 80209d2:	f7df fe1b 	bl	800060c <__aeabi_dmul>
 80209d6:	4b62      	ldr	r3, [pc, #392]	; (8020b60 <__ieee754_pow+0x770>)
 80209d8:	4680      	mov	r8, r0
 80209da:	4689      	mov	r9, r1
 80209dc:	2200      	movs	r2, #0
 80209de:	4620      	mov	r0, r4
 80209e0:	4629      	mov	r1, r5
 80209e2:	f7df fc5b 	bl	800029c <__aeabi_dsub>
 80209e6:	4632      	mov	r2, r6
 80209e8:	463b      	mov	r3, r7
 80209ea:	f7df fc57 	bl	800029c <__aeabi_dsub>
 80209ee:	4602      	mov	r2, r0
 80209f0:	460b      	mov	r3, r1
 80209f2:	4650      	mov	r0, sl
 80209f4:	4659      	mov	r1, fp
 80209f6:	f7df fc51 	bl	800029c <__aeabi_dsub>
 80209fa:	ec53 2b18 	vmov	r2, r3, d8
 80209fe:	f7df fe05 	bl	800060c <__aeabi_dmul>
 8020a02:	4622      	mov	r2, r4
 8020a04:	4606      	mov	r6, r0
 8020a06:	460f      	mov	r7, r1
 8020a08:	462b      	mov	r3, r5
 8020a0a:	ec51 0b19 	vmov	r0, r1, d9
 8020a0e:	f7df fdfd 	bl	800060c <__aeabi_dmul>
 8020a12:	4602      	mov	r2, r0
 8020a14:	460b      	mov	r3, r1
 8020a16:	4630      	mov	r0, r6
 8020a18:	4639      	mov	r1, r7
 8020a1a:	f7df fc41 	bl	80002a0 <__adddf3>
 8020a1e:	4606      	mov	r6, r0
 8020a20:	460f      	mov	r7, r1
 8020a22:	4602      	mov	r2, r0
 8020a24:	460b      	mov	r3, r1
 8020a26:	4640      	mov	r0, r8
 8020a28:	4649      	mov	r1, r9
 8020a2a:	f7df fc39 	bl	80002a0 <__adddf3>
 8020a2e:	a33e      	add	r3, pc, #248	; (adr r3, 8020b28 <__ieee754_pow+0x738>)
 8020a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a34:	2000      	movs	r0, #0
 8020a36:	4604      	mov	r4, r0
 8020a38:	460d      	mov	r5, r1
 8020a3a:	f7df fde7 	bl	800060c <__aeabi_dmul>
 8020a3e:	4642      	mov	r2, r8
 8020a40:	ec41 0b18 	vmov	d8, r0, r1
 8020a44:	464b      	mov	r3, r9
 8020a46:	4620      	mov	r0, r4
 8020a48:	4629      	mov	r1, r5
 8020a4a:	f7df fc27 	bl	800029c <__aeabi_dsub>
 8020a4e:	4602      	mov	r2, r0
 8020a50:	460b      	mov	r3, r1
 8020a52:	4630      	mov	r0, r6
 8020a54:	4639      	mov	r1, r7
 8020a56:	f7df fc21 	bl	800029c <__aeabi_dsub>
 8020a5a:	a335      	add	r3, pc, #212	; (adr r3, 8020b30 <__ieee754_pow+0x740>)
 8020a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a60:	f7df fdd4 	bl	800060c <__aeabi_dmul>
 8020a64:	a334      	add	r3, pc, #208	; (adr r3, 8020b38 <__ieee754_pow+0x748>)
 8020a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a6a:	4606      	mov	r6, r0
 8020a6c:	460f      	mov	r7, r1
 8020a6e:	4620      	mov	r0, r4
 8020a70:	4629      	mov	r1, r5
 8020a72:	f7df fdcb 	bl	800060c <__aeabi_dmul>
 8020a76:	4602      	mov	r2, r0
 8020a78:	460b      	mov	r3, r1
 8020a7a:	4630      	mov	r0, r6
 8020a7c:	4639      	mov	r1, r7
 8020a7e:	f7df fc0f 	bl	80002a0 <__adddf3>
 8020a82:	9a07      	ldr	r2, [sp, #28]
 8020a84:	4b37      	ldr	r3, [pc, #220]	; (8020b64 <__ieee754_pow+0x774>)
 8020a86:	4413      	add	r3, r2
 8020a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a8c:	f7df fc08 	bl	80002a0 <__adddf3>
 8020a90:	4682      	mov	sl, r0
 8020a92:	9805      	ldr	r0, [sp, #20]
 8020a94:	468b      	mov	fp, r1
 8020a96:	f7df fd4f 	bl	8000538 <__aeabi_i2d>
 8020a9a:	9a07      	ldr	r2, [sp, #28]
 8020a9c:	4b32      	ldr	r3, [pc, #200]	; (8020b68 <__ieee754_pow+0x778>)
 8020a9e:	4413      	add	r3, r2
 8020aa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020aa4:	4606      	mov	r6, r0
 8020aa6:	460f      	mov	r7, r1
 8020aa8:	4652      	mov	r2, sl
 8020aaa:	465b      	mov	r3, fp
 8020aac:	ec51 0b18 	vmov	r0, r1, d8
 8020ab0:	f7df fbf6 	bl	80002a0 <__adddf3>
 8020ab4:	4642      	mov	r2, r8
 8020ab6:	464b      	mov	r3, r9
 8020ab8:	f7df fbf2 	bl	80002a0 <__adddf3>
 8020abc:	4632      	mov	r2, r6
 8020abe:	463b      	mov	r3, r7
 8020ac0:	f7df fbee 	bl	80002a0 <__adddf3>
 8020ac4:	2000      	movs	r0, #0
 8020ac6:	4632      	mov	r2, r6
 8020ac8:	463b      	mov	r3, r7
 8020aca:	4604      	mov	r4, r0
 8020acc:	460d      	mov	r5, r1
 8020ace:	f7df fbe5 	bl	800029c <__aeabi_dsub>
 8020ad2:	4642      	mov	r2, r8
 8020ad4:	464b      	mov	r3, r9
 8020ad6:	f7df fbe1 	bl	800029c <__aeabi_dsub>
 8020ada:	ec53 2b18 	vmov	r2, r3, d8
 8020ade:	f7df fbdd 	bl	800029c <__aeabi_dsub>
 8020ae2:	4602      	mov	r2, r0
 8020ae4:	460b      	mov	r3, r1
 8020ae6:	4650      	mov	r0, sl
 8020ae8:	4659      	mov	r1, fp
 8020aea:	e610      	b.n	802070e <__ieee754_pow+0x31e>
 8020aec:	2401      	movs	r4, #1
 8020aee:	e6a1      	b.n	8020834 <__ieee754_pow+0x444>
 8020af0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8020b40 <__ieee754_pow+0x750>
 8020af4:	e617      	b.n	8020726 <__ieee754_pow+0x336>
 8020af6:	bf00      	nop
 8020af8:	4a454eef 	.word	0x4a454eef
 8020afc:	3fca7e28 	.word	0x3fca7e28
 8020b00:	93c9db65 	.word	0x93c9db65
 8020b04:	3fcd864a 	.word	0x3fcd864a
 8020b08:	a91d4101 	.word	0xa91d4101
 8020b0c:	3fd17460 	.word	0x3fd17460
 8020b10:	518f264d 	.word	0x518f264d
 8020b14:	3fd55555 	.word	0x3fd55555
 8020b18:	db6fabff 	.word	0xdb6fabff
 8020b1c:	3fdb6db6 	.word	0x3fdb6db6
 8020b20:	33333303 	.word	0x33333303
 8020b24:	3fe33333 	.word	0x3fe33333
 8020b28:	e0000000 	.word	0xe0000000
 8020b2c:	3feec709 	.word	0x3feec709
 8020b30:	dc3a03fd 	.word	0xdc3a03fd
 8020b34:	3feec709 	.word	0x3feec709
 8020b38:	145b01f5 	.word	0x145b01f5
 8020b3c:	be3e2fe0 	.word	0xbe3e2fe0
 8020b40:	00000000 	.word	0x00000000
 8020b44:	3ff00000 	.word	0x3ff00000
 8020b48:	7ff00000 	.word	0x7ff00000
 8020b4c:	43400000 	.word	0x43400000
 8020b50:	0003988e 	.word	0x0003988e
 8020b54:	000bb679 	.word	0x000bb679
 8020b58:	0802a258 	.word	0x0802a258
 8020b5c:	3ff00000 	.word	0x3ff00000
 8020b60:	40080000 	.word	0x40080000
 8020b64:	0802a278 	.word	0x0802a278
 8020b68:	0802a268 	.word	0x0802a268
 8020b6c:	a3b5      	add	r3, pc, #724	; (adr r3, 8020e44 <__ieee754_pow+0xa54>)
 8020b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b72:	4640      	mov	r0, r8
 8020b74:	4649      	mov	r1, r9
 8020b76:	f7df fb93 	bl	80002a0 <__adddf3>
 8020b7a:	4622      	mov	r2, r4
 8020b7c:	ec41 0b1a 	vmov	d10, r0, r1
 8020b80:	462b      	mov	r3, r5
 8020b82:	4630      	mov	r0, r6
 8020b84:	4639      	mov	r1, r7
 8020b86:	f7df fb89 	bl	800029c <__aeabi_dsub>
 8020b8a:	4602      	mov	r2, r0
 8020b8c:	460b      	mov	r3, r1
 8020b8e:	ec51 0b1a 	vmov	r0, r1, d10
 8020b92:	f7df ffcb 	bl	8000b2c <__aeabi_dcmpgt>
 8020b96:	2800      	cmp	r0, #0
 8020b98:	f47f ae04 	bne.w	80207a4 <__ieee754_pow+0x3b4>
 8020b9c:	4aa4      	ldr	r2, [pc, #656]	; (8020e30 <__ieee754_pow+0xa40>)
 8020b9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020ba2:	4293      	cmp	r3, r2
 8020ba4:	f340 8108 	ble.w	8020db8 <__ieee754_pow+0x9c8>
 8020ba8:	151b      	asrs	r3, r3, #20
 8020baa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020bae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020bb2:	fa4a f303 	asr.w	r3, sl, r3
 8020bb6:	445b      	add	r3, fp
 8020bb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020bbc:	4e9d      	ldr	r6, [pc, #628]	; (8020e34 <__ieee754_pow+0xa44>)
 8020bbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020bc2:	4116      	asrs	r6, r2
 8020bc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020bc8:	2000      	movs	r0, #0
 8020bca:	ea23 0106 	bic.w	r1, r3, r6
 8020bce:	f1c2 0214 	rsb	r2, r2, #20
 8020bd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020bd6:	fa4a fa02 	asr.w	sl, sl, r2
 8020bda:	f1bb 0f00 	cmp.w	fp, #0
 8020bde:	4602      	mov	r2, r0
 8020be0:	460b      	mov	r3, r1
 8020be2:	4620      	mov	r0, r4
 8020be4:	4629      	mov	r1, r5
 8020be6:	bfb8      	it	lt
 8020be8:	f1ca 0a00 	rsblt	sl, sl, #0
 8020bec:	f7df fb56 	bl	800029c <__aeabi_dsub>
 8020bf0:	ec41 0b19 	vmov	d9, r0, r1
 8020bf4:	4642      	mov	r2, r8
 8020bf6:	464b      	mov	r3, r9
 8020bf8:	ec51 0b19 	vmov	r0, r1, d9
 8020bfc:	f7df fb50 	bl	80002a0 <__adddf3>
 8020c00:	a37b      	add	r3, pc, #492	; (adr r3, 8020df0 <__ieee754_pow+0xa00>)
 8020c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c06:	2000      	movs	r0, #0
 8020c08:	4604      	mov	r4, r0
 8020c0a:	460d      	mov	r5, r1
 8020c0c:	f7df fcfe 	bl	800060c <__aeabi_dmul>
 8020c10:	ec53 2b19 	vmov	r2, r3, d9
 8020c14:	4606      	mov	r6, r0
 8020c16:	460f      	mov	r7, r1
 8020c18:	4620      	mov	r0, r4
 8020c1a:	4629      	mov	r1, r5
 8020c1c:	f7df fb3e 	bl	800029c <__aeabi_dsub>
 8020c20:	4602      	mov	r2, r0
 8020c22:	460b      	mov	r3, r1
 8020c24:	4640      	mov	r0, r8
 8020c26:	4649      	mov	r1, r9
 8020c28:	f7df fb38 	bl	800029c <__aeabi_dsub>
 8020c2c:	a372      	add	r3, pc, #456	; (adr r3, 8020df8 <__ieee754_pow+0xa08>)
 8020c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c32:	f7df fceb 	bl	800060c <__aeabi_dmul>
 8020c36:	a372      	add	r3, pc, #456	; (adr r3, 8020e00 <__ieee754_pow+0xa10>)
 8020c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c3c:	4680      	mov	r8, r0
 8020c3e:	4689      	mov	r9, r1
 8020c40:	4620      	mov	r0, r4
 8020c42:	4629      	mov	r1, r5
 8020c44:	f7df fce2 	bl	800060c <__aeabi_dmul>
 8020c48:	4602      	mov	r2, r0
 8020c4a:	460b      	mov	r3, r1
 8020c4c:	4640      	mov	r0, r8
 8020c4e:	4649      	mov	r1, r9
 8020c50:	f7df fb26 	bl	80002a0 <__adddf3>
 8020c54:	4604      	mov	r4, r0
 8020c56:	460d      	mov	r5, r1
 8020c58:	4602      	mov	r2, r0
 8020c5a:	460b      	mov	r3, r1
 8020c5c:	4630      	mov	r0, r6
 8020c5e:	4639      	mov	r1, r7
 8020c60:	f7df fb1e 	bl	80002a0 <__adddf3>
 8020c64:	4632      	mov	r2, r6
 8020c66:	463b      	mov	r3, r7
 8020c68:	4680      	mov	r8, r0
 8020c6a:	4689      	mov	r9, r1
 8020c6c:	f7df fb16 	bl	800029c <__aeabi_dsub>
 8020c70:	4602      	mov	r2, r0
 8020c72:	460b      	mov	r3, r1
 8020c74:	4620      	mov	r0, r4
 8020c76:	4629      	mov	r1, r5
 8020c78:	f7df fb10 	bl	800029c <__aeabi_dsub>
 8020c7c:	4642      	mov	r2, r8
 8020c7e:	4606      	mov	r6, r0
 8020c80:	460f      	mov	r7, r1
 8020c82:	464b      	mov	r3, r9
 8020c84:	4640      	mov	r0, r8
 8020c86:	4649      	mov	r1, r9
 8020c88:	f7df fcc0 	bl	800060c <__aeabi_dmul>
 8020c8c:	a35e      	add	r3, pc, #376	; (adr r3, 8020e08 <__ieee754_pow+0xa18>)
 8020c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c92:	4604      	mov	r4, r0
 8020c94:	460d      	mov	r5, r1
 8020c96:	f7df fcb9 	bl	800060c <__aeabi_dmul>
 8020c9a:	a35d      	add	r3, pc, #372	; (adr r3, 8020e10 <__ieee754_pow+0xa20>)
 8020c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ca0:	f7df fafc 	bl	800029c <__aeabi_dsub>
 8020ca4:	4622      	mov	r2, r4
 8020ca6:	462b      	mov	r3, r5
 8020ca8:	f7df fcb0 	bl	800060c <__aeabi_dmul>
 8020cac:	a35a      	add	r3, pc, #360	; (adr r3, 8020e18 <__ieee754_pow+0xa28>)
 8020cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cb2:	f7df faf5 	bl	80002a0 <__adddf3>
 8020cb6:	4622      	mov	r2, r4
 8020cb8:	462b      	mov	r3, r5
 8020cba:	f7df fca7 	bl	800060c <__aeabi_dmul>
 8020cbe:	a358      	add	r3, pc, #352	; (adr r3, 8020e20 <__ieee754_pow+0xa30>)
 8020cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cc4:	f7df faea 	bl	800029c <__aeabi_dsub>
 8020cc8:	4622      	mov	r2, r4
 8020cca:	462b      	mov	r3, r5
 8020ccc:	f7df fc9e 	bl	800060c <__aeabi_dmul>
 8020cd0:	a355      	add	r3, pc, #340	; (adr r3, 8020e28 <__ieee754_pow+0xa38>)
 8020cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cd6:	f7df fae3 	bl	80002a0 <__adddf3>
 8020cda:	4622      	mov	r2, r4
 8020cdc:	462b      	mov	r3, r5
 8020cde:	f7df fc95 	bl	800060c <__aeabi_dmul>
 8020ce2:	4602      	mov	r2, r0
 8020ce4:	460b      	mov	r3, r1
 8020ce6:	4640      	mov	r0, r8
 8020ce8:	4649      	mov	r1, r9
 8020cea:	f7df fad7 	bl	800029c <__aeabi_dsub>
 8020cee:	4604      	mov	r4, r0
 8020cf0:	460d      	mov	r5, r1
 8020cf2:	4602      	mov	r2, r0
 8020cf4:	460b      	mov	r3, r1
 8020cf6:	4640      	mov	r0, r8
 8020cf8:	4649      	mov	r1, r9
 8020cfa:	f7df fc87 	bl	800060c <__aeabi_dmul>
 8020cfe:	2200      	movs	r2, #0
 8020d00:	ec41 0b19 	vmov	d9, r0, r1
 8020d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020d08:	4620      	mov	r0, r4
 8020d0a:	4629      	mov	r1, r5
 8020d0c:	f7df fac6 	bl	800029c <__aeabi_dsub>
 8020d10:	4602      	mov	r2, r0
 8020d12:	460b      	mov	r3, r1
 8020d14:	ec51 0b19 	vmov	r0, r1, d9
 8020d18:	f7df fda2 	bl	8000860 <__aeabi_ddiv>
 8020d1c:	4632      	mov	r2, r6
 8020d1e:	4604      	mov	r4, r0
 8020d20:	460d      	mov	r5, r1
 8020d22:	463b      	mov	r3, r7
 8020d24:	4640      	mov	r0, r8
 8020d26:	4649      	mov	r1, r9
 8020d28:	f7df fc70 	bl	800060c <__aeabi_dmul>
 8020d2c:	4632      	mov	r2, r6
 8020d2e:	463b      	mov	r3, r7
 8020d30:	f7df fab6 	bl	80002a0 <__adddf3>
 8020d34:	4602      	mov	r2, r0
 8020d36:	460b      	mov	r3, r1
 8020d38:	4620      	mov	r0, r4
 8020d3a:	4629      	mov	r1, r5
 8020d3c:	f7df faae 	bl	800029c <__aeabi_dsub>
 8020d40:	4642      	mov	r2, r8
 8020d42:	464b      	mov	r3, r9
 8020d44:	f7df faaa 	bl	800029c <__aeabi_dsub>
 8020d48:	460b      	mov	r3, r1
 8020d4a:	4602      	mov	r2, r0
 8020d4c:	493a      	ldr	r1, [pc, #232]	; (8020e38 <__ieee754_pow+0xa48>)
 8020d4e:	2000      	movs	r0, #0
 8020d50:	f7df faa4 	bl	800029c <__aeabi_dsub>
 8020d54:	ec41 0b10 	vmov	d0, r0, r1
 8020d58:	ee10 3a90 	vmov	r3, s1
 8020d5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8020d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020d64:	da2b      	bge.n	8020dbe <__ieee754_pow+0x9ce>
 8020d66:	4650      	mov	r0, sl
 8020d68:	f001 fc9a 	bl	80226a0 <scalbn>
 8020d6c:	ec51 0b10 	vmov	r0, r1, d0
 8020d70:	ec53 2b18 	vmov	r2, r3, d8
 8020d74:	f7ff bbed 	b.w	8020552 <__ieee754_pow+0x162>
 8020d78:	4b30      	ldr	r3, [pc, #192]	; (8020e3c <__ieee754_pow+0xa4c>)
 8020d7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8020d7e:	429e      	cmp	r6, r3
 8020d80:	f77f af0c 	ble.w	8020b9c <__ieee754_pow+0x7ac>
 8020d84:	4b2e      	ldr	r3, [pc, #184]	; (8020e40 <__ieee754_pow+0xa50>)
 8020d86:	440b      	add	r3, r1
 8020d88:	4303      	orrs	r3, r0
 8020d8a:	d009      	beq.n	8020da0 <__ieee754_pow+0x9b0>
 8020d8c:	ec51 0b18 	vmov	r0, r1, d8
 8020d90:	2200      	movs	r2, #0
 8020d92:	2300      	movs	r3, #0
 8020d94:	f7df feac 	bl	8000af0 <__aeabi_dcmplt>
 8020d98:	3800      	subs	r0, #0
 8020d9a:	bf18      	it	ne
 8020d9c:	2001      	movne	r0, #1
 8020d9e:	e447      	b.n	8020630 <__ieee754_pow+0x240>
 8020da0:	4622      	mov	r2, r4
 8020da2:	462b      	mov	r3, r5
 8020da4:	f7df fa7a 	bl	800029c <__aeabi_dsub>
 8020da8:	4642      	mov	r2, r8
 8020daa:	464b      	mov	r3, r9
 8020dac:	f7df feb4 	bl	8000b18 <__aeabi_dcmpge>
 8020db0:	2800      	cmp	r0, #0
 8020db2:	f43f aef3 	beq.w	8020b9c <__ieee754_pow+0x7ac>
 8020db6:	e7e9      	b.n	8020d8c <__ieee754_pow+0x99c>
 8020db8:	f04f 0a00 	mov.w	sl, #0
 8020dbc:	e71a      	b.n	8020bf4 <__ieee754_pow+0x804>
 8020dbe:	ec51 0b10 	vmov	r0, r1, d0
 8020dc2:	4619      	mov	r1, r3
 8020dc4:	e7d4      	b.n	8020d70 <__ieee754_pow+0x980>
 8020dc6:	491c      	ldr	r1, [pc, #112]	; (8020e38 <__ieee754_pow+0xa48>)
 8020dc8:	2000      	movs	r0, #0
 8020dca:	f7ff bb30 	b.w	802042e <__ieee754_pow+0x3e>
 8020dce:	2000      	movs	r0, #0
 8020dd0:	2100      	movs	r1, #0
 8020dd2:	f7ff bb2c 	b.w	802042e <__ieee754_pow+0x3e>
 8020dd6:	4630      	mov	r0, r6
 8020dd8:	4639      	mov	r1, r7
 8020dda:	f7ff bb28 	b.w	802042e <__ieee754_pow+0x3e>
 8020dde:	9204      	str	r2, [sp, #16]
 8020de0:	f7ff bb7a 	b.w	80204d8 <__ieee754_pow+0xe8>
 8020de4:	2300      	movs	r3, #0
 8020de6:	f7ff bb64 	b.w	80204b2 <__ieee754_pow+0xc2>
 8020dea:	bf00      	nop
 8020dec:	f3af 8000 	nop.w
 8020df0:	00000000 	.word	0x00000000
 8020df4:	3fe62e43 	.word	0x3fe62e43
 8020df8:	fefa39ef 	.word	0xfefa39ef
 8020dfc:	3fe62e42 	.word	0x3fe62e42
 8020e00:	0ca86c39 	.word	0x0ca86c39
 8020e04:	be205c61 	.word	0xbe205c61
 8020e08:	72bea4d0 	.word	0x72bea4d0
 8020e0c:	3e663769 	.word	0x3e663769
 8020e10:	c5d26bf1 	.word	0xc5d26bf1
 8020e14:	3ebbbd41 	.word	0x3ebbbd41
 8020e18:	af25de2c 	.word	0xaf25de2c
 8020e1c:	3f11566a 	.word	0x3f11566a
 8020e20:	16bebd93 	.word	0x16bebd93
 8020e24:	3f66c16c 	.word	0x3f66c16c
 8020e28:	5555553e 	.word	0x5555553e
 8020e2c:	3fc55555 	.word	0x3fc55555
 8020e30:	3fe00000 	.word	0x3fe00000
 8020e34:	000fffff 	.word	0x000fffff
 8020e38:	3ff00000 	.word	0x3ff00000
 8020e3c:	4090cbff 	.word	0x4090cbff
 8020e40:	3f6f3400 	.word	0x3f6f3400
 8020e44:	652b82fe 	.word	0x652b82fe
 8020e48:	3c971547 	.word	0x3c971547
 8020e4c:	00000000 	.word	0x00000000

08020e50 <__ieee754_rem_pio2>:
 8020e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e54:	ed2d 8b02 	vpush	{d8}
 8020e58:	ec55 4b10 	vmov	r4, r5, d0
 8020e5c:	4bca      	ldr	r3, [pc, #808]	; (8021188 <__ieee754_rem_pio2+0x338>)
 8020e5e:	b08b      	sub	sp, #44	; 0x2c
 8020e60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8020e64:	4598      	cmp	r8, r3
 8020e66:	4682      	mov	sl, r0
 8020e68:	9502      	str	r5, [sp, #8]
 8020e6a:	dc08      	bgt.n	8020e7e <__ieee754_rem_pio2+0x2e>
 8020e6c:	2200      	movs	r2, #0
 8020e6e:	2300      	movs	r3, #0
 8020e70:	ed80 0b00 	vstr	d0, [r0]
 8020e74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8020e78:	f04f 0b00 	mov.w	fp, #0
 8020e7c:	e028      	b.n	8020ed0 <__ieee754_rem_pio2+0x80>
 8020e7e:	4bc3      	ldr	r3, [pc, #780]	; (802118c <__ieee754_rem_pio2+0x33c>)
 8020e80:	4598      	cmp	r8, r3
 8020e82:	dc78      	bgt.n	8020f76 <__ieee754_rem_pio2+0x126>
 8020e84:	9b02      	ldr	r3, [sp, #8]
 8020e86:	4ec2      	ldr	r6, [pc, #776]	; (8021190 <__ieee754_rem_pio2+0x340>)
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	ee10 0a10 	vmov	r0, s0
 8020e8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8021150 <__ieee754_rem_pio2+0x300>)
 8020e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e94:	4629      	mov	r1, r5
 8020e96:	dd39      	ble.n	8020f0c <__ieee754_rem_pio2+0xbc>
 8020e98:	f7df fa00 	bl	800029c <__aeabi_dsub>
 8020e9c:	45b0      	cmp	r8, r6
 8020e9e:	4604      	mov	r4, r0
 8020ea0:	460d      	mov	r5, r1
 8020ea2:	d01b      	beq.n	8020edc <__ieee754_rem_pio2+0x8c>
 8020ea4:	a3ac      	add	r3, pc, #688	; (adr r3, 8021158 <__ieee754_rem_pio2+0x308>)
 8020ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eaa:	f7df f9f7 	bl	800029c <__aeabi_dsub>
 8020eae:	4602      	mov	r2, r0
 8020eb0:	460b      	mov	r3, r1
 8020eb2:	e9ca 2300 	strd	r2, r3, [sl]
 8020eb6:	4620      	mov	r0, r4
 8020eb8:	4629      	mov	r1, r5
 8020eba:	f7df f9ef 	bl	800029c <__aeabi_dsub>
 8020ebe:	a3a6      	add	r3, pc, #664	; (adr r3, 8021158 <__ieee754_rem_pio2+0x308>)
 8020ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ec4:	f7df f9ea 	bl	800029c <__aeabi_dsub>
 8020ec8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8020ecc:	f04f 0b01 	mov.w	fp, #1
 8020ed0:	4658      	mov	r0, fp
 8020ed2:	b00b      	add	sp, #44	; 0x2c
 8020ed4:	ecbd 8b02 	vpop	{d8}
 8020ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020edc:	a3a0      	add	r3, pc, #640	; (adr r3, 8021160 <__ieee754_rem_pio2+0x310>)
 8020ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ee2:	f7df f9db 	bl	800029c <__aeabi_dsub>
 8020ee6:	a3a0      	add	r3, pc, #640	; (adr r3, 8021168 <__ieee754_rem_pio2+0x318>)
 8020ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eec:	4604      	mov	r4, r0
 8020eee:	460d      	mov	r5, r1
 8020ef0:	f7df f9d4 	bl	800029c <__aeabi_dsub>
 8020ef4:	4602      	mov	r2, r0
 8020ef6:	460b      	mov	r3, r1
 8020ef8:	e9ca 2300 	strd	r2, r3, [sl]
 8020efc:	4620      	mov	r0, r4
 8020efe:	4629      	mov	r1, r5
 8020f00:	f7df f9cc 	bl	800029c <__aeabi_dsub>
 8020f04:	a398      	add	r3, pc, #608	; (adr r3, 8021168 <__ieee754_rem_pio2+0x318>)
 8020f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f0a:	e7db      	b.n	8020ec4 <__ieee754_rem_pio2+0x74>
 8020f0c:	f7df f9c8 	bl	80002a0 <__adddf3>
 8020f10:	45b0      	cmp	r8, r6
 8020f12:	4604      	mov	r4, r0
 8020f14:	460d      	mov	r5, r1
 8020f16:	d016      	beq.n	8020f46 <__ieee754_rem_pio2+0xf6>
 8020f18:	a38f      	add	r3, pc, #572	; (adr r3, 8021158 <__ieee754_rem_pio2+0x308>)
 8020f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f1e:	f7df f9bf 	bl	80002a0 <__adddf3>
 8020f22:	4602      	mov	r2, r0
 8020f24:	460b      	mov	r3, r1
 8020f26:	e9ca 2300 	strd	r2, r3, [sl]
 8020f2a:	4620      	mov	r0, r4
 8020f2c:	4629      	mov	r1, r5
 8020f2e:	f7df f9b5 	bl	800029c <__aeabi_dsub>
 8020f32:	a389      	add	r3, pc, #548	; (adr r3, 8021158 <__ieee754_rem_pio2+0x308>)
 8020f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f38:	f7df f9b2 	bl	80002a0 <__adddf3>
 8020f3c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8020f40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8020f44:	e7c4      	b.n	8020ed0 <__ieee754_rem_pio2+0x80>
 8020f46:	a386      	add	r3, pc, #536	; (adr r3, 8021160 <__ieee754_rem_pio2+0x310>)
 8020f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f4c:	f7df f9a8 	bl	80002a0 <__adddf3>
 8020f50:	a385      	add	r3, pc, #532	; (adr r3, 8021168 <__ieee754_rem_pio2+0x318>)
 8020f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f56:	4604      	mov	r4, r0
 8020f58:	460d      	mov	r5, r1
 8020f5a:	f7df f9a1 	bl	80002a0 <__adddf3>
 8020f5e:	4602      	mov	r2, r0
 8020f60:	460b      	mov	r3, r1
 8020f62:	e9ca 2300 	strd	r2, r3, [sl]
 8020f66:	4620      	mov	r0, r4
 8020f68:	4629      	mov	r1, r5
 8020f6a:	f7df f997 	bl	800029c <__aeabi_dsub>
 8020f6e:	a37e      	add	r3, pc, #504	; (adr r3, 8021168 <__ieee754_rem_pio2+0x318>)
 8020f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f74:	e7e0      	b.n	8020f38 <__ieee754_rem_pio2+0xe8>
 8020f76:	4b87      	ldr	r3, [pc, #540]	; (8021194 <__ieee754_rem_pio2+0x344>)
 8020f78:	4598      	cmp	r8, r3
 8020f7a:	f300 80d9 	bgt.w	8021130 <__ieee754_rem_pio2+0x2e0>
 8020f7e:	f001 fb73 	bl	8022668 <fabs>
 8020f82:	ec55 4b10 	vmov	r4, r5, d0
 8020f86:	ee10 0a10 	vmov	r0, s0
 8020f8a:	a379      	add	r3, pc, #484	; (adr r3, 8021170 <__ieee754_rem_pio2+0x320>)
 8020f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f90:	4629      	mov	r1, r5
 8020f92:	f7df fb3b 	bl	800060c <__aeabi_dmul>
 8020f96:	4b80      	ldr	r3, [pc, #512]	; (8021198 <__ieee754_rem_pio2+0x348>)
 8020f98:	2200      	movs	r2, #0
 8020f9a:	f7df f981 	bl	80002a0 <__adddf3>
 8020f9e:	f7df fde5 	bl	8000b6c <__aeabi_d2iz>
 8020fa2:	4683      	mov	fp, r0
 8020fa4:	f7df fac8 	bl	8000538 <__aeabi_i2d>
 8020fa8:	4602      	mov	r2, r0
 8020faa:	460b      	mov	r3, r1
 8020fac:	ec43 2b18 	vmov	d8, r2, r3
 8020fb0:	a367      	add	r3, pc, #412	; (adr r3, 8021150 <__ieee754_rem_pio2+0x300>)
 8020fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fb6:	f7df fb29 	bl	800060c <__aeabi_dmul>
 8020fba:	4602      	mov	r2, r0
 8020fbc:	460b      	mov	r3, r1
 8020fbe:	4620      	mov	r0, r4
 8020fc0:	4629      	mov	r1, r5
 8020fc2:	f7df f96b 	bl	800029c <__aeabi_dsub>
 8020fc6:	a364      	add	r3, pc, #400	; (adr r3, 8021158 <__ieee754_rem_pio2+0x308>)
 8020fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fcc:	4606      	mov	r6, r0
 8020fce:	460f      	mov	r7, r1
 8020fd0:	ec51 0b18 	vmov	r0, r1, d8
 8020fd4:	f7df fb1a 	bl	800060c <__aeabi_dmul>
 8020fd8:	f1bb 0f1f 	cmp.w	fp, #31
 8020fdc:	4604      	mov	r4, r0
 8020fde:	460d      	mov	r5, r1
 8020fe0:	dc0d      	bgt.n	8020ffe <__ieee754_rem_pio2+0x1ae>
 8020fe2:	4b6e      	ldr	r3, [pc, #440]	; (802119c <__ieee754_rem_pio2+0x34c>)
 8020fe4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8020fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020fec:	4543      	cmp	r3, r8
 8020fee:	d006      	beq.n	8020ffe <__ieee754_rem_pio2+0x1ae>
 8020ff0:	4622      	mov	r2, r4
 8020ff2:	462b      	mov	r3, r5
 8020ff4:	4630      	mov	r0, r6
 8020ff6:	4639      	mov	r1, r7
 8020ff8:	f7df f950 	bl	800029c <__aeabi_dsub>
 8020ffc:	e00f      	b.n	802101e <__ieee754_rem_pio2+0x1ce>
 8020ffe:	462b      	mov	r3, r5
 8021000:	4622      	mov	r2, r4
 8021002:	4630      	mov	r0, r6
 8021004:	4639      	mov	r1, r7
 8021006:	f7df f949 	bl	800029c <__aeabi_dsub>
 802100a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802100e:	9303      	str	r3, [sp, #12]
 8021010:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021014:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8021018:	f1b8 0f10 	cmp.w	r8, #16
 802101c:	dc02      	bgt.n	8021024 <__ieee754_rem_pio2+0x1d4>
 802101e:	e9ca 0100 	strd	r0, r1, [sl]
 8021022:	e039      	b.n	8021098 <__ieee754_rem_pio2+0x248>
 8021024:	a34e      	add	r3, pc, #312	; (adr r3, 8021160 <__ieee754_rem_pio2+0x310>)
 8021026:	e9d3 2300 	ldrd	r2, r3, [r3]
 802102a:	ec51 0b18 	vmov	r0, r1, d8
 802102e:	f7df faed 	bl	800060c <__aeabi_dmul>
 8021032:	4604      	mov	r4, r0
 8021034:	460d      	mov	r5, r1
 8021036:	4602      	mov	r2, r0
 8021038:	460b      	mov	r3, r1
 802103a:	4630      	mov	r0, r6
 802103c:	4639      	mov	r1, r7
 802103e:	f7df f92d 	bl	800029c <__aeabi_dsub>
 8021042:	4602      	mov	r2, r0
 8021044:	460b      	mov	r3, r1
 8021046:	4680      	mov	r8, r0
 8021048:	4689      	mov	r9, r1
 802104a:	4630      	mov	r0, r6
 802104c:	4639      	mov	r1, r7
 802104e:	f7df f925 	bl	800029c <__aeabi_dsub>
 8021052:	4622      	mov	r2, r4
 8021054:	462b      	mov	r3, r5
 8021056:	f7df f921 	bl	800029c <__aeabi_dsub>
 802105a:	a343      	add	r3, pc, #268	; (adr r3, 8021168 <__ieee754_rem_pio2+0x318>)
 802105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021060:	4604      	mov	r4, r0
 8021062:	460d      	mov	r5, r1
 8021064:	ec51 0b18 	vmov	r0, r1, d8
 8021068:	f7df fad0 	bl	800060c <__aeabi_dmul>
 802106c:	4622      	mov	r2, r4
 802106e:	462b      	mov	r3, r5
 8021070:	f7df f914 	bl	800029c <__aeabi_dsub>
 8021074:	4602      	mov	r2, r0
 8021076:	460b      	mov	r3, r1
 8021078:	4604      	mov	r4, r0
 802107a:	460d      	mov	r5, r1
 802107c:	4640      	mov	r0, r8
 802107e:	4649      	mov	r1, r9
 8021080:	f7df f90c 	bl	800029c <__aeabi_dsub>
 8021084:	9a03      	ldr	r2, [sp, #12]
 8021086:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802108a:	1ad3      	subs	r3, r2, r3
 802108c:	2b31      	cmp	r3, #49	; 0x31
 802108e:	dc24      	bgt.n	80210da <__ieee754_rem_pio2+0x28a>
 8021090:	e9ca 0100 	strd	r0, r1, [sl]
 8021094:	4646      	mov	r6, r8
 8021096:	464f      	mov	r7, r9
 8021098:	e9da 8900 	ldrd	r8, r9, [sl]
 802109c:	4630      	mov	r0, r6
 802109e:	4642      	mov	r2, r8
 80210a0:	464b      	mov	r3, r9
 80210a2:	4639      	mov	r1, r7
 80210a4:	f7df f8fa 	bl	800029c <__aeabi_dsub>
 80210a8:	462b      	mov	r3, r5
 80210aa:	4622      	mov	r2, r4
 80210ac:	f7df f8f6 	bl	800029c <__aeabi_dsub>
 80210b0:	9b02      	ldr	r3, [sp, #8]
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80210b8:	f6bf af0a 	bge.w	8020ed0 <__ieee754_rem_pio2+0x80>
 80210bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80210c0:	f8ca 3004 	str.w	r3, [sl, #4]
 80210c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80210c8:	f8ca 8000 	str.w	r8, [sl]
 80210cc:	f8ca 0008 	str.w	r0, [sl, #8]
 80210d0:	f8ca 300c 	str.w	r3, [sl, #12]
 80210d4:	f1cb 0b00 	rsb	fp, fp, #0
 80210d8:	e6fa      	b.n	8020ed0 <__ieee754_rem_pio2+0x80>
 80210da:	a327      	add	r3, pc, #156	; (adr r3, 8021178 <__ieee754_rem_pio2+0x328>)
 80210dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210e0:	ec51 0b18 	vmov	r0, r1, d8
 80210e4:	f7df fa92 	bl	800060c <__aeabi_dmul>
 80210e8:	4604      	mov	r4, r0
 80210ea:	460d      	mov	r5, r1
 80210ec:	4602      	mov	r2, r0
 80210ee:	460b      	mov	r3, r1
 80210f0:	4640      	mov	r0, r8
 80210f2:	4649      	mov	r1, r9
 80210f4:	f7df f8d2 	bl	800029c <__aeabi_dsub>
 80210f8:	4602      	mov	r2, r0
 80210fa:	460b      	mov	r3, r1
 80210fc:	4606      	mov	r6, r0
 80210fe:	460f      	mov	r7, r1
 8021100:	4640      	mov	r0, r8
 8021102:	4649      	mov	r1, r9
 8021104:	f7df f8ca 	bl	800029c <__aeabi_dsub>
 8021108:	4622      	mov	r2, r4
 802110a:	462b      	mov	r3, r5
 802110c:	f7df f8c6 	bl	800029c <__aeabi_dsub>
 8021110:	a31b      	add	r3, pc, #108	; (adr r3, 8021180 <__ieee754_rem_pio2+0x330>)
 8021112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021116:	4604      	mov	r4, r0
 8021118:	460d      	mov	r5, r1
 802111a:	ec51 0b18 	vmov	r0, r1, d8
 802111e:	f7df fa75 	bl	800060c <__aeabi_dmul>
 8021122:	4622      	mov	r2, r4
 8021124:	462b      	mov	r3, r5
 8021126:	f7df f8b9 	bl	800029c <__aeabi_dsub>
 802112a:	4604      	mov	r4, r0
 802112c:	460d      	mov	r5, r1
 802112e:	e75f      	b.n	8020ff0 <__ieee754_rem_pio2+0x1a0>
 8021130:	4b1b      	ldr	r3, [pc, #108]	; (80211a0 <__ieee754_rem_pio2+0x350>)
 8021132:	4598      	cmp	r8, r3
 8021134:	dd36      	ble.n	80211a4 <__ieee754_rem_pio2+0x354>
 8021136:	ee10 2a10 	vmov	r2, s0
 802113a:	462b      	mov	r3, r5
 802113c:	4620      	mov	r0, r4
 802113e:	4629      	mov	r1, r5
 8021140:	f7df f8ac 	bl	800029c <__aeabi_dsub>
 8021144:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021148:	e9ca 0100 	strd	r0, r1, [sl]
 802114c:	e694      	b.n	8020e78 <__ieee754_rem_pio2+0x28>
 802114e:	bf00      	nop
 8021150:	54400000 	.word	0x54400000
 8021154:	3ff921fb 	.word	0x3ff921fb
 8021158:	1a626331 	.word	0x1a626331
 802115c:	3dd0b461 	.word	0x3dd0b461
 8021160:	1a600000 	.word	0x1a600000
 8021164:	3dd0b461 	.word	0x3dd0b461
 8021168:	2e037073 	.word	0x2e037073
 802116c:	3ba3198a 	.word	0x3ba3198a
 8021170:	6dc9c883 	.word	0x6dc9c883
 8021174:	3fe45f30 	.word	0x3fe45f30
 8021178:	2e000000 	.word	0x2e000000
 802117c:	3ba3198a 	.word	0x3ba3198a
 8021180:	252049c1 	.word	0x252049c1
 8021184:	397b839a 	.word	0x397b839a
 8021188:	3fe921fb 	.word	0x3fe921fb
 802118c:	4002d97b 	.word	0x4002d97b
 8021190:	3ff921fb 	.word	0x3ff921fb
 8021194:	413921fb 	.word	0x413921fb
 8021198:	3fe00000 	.word	0x3fe00000
 802119c:	0802a288 	.word	0x0802a288
 80211a0:	7fefffff 	.word	0x7fefffff
 80211a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80211a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80211ac:	ee10 0a10 	vmov	r0, s0
 80211b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80211b4:	ee10 6a10 	vmov	r6, s0
 80211b8:	460f      	mov	r7, r1
 80211ba:	f7df fcd7 	bl	8000b6c <__aeabi_d2iz>
 80211be:	f7df f9bb 	bl	8000538 <__aeabi_i2d>
 80211c2:	4602      	mov	r2, r0
 80211c4:	460b      	mov	r3, r1
 80211c6:	4630      	mov	r0, r6
 80211c8:	4639      	mov	r1, r7
 80211ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80211ce:	f7df f865 	bl	800029c <__aeabi_dsub>
 80211d2:	4b23      	ldr	r3, [pc, #140]	; (8021260 <__ieee754_rem_pio2+0x410>)
 80211d4:	2200      	movs	r2, #0
 80211d6:	f7df fa19 	bl	800060c <__aeabi_dmul>
 80211da:	460f      	mov	r7, r1
 80211dc:	4606      	mov	r6, r0
 80211de:	f7df fcc5 	bl	8000b6c <__aeabi_d2iz>
 80211e2:	f7df f9a9 	bl	8000538 <__aeabi_i2d>
 80211e6:	4602      	mov	r2, r0
 80211e8:	460b      	mov	r3, r1
 80211ea:	4630      	mov	r0, r6
 80211ec:	4639      	mov	r1, r7
 80211ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80211f2:	f7df f853 	bl	800029c <__aeabi_dsub>
 80211f6:	4b1a      	ldr	r3, [pc, #104]	; (8021260 <__ieee754_rem_pio2+0x410>)
 80211f8:	2200      	movs	r2, #0
 80211fa:	f7df fa07 	bl	800060c <__aeabi_dmul>
 80211fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021202:	ad04      	add	r5, sp, #16
 8021204:	f04f 0803 	mov.w	r8, #3
 8021208:	46a9      	mov	r9, r5
 802120a:	2600      	movs	r6, #0
 802120c:	2700      	movs	r7, #0
 802120e:	4632      	mov	r2, r6
 8021210:	463b      	mov	r3, r7
 8021212:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8021216:	46c3      	mov	fp, r8
 8021218:	3d08      	subs	r5, #8
 802121a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802121e:	f7df fc5d 	bl	8000adc <__aeabi_dcmpeq>
 8021222:	2800      	cmp	r0, #0
 8021224:	d1f3      	bne.n	802120e <__ieee754_rem_pio2+0x3be>
 8021226:	4b0f      	ldr	r3, [pc, #60]	; (8021264 <__ieee754_rem_pio2+0x414>)
 8021228:	9301      	str	r3, [sp, #4]
 802122a:	2302      	movs	r3, #2
 802122c:	9300      	str	r3, [sp, #0]
 802122e:	4622      	mov	r2, r4
 8021230:	465b      	mov	r3, fp
 8021232:	4651      	mov	r1, sl
 8021234:	4648      	mov	r0, r9
 8021236:	f000 fbab 	bl	8021990 <__kernel_rem_pio2>
 802123a:	9b02      	ldr	r3, [sp, #8]
 802123c:	2b00      	cmp	r3, #0
 802123e:	4683      	mov	fp, r0
 8021240:	f6bf ae46 	bge.w	8020ed0 <__ieee754_rem_pio2+0x80>
 8021244:	e9da 2100 	ldrd	r2, r1, [sl]
 8021248:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802124c:	e9ca 2300 	strd	r2, r3, [sl]
 8021250:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8021254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021258:	e9ca 2302 	strd	r2, r3, [sl, #8]
 802125c:	e73a      	b.n	80210d4 <__ieee754_rem_pio2+0x284>
 802125e:	bf00      	nop
 8021260:	41700000 	.word	0x41700000
 8021264:	0802a308 	.word	0x0802a308

08021268 <__ieee754_sqrt>:
 8021268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802126c:	ec55 4b10 	vmov	r4, r5, d0
 8021270:	4e55      	ldr	r6, [pc, #340]	; (80213c8 <__ieee754_sqrt+0x160>)
 8021272:	43ae      	bics	r6, r5
 8021274:	ee10 0a10 	vmov	r0, s0
 8021278:	ee10 3a10 	vmov	r3, s0
 802127c:	462a      	mov	r2, r5
 802127e:	4629      	mov	r1, r5
 8021280:	d110      	bne.n	80212a4 <__ieee754_sqrt+0x3c>
 8021282:	ee10 2a10 	vmov	r2, s0
 8021286:	462b      	mov	r3, r5
 8021288:	f7df f9c0 	bl	800060c <__aeabi_dmul>
 802128c:	4602      	mov	r2, r0
 802128e:	460b      	mov	r3, r1
 8021290:	4620      	mov	r0, r4
 8021292:	4629      	mov	r1, r5
 8021294:	f7df f804 	bl	80002a0 <__adddf3>
 8021298:	4604      	mov	r4, r0
 802129a:	460d      	mov	r5, r1
 802129c:	ec45 4b10 	vmov	d0, r4, r5
 80212a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80212a4:	2d00      	cmp	r5, #0
 80212a6:	dc10      	bgt.n	80212ca <__ieee754_sqrt+0x62>
 80212a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80212ac:	4330      	orrs	r0, r6
 80212ae:	d0f5      	beq.n	802129c <__ieee754_sqrt+0x34>
 80212b0:	b15d      	cbz	r5, 80212ca <__ieee754_sqrt+0x62>
 80212b2:	ee10 2a10 	vmov	r2, s0
 80212b6:	462b      	mov	r3, r5
 80212b8:	ee10 0a10 	vmov	r0, s0
 80212bc:	f7de ffee 	bl	800029c <__aeabi_dsub>
 80212c0:	4602      	mov	r2, r0
 80212c2:	460b      	mov	r3, r1
 80212c4:	f7df facc 	bl	8000860 <__aeabi_ddiv>
 80212c8:	e7e6      	b.n	8021298 <__ieee754_sqrt+0x30>
 80212ca:	1512      	asrs	r2, r2, #20
 80212cc:	d074      	beq.n	80213b8 <__ieee754_sqrt+0x150>
 80212ce:	07d4      	lsls	r4, r2, #31
 80212d0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80212d4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80212d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80212dc:	bf5e      	ittt	pl
 80212de:	0fda      	lsrpl	r2, r3, #31
 80212e0:	005b      	lslpl	r3, r3, #1
 80212e2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80212e6:	2400      	movs	r4, #0
 80212e8:	0fda      	lsrs	r2, r3, #31
 80212ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80212ee:	107f      	asrs	r7, r7, #1
 80212f0:	005b      	lsls	r3, r3, #1
 80212f2:	2516      	movs	r5, #22
 80212f4:	4620      	mov	r0, r4
 80212f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80212fa:	1886      	adds	r6, r0, r2
 80212fc:	428e      	cmp	r6, r1
 80212fe:	bfde      	ittt	le
 8021300:	1b89      	suble	r1, r1, r6
 8021302:	18b0      	addle	r0, r6, r2
 8021304:	18a4      	addle	r4, r4, r2
 8021306:	0049      	lsls	r1, r1, #1
 8021308:	3d01      	subs	r5, #1
 802130a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 802130e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8021312:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021316:	d1f0      	bne.n	80212fa <__ieee754_sqrt+0x92>
 8021318:	462a      	mov	r2, r5
 802131a:	f04f 0e20 	mov.w	lr, #32
 802131e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8021322:	4281      	cmp	r1, r0
 8021324:	eb06 0c05 	add.w	ip, r6, r5
 8021328:	dc02      	bgt.n	8021330 <__ieee754_sqrt+0xc8>
 802132a:	d113      	bne.n	8021354 <__ieee754_sqrt+0xec>
 802132c:	459c      	cmp	ip, r3
 802132e:	d811      	bhi.n	8021354 <__ieee754_sqrt+0xec>
 8021330:	f1bc 0f00 	cmp.w	ip, #0
 8021334:	eb0c 0506 	add.w	r5, ip, r6
 8021338:	da43      	bge.n	80213c2 <__ieee754_sqrt+0x15a>
 802133a:	2d00      	cmp	r5, #0
 802133c:	db41      	blt.n	80213c2 <__ieee754_sqrt+0x15a>
 802133e:	f100 0801 	add.w	r8, r0, #1
 8021342:	1a09      	subs	r1, r1, r0
 8021344:	459c      	cmp	ip, r3
 8021346:	bf88      	it	hi
 8021348:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 802134c:	eba3 030c 	sub.w	r3, r3, ip
 8021350:	4432      	add	r2, r6
 8021352:	4640      	mov	r0, r8
 8021354:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8021358:	f1be 0e01 	subs.w	lr, lr, #1
 802135c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8021360:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021364:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8021368:	d1db      	bne.n	8021322 <__ieee754_sqrt+0xba>
 802136a:	430b      	orrs	r3, r1
 802136c:	d006      	beq.n	802137c <__ieee754_sqrt+0x114>
 802136e:	1c50      	adds	r0, r2, #1
 8021370:	bf13      	iteet	ne
 8021372:	3201      	addne	r2, #1
 8021374:	3401      	addeq	r4, #1
 8021376:	4672      	moveq	r2, lr
 8021378:	f022 0201 	bicne.w	r2, r2, #1
 802137c:	1063      	asrs	r3, r4, #1
 802137e:	0852      	lsrs	r2, r2, #1
 8021380:	07e1      	lsls	r1, r4, #31
 8021382:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021386:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802138a:	bf48      	it	mi
 802138c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8021390:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8021394:	4614      	mov	r4, r2
 8021396:	e781      	b.n	802129c <__ieee754_sqrt+0x34>
 8021398:	0ad9      	lsrs	r1, r3, #11
 802139a:	3815      	subs	r0, #21
 802139c:	055b      	lsls	r3, r3, #21
 802139e:	2900      	cmp	r1, #0
 80213a0:	d0fa      	beq.n	8021398 <__ieee754_sqrt+0x130>
 80213a2:	02cd      	lsls	r5, r1, #11
 80213a4:	d50a      	bpl.n	80213bc <__ieee754_sqrt+0x154>
 80213a6:	f1c2 0420 	rsb	r4, r2, #32
 80213aa:	fa23 f404 	lsr.w	r4, r3, r4
 80213ae:	1e55      	subs	r5, r2, #1
 80213b0:	4093      	lsls	r3, r2
 80213b2:	4321      	orrs	r1, r4
 80213b4:	1b42      	subs	r2, r0, r5
 80213b6:	e78a      	b.n	80212ce <__ieee754_sqrt+0x66>
 80213b8:	4610      	mov	r0, r2
 80213ba:	e7f0      	b.n	802139e <__ieee754_sqrt+0x136>
 80213bc:	0049      	lsls	r1, r1, #1
 80213be:	3201      	adds	r2, #1
 80213c0:	e7ef      	b.n	80213a2 <__ieee754_sqrt+0x13a>
 80213c2:	4680      	mov	r8, r0
 80213c4:	e7bd      	b.n	8021342 <__ieee754_sqrt+0xda>
 80213c6:	bf00      	nop
 80213c8:	7ff00000 	.word	0x7ff00000

080213cc <__ieee754_expf>:
 80213cc:	ee10 2a10 	vmov	r2, s0
 80213d0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80213d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80213d8:	d902      	bls.n	80213e0 <__ieee754_expf+0x14>
 80213da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80213de:	4770      	bx	lr
 80213e0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80213e4:	d106      	bne.n	80213f4 <__ieee754_expf+0x28>
 80213e6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8021520 <__ieee754_expf+0x154>
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	bf18      	it	ne
 80213ee:	eeb0 0a67 	vmovne.f32	s0, s15
 80213f2:	4770      	bx	lr
 80213f4:	484b      	ldr	r0, [pc, #300]	; (8021524 <__ieee754_expf+0x158>)
 80213f6:	4282      	cmp	r2, r0
 80213f8:	dd02      	ble.n	8021400 <__ieee754_expf+0x34>
 80213fa:	2000      	movs	r0, #0
 80213fc:	f001 b92e 	b.w	802265c <__math_oflowf>
 8021400:	2a00      	cmp	r2, #0
 8021402:	da05      	bge.n	8021410 <__ieee754_expf+0x44>
 8021404:	4a48      	ldr	r2, [pc, #288]	; (8021528 <__ieee754_expf+0x15c>)
 8021406:	4291      	cmp	r1, r2
 8021408:	d902      	bls.n	8021410 <__ieee754_expf+0x44>
 802140a:	2000      	movs	r0, #0
 802140c:	f001 b920 	b.w	8022650 <__math_uflowf>
 8021410:	4a46      	ldr	r2, [pc, #280]	; (802152c <__ieee754_expf+0x160>)
 8021412:	4291      	cmp	r1, r2
 8021414:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8021418:	d952      	bls.n	80214c0 <__ieee754_expf+0xf4>
 802141a:	4a45      	ldr	r2, [pc, #276]	; (8021530 <__ieee754_expf+0x164>)
 802141c:	4291      	cmp	r1, r2
 802141e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8021422:	d834      	bhi.n	802148e <__ieee754_expf+0xc2>
 8021424:	4943      	ldr	r1, [pc, #268]	; (8021534 <__ieee754_expf+0x168>)
 8021426:	4411      	add	r1, r2
 8021428:	ed91 7a00 	vldr	s14, [r1]
 802142c:	4942      	ldr	r1, [pc, #264]	; (8021538 <__ieee754_expf+0x16c>)
 802142e:	440a      	add	r2, r1
 8021430:	edd2 7a00 	vldr	s15, [r2]
 8021434:	ee30 7a47 	vsub.f32	s14, s0, s14
 8021438:	f1c3 0201 	rsb	r2, r3, #1
 802143c:	1ad2      	subs	r2, r2, r3
 802143e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8021442:	ee20 6a00 	vmul.f32	s12, s0, s0
 8021446:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 802153c <__ieee754_expf+0x170>
 802144a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8021540 <__ieee754_expf+0x174>
 802144e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8021452:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8021544 <__ieee754_expf+0x178>
 8021456:	eea6 5a86 	vfma.f32	s10, s13, s12
 802145a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8021548 <__ieee754_expf+0x17c>
 802145e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8021462:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 802154c <__ieee754_expf+0x180>
 8021466:	eea6 5a86 	vfma.f32	s10, s13, s12
 802146a:	eef0 6a40 	vmov.f32	s13, s0
 802146e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8021472:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8021476:	ee20 5a26 	vmul.f32	s10, s0, s13
 802147a:	bb92      	cbnz	r2, 80214e2 <__ieee754_expf+0x116>
 802147c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8021480:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8021484:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8021488:	ee35 0ac0 	vsub.f32	s0, s11, s0
 802148c:	4770      	bx	lr
 802148e:	4b30      	ldr	r3, [pc, #192]	; (8021550 <__ieee754_expf+0x184>)
 8021490:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8021554 <__ieee754_expf+0x188>
 8021494:	eddf 6a30 	vldr	s13, [pc, #192]	; 8021558 <__ieee754_expf+0x18c>
 8021498:	4413      	add	r3, r2
 802149a:	edd3 7a00 	vldr	s15, [r3]
 802149e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80214a2:	eeb0 7a40 	vmov.f32	s14, s0
 80214a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80214aa:	ee17 2a90 	vmov	r2, s15
 80214ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80214b2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80214b6:	eddf 6a29 	vldr	s13, [pc, #164]	; 802155c <__ieee754_expf+0x190>
 80214ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80214be:	e7be      	b.n	802143e <__ieee754_expf+0x72>
 80214c0:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80214c4:	d20b      	bcs.n	80214de <__ieee754_expf+0x112>
 80214c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8021560 <__ieee754_expf+0x194>
 80214ca:	ee70 6a26 	vadd.f32	s13, s0, s13
 80214ce:	eef4 6ae5 	vcmpe.f32	s13, s11
 80214d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214d6:	dd02      	ble.n	80214de <__ieee754_expf+0x112>
 80214d8:	ee30 0a25 	vadd.f32	s0, s0, s11
 80214dc:	4770      	bx	lr
 80214de:	2200      	movs	r2, #0
 80214e0:	e7af      	b.n	8021442 <__ieee754_expf+0x76>
 80214e2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80214e6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80214ea:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80214ee:	bfb8      	it	lt
 80214f0:	3264      	addlt	r2, #100	; 0x64
 80214f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80214f6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80214fa:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80214fe:	ee17 3a90 	vmov	r3, s15
 8021502:	bfab      	itete	ge
 8021504:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8021508:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 802150c:	ee00 3a10 	vmovge	s0, r3
 8021510:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8021564 <__ieee754_expf+0x198>
 8021514:	bfbc      	itt	lt
 8021516:	ee00 3a10 	vmovlt	s0, r3
 802151a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 802151e:	4770      	bx	lr
 8021520:	00000000 	.word	0x00000000
 8021524:	42b17217 	.word	0x42b17217
 8021528:	42cff1b5 	.word	0x42cff1b5
 802152c:	3eb17218 	.word	0x3eb17218
 8021530:	3f851591 	.word	0x3f851591
 8021534:	0802a418 	.word	0x0802a418
 8021538:	0802a420 	.word	0x0802a420
 802153c:	3331bb4c 	.word	0x3331bb4c
 8021540:	b5ddea0e 	.word	0xb5ddea0e
 8021544:	388ab355 	.word	0x388ab355
 8021548:	bb360b61 	.word	0xbb360b61
 802154c:	3e2aaaab 	.word	0x3e2aaaab
 8021550:	0802a410 	.word	0x0802a410
 8021554:	3fb8aa3b 	.word	0x3fb8aa3b
 8021558:	3f317180 	.word	0x3f317180
 802155c:	3717f7d1 	.word	0x3717f7d1
 8021560:	7149f2ca 	.word	0x7149f2ca
 8021564:	0d800000 	.word	0x0d800000

08021568 <__ieee754_logf>:
 8021568:	ee10 3a10 	vmov	r3, s0
 802156c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8021570:	d106      	bne.n	8021580 <__ieee754_logf+0x18>
 8021572:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8021708 <__ieee754_logf+0x1a0>
 8021576:	eddf 7a65 	vldr	s15, [pc, #404]	; 802170c <__ieee754_logf+0x1a4>
 802157a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802157e:	4770      	bx	lr
 8021580:	2b00      	cmp	r3, #0
 8021582:	da02      	bge.n	802158a <__ieee754_logf+0x22>
 8021584:	ee30 7a40 	vsub.f32	s14, s0, s0
 8021588:	e7f5      	b.n	8021576 <__ieee754_logf+0xe>
 802158a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802158e:	db02      	blt.n	8021596 <__ieee754_logf+0x2e>
 8021590:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021594:	4770      	bx	lr
 8021596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802159a:	bfb8      	it	lt
 802159c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8021710 <__ieee754_logf+0x1a8>
 80215a0:	485c      	ldr	r0, [pc, #368]	; (8021714 <__ieee754_logf+0x1ac>)
 80215a2:	bfbe      	ittt	lt
 80215a4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80215a8:	f06f 0118 	mvnlt.w	r1, #24
 80215ac:	ee17 3a90 	vmovlt	r3, s15
 80215b0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80215b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80215b8:	4418      	add	r0, r3
 80215ba:	bfa8      	it	ge
 80215bc:	2100      	movge	r1, #0
 80215be:	3a7f      	subs	r2, #127	; 0x7f
 80215c0:	440a      	add	r2, r1
 80215c2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80215c6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80215ca:	4319      	orrs	r1, r3
 80215cc:	ee00 1a10 	vmov	s0, r1
 80215d0:	4951      	ldr	r1, [pc, #324]	; (8021718 <__ieee754_logf+0x1b0>)
 80215d2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80215d6:	f103 000f 	add.w	r0, r3, #15
 80215da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80215de:	4001      	ands	r1, r0
 80215e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80215e4:	bb89      	cbnz	r1, 802164a <__ieee754_logf+0xe2>
 80215e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80215ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215ee:	d10f      	bne.n	8021610 <__ieee754_logf+0xa8>
 80215f0:	2a00      	cmp	r2, #0
 80215f2:	f000 8085 	beq.w	8021700 <__ieee754_logf+0x198>
 80215f6:	ee07 2a90 	vmov	s15, r2
 80215fa:	ed9f 0a48 	vldr	s0, [pc, #288]	; 802171c <__ieee754_logf+0x1b4>
 80215fe:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8021720 <__ieee754_logf+0x1b8>
 8021602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021606:	ee27 0a80 	vmul.f32	s0, s15, s0
 802160a:	eea7 0a87 	vfma.f32	s0, s15, s14
 802160e:	4770      	bx	lr
 8021610:	eddf 6a44 	vldr	s13, [pc, #272]	; 8021724 <__ieee754_logf+0x1bc>
 8021614:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021618:	eee0 7a66 	vfms.f32	s15, s0, s13
 802161c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8021620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8021624:	b912      	cbnz	r2, 802162c <__ieee754_logf+0xc4>
 8021626:	ee30 0a47 	vsub.f32	s0, s0, s14
 802162a:	4770      	bx	lr
 802162c:	ee07 2a90 	vmov	s15, r2
 8021630:	eddf 6a3a 	vldr	s13, [pc, #232]	; 802171c <__ieee754_logf+0x1b4>
 8021634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021638:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802163c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8021640:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8021720 <__ieee754_logf+0x1b8>
 8021644:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8021648:	4770      	bx	lr
 802164a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802164e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8021652:	eddf 5a35 	vldr	s11, [pc, #212]	; 8021728 <__ieee754_logf+0x1c0>
 8021656:	eddf 4a35 	vldr	s9, [pc, #212]	; 802172c <__ieee754_logf+0x1c4>
 802165a:	4935      	ldr	r1, [pc, #212]	; (8021730 <__ieee754_logf+0x1c8>)
 802165c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8021660:	4419      	add	r1, r3
 8021662:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8021666:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802166a:	430b      	orrs	r3, r1
 802166c:	2b00      	cmp	r3, #0
 802166e:	ee07 2a90 	vmov	s15, r2
 8021672:	ee26 5a06 	vmul.f32	s10, s12, s12
 8021676:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802167a:	ee25 7a05 	vmul.f32	s14, s10, s10
 802167e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8021734 <__ieee754_logf+0x1cc>
 8021682:	eee7 7a25 	vfma.f32	s15, s14, s11
 8021686:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8021738 <__ieee754_logf+0x1d0>
 802168a:	eee7 5a87 	vfma.f32	s11, s15, s14
 802168e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802173c <__ieee754_logf+0x1d4>
 8021692:	eee7 7a24 	vfma.f32	s15, s14, s9
 8021696:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8021740 <__ieee754_logf+0x1d8>
 802169a:	eee7 4a87 	vfma.f32	s9, s15, s14
 802169e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8021744 <__ieee754_logf+0x1dc>
 80216a2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80216a6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80216aa:	eee5 7a87 	vfma.f32	s15, s11, s14
 80216ae:	dd1c      	ble.n	80216ea <__ieee754_logf+0x182>
 80216b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80216b4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80216b8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80216bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80216c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80216c4:	b922      	cbnz	r2, 80216d0 <__ieee754_logf+0x168>
 80216c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80216ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80216ce:	4770      	bx	lr
 80216d0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 802171c <__ieee754_logf+0x1b4>
 80216d4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80216d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80216dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80216e0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8021720 <__ieee754_logf+0x1b8>
 80216e4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80216e8:	4770      	bx	lr
 80216ea:	ee70 7a67 	vsub.f32	s15, s0, s15
 80216ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80216f2:	2a00      	cmp	r2, #0
 80216f4:	d0e9      	beq.n	80216ca <__ieee754_logf+0x162>
 80216f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 802171c <__ieee754_logf+0x1b4>
 80216fa:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80216fe:	e7ed      	b.n	80216dc <__ieee754_logf+0x174>
 8021700:	ed9f 0a02 	vldr	s0, [pc, #8]	; 802170c <__ieee754_logf+0x1a4>
 8021704:	4770      	bx	lr
 8021706:	bf00      	nop
 8021708:	cc000000 	.word	0xcc000000
 802170c:	00000000 	.word	0x00000000
 8021710:	4c000000 	.word	0x4c000000
 8021714:	004afb20 	.word	0x004afb20
 8021718:	007ffff0 	.word	0x007ffff0
 802171c:	3717f7d1 	.word	0x3717f7d1
 8021720:	3f317180 	.word	0x3f317180
 8021724:	3eaaaaab 	.word	0x3eaaaaab
 8021728:	3e1cd04f 	.word	0x3e1cd04f
 802172c:	3e178897 	.word	0x3e178897
 8021730:	ffcf5c30 	.word	0xffcf5c30
 8021734:	3e638e29 	.word	0x3e638e29
 8021738:	3ecccccd 	.word	0x3ecccccd
 802173c:	3e3a3325 	.word	0x3e3a3325
 8021740:	3e924925 	.word	0x3e924925
 8021744:	3f2aaaab 	.word	0x3f2aaaab

08021748 <__ieee754_log10f>:
 8021748:	b508      	push	{r3, lr}
 802174a:	ee10 2a10 	vmov	r2, s0
 802174e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8021752:	ed2d 8b02 	vpush	{d8}
 8021756:	d108      	bne.n	802176a <__ieee754_log10f+0x22>
 8021758:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80217e0 <__ieee754_log10f+0x98>
 802175c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80217e4 <__ieee754_log10f+0x9c>
 8021760:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8021764:	ecbd 8b02 	vpop	{d8}
 8021768:	bd08      	pop	{r3, pc}
 802176a:	2a00      	cmp	r2, #0
 802176c:	da02      	bge.n	8021774 <__ieee754_log10f+0x2c>
 802176e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8021772:	e7f3      	b.n	802175c <__ieee754_log10f+0x14>
 8021774:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8021778:	db02      	blt.n	8021780 <__ieee754_log10f+0x38>
 802177a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802177e:	e7f1      	b.n	8021764 <__ieee754_log10f+0x1c>
 8021780:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8021784:	bfbf      	itttt	lt
 8021786:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80217e8 <__ieee754_log10f+0xa0>
 802178a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 802178e:	f06f 0118 	mvnlt.w	r1, #24
 8021792:	ee17 2a90 	vmovlt	r2, s15
 8021796:	ea4f 53e2 	mov.w	r3, r2, asr #23
 802179a:	bfa8      	it	ge
 802179c:	2100      	movge	r1, #0
 802179e:	3b7f      	subs	r3, #127	; 0x7f
 80217a0:	440b      	add	r3, r1
 80217a2:	0fd9      	lsrs	r1, r3, #31
 80217a4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80217a8:	ee07 3a90 	vmov	s15, r3
 80217ac:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80217b0:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80217b4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80217b8:	ee00 3a10 	vmov	s0, r3
 80217bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80217c0:	f7ff fed2 	bl	8021568 <__ieee754_logf>
 80217c4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80217ec <__ieee754_log10f+0xa4>
 80217c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80217cc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80217f0 <__ieee754_log10f+0xa8>
 80217d0:	eea8 0a27 	vfma.f32	s0, s16, s15
 80217d4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80217f4 <__ieee754_log10f+0xac>
 80217d8:	eea8 0a27 	vfma.f32	s0, s16, s15
 80217dc:	e7c2      	b.n	8021764 <__ieee754_log10f+0x1c>
 80217de:	bf00      	nop
 80217e0:	cc000000 	.word	0xcc000000
 80217e4:	00000000 	.word	0x00000000
 80217e8:	4c000000 	.word	0x4c000000
 80217ec:	3ede5bd9 	.word	0x3ede5bd9
 80217f0:	355427db 	.word	0x355427db
 80217f4:	3e9a2080 	.word	0x3e9a2080

080217f8 <__ieee754_sqrtf>:
 80217f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80217fc:	4770      	bx	lr
	...

08021800 <__kernel_cos>:
 8021800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021804:	ec57 6b10 	vmov	r6, r7, d0
 8021808:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802180c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8021810:	ed8d 1b00 	vstr	d1, [sp]
 8021814:	da07      	bge.n	8021826 <__kernel_cos+0x26>
 8021816:	ee10 0a10 	vmov	r0, s0
 802181a:	4639      	mov	r1, r7
 802181c:	f7df f9a6 	bl	8000b6c <__aeabi_d2iz>
 8021820:	2800      	cmp	r0, #0
 8021822:	f000 8088 	beq.w	8021936 <__kernel_cos+0x136>
 8021826:	4632      	mov	r2, r6
 8021828:	463b      	mov	r3, r7
 802182a:	4630      	mov	r0, r6
 802182c:	4639      	mov	r1, r7
 802182e:	f7de feed 	bl	800060c <__aeabi_dmul>
 8021832:	4b51      	ldr	r3, [pc, #324]	; (8021978 <__kernel_cos+0x178>)
 8021834:	2200      	movs	r2, #0
 8021836:	4604      	mov	r4, r0
 8021838:	460d      	mov	r5, r1
 802183a:	f7de fee7 	bl	800060c <__aeabi_dmul>
 802183e:	a340      	add	r3, pc, #256	; (adr r3, 8021940 <__kernel_cos+0x140>)
 8021840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021844:	4682      	mov	sl, r0
 8021846:	468b      	mov	fp, r1
 8021848:	4620      	mov	r0, r4
 802184a:	4629      	mov	r1, r5
 802184c:	f7de fede 	bl	800060c <__aeabi_dmul>
 8021850:	a33d      	add	r3, pc, #244	; (adr r3, 8021948 <__kernel_cos+0x148>)
 8021852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021856:	f7de fd23 	bl	80002a0 <__adddf3>
 802185a:	4622      	mov	r2, r4
 802185c:	462b      	mov	r3, r5
 802185e:	f7de fed5 	bl	800060c <__aeabi_dmul>
 8021862:	a33b      	add	r3, pc, #236	; (adr r3, 8021950 <__kernel_cos+0x150>)
 8021864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021868:	f7de fd18 	bl	800029c <__aeabi_dsub>
 802186c:	4622      	mov	r2, r4
 802186e:	462b      	mov	r3, r5
 8021870:	f7de fecc 	bl	800060c <__aeabi_dmul>
 8021874:	a338      	add	r3, pc, #224	; (adr r3, 8021958 <__kernel_cos+0x158>)
 8021876:	e9d3 2300 	ldrd	r2, r3, [r3]
 802187a:	f7de fd11 	bl	80002a0 <__adddf3>
 802187e:	4622      	mov	r2, r4
 8021880:	462b      	mov	r3, r5
 8021882:	f7de fec3 	bl	800060c <__aeabi_dmul>
 8021886:	a336      	add	r3, pc, #216	; (adr r3, 8021960 <__kernel_cos+0x160>)
 8021888:	e9d3 2300 	ldrd	r2, r3, [r3]
 802188c:	f7de fd06 	bl	800029c <__aeabi_dsub>
 8021890:	4622      	mov	r2, r4
 8021892:	462b      	mov	r3, r5
 8021894:	f7de feba 	bl	800060c <__aeabi_dmul>
 8021898:	a333      	add	r3, pc, #204	; (adr r3, 8021968 <__kernel_cos+0x168>)
 802189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802189e:	f7de fcff 	bl	80002a0 <__adddf3>
 80218a2:	4622      	mov	r2, r4
 80218a4:	462b      	mov	r3, r5
 80218a6:	f7de feb1 	bl	800060c <__aeabi_dmul>
 80218aa:	4622      	mov	r2, r4
 80218ac:	462b      	mov	r3, r5
 80218ae:	f7de fead 	bl	800060c <__aeabi_dmul>
 80218b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80218b6:	4604      	mov	r4, r0
 80218b8:	460d      	mov	r5, r1
 80218ba:	4630      	mov	r0, r6
 80218bc:	4639      	mov	r1, r7
 80218be:	f7de fea5 	bl	800060c <__aeabi_dmul>
 80218c2:	460b      	mov	r3, r1
 80218c4:	4602      	mov	r2, r0
 80218c6:	4629      	mov	r1, r5
 80218c8:	4620      	mov	r0, r4
 80218ca:	f7de fce7 	bl	800029c <__aeabi_dsub>
 80218ce:	4b2b      	ldr	r3, [pc, #172]	; (802197c <__kernel_cos+0x17c>)
 80218d0:	4598      	cmp	r8, r3
 80218d2:	4606      	mov	r6, r0
 80218d4:	460f      	mov	r7, r1
 80218d6:	dc10      	bgt.n	80218fa <__kernel_cos+0xfa>
 80218d8:	4602      	mov	r2, r0
 80218da:	460b      	mov	r3, r1
 80218dc:	4650      	mov	r0, sl
 80218de:	4659      	mov	r1, fp
 80218e0:	f7de fcdc 	bl	800029c <__aeabi_dsub>
 80218e4:	460b      	mov	r3, r1
 80218e6:	4926      	ldr	r1, [pc, #152]	; (8021980 <__kernel_cos+0x180>)
 80218e8:	4602      	mov	r2, r0
 80218ea:	2000      	movs	r0, #0
 80218ec:	f7de fcd6 	bl	800029c <__aeabi_dsub>
 80218f0:	ec41 0b10 	vmov	d0, r0, r1
 80218f4:	b003      	add	sp, #12
 80218f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218fa:	4b22      	ldr	r3, [pc, #136]	; (8021984 <__kernel_cos+0x184>)
 80218fc:	4920      	ldr	r1, [pc, #128]	; (8021980 <__kernel_cos+0x180>)
 80218fe:	4598      	cmp	r8, r3
 8021900:	bfcc      	ite	gt
 8021902:	4d21      	ldrgt	r5, [pc, #132]	; (8021988 <__kernel_cos+0x188>)
 8021904:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8021908:	2400      	movs	r4, #0
 802190a:	4622      	mov	r2, r4
 802190c:	462b      	mov	r3, r5
 802190e:	2000      	movs	r0, #0
 8021910:	f7de fcc4 	bl	800029c <__aeabi_dsub>
 8021914:	4622      	mov	r2, r4
 8021916:	4680      	mov	r8, r0
 8021918:	4689      	mov	r9, r1
 802191a:	462b      	mov	r3, r5
 802191c:	4650      	mov	r0, sl
 802191e:	4659      	mov	r1, fp
 8021920:	f7de fcbc 	bl	800029c <__aeabi_dsub>
 8021924:	4632      	mov	r2, r6
 8021926:	463b      	mov	r3, r7
 8021928:	f7de fcb8 	bl	800029c <__aeabi_dsub>
 802192c:	4602      	mov	r2, r0
 802192e:	460b      	mov	r3, r1
 8021930:	4640      	mov	r0, r8
 8021932:	4649      	mov	r1, r9
 8021934:	e7da      	b.n	80218ec <__kernel_cos+0xec>
 8021936:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8021970 <__kernel_cos+0x170>
 802193a:	e7db      	b.n	80218f4 <__kernel_cos+0xf4>
 802193c:	f3af 8000 	nop.w
 8021940:	be8838d4 	.word	0xbe8838d4
 8021944:	bda8fae9 	.word	0xbda8fae9
 8021948:	bdb4b1c4 	.word	0xbdb4b1c4
 802194c:	3e21ee9e 	.word	0x3e21ee9e
 8021950:	809c52ad 	.word	0x809c52ad
 8021954:	3e927e4f 	.word	0x3e927e4f
 8021958:	19cb1590 	.word	0x19cb1590
 802195c:	3efa01a0 	.word	0x3efa01a0
 8021960:	16c15177 	.word	0x16c15177
 8021964:	3f56c16c 	.word	0x3f56c16c
 8021968:	5555554c 	.word	0x5555554c
 802196c:	3fa55555 	.word	0x3fa55555
 8021970:	00000000 	.word	0x00000000
 8021974:	3ff00000 	.word	0x3ff00000
 8021978:	3fe00000 	.word	0x3fe00000
 802197c:	3fd33332 	.word	0x3fd33332
 8021980:	3ff00000 	.word	0x3ff00000
 8021984:	3fe90000 	.word	0x3fe90000
 8021988:	3fd20000 	.word	0x3fd20000
 802198c:	00000000 	.word	0x00000000

08021990 <__kernel_rem_pio2>:
 8021990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021994:	ed2d 8b02 	vpush	{d8}
 8021998:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802199c:	f112 0f14 	cmn.w	r2, #20
 80219a0:	9308      	str	r3, [sp, #32]
 80219a2:	9101      	str	r1, [sp, #4]
 80219a4:	4bc4      	ldr	r3, [pc, #784]	; (8021cb8 <__kernel_rem_pio2+0x328>)
 80219a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80219a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80219aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80219ae:	9302      	str	r3, [sp, #8]
 80219b0:	9b08      	ldr	r3, [sp, #32]
 80219b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80219b6:	bfa8      	it	ge
 80219b8:	1ed4      	subge	r4, r2, #3
 80219ba:	9306      	str	r3, [sp, #24]
 80219bc:	bfb2      	itee	lt
 80219be:	2400      	movlt	r4, #0
 80219c0:	2318      	movge	r3, #24
 80219c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80219c6:	f06f 0317 	mvn.w	r3, #23
 80219ca:	fb04 3303 	mla	r3, r4, r3, r3
 80219ce:	eb03 0a02 	add.w	sl, r3, r2
 80219d2:	9b02      	ldr	r3, [sp, #8]
 80219d4:	9a06      	ldr	r2, [sp, #24]
 80219d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8021ca8 <__kernel_rem_pio2+0x318>
 80219da:	eb03 0802 	add.w	r8, r3, r2
 80219de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80219e0:	1aa7      	subs	r7, r4, r2
 80219e2:	ae22      	add	r6, sp, #136	; 0x88
 80219e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80219e8:	2500      	movs	r5, #0
 80219ea:	4545      	cmp	r5, r8
 80219ec:	dd13      	ble.n	8021a16 <__kernel_rem_pio2+0x86>
 80219ee:	9b08      	ldr	r3, [sp, #32]
 80219f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8021ca8 <__kernel_rem_pio2+0x318>
 80219f4:	aa22      	add	r2, sp, #136	; 0x88
 80219f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80219fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80219fe:	f04f 0800 	mov.w	r8, #0
 8021a02:	9b02      	ldr	r3, [sp, #8]
 8021a04:	4598      	cmp	r8, r3
 8021a06:	dc2f      	bgt.n	8021a68 <__kernel_rem_pio2+0xd8>
 8021a08:	ed8d 8b04 	vstr	d8, [sp, #16]
 8021a0c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8021a10:	462f      	mov	r7, r5
 8021a12:	2600      	movs	r6, #0
 8021a14:	e01b      	b.n	8021a4e <__kernel_rem_pio2+0xbe>
 8021a16:	42ef      	cmn	r7, r5
 8021a18:	d407      	bmi.n	8021a2a <__kernel_rem_pio2+0x9a>
 8021a1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8021a1e:	f7de fd8b 	bl	8000538 <__aeabi_i2d>
 8021a22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8021a26:	3501      	adds	r5, #1
 8021a28:	e7df      	b.n	80219ea <__kernel_rem_pio2+0x5a>
 8021a2a:	ec51 0b18 	vmov	r0, r1, d8
 8021a2e:	e7f8      	b.n	8021a22 <__kernel_rem_pio2+0x92>
 8021a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021a34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8021a38:	f7de fde8 	bl	800060c <__aeabi_dmul>
 8021a3c:	4602      	mov	r2, r0
 8021a3e:	460b      	mov	r3, r1
 8021a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021a44:	f7de fc2c 	bl	80002a0 <__adddf3>
 8021a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021a4c:	3601      	adds	r6, #1
 8021a4e:	9b06      	ldr	r3, [sp, #24]
 8021a50:	429e      	cmp	r6, r3
 8021a52:	f1a7 0708 	sub.w	r7, r7, #8
 8021a56:	ddeb      	ble.n	8021a30 <__kernel_rem_pio2+0xa0>
 8021a58:	ed9d 7b04 	vldr	d7, [sp, #16]
 8021a5c:	f108 0801 	add.w	r8, r8, #1
 8021a60:	ecab 7b02 	vstmia	fp!, {d7}
 8021a64:	3508      	adds	r5, #8
 8021a66:	e7cc      	b.n	8021a02 <__kernel_rem_pio2+0x72>
 8021a68:	9b02      	ldr	r3, [sp, #8]
 8021a6a:	aa0e      	add	r2, sp, #56	; 0x38
 8021a6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021a70:	930d      	str	r3, [sp, #52]	; 0x34
 8021a72:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8021a74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021a78:	9c02      	ldr	r4, [sp, #8]
 8021a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8021a7c:	00e3      	lsls	r3, r4, #3
 8021a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8021a80:	ab9a      	add	r3, sp, #616	; 0x268
 8021a82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021a86:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8021a8a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8021a8e:	ab72      	add	r3, sp, #456	; 0x1c8
 8021a90:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8021a94:	46c3      	mov	fp, r8
 8021a96:	46a1      	mov	r9, r4
 8021a98:	f1b9 0f00 	cmp.w	r9, #0
 8021a9c:	f1a5 0508 	sub.w	r5, r5, #8
 8021aa0:	dc77      	bgt.n	8021b92 <__kernel_rem_pio2+0x202>
 8021aa2:	ec47 6b10 	vmov	d0, r6, r7
 8021aa6:	4650      	mov	r0, sl
 8021aa8:	f000 fdfa 	bl	80226a0 <scalbn>
 8021aac:	ec57 6b10 	vmov	r6, r7, d0
 8021ab0:	2200      	movs	r2, #0
 8021ab2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8021ab6:	ee10 0a10 	vmov	r0, s0
 8021aba:	4639      	mov	r1, r7
 8021abc:	f7de fda6 	bl	800060c <__aeabi_dmul>
 8021ac0:	ec41 0b10 	vmov	d0, r0, r1
 8021ac4:	f7fe f9a0 	bl	801fe08 <floor>
 8021ac8:	4b7c      	ldr	r3, [pc, #496]	; (8021cbc <__kernel_rem_pio2+0x32c>)
 8021aca:	ec51 0b10 	vmov	r0, r1, d0
 8021ace:	2200      	movs	r2, #0
 8021ad0:	f7de fd9c 	bl	800060c <__aeabi_dmul>
 8021ad4:	4602      	mov	r2, r0
 8021ad6:	460b      	mov	r3, r1
 8021ad8:	4630      	mov	r0, r6
 8021ada:	4639      	mov	r1, r7
 8021adc:	f7de fbde 	bl	800029c <__aeabi_dsub>
 8021ae0:	460f      	mov	r7, r1
 8021ae2:	4606      	mov	r6, r0
 8021ae4:	f7df f842 	bl	8000b6c <__aeabi_d2iz>
 8021ae8:	9004      	str	r0, [sp, #16]
 8021aea:	f7de fd25 	bl	8000538 <__aeabi_i2d>
 8021aee:	4602      	mov	r2, r0
 8021af0:	460b      	mov	r3, r1
 8021af2:	4630      	mov	r0, r6
 8021af4:	4639      	mov	r1, r7
 8021af6:	f7de fbd1 	bl	800029c <__aeabi_dsub>
 8021afa:	f1ba 0f00 	cmp.w	sl, #0
 8021afe:	4606      	mov	r6, r0
 8021b00:	460f      	mov	r7, r1
 8021b02:	dd6d      	ble.n	8021be0 <__kernel_rem_pio2+0x250>
 8021b04:	1e62      	subs	r2, r4, #1
 8021b06:	ab0e      	add	r3, sp, #56	; 0x38
 8021b08:	9d04      	ldr	r5, [sp, #16]
 8021b0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021b0e:	f1ca 0118 	rsb	r1, sl, #24
 8021b12:	fa40 f301 	asr.w	r3, r0, r1
 8021b16:	441d      	add	r5, r3
 8021b18:	408b      	lsls	r3, r1
 8021b1a:	1ac0      	subs	r0, r0, r3
 8021b1c:	ab0e      	add	r3, sp, #56	; 0x38
 8021b1e:	9504      	str	r5, [sp, #16]
 8021b20:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8021b24:	f1ca 0317 	rsb	r3, sl, #23
 8021b28:	fa40 fb03 	asr.w	fp, r0, r3
 8021b2c:	f1bb 0f00 	cmp.w	fp, #0
 8021b30:	dd65      	ble.n	8021bfe <__kernel_rem_pio2+0x26e>
 8021b32:	9b04      	ldr	r3, [sp, #16]
 8021b34:	2200      	movs	r2, #0
 8021b36:	3301      	adds	r3, #1
 8021b38:	9304      	str	r3, [sp, #16]
 8021b3a:	4615      	mov	r5, r2
 8021b3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8021b40:	4294      	cmp	r4, r2
 8021b42:	f300 809c 	bgt.w	8021c7e <__kernel_rem_pio2+0x2ee>
 8021b46:	f1ba 0f00 	cmp.w	sl, #0
 8021b4a:	dd07      	ble.n	8021b5c <__kernel_rem_pio2+0x1cc>
 8021b4c:	f1ba 0f01 	cmp.w	sl, #1
 8021b50:	f000 80c0 	beq.w	8021cd4 <__kernel_rem_pio2+0x344>
 8021b54:	f1ba 0f02 	cmp.w	sl, #2
 8021b58:	f000 80c6 	beq.w	8021ce8 <__kernel_rem_pio2+0x358>
 8021b5c:	f1bb 0f02 	cmp.w	fp, #2
 8021b60:	d14d      	bne.n	8021bfe <__kernel_rem_pio2+0x26e>
 8021b62:	4632      	mov	r2, r6
 8021b64:	463b      	mov	r3, r7
 8021b66:	4956      	ldr	r1, [pc, #344]	; (8021cc0 <__kernel_rem_pio2+0x330>)
 8021b68:	2000      	movs	r0, #0
 8021b6a:	f7de fb97 	bl	800029c <__aeabi_dsub>
 8021b6e:	4606      	mov	r6, r0
 8021b70:	460f      	mov	r7, r1
 8021b72:	2d00      	cmp	r5, #0
 8021b74:	d043      	beq.n	8021bfe <__kernel_rem_pio2+0x26e>
 8021b76:	4650      	mov	r0, sl
 8021b78:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8021cb0 <__kernel_rem_pio2+0x320>
 8021b7c:	f000 fd90 	bl	80226a0 <scalbn>
 8021b80:	4630      	mov	r0, r6
 8021b82:	4639      	mov	r1, r7
 8021b84:	ec53 2b10 	vmov	r2, r3, d0
 8021b88:	f7de fb88 	bl	800029c <__aeabi_dsub>
 8021b8c:	4606      	mov	r6, r0
 8021b8e:	460f      	mov	r7, r1
 8021b90:	e035      	b.n	8021bfe <__kernel_rem_pio2+0x26e>
 8021b92:	4b4c      	ldr	r3, [pc, #304]	; (8021cc4 <__kernel_rem_pio2+0x334>)
 8021b94:	2200      	movs	r2, #0
 8021b96:	4630      	mov	r0, r6
 8021b98:	4639      	mov	r1, r7
 8021b9a:	f7de fd37 	bl	800060c <__aeabi_dmul>
 8021b9e:	f7de ffe5 	bl	8000b6c <__aeabi_d2iz>
 8021ba2:	f7de fcc9 	bl	8000538 <__aeabi_i2d>
 8021ba6:	4602      	mov	r2, r0
 8021ba8:	460b      	mov	r3, r1
 8021baa:	ec43 2b18 	vmov	d8, r2, r3
 8021bae:	4b46      	ldr	r3, [pc, #280]	; (8021cc8 <__kernel_rem_pio2+0x338>)
 8021bb0:	2200      	movs	r2, #0
 8021bb2:	f7de fd2b 	bl	800060c <__aeabi_dmul>
 8021bb6:	4602      	mov	r2, r0
 8021bb8:	460b      	mov	r3, r1
 8021bba:	4630      	mov	r0, r6
 8021bbc:	4639      	mov	r1, r7
 8021bbe:	f7de fb6d 	bl	800029c <__aeabi_dsub>
 8021bc2:	f7de ffd3 	bl	8000b6c <__aeabi_d2iz>
 8021bc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8021bca:	f84b 0b04 	str.w	r0, [fp], #4
 8021bce:	ec51 0b18 	vmov	r0, r1, d8
 8021bd2:	f7de fb65 	bl	80002a0 <__adddf3>
 8021bd6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8021bda:	4606      	mov	r6, r0
 8021bdc:	460f      	mov	r7, r1
 8021bde:	e75b      	b.n	8021a98 <__kernel_rem_pio2+0x108>
 8021be0:	d106      	bne.n	8021bf0 <__kernel_rem_pio2+0x260>
 8021be2:	1e63      	subs	r3, r4, #1
 8021be4:	aa0e      	add	r2, sp, #56	; 0x38
 8021be6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021bea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8021bee:	e79d      	b.n	8021b2c <__kernel_rem_pio2+0x19c>
 8021bf0:	4b36      	ldr	r3, [pc, #216]	; (8021ccc <__kernel_rem_pio2+0x33c>)
 8021bf2:	2200      	movs	r2, #0
 8021bf4:	f7de ff90 	bl	8000b18 <__aeabi_dcmpge>
 8021bf8:	2800      	cmp	r0, #0
 8021bfa:	d13d      	bne.n	8021c78 <__kernel_rem_pio2+0x2e8>
 8021bfc:	4683      	mov	fp, r0
 8021bfe:	2200      	movs	r2, #0
 8021c00:	2300      	movs	r3, #0
 8021c02:	4630      	mov	r0, r6
 8021c04:	4639      	mov	r1, r7
 8021c06:	f7de ff69 	bl	8000adc <__aeabi_dcmpeq>
 8021c0a:	2800      	cmp	r0, #0
 8021c0c:	f000 80c0 	beq.w	8021d90 <__kernel_rem_pio2+0x400>
 8021c10:	1e65      	subs	r5, r4, #1
 8021c12:	462b      	mov	r3, r5
 8021c14:	2200      	movs	r2, #0
 8021c16:	9902      	ldr	r1, [sp, #8]
 8021c18:	428b      	cmp	r3, r1
 8021c1a:	da6c      	bge.n	8021cf6 <__kernel_rem_pio2+0x366>
 8021c1c:	2a00      	cmp	r2, #0
 8021c1e:	f000 8089 	beq.w	8021d34 <__kernel_rem_pio2+0x3a4>
 8021c22:	ab0e      	add	r3, sp, #56	; 0x38
 8021c24:	f1aa 0a18 	sub.w	sl, sl, #24
 8021c28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	f000 80ad 	beq.w	8021d8c <__kernel_rem_pio2+0x3fc>
 8021c32:	4650      	mov	r0, sl
 8021c34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8021cb0 <__kernel_rem_pio2+0x320>
 8021c38:	f000 fd32 	bl	80226a0 <scalbn>
 8021c3c:	ab9a      	add	r3, sp, #616	; 0x268
 8021c3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021c42:	ec57 6b10 	vmov	r6, r7, d0
 8021c46:	00ec      	lsls	r4, r5, #3
 8021c48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8021c4c:	46aa      	mov	sl, r5
 8021c4e:	f1ba 0f00 	cmp.w	sl, #0
 8021c52:	f280 80d6 	bge.w	8021e02 <__kernel_rem_pio2+0x472>
 8021c56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8021ca8 <__kernel_rem_pio2+0x318>
 8021c5a:	462e      	mov	r6, r5
 8021c5c:	2e00      	cmp	r6, #0
 8021c5e:	f2c0 8104 	blt.w	8021e6a <__kernel_rem_pio2+0x4da>
 8021c62:	ab72      	add	r3, sp, #456	; 0x1c8
 8021c64:	ed8d 8b06 	vstr	d8, [sp, #24]
 8021c68:	f8df a064 	ldr.w	sl, [pc, #100]	; 8021cd0 <__kernel_rem_pio2+0x340>
 8021c6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8021c70:	f04f 0800 	mov.w	r8, #0
 8021c74:	1baf      	subs	r7, r5, r6
 8021c76:	e0ea      	b.n	8021e4e <__kernel_rem_pio2+0x4be>
 8021c78:	f04f 0b02 	mov.w	fp, #2
 8021c7c:	e759      	b.n	8021b32 <__kernel_rem_pio2+0x1a2>
 8021c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8021c82:	b955      	cbnz	r5, 8021c9a <__kernel_rem_pio2+0x30a>
 8021c84:	b123      	cbz	r3, 8021c90 <__kernel_rem_pio2+0x300>
 8021c86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8021c8a:	f8c8 3000 	str.w	r3, [r8]
 8021c8e:	2301      	movs	r3, #1
 8021c90:	3201      	adds	r2, #1
 8021c92:	f108 0804 	add.w	r8, r8, #4
 8021c96:	461d      	mov	r5, r3
 8021c98:	e752      	b.n	8021b40 <__kernel_rem_pio2+0x1b0>
 8021c9a:	1acb      	subs	r3, r1, r3
 8021c9c:	f8c8 3000 	str.w	r3, [r8]
 8021ca0:	462b      	mov	r3, r5
 8021ca2:	e7f5      	b.n	8021c90 <__kernel_rem_pio2+0x300>
 8021ca4:	f3af 8000 	nop.w
	...
 8021cb4:	3ff00000 	.word	0x3ff00000
 8021cb8:	0802a468 	.word	0x0802a468
 8021cbc:	40200000 	.word	0x40200000
 8021cc0:	3ff00000 	.word	0x3ff00000
 8021cc4:	3e700000 	.word	0x3e700000
 8021cc8:	41700000 	.word	0x41700000
 8021ccc:	3fe00000 	.word	0x3fe00000
 8021cd0:	0802a428 	.word	0x0802a428
 8021cd4:	1e62      	subs	r2, r4, #1
 8021cd6:	ab0e      	add	r3, sp, #56	; 0x38
 8021cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021cdc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8021ce0:	a90e      	add	r1, sp, #56	; 0x38
 8021ce2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8021ce6:	e739      	b.n	8021b5c <__kernel_rem_pio2+0x1cc>
 8021ce8:	1e62      	subs	r2, r4, #1
 8021cea:	ab0e      	add	r3, sp, #56	; 0x38
 8021cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021cf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8021cf4:	e7f4      	b.n	8021ce0 <__kernel_rem_pio2+0x350>
 8021cf6:	a90e      	add	r1, sp, #56	; 0x38
 8021cf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8021cfc:	3b01      	subs	r3, #1
 8021cfe:	430a      	orrs	r2, r1
 8021d00:	e789      	b.n	8021c16 <__kernel_rem_pio2+0x286>
 8021d02:	3301      	adds	r3, #1
 8021d04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8021d08:	2900      	cmp	r1, #0
 8021d0a:	d0fa      	beq.n	8021d02 <__kernel_rem_pio2+0x372>
 8021d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021d0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8021d12:	446a      	add	r2, sp
 8021d14:	3a98      	subs	r2, #152	; 0x98
 8021d16:	920a      	str	r2, [sp, #40]	; 0x28
 8021d18:	9a08      	ldr	r2, [sp, #32]
 8021d1a:	18e3      	adds	r3, r4, r3
 8021d1c:	18a5      	adds	r5, r4, r2
 8021d1e:	aa22      	add	r2, sp, #136	; 0x88
 8021d20:	f104 0801 	add.w	r8, r4, #1
 8021d24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8021d28:	9304      	str	r3, [sp, #16]
 8021d2a:	9b04      	ldr	r3, [sp, #16]
 8021d2c:	4543      	cmp	r3, r8
 8021d2e:	da04      	bge.n	8021d3a <__kernel_rem_pio2+0x3aa>
 8021d30:	461c      	mov	r4, r3
 8021d32:	e6a3      	b.n	8021a7c <__kernel_rem_pio2+0xec>
 8021d34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021d36:	2301      	movs	r3, #1
 8021d38:	e7e4      	b.n	8021d04 <__kernel_rem_pio2+0x374>
 8021d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8021d40:	f7de fbfa 	bl	8000538 <__aeabi_i2d>
 8021d44:	e8e5 0102 	strd	r0, r1, [r5], #8
 8021d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d4a:	46ab      	mov	fp, r5
 8021d4c:	461c      	mov	r4, r3
 8021d4e:	f04f 0900 	mov.w	r9, #0
 8021d52:	2600      	movs	r6, #0
 8021d54:	2700      	movs	r7, #0
 8021d56:	9b06      	ldr	r3, [sp, #24]
 8021d58:	4599      	cmp	r9, r3
 8021d5a:	dd06      	ble.n	8021d6a <__kernel_rem_pio2+0x3da>
 8021d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8021d62:	f108 0801 	add.w	r8, r8, #1
 8021d66:	930a      	str	r3, [sp, #40]	; 0x28
 8021d68:	e7df      	b.n	8021d2a <__kernel_rem_pio2+0x39a>
 8021d6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8021d6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8021d72:	f7de fc4b 	bl	800060c <__aeabi_dmul>
 8021d76:	4602      	mov	r2, r0
 8021d78:	460b      	mov	r3, r1
 8021d7a:	4630      	mov	r0, r6
 8021d7c:	4639      	mov	r1, r7
 8021d7e:	f7de fa8f 	bl	80002a0 <__adddf3>
 8021d82:	f109 0901 	add.w	r9, r9, #1
 8021d86:	4606      	mov	r6, r0
 8021d88:	460f      	mov	r7, r1
 8021d8a:	e7e4      	b.n	8021d56 <__kernel_rem_pio2+0x3c6>
 8021d8c:	3d01      	subs	r5, #1
 8021d8e:	e748      	b.n	8021c22 <__kernel_rem_pio2+0x292>
 8021d90:	ec47 6b10 	vmov	d0, r6, r7
 8021d94:	f1ca 0000 	rsb	r0, sl, #0
 8021d98:	f000 fc82 	bl	80226a0 <scalbn>
 8021d9c:	ec57 6b10 	vmov	r6, r7, d0
 8021da0:	4ba0      	ldr	r3, [pc, #640]	; (8022024 <__kernel_rem_pio2+0x694>)
 8021da2:	ee10 0a10 	vmov	r0, s0
 8021da6:	2200      	movs	r2, #0
 8021da8:	4639      	mov	r1, r7
 8021daa:	f7de feb5 	bl	8000b18 <__aeabi_dcmpge>
 8021dae:	b1f8      	cbz	r0, 8021df0 <__kernel_rem_pio2+0x460>
 8021db0:	4b9d      	ldr	r3, [pc, #628]	; (8022028 <__kernel_rem_pio2+0x698>)
 8021db2:	2200      	movs	r2, #0
 8021db4:	4630      	mov	r0, r6
 8021db6:	4639      	mov	r1, r7
 8021db8:	f7de fc28 	bl	800060c <__aeabi_dmul>
 8021dbc:	f7de fed6 	bl	8000b6c <__aeabi_d2iz>
 8021dc0:	4680      	mov	r8, r0
 8021dc2:	f7de fbb9 	bl	8000538 <__aeabi_i2d>
 8021dc6:	4b97      	ldr	r3, [pc, #604]	; (8022024 <__kernel_rem_pio2+0x694>)
 8021dc8:	2200      	movs	r2, #0
 8021dca:	f7de fc1f 	bl	800060c <__aeabi_dmul>
 8021dce:	460b      	mov	r3, r1
 8021dd0:	4602      	mov	r2, r0
 8021dd2:	4639      	mov	r1, r7
 8021dd4:	4630      	mov	r0, r6
 8021dd6:	f7de fa61 	bl	800029c <__aeabi_dsub>
 8021dda:	f7de fec7 	bl	8000b6c <__aeabi_d2iz>
 8021dde:	1c65      	adds	r5, r4, #1
 8021de0:	ab0e      	add	r3, sp, #56	; 0x38
 8021de2:	f10a 0a18 	add.w	sl, sl, #24
 8021de6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8021dea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8021dee:	e720      	b.n	8021c32 <__kernel_rem_pio2+0x2a2>
 8021df0:	4630      	mov	r0, r6
 8021df2:	4639      	mov	r1, r7
 8021df4:	f7de feba 	bl	8000b6c <__aeabi_d2iz>
 8021df8:	ab0e      	add	r3, sp, #56	; 0x38
 8021dfa:	4625      	mov	r5, r4
 8021dfc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8021e00:	e717      	b.n	8021c32 <__kernel_rem_pio2+0x2a2>
 8021e02:	ab0e      	add	r3, sp, #56	; 0x38
 8021e04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8021e08:	f7de fb96 	bl	8000538 <__aeabi_i2d>
 8021e0c:	4632      	mov	r2, r6
 8021e0e:	463b      	mov	r3, r7
 8021e10:	f7de fbfc 	bl	800060c <__aeabi_dmul>
 8021e14:	4b84      	ldr	r3, [pc, #528]	; (8022028 <__kernel_rem_pio2+0x698>)
 8021e16:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8021e1a:	2200      	movs	r2, #0
 8021e1c:	4630      	mov	r0, r6
 8021e1e:	4639      	mov	r1, r7
 8021e20:	f7de fbf4 	bl	800060c <__aeabi_dmul>
 8021e24:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8021e28:	4606      	mov	r6, r0
 8021e2a:	460f      	mov	r7, r1
 8021e2c:	e70f      	b.n	8021c4e <__kernel_rem_pio2+0x2be>
 8021e2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8021e32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8021e36:	f7de fbe9 	bl	800060c <__aeabi_dmul>
 8021e3a:	4602      	mov	r2, r0
 8021e3c:	460b      	mov	r3, r1
 8021e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021e42:	f7de fa2d 	bl	80002a0 <__adddf3>
 8021e46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021e4a:	f108 0801 	add.w	r8, r8, #1
 8021e4e:	9b02      	ldr	r3, [sp, #8]
 8021e50:	4598      	cmp	r8, r3
 8021e52:	dc01      	bgt.n	8021e58 <__kernel_rem_pio2+0x4c8>
 8021e54:	45b8      	cmp	r8, r7
 8021e56:	ddea      	ble.n	8021e2e <__kernel_rem_pio2+0x49e>
 8021e58:	ed9d 7b06 	vldr	d7, [sp, #24]
 8021e5c:	ab4a      	add	r3, sp, #296	; 0x128
 8021e5e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8021e62:	ed87 7b00 	vstr	d7, [r7]
 8021e66:	3e01      	subs	r6, #1
 8021e68:	e6f8      	b.n	8021c5c <__kernel_rem_pio2+0x2cc>
 8021e6a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8021e6c:	2b02      	cmp	r3, #2
 8021e6e:	dc0b      	bgt.n	8021e88 <__kernel_rem_pio2+0x4f8>
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	dc35      	bgt.n	8021ee0 <__kernel_rem_pio2+0x550>
 8021e74:	d059      	beq.n	8021f2a <__kernel_rem_pio2+0x59a>
 8021e76:	9b04      	ldr	r3, [sp, #16]
 8021e78:	f003 0007 	and.w	r0, r3, #7
 8021e7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8021e80:	ecbd 8b02 	vpop	{d8}
 8021e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8021e8a:	2b03      	cmp	r3, #3
 8021e8c:	d1f3      	bne.n	8021e76 <__kernel_rem_pio2+0x4e6>
 8021e8e:	ab4a      	add	r3, sp, #296	; 0x128
 8021e90:	4423      	add	r3, r4
 8021e92:	9306      	str	r3, [sp, #24]
 8021e94:	461c      	mov	r4, r3
 8021e96:	469a      	mov	sl, r3
 8021e98:	9502      	str	r5, [sp, #8]
 8021e9a:	9b02      	ldr	r3, [sp, #8]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	f1aa 0a08 	sub.w	sl, sl, #8
 8021ea2:	dc6b      	bgt.n	8021f7c <__kernel_rem_pio2+0x5ec>
 8021ea4:	46aa      	mov	sl, r5
 8021ea6:	f1ba 0f01 	cmp.w	sl, #1
 8021eaa:	f1a4 0408 	sub.w	r4, r4, #8
 8021eae:	f300 8085 	bgt.w	8021fbc <__kernel_rem_pio2+0x62c>
 8021eb2:	9c06      	ldr	r4, [sp, #24]
 8021eb4:	2000      	movs	r0, #0
 8021eb6:	3408      	adds	r4, #8
 8021eb8:	2100      	movs	r1, #0
 8021eba:	2d01      	cmp	r5, #1
 8021ebc:	f300 809d 	bgt.w	8021ffa <__kernel_rem_pio2+0x66a>
 8021ec0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8021ec4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8021ec8:	f1bb 0f00 	cmp.w	fp, #0
 8021ecc:	f040 809b 	bne.w	8022006 <__kernel_rem_pio2+0x676>
 8021ed0:	9b01      	ldr	r3, [sp, #4]
 8021ed2:	e9c3 5600 	strd	r5, r6, [r3]
 8021ed6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8021eda:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8021ede:	e7ca      	b.n	8021e76 <__kernel_rem_pio2+0x4e6>
 8021ee0:	3408      	adds	r4, #8
 8021ee2:	ab4a      	add	r3, sp, #296	; 0x128
 8021ee4:	441c      	add	r4, r3
 8021ee6:	462e      	mov	r6, r5
 8021ee8:	2000      	movs	r0, #0
 8021eea:	2100      	movs	r1, #0
 8021eec:	2e00      	cmp	r6, #0
 8021eee:	da36      	bge.n	8021f5e <__kernel_rem_pio2+0x5ce>
 8021ef0:	f1bb 0f00 	cmp.w	fp, #0
 8021ef4:	d039      	beq.n	8021f6a <__kernel_rem_pio2+0x5da>
 8021ef6:	4602      	mov	r2, r0
 8021ef8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021efc:	9c01      	ldr	r4, [sp, #4]
 8021efe:	e9c4 2300 	strd	r2, r3, [r4]
 8021f02:	4602      	mov	r2, r0
 8021f04:	460b      	mov	r3, r1
 8021f06:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8021f0a:	f7de f9c7 	bl	800029c <__aeabi_dsub>
 8021f0e:	ae4c      	add	r6, sp, #304	; 0x130
 8021f10:	2401      	movs	r4, #1
 8021f12:	42a5      	cmp	r5, r4
 8021f14:	da2c      	bge.n	8021f70 <__kernel_rem_pio2+0x5e0>
 8021f16:	f1bb 0f00 	cmp.w	fp, #0
 8021f1a:	d002      	beq.n	8021f22 <__kernel_rem_pio2+0x592>
 8021f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021f20:	4619      	mov	r1, r3
 8021f22:	9b01      	ldr	r3, [sp, #4]
 8021f24:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8021f28:	e7a5      	b.n	8021e76 <__kernel_rem_pio2+0x4e6>
 8021f2a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8021f2e:	eb0d 0403 	add.w	r4, sp, r3
 8021f32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8021f36:	2000      	movs	r0, #0
 8021f38:	2100      	movs	r1, #0
 8021f3a:	2d00      	cmp	r5, #0
 8021f3c:	da09      	bge.n	8021f52 <__kernel_rem_pio2+0x5c2>
 8021f3e:	f1bb 0f00 	cmp.w	fp, #0
 8021f42:	d002      	beq.n	8021f4a <__kernel_rem_pio2+0x5ba>
 8021f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021f48:	4619      	mov	r1, r3
 8021f4a:	9b01      	ldr	r3, [sp, #4]
 8021f4c:	e9c3 0100 	strd	r0, r1, [r3]
 8021f50:	e791      	b.n	8021e76 <__kernel_rem_pio2+0x4e6>
 8021f52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8021f56:	f7de f9a3 	bl	80002a0 <__adddf3>
 8021f5a:	3d01      	subs	r5, #1
 8021f5c:	e7ed      	b.n	8021f3a <__kernel_rem_pio2+0x5aa>
 8021f5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8021f62:	f7de f99d 	bl	80002a0 <__adddf3>
 8021f66:	3e01      	subs	r6, #1
 8021f68:	e7c0      	b.n	8021eec <__kernel_rem_pio2+0x55c>
 8021f6a:	4602      	mov	r2, r0
 8021f6c:	460b      	mov	r3, r1
 8021f6e:	e7c5      	b.n	8021efc <__kernel_rem_pio2+0x56c>
 8021f70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8021f74:	f7de f994 	bl	80002a0 <__adddf3>
 8021f78:	3401      	adds	r4, #1
 8021f7a:	e7ca      	b.n	8021f12 <__kernel_rem_pio2+0x582>
 8021f7c:	e9da 8900 	ldrd	r8, r9, [sl]
 8021f80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8021f84:	9b02      	ldr	r3, [sp, #8]
 8021f86:	3b01      	subs	r3, #1
 8021f88:	9302      	str	r3, [sp, #8]
 8021f8a:	4632      	mov	r2, r6
 8021f8c:	463b      	mov	r3, r7
 8021f8e:	4640      	mov	r0, r8
 8021f90:	4649      	mov	r1, r9
 8021f92:	f7de f985 	bl	80002a0 <__adddf3>
 8021f96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021f9a:	4602      	mov	r2, r0
 8021f9c:	460b      	mov	r3, r1
 8021f9e:	4640      	mov	r0, r8
 8021fa0:	4649      	mov	r1, r9
 8021fa2:	f7de f97b 	bl	800029c <__aeabi_dsub>
 8021fa6:	4632      	mov	r2, r6
 8021fa8:	463b      	mov	r3, r7
 8021faa:	f7de f979 	bl	80002a0 <__adddf3>
 8021fae:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021fb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021fb6:	ed8a 7b00 	vstr	d7, [sl]
 8021fba:	e76e      	b.n	8021e9a <__kernel_rem_pio2+0x50a>
 8021fbc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8021fc0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8021fc4:	4640      	mov	r0, r8
 8021fc6:	4632      	mov	r2, r6
 8021fc8:	463b      	mov	r3, r7
 8021fca:	4649      	mov	r1, r9
 8021fcc:	f7de f968 	bl	80002a0 <__adddf3>
 8021fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021fd4:	4602      	mov	r2, r0
 8021fd6:	460b      	mov	r3, r1
 8021fd8:	4640      	mov	r0, r8
 8021fda:	4649      	mov	r1, r9
 8021fdc:	f7de f95e 	bl	800029c <__aeabi_dsub>
 8021fe0:	4632      	mov	r2, r6
 8021fe2:	463b      	mov	r3, r7
 8021fe4:	f7de f95c 	bl	80002a0 <__adddf3>
 8021fe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021fec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8021ff0:	ed84 7b00 	vstr	d7, [r4]
 8021ff4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8021ff8:	e755      	b.n	8021ea6 <__kernel_rem_pio2+0x516>
 8021ffa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8021ffe:	f7de f94f 	bl	80002a0 <__adddf3>
 8022002:	3d01      	subs	r5, #1
 8022004:	e759      	b.n	8021eba <__kernel_rem_pio2+0x52a>
 8022006:	9b01      	ldr	r3, [sp, #4]
 8022008:	9a01      	ldr	r2, [sp, #4]
 802200a:	601d      	str	r5, [r3, #0]
 802200c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8022010:	605c      	str	r4, [r3, #4]
 8022012:	609f      	str	r7, [r3, #8]
 8022014:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8022018:	60d3      	str	r3, [r2, #12]
 802201a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802201e:	6110      	str	r0, [r2, #16]
 8022020:	6153      	str	r3, [r2, #20]
 8022022:	e728      	b.n	8021e76 <__kernel_rem_pio2+0x4e6>
 8022024:	41700000 	.word	0x41700000
 8022028:	3e700000 	.word	0x3e700000
 802202c:	00000000 	.word	0x00000000

08022030 <__kernel_sin>:
 8022030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022034:	ed2d 8b04 	vpush	{d8-d9}
 8022038:	eeb0 8a41 	vmov.f32	s16, s2
 802203c:	eef0 8a61 	vmov.f32	s17, s3
 8022040:	ec55 4b10 	vmov	r4, r5, d0
 8022044:	b083      	sub	sp, #12
 8022046:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802204a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802204e:	9001      	str	r0, [sp, #4]
 8022050:	da06      	bge.n	8022060 <__kernel_sin+0x30>
 8022052:	ee10 0a10 	vmov	r0, s0
 8022056:	4629      	mov	r1, r5
 8022058:	f7de fd88 	bl	8000b6c <__aeabi_d2iz>
 802205c:	2800      	cmp	r0, #0
 802205e:	d051      	beq.n	8022104 <__kernel_sin+0xd4>
 8022060:	4622      	mov	r2, r4
 8022062:	462b      	mov	r3, r5
 8022064:	4620      	mov	r0, r4
 8022066:	4629      	mov	r1, r5
 8022068:	f7de fad0 	bl	800060c <__aeabi_dmul>
 802206c:	4682      	mov	sl, r0
 802206e:	468b      	mov	fp, r1
 8022070:	4602      	mov	r2, r0
 8022072:	460b      	mov	r3, r1
 8022074:	4620      	mov	r0, r4
 8022076:	4629      	mov	r1, r5
 8022078:	f7de fac8 	bl	800060c <__aeabi_dmul>
 802207c:	a341      	add	r3, pc, #260	; (adr r3, 8022184 <__kernel_sin+0x154>)
 802207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022082:	4680      	mov	r8, r0
 8022084:	4689      	mov	r9, r1
 8022086:	4650      	mov	r0, sl
 8022088:	4659      	mov	r1, fp
 802208a:	f7de fabf 	bl	800060c <__aeabi_dmul>
 802208e:	a33f      	add	r3, pc, #252	; (adr r3, 802218c <__kernel_sin+0x15c>)
 8022090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022094:	f7de f902 	bl	800029c <__aeabi_dsub>
 8022098:	4652      	mov	r2, sl
 802209a:	465b      	mov	r3, fp
 802209c:	f7de fab6 	bl	800060c <__aeabi_dmul>
 80220a0:	a33c      	add	r3, pc, #240	; (adr r3, 8022194 <__kernel_sin+0x164>)
 80220a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220a6:	f7de f8fb 	bl	80002a0 <__adddf3>
 80220aa:	4652      	mov	r2, sl
 80220ac:	465b      	mov	r3, fp
 80220ae:	f7de faad 	bl	800060c <__aeabi_dmul>
 80220b2:	a33a      	add	r3, pc, #232	; (adr r3, 802219c <__kernel_sin+0x16c>)
 80220b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220b8:	f7de f8f0 	bl	800029c <__aeabi_dsub>
 80220bc:	4652      	mov	r2, sl
 80220be:	465b      	mov	r3, fp
 80220c0:	f7de faa4 	bl	800060c <__aeabi_dmul>
 80220c4:	a337      	add	r3, pc, #220	; (adr r3, 80221a4 <__kernel_sin+0x174>)
 80220c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220ca:	f7de f8e9 	bl	80002a0 <__adddf3>
 80220ce:	9b01      	ldr	r3, [sp, #4]
 80220d0:	4606      	mov	r6, r0
 80220d2:	460f      	mov	r7, r1
 80220d4:	b9eb      	cbnz	r3, 8022112 <__kernel_sin+0xe2>
 80220d6:	4602      	mov	r2, r0
 80220d8:	460b      	mov	r3, r1
 80220da:	4650      	mov	r0, sl
 80220dc:	4659      	mov	r1, fp
 80220de:	f7de fa95 	bl	800060c <__aeabi_dmul>
 80220e2:	a325      	add	r3, pc, #148	; (adr r3, 8022178 <__kernel_sin+0x148>)
 80220e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220e8:	f7de f8d8 	bl	800029c <__aeabi_dsub>
 80220ec:	4642      	mov	r2, r8
 80220ee:	464b      	mov	r3, r9
 80220f0:	f7de fa8c 	bl	800060c <__aeabi_dmul>
 80220f4:	4602      	mov	r2, r0
 80220f6:	460b      	mov	r3, r1
 80220f8:	4620      	mov	r0, r4
 80220fa:	4629      	mov	r1, r5
 80220fc:	f7de f8d0 	bl	80002a0 <__adddf3>
 8022100:	4604      	mov	r4, r0
 8022102:	460d      	mov	r5, r1
 8022104:	ec45 4b10 	vmov	d0, r4, r5
 8022108:	b003      	add	sp, #12
 802210a:	ecbd 8b04 	vpop	{d8-d9}
 802210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022112:	4b1b      	ldr	r3, [pc, #108]	; (8022180 <__kernel_sin+0x150>)
 8022114:	ec51 0b18 	vmov	r0, r1, d8
 8022118:	2200      	movs	r2, #0
 802211a:	f7de fa77 	bl	800060c <__aeabi_dmul>
 802211e:	4632      	mov	r2, r6
 8022120:	ec41 0b19 	vmov	d9, r0, r1
 8022124:	463b      	mov	r3, r7
 8022126:	4640      	mov	r0, r8
 8022128:	4649      	mov	r1, r9
 802212a:	f7de fa6f 	bl	800060c <__aeabi_dmul>
 802212e:	4602      	mov	r2, r0
 8022130:	460b      	mov	r3, r1
 8022132:	ec51 0b19 	vmov	r0, r1, d9
 8022136:	f7de f8b1 	bl	800029c <__aeabi_dsub>
 802213a:	4652      	mov	r2, sl
 802213c:	465b      	mov	r3, fp
 802213e:	f7de fa65 	bl	800060c <__aeabi_dmul>
 8022142:	ec53 2b18 	vmov	r2, r3, d8
 8022146:	f7de f8a9 	bl	800029c <__aeabi_dsub>
 802214a:	a30b      	add	r3, pc, #44	; (adr r3, 8022178 <__kernel_sin+0x148>)
 802214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022150:	4606      	mov	r6, r0
 8022152:	460f      	mov	r7, r1
 8022154:	4640      	mov	r0, r8
 8022156:	4649      	mov	r1, r9
 8022158:	f7de fa58 	bl	800060c <__aeabi_dmul>
 802215c:	4602      	mov	r2, r0
 802215e:	460b      	mov	r3, r1
 8022160:	4630      	mov	r0, r6
 8022162:	4639      	mov	r1, r7
 8022164:	f7de f89c 	bl	80002a0 <__adddf3>
 8022168:	4602      	mov	r2, r0
 802216a:	460b      	mov	r3, r1
 802216c:	4620      	mov	r0, r4
 802216e:	4629      	mov	r1, r5
 8022170:	f7de f894 	bl	800029c <__aeabi_dsub>
 8022174:	e7c4      	b.n	8022100 <__kernel_sin+0xd0>
 8022176:	bf00      	nop
 8022178:	55555549 	.word	0x55555549
 802217c:	3fc55555 	.word	0x3fc55555
 8022180:	3fe00000 	.word	0x3fe00000
 8022184:	5acfd57c 	.word	0x5acfd57c
 8022188:	3de5d93a 	.word	0x3de5d93a
 802218c:	8a2b9ceb 	.word	0x8a2b9ceb
 8022190:	3e5ae5e6 	.word	0x3e5ae5e6
 8022194:	57b1fe7d 	.word	0x57b1fe7d
 8022198:	3ec71de3 	.word	0x3ec71de3
 802219c:	19c161d5 	.word	0x19c161d5
 80221a0:	3f2a01a0 	.word	0x3f2a01a0
 80221a4:	1110f8a6 	.word	0x1110f8a6
 80221a8:	3f811111 	.word	0x3f811111
 80221ac:	00000000 	.word	0x00000000

080221b0 <__kernel_tan>:
 80221b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221b4:	ed2d 8b06 	vpush	{d8-d10}
 80221b8:	ec5b ab10 	vmov	sl, fp, d0
 80221bc:	4be0      	ldr	r3, [pc, #896]	; (8022540 <__kernel_tan+0x390>)
 80221be:	b083      	sub	sp, #12
 80221c0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80221c4:	429f      	cmp	r7, r3
 80221c6:	ec59 8b11 	vmov	r8, r9, d1
 80221ca:	4606      	mov	r6, r0
 80221cc:	f8cd b000 	str.w	fp, [sp]
 80221d0:	dc61      	bgt.n	8022296 <__kernel_tan+0xe6>
 80221d2:	ee10 0a10 	vmov	r0, s0
 80221d6:	4659      	mov	r1, fp
 80221d8:	f7de fcc8 	bl	8000b6c <__aeabi_d2iz>
 80221dc:	4605      	mov	r5, r0
 80221de:	2800      	cmp	r0, #0
 80221e0:	f040 8083 	bne.w	80222ea <__kernel_tan+0x13a>
 80221e4:	1c73      	adds	r3, r6, #1
 80221e6:	4652      	mov	r2, sl
 80221e8:	4313      	orrs	r3, r2
 80221ea:	433b      	orrs	r3, r7
 80221ec:	d112      	bne.n	8022214 <__kernel_tan+0x64>
 80221ee:	ec4b ab10 	vmov	d0, sl, fp
 80221f2:	f000 fa39 	bl	8022668 <fabs>
 80221f6:	49d3      	ldr	r1, [pc, #844]	; (8022544 <__kernel_tan+0x394>)
 80221f8:	ec53 2b10 	vmov	r2, r3, d0
 80221fc:	2000      	movs	r0, #0
 80221fe:	f7de fb2f 	bl	8000860 <__aeabi_ddiv>
 8022202:	4682      	mov	sl, r0
 8022204:	468b      	mov	fp, r1
 8022206:	ec4b ab10 	vmov	d0, sl, fp
 802220a:	b003      	add	sp, #12
 802220c:	ecbd 8b06 	vpop	{d8-d10}
 8022210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022214:	2e01      	cmp	r6, #1
 8022216:	d0f6      	beq.n	8022206 <__kernel_tan+0x56>
 8022218:	4642      	mov	r2, r8
 802221a:	464b      	mov	r3, r9
 802221c:	4650      	mov	r0, sl
 802221e:	4659      	mov	r1, fp
 8022220:	f7de f83e 	bl	80002a0 <__adddf3>
 8022224:	4602      	mov	r2, r0
 8022226:	460b      	mov	r3, r1
 8022228:	460f      	mov	r7, r1
 802222a:	2000      	movs	r0, #0
 802222c:	49c6      	ldr	r1, [pc, #792]	; (8022548 <__kernel_tan+0x398>)
 802222e:	f7de fb17 	bl	8000860 <__aeabi_ddiv>
 8022232:	e9cd 0100 	strd	r0, r1, [sp]
 8022236:	e9dd 2300 	ldrd	r2, r3, [sp]
 802223a:	462e      	mov	r6, r5
 802223c:	4652      	mov	r2, sl
 802223e:	462c      	mov	r4, r5
 8022240:	4630      	mov	r0, r6
 8022242:	461d      	mov	r5, r3
 8022244:	4639      	mov	r1, r7
 8022246:	465b      	mov	r3, fp
 8022248:	f7de f828 	bl	800029c <__aeabi_dsub>
 802224c:	4602      	mov	r2, r0
 802224e:	460b      	mov	r3, r1
 8022250:	4640      	mov	r0, r8
 8022252:	4649      	mov	r1, r9
 8022254:	f7de f822 	bl	800029c <__aeabi_dsub>
 8022258:	4632      	mov	r2, r6
 802225a:	462b      	mov	r3, r5
 802225c:	f7de f9d6 	bl	800060c <__aeabi_dmul>
 8022260:	4632      	mov	r2, r6
 8022262:	4680      	mov	r8, r0
 8022264:	4689      	mov	r9, r1
 8022266:	462b      	mov	r3, r5
 8022268:	4630      	mov	r0, r6
 802226a:	4639      	mov	r1, r7
 802226c:	f7de f9ce 	bl	800060c <__aeabi_dmul>
 8022270:	4bb4      	ldr	r3, [pc, #720]	; (8022544 <__kernel_tan+0x394>)
 8022272:	2200      	movs	r2, #0
 8022274:	f7de f814 	bl	80002a0 <__adddf3>
 8022278:	4602      	mov	r2, r0
 802227a:	460b      	mov	r3, r1
 802227c:	4640      	mov	r0, r8
 802227e:	4649      	mov	r1, r9
 8022280:	f7de f80e 	bl	80002a0 <__adddf3>
 8022284:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022288:	f7de f9c0 	bl	800060c <__aeabi_dmul>
 802228c:	4622      	mov	r2, r4
 802228e:	462b      	mov	r3, r5
 8022290:	f7de f806 	bl	80002a0 <__adddf3>
 8022294:	e7b5      	b.n	8022202 <__kernel_tan+0x52>
 8022296:	4bad      	ldr	r3, [pc, #692]	; (802254c <__kernel_tan+0x39c>)
 8022298:	429f      	cmp	r7, r3
 802229a:	dd26      	ble.n	80222ea <__kernel_tan+0x13a>
 802229c:	9b00      	ldr	r3, [sp, #0]
 802229e:	2b00      	cmp	r3, #0
 80222a0:	da09      	bge.n	80222b6 <__kernel_tan+0x106>
 80222a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80222a6:	469b      	mov	fp, r3
 80222a8:	ee10 aa10 	vmov	sl, s0
 80222ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80222b0:	ee11 8a10 	vmov	r8, s2
 80222b4:	4699      	mov	r9, r3
 80222b6:	4652      	mov	r2, sl
 80222b8:	465b      	mov	r3, fp
 80222ba:	a183      	add	r1, pc, #524	; (adr r1, 80224c8 <__kernel_tan+0x318>)
 80222bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80222c0:	f7dd ffec 	bl	800029c <__aeabi_dsub>
 80222c4:	4642      	mov	r2, r8
 80222c6:	464b      	mov	r3, r9
 80222c8:	4604      	mov	r4, r0
 80222ca:	460d      	mov	r5, r1
 80222cc:	a180      	add	r1, pc, #512	; (adr r1, 80224d0 <__kernel_tan+0x320>)
 80222ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80222d2:	f7dd ffe3 	bl	800029c <__aeabi_dsub>
 80222d6:	4622      	mov	r2, r4
 80222d8:	462b      	mov	r3, r5
 80222da:	f7dd ffe1 	bl	80002a0 <__adddf3>
 80222de:	f04f 0800 	mov.w	r8, #0
 80222e2:	4682      	mov	sl, r0
 80222e4:	468b      	mov	fp, r1
 80222e6:	f04f 0900 	mov.w	r9, #0
 80222ea:	4652      	mov	r2, sl
 80222ec:	465b      	mov	r3, fp
 80222ee:	4650      	mov	r0, sl
 80222f0:	4659      	mov	r1, fp
 80222f2:	f7de f98b 	bl	800060c <__aeabi_dmul>
 80222f6:	4602      	mov	r2, r0
 80222f8:	460b      	mov	r3, r1
 80222fa:	ec43 2b18 	vmov	d8, r2, r3
 80222fe:	f7de f985 	bl	800060c <__aeabi_dmul>
 8022302:	ec53 2b18 	vmov	r2, r3, d8
 8022306:	4604      	mov	r4, r0
 8022308:	460d      	mov	r5, r1
 802230a:	4650      	mov	r0, sl
 802230c:	4659      	mov	r1, fp
 802230e:	f7de f97d 	bl	800060c <__aeabi_dmul>
 8022312:	a371      	add	r3, pc, #452	; (adr r3, 80224d8 <__kernel_tan+0x328>)
 8022314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022318:	ec41 0b19 	vmov	d9, r0, r1
 802231c:	4620      	mov	r0, r4
 802231e:	4629      	mov	r1, r5
 8022320:	f7de f974 	bl	800060c <__aeabi_dmul>
 8022324:	a36e      	add	r3, pc, #440	; (adr r3, 80224e0 <__kernel_tan+0x330>)
 8022326:	e9d3 2300 	ldrd	r2, r3, [r3]
 802232a:	f7dd ffb9 	bl	80002a0 <__adddf3>
 802232e:	4622      	mov	r2, r4
 8022330:	462b      	mov	r3, r5
 8022332:	f7de f96b 	bl	800060c <__aeabi_dmul>
 8022336:	a36c      	add	r3, pc, #432	; (adr r3, 80224e8 <__kernel_tan+0x338>)
 8022338:	e9d3 2300 	ldrd	r2, r3, [r3]
 802233c:	f7dd ffb0 	bl	80002a0 <__adddf3>
 8022340:	4622      	mov	r2, r4
 8022342:	462b      	mov	r3, r5
 8022344:	f7de f962 	bl	800060c <__aeabi_dmul>
 8022348:	a369      	add	r3, pc, #420	; (adr r3, 80224f0 <__kernel_tan+0x340>)
 802234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802234e:	f7dd ffa7 	bl	80002a0 <__adddf3>
 8022352:	4622      	mov	r2, r4
 8022354:	462b      	mov	r3, r5
 8022356:	f7de f959 	bl	800060c <__aeabi_dmul>
 802235a:	a367      	add	r3, pc, #412	; (adr r3, 80224f8 <__kernel_tan+0x348>)
 802235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022360:	f7dd ff9e 	bl	80002a0 <__adddf3>
 8022364:	4622      	mov	r2, r4
 8022366:	462b      	mov	r3, r5
 8022368:	f7de f950 	bl	800060c <__aeabi_dmul>
 802236c:	a364      	add	r3, pc, #400	; (adr r3, 8022500 <__kernel_tan+0x350>)
 802236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022372:	f7dd ff95 	bl	80002a0 <__adddf3>
 8022376:	ec53 2b18 	vmov	r2, r3, d8
 802237a:	f7de f947 	bl	800060c <__aeabi_dmul>
 802237e:	a362      	add	r3, pc, #392	; (adr r3, 8022508 <__kernel_tan+0x358>)
 8022380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022384:	ec41 0b1a 	vmov	d10, r0, r1
 8022388:	4620      	mov	r0, r4
 802238a:	4629      	mov	r1, r5
 802238c:	f7de f93e 	bl	800060c <__aeabi_dmul>
 8022390:	a35f      	add	r3, pc, #380	; (adr r3, 8022510 <__kernel_tan+0x360>)
 8022392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022396:	f7dd ff83 	bl	80002a0 <__adddf3>
 802239a:	4622      	mov	r2, r4
 802239c:	462b      	mov	r3, r5
 802239e:	f7de f935 	bl	800060c <__aeabi_dmul>
 80223a2:	a35d      	add	r3, pc, #372	; (adr r3, 8022518 <__kernel_tan+0x368>)
 80223a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223a8:	f7dd ff7a 	bl	80002a0 <__adddf3>
 80223ac:	4622      	mov	r2, r4
 80223ae:	462b      	mov	r3, r5
 80223b0:	f7de f92c 	bl	800060c <__aeabi_dmul>
 80223b4:	a35a      	add	r3, pc, #360	; (adr r3, 8022520 <__kernel_tan+0x370>)
 80223b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223ba:	f7dd ff71 	bl	80002a0 <__adddf3>
 80223be:	4622      	mov	r2, r4
 80223c0:	462b      	mov	r3, r5
 80223c2:	f7de f923 	bl	800060c <__aeabi_dmul>
 80223c6:	a358      	add	r3, pc, #352	; (adr r3, 8022528 <__kernel_tan+0x378>)
 80223c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223cc:	f7dd ff68 	bl	80002a0 <__adddf3>
 80223d0:	4622      	mov	r2, r4
 80223d2:	462b      	mov	r3, r5
 80223d4:	f7de f91a 	bl	800060c <__aeabi_dmul>
 80223d8:	a355      	add	r3, pc, #340	; (adr r3, 8022530 <__kernel_tan+0x380>)
 80223da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223de:	f7dd ff5f 	bl	80002a0 <__adddf3>
 80223e2:	4602      	mov	r2, r0
 80223e4:	460b      	mov	r3, r1
 80223e6:	ec51 0b1a 	vmov	r0, r1, d10
 80223ea:	f7dd ff59 	bl	80002a0 <__adddf3>
 80223ee:	ec53 2b19 	vmov	r2, r3, d9
 80223f2:	f7de f90b 	bl	800060c <__aeabi_dmul>
 80223f6:	4642      	mov	r2, r8
 80223f8:	464b      	mov	r3, r9
 80223fa:	f7dd ff51 	bl	80002a0 <__adddf3>
 80223fe:	ec53 2b18 	vmov	r2, r3, d8
 8022402:	f7de f903 	bl	800060c <__aeabi_dmul>
 8022406:	4642      	mov	r2, r8
 8022408:	464b      	mov	r3, r9
 802240a:	f7dd ff49 	bl	80002a0 <__adddf3>
 802240e:	a34a      	add	r3, pc, #296	; (adr r3, 8022538 <__kernel_tan+0x388>)
 8022410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022414:	4604      	mov	r4, r0
 8022416:	460d      	mov	r5, r1
 8022418:	ec51 0b19 	vmov	r0, r1, d9
 802241c:	f7de f8f6 	bl	800060c <__aeabi_dmul>
 8022420:	4622      	mov	r2, r4
 8022422:	462b      	mov	r3, r5
 8022424:	f7dd ff3c 	bl	80002a0 <__adddf3>
 8022428:	460b      	mov	r3, r1
 802242a:	ec41 0b18 	vmov	d8, r0, r1
 802242e:	4602      	mov	r2, r0
 8022430:	4659      	mov	r1, fp
 8022432:	4650      	mov	r0, sl
 8022434:	f7dd ff34 	bl	80002a0 <__adddf3>
 8022438:	4b44      	ldr	r3, [pc, #272]	; (802254c <__kernel_tan+0x39c>)
 802243a:	429f      	cmp	r7, r3
 802243c:	4604      	mov	r4, r0
 802243e:	460d      	mov	r5, r1
 8022440:	f340 8086 	ble.w	8022550 <__kernel_tan+0x3a0>
 8022444:	4630      	mov	r0, r6
 8022446:	f7de f877 	bl	8000538 <__aeabi_i2d>
 802244a:	4622      	mov	r2, r4
 802244c:	4680      	mov	r8, r0
 802244e:	4689      	mov	r9, r1
 8022450:	462b      	mov	r3, r5
 8022452:	4620      	mov	r0, r4
 8022454:	4629      	mov	r1, r5
 8022456:	f7de f8d9 	bl	800060c <__aeabi_dmul>
 802245a:	4642      	mov	r2, r8
 802245c:	4606      	mov	r6, r0
 802245e:	460f      	mov	r7, r1
 8022460:	464b      	mov	r3, r9
 8022462:	4620      	mov	r0, r4
 8022464:	4629      	mov	r1, r5
 8022466:	f7dd ff1b 	bl	80002a0 <__adddf3>
 802246a:	4602      	mov	r2, r0
 802246c:	460b      	mov	r3, r1
 802246e:	4630      	mov	r0, r6
 8022470:	4639      	mov	r1, r7
 8022472:	f7de f9f5 	bl	8000860 <__aeabi_ddiv>
 8022476:	ec53 2b18 	vmov	r2, r3, d8
 802247a:	f7dd ff0f 	bl	800029c <__aeabi_dsub>
 802247e:	4602      	mov	r2, r0
 8022480:	460b      	mov	r3, r1
 8022482:	4650      	mov	r0, sl
 8022484:	4659      	mov	r1, fp
 8022486:	f7dd ff09 	bl	800029c <__aeabi_dsub>
 802248a:	4602      	mov	r2, r0
 802248c:	460b      	mov	r3, r1
 802248e:	f7dd ff07 	bl	80002a0 <__adddf3>
 8022492:	4602      	mov	r2, r0
 8022494:	460b      	mov	r3, r1
 8022496:	4640      	mov	r0, r8
 8022498:	4649      	mov	r1, r9
 802249a:	f7dd feff 	bl	800029c <__aeabi_dsub>
 802249e:	9b00      	ldr	r3, [sp, #0]
 80224a0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80224a4:	f00a 0a02 	and.w	sl, sl, #2
 80224a8:	4604      	mov	r4, r0
 80224aa:	f1ca 0001 	rsb	r0, sl, #1
 80224ae:	460d      	mov	r5, r1
 80224b0:	f7de f842 	bl	8000538 <__aeabi_i2d>
 80224b4:	4602      	mov	r2, r0
 80224b6:	460b      	mov	r3, r1
 80224b8:	4620      	mov	r0, r4
 80224ba:	4629      	mov	r1, r5
 80224bc:	f7de f8a6 	bl	800060c <__aeabi_dmul>
 80224c0:	e69f      	b.n	8022202 <__kernel_tan+0x52>
 80224c2:	bf00      	nop
 80224c4:	f3af 8000 	nop.w
 80224c8:	54442d18 	.word	0x54442d18
 80224cc:	3fe921fb 	.word	0x3fe921fb
 80224d0:	33145c07 	.word	0x33145c07
 80224d4:	3c81a626 	.word	0x3c81a626
 80224d8:	74bf7ad4 	.word	0x74bf7ad4
 80224dc:	3efb2a70 	.word	0x3efb2a70
 80224e0:	32f0a7e9 	.word	0x32f0a7e9
 80224e4:	3f12b80f 	.word	0x3f12b80f
 80224e8:	1a8d1068 	.word	0x1a8d1068
 80224ec:	3f3026f7 	.word	0x3f3026f7
 80224f0:	fee08315 	.word	0xfee08315
 80224f4:	3f57dbc8 	.word	0x3f57dbc8
 80224f8:	e96e8493 	.word	0xe96e8493
 80224fc:	3f8226e3 	.word	0x3f8226e3
 8022500:	1bb341fe 	.word	0x1bb341fe
 8022504:	3faba1ba 	.word	0x3faba1ba
 8022508:	db605373 	.word	0xdb605373
 802250c:	bef375cb 	.word	0xbef375cb
 8022510:	a03792a6 	.word	0xa03792a6
 8022514:	3f147e88 	.word	0x3f147e88
 8022518:	f2f26501 	.word	0xf2f26501
 802251c:	3f4344d8 	.word	0x3f4344d8
 8022520:	c9560328 	.word	0xc9560328
 8022524:	3f6d6d22 	.word	0x3f6d6d22
 8022528:	8406d637 	.word	0x8406d637
 802252c:	3f9664f4 	.word	0x3f9664f4
 8022530:	1110fe7a 	.word	0x1110fe7a
 8022534:	3fc11111 	.word	0x3fc11111
 8022538:	55555563 	.word	0x55555563
 802253c:	3fd55555 	.word	0x3fd55555
 8022540:	3e2fffff 	.word	0x3e2fffff
 8022544:	3ff00000 	.word	0x3ff00000
 8022548:	bff00000 	.word	0xbff00000
 802254c:	3fe59427 	.word	0x3fe59427
 8022550:	2e01      	cmp	r6, #1
 8022552:	d02f      	beq.n	80225b4 <__kernel_tan+0x404>
 8022554:	460f      	mov	r7, r1
 8022556:	4602      	mov	r2, r0
 8022558:	460b      	mov	r3, r1
 802255a:	4689      	mov	r9, r1
 802255c:	2000      	movs	r0, #0
 802255e:	4917      	ldr	r1, [pc, #92]	; (80225bc <__kernel_tan+0x40c>)
 8022560:	f7de f97e 	bl	8000860 <__aeabi_ddiv>
 8022564:	2600      	movs	r6, #0
 8022566:	e9cd 0100 	strd	r0, r1, [sp]
 802256a:	4652      	mov	r2, sl
 802256c:	465b      	mov	r3, fp
 802256e:	4630      	mov	r0, r6
 8022570:	4639      	mov	r1, r7
 8022572:	f7dd fe93 	bl	800029c <__aeabi_dsub>
 8022576:	e9dd 4500 	ldrd	r4, r5, [sp]
 802257a:	4602      	mov	r2, r0
 802257c:	460b      	mov	r3, r1
 802257e:	ec51 0b18 	vmov	r0, r1, d8
 8022582:	f7dd fe8b 	bl	800029c <__aeabi_dsub>
 8022586:	4632      	mov	r2, r6
 8022588:	462b      	mov	r3, r5
 802258a:	f7de f83f 	bl	800060c <__aeabi_dmul>
 802258e:	46b0      	mov	r8, r6
 8022590:	460f      	mov	r7, r1
 8022592:	4642      	mov	r2, r8
 8022594:	462b      	mov	r3, r5
 8022596:	4634      	mov	r4, r6
 8022598:	4649      	mov	r1, r9
 802259a:	4606      	mov	r6, r0
 802259c:	4640      	mov	r0, r8
 802259e:	f7de f835 	bl	800060c <__aeabi_dmul>
 80225a2:	4b07      	ldr	r3, [pc, #28]	; (80225c0 <__kernel_tan+0x410>)
 80225a4:	2200      	movs	r2, #0
 80225a6:	f7dd fe7b 	bl	80002a0 <__adddf3>
 80225aa:	4602      	mov	r2, r0
 80225ac:	460b      	mov	r3, r1
 80225ae:	4630      	mov	r0, r6
 80225b0:	4639      	mov	r1, r7
 80225b2:	e665      	b.n	8022280 <__kernel_tan+0xd0>
 80225b4:	4682      	mov	sl, r0
 80225b6:	468b      	mov	fp, r1
 80225b8:	e625      	b.n	8022206 <__kernel_tan+0x56>
 80225ba:	bf00      	nop
 80225bc:	bff00000 	.word	0xbff00000
 80225c0:	3ff00000 	.word	0x3ff00000

080225c4 <with_errno>:
 80225c4:	b570      	push	{r4, r5, r6, lr}
 80225c6:	4604      	mov	r4, r0
 80225c8:	460d      	mov	r5, r1
 80225ca:	4616      	mov	r6, r2
 80225cc:	f000 f934 	bl	8022838 <__errno>
 80225d0:	4629      	mov	r1, r5
 80225d2:	6006      	str	r6, [r0, #0]
 80225d4:	4620      	mov	r0, r4
 80225d6:	bd70      	pop	{r4, r5, r6, pc}

080225d8 <xflow>:
 80225d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80225da:	4614      	mov	r4, r2
 80225dc:	461d      	mov	r5, r3
 80225de:	b108      	cbz	r0, 80225e4 <xflow+0xc>
 80225e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80225e4:	e9cd 2300 	strd	r2, r3, [sp]
 80225e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80225ec:	4620      	mov	r0, r4
 80225ee:	4629      	mov	r1, r5
 80225f0:	f7de f80c 	bl	800060c <__aeabi_dmul>
 80225f4:	2222      	movs	r2, #34	; 0x22
 80225f6:	b003      	add	sp, #12
 80225f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80225fc:	f7ff bfe2 	b.w	80225c4 <with_errno>

08022600 <__math_uflow>:
 8022600:	b508      	push	{r3, lr}
 8022602:	2200      	movs	r2, #0
 8022604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8022608:	f7ff ffe6 	bl	80225d8 <xflow>
 802260c:	ec41 0b10 	vmov	d0, r0, r1
 8022610:	bd08      	pop	{r3, pc}

08022612 <__math_oflow>:
 8022612:	b508      	push	{r3, lr}
 8022614:	2200      	movs	r2, #0
 8022616:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802261a:	f7ff ffdd 	bl	80225d8 <xflow>
 802261e:	ec41 0b10 	vmov	d0, r0, r1
 8022622:	bd08      	pop	{r3, pc}

08022624 <with_errnof>:
 8022624:	b513      	push	{r0, r1, r4, lr}
 8022626:	4604      	mov	r4, r0
 8022628:	ed8d 0a01 	vstr	s0, [sp, #4]
 802262c:	f000 f904 	bl	8022838 <__errno>
 8022630:	ed9d 0a01 	vldr	s0, [sp, #4]
 8022634:	6004      	str	r4, [r0, #0]
 8022636:	b002      	add	sp, #8
 8022638:	bd10      	pop	{r4, pc}

0802263a <xflowf>:
 802263a:	b130      	cbz	r0, 802264a <xflowf+0x10>
 802263c:	eef1 7a40 	vneg.f32	s15, s0
 8022640:	ee27 0a80 	vmul.f32	s0, s15, s0
 8022644:	2022      	movs	r0, #34	; 0x22
 8022646:	f7ff bfed 	b.w	8022624 <with_errnof>
 802264a:	eef0 7a40 	vmov.f32	s15, s0
 802264e:	e7f7      	b.n	8022640 <xflowf+0x6>

08022650 <__math_uflowf>:
 8022650:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8022658 <__math_uflowf+0x8>
 8022654:	f7ff bff1 	b.w	802263a <xflowf>
 8022658:	10000000 	.word	0x10000000

0802265c <__math_oflowf>:
 802265c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8022664 <__math_oflowf+0x8>
 8022660:	f7ff bfeb 	b.w	802263a <xflowf>
 8022664:	70000000 	.word	0x70000000

08022668 <fabs>:
 8022668:	ec51 0b10 	vmov	r0, r1, d0
 802266c:	ee10 2a10 	vmov	r2, s0
 8022670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022674:	ec43 2b10 	vmov	d0, r2, r3
 8022678:	4770      	bx	lr

0802267a <finite>:
 802267a:	b082      	sub	sp, #8
 802267c:	ed8d 0b00 	vstr	d0, [sp]
 8022680:	9801      	ldr	r0, [sp, #4]
 8022682:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8022686:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802268a:	0fc0      	lsrs	r0, r0, #31
 802268c:	b002      	add	sp, #8
 802268e:	4770      	bx	lr

08022690 <nan>:
 8022690:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022698 <nan+0x8>
 8022694:	4770      	bx	lr
 8022696:	bf00      	nop
 8022698:	00000000 	.word	0x00000000
 802269c:	7ff80000 	.word	0x7ff80000

080226a0 <scalbn>:
 80226a0:	b570      	push	{r4, r5, r6, lr}
 80226a2:	ec55 4b10 	vmov	r4, r5, d0
 80226a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80226aa:	4606      	mov	r6, r0
 80226ac:	462b      	mov	r3, r5
 80226ae:	b99a      	cbnz	r2, 80226d8 <scalbn+0x38>
 80226b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80226b4:	4323      	orrs	r3, r4
 80226b6:	d036      	beq.n	8022726 <scalbn+0x86>
 80226b8:	4b39      	ldr	r3, [pc, #228]	; (80227a0 <scalbn+0x100>)
 80226ba:	4629      	mov	r1, r5
 80226bc:	ee10 0a10 	vmov	r0, s0
 80226c0:	2200      	movs	r2, #0
 80226c2:	f7dd ffa3 	bl	800060c <__aeabi_dmul>
 80226c6:	4b37      	ldr	r3, [pc, #220]	; (80227a4 <scalbn+0x104>)
 80226c8:	429e      	cmp	r6, r3
 80226ca:	4604      	mov	r4, r0
 80226cc:	460d      	mov	r5, r1
 80226ce:	da10      	bge.n	80226f2 <scalbn+0x52>
 80226d0:	a32b      	add	r3, pc, #172	; (adr r3, 8022780 <scalbn+0xe0>)
 80226d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226d6:	e03a      	b.n	802274e <scalbn+0xae>
 80226d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80226dc:	428a      	cmp	r2, r1
 80226de:	d10c      	bne.n	80226fa <scalbn+0x5a>
 80226e0:	ee10 2a10 	vmov	r2, s0
 80226e4:	4620      	mov	r0, r4
 80226e6:	4629      	mov	r1, r5
 80226e8:	f7dd fdda 	bl	80002a0 <__adddf3>
 80226ec:	4604      	mov	r4, r0
 80226ee:	460d      	mov	r5, r1
 80226f0:	e019      	b.n	8022726 <scalbn+0x86>
 80226f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80226f6:	460b      	mov	r3, r1
 80226f8:	3a36      	subs	r2, #54	; 0x36
 80226fa:	4432      	add	r2, r6
 80226fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8022700:	428a      	cmp	r2, r1
 8022702:	dd08      	ble.n	8022716 <scalbn+0x76>
 8022704:	2d00      	cmp	r5, #0
 8022706:	a120      	add	r1, pc, #128	; (adr r1, 8022788 <scalbn+0xe8>)
 8022708:	e9d1 0100 	ldrd	r0, r1, [r1]
 802270c:	da1c      	bge.n	8022748 <scalbn+0xa8>
 802270e:	a120      	add	r1, pc, #128	; (adr r1, 8022790 <scalbn+0xf0>)
 8022710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022714:	e018      	b.n	8022748 <scalbn+0xa8>
 8022716:	2a00      	cmp	r2, #0
 8022718:	dd08      	ble.n	802272c <scalbn+0x8c>
 802271a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802271e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022722:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022726:	ec45 4b10 	vmov	d0, r4, r5
 802272a:	bd70      	pop	{r4, r5, r6, pc}
 802272c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8022730:	da19      	bge.n	8022766 <scalbn+0xc6>
 8022732:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022736:	429e      	cmp	r6, r3
 8022738:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802273c:	dd0a      	ble.n	8022754 <scalbn+0xb4>
 802273e:	a112      	add	r1, pc, #72	; (adr r1, 8022788 <scalbn+0xe8>)
 8022740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022744:	2b00      	cmp	r3, #0
 8022746:	d1e2      	bne.n	802270e <scalbn+0x6e>
 8022748:	a30f      	add	r3, pc, #60	; (adr r3, 8022788 <scalbn+0xe8>)
 802274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802274e:	f7dd ff5d 	bl	800060c <__aeabi_dmul>
 8022752:	e7cb      	b.n	80226ec <scalbn+0x4c>
 8022754:	a10a      	add	r1, pc, #40	; (adr r1, 8022780 <scalbn+0xe0>)
 8022756:	e9d1 0100 	ldrd	r0, r1, [r1]
 802275a:	2b00      	cmp	r3, #0
 802275c:	d0b8      	beq.n	80226d0 <scalbn+0x30>
 802275e:	a10e      	add	r1, pc, #56	; (adr r1, 8022798 <scalbn+0xf8>)
 8022760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022764:	e7b4      	b.n	80226d0 <scalbn+0x30>
 8022766:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802276a:	3236      	adds	r2, #54	; 0x36
 802276c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022770:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022774:	4620      	mov	r0, r4
 8022776:	4b0c      	ldr	r3, [pc, #48]	; (80227a8 <scalbn+0x108>)
 8022778:	2200      	movs	r2, #0
 802277a:	e7e8      	b.n	802274e <scalbn+0xae>
 802277c:	f3af 8000 	nop.w
 8022780:	c2f8f359 	.word	0xc2f8f359
 8022784:	01a56e1f 	.word	0x01a56e1f
 8022788:	8800759c 	.word	0x8800759c
 802278c:	7e37e43c 	.word	0x7e37e43c
 8022790:	8800759c 	.word	0x8800759c
 8022794:	fe37e43c 	.word	0xfe37e43c
 8022798:	c2f8f359 	.word	0xc2f8f359
 802279c:	81a56e1f 	.word	0x81a56e1f
 80227a0:	43500000 	.word	0x43500000
 80227a4:	ffff3cb0 	.word	0xffff3cb0
 80227a8:	3c900000 	.word	0x3c900000

080227ac <finitef>:
 80227ac:	b082      	sub	sp, #8
 80227ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 80227b2:	9801      	ldr	r0, [sp, #4]
 80227b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80227b8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80227bc:	bfac      	ite	ge
 80227be:	2000      	movge	r0, #0
 80227c0:	2001      	movlt	r0, #1
 80227c2:	b002      	add	sp, #8
 80227c4:	4770      	bx	lr
	...

080227c8 <nanf>:
 80227c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80227d0 <nanf+0x8>
 80227cc:	4770      	bx	lr
 80227ce:	bf00      	nop
 80227d0:	7fc00000 	.word	0x7fc00000

080227d4 <abort>:
 80227d4:	b508      	push	{r3, lr}
 80227d6:	2006      	movs	r0, #6
 80227d8:	f000 fcca 	bl	8023170 <raise>
 80227dc:	2001      	movs	r0, #1
 80227de:	f7e6 f9a5 	bl	8008b2c <_exit>
	...

080227e4 <__assert_func>:
 80227e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80227e6:	4614      	mov	r4, r2
 80227e8:	461a      	mov	r2, r3
 80227ea:	4b09      	ldr	r3, [pc, #36]	; (8022810 <__assert_func+0x2c>)
 80227ec:	681b      	ldr	r3, [r3, #0]
 80227ee:	4605      	mov	r5, r0
 80227f0:	68d8      	ldr	r0, [r3, #12]
 80227f2:	b14c      	cbz	r4, 8022808 <__assert_func+0x24>
 80227f4:	4b07      	ldr	r3, [pc, #28]	; (8022814 <__assert_func+0x30>)
 80227f6:	9100      	str	r1, [sp, #0]
 80227f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80227fc:	4906      	ldr	r1, [pc, #24]	; (8022818 <__assert_func+0x34>)
 80227fe:	462b      	mov	r3, r5
 8022800:	f000 f820 	bl	8022844 <fiprintf>
 8022804:	f7ff ffe6 	bl	80227d4 <abort>
 8022808:	4b04      	ldr	r3, [pc, #16]	; (802281c <__assert_func+0x38>)
 802280a:	461c      	mov	r4, r3
 802280c:	e7f3      	b.n	80227f6 <__assert_func+0x12>
 802280e:	bf00      	nop
 8022810:	20000270 	.word	0x20000270
 8022814:	0802a478 	.word	0x0802a478
 8022818:	0802a485 	.word	0x0802a485
 802281c:	0802a4b3 	.word	0x0802a4b3

08022820 <atof>:
 8022820:	2100      	movs	r1, #0
 8022822:	f001 baf7 	b.w	8023e14 <strtod>
	...

08022828 <calloc>:
 8022828:	4b02      	ldr	r3, [pc, #8]	; (8022834 <calloc+0xc>)
 802282a:	460a      	mov	r2, r1
 802282c:	4601      	mov	r1, r0
 802282e:	6818      	ldr	r0, [r3, #0]
 8022830:	f000 b882 	b.w	8022938 <_calloc_r>
 8022834:	20000270 	.word	0x20000270

08022838 <__errno>:
 8022838:	4b01      	ldr	r3, [pc, #4]	; (8022840 <__errno+0x8>)
 802283a:	6818      	ldr	r0, [r3, #0]
 802283c:	4770      	bx	lr
 802283e:	bf00      	nop
 8022840:	20000270 	.word	0x20000270

08022844 <fiprintf>:
 8022844:	b40e      	push	{r1, r2, r3}
 8022846:	b503      	push	{r0, r1, lr}
 8022848:	4601      	mov	r1, r0
 802284a:	ab03      	add	r3, sp, #12
 802284c:	4805      	ldr	r0, [pc, #20]	; (8022864 <fiprintf+0x20>)
 802284e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022852:	6800      	ldr	r0, [r0, #0]
 8022854:	9301      	str	r3, [sp, #4]
 8022856:	f000 f98f 	bl	8022b78 <_vfiprintf_r>
 802285a:	b002      	add	sp, #8
 802285c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022860:	b003      	add	sp, #12
 8022862:	4770      	bx	lr
 8022864:	20000270 	.word	0x20000270

08022868 <__libc_init_array>:
 8022868:	b570      	push	{r4, r5, r6, lr}
 802286a:	4d0d      	ldr	r5, [pc, #52]	; (80228a0 <__libc_init_array+0x38>)
 802286c:	4c0d      	ldr	r4, [pc, #52]	; (80228a4 <__libc_init_array+0x3c>)
 802286e:	1b64      	subs	r4, r4, r5
 8022870:	10a4      	asrs	r4, r4, #2
 8022872:	2600      	movs	r6, #0
 8022874:	42a6      	cmp	r6, r4
 8022876:	d109      	bne.n	802288c <__libc_init_array+0x24>
 8022878:	4d0b      	ldr	r5, [pc, #44]	; (80228a8 <__libc_init_array+0x40>)
 802287a:	4c0c      	ldr	r4, [pc, #48]	; (80228ac <__libc_init_array+0x44>)
 802287c:	f003 f86c 	bl	8025958 <_init>
 8022880:	1b64      	subs	r4, r4, r5
 8022882:	10a4      	asrs	r4, r4, #2
 8022884:	2600      	movs	r6, #0
 8022886:	42a6      	cmp	r6, r4
 8022888:	d105      	bne.n	8022896 <__libc_init_array+0x2e>
 802288a:	bd70      	pop	{r4, r5, r6, pc}
 802288c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022890:	4798      	blx	r3
 8022892:	3601      	adds	r6, #1
 8022894:	e7ee      	b.n	8022874 <__libc_init_array+0xc>
 8022896:	f855 3b04 	ldr.w	r3, [r5], #4
 802289a:	4798      	blx	r3
 802289c:	3601      	adds	r6, #1
 802289e:	e7f2      	b.n	8022886 <__libc_init_array+0x1e>
 80228a0:	0802a8b4 	.word	0x0802a8b4
 80228a4:	0802a8b4 	.word	0x0802a8b4
 80228a8:	0802a8b4 	.word	0x0802a8b4
 80228ac:	0802a8bc 	.word	0x0802a8bc

080228b0 <__retarget_lock_init_recursive>:
 80228b0:	4770      	bx	lr

080228b2 <__retarget_lock_acquire_recursive>:
 80228b2:	4770      	bx	lr

080228b4 <__retarget_lock_release_recursive>:
 80228b4:	4770      	bx	lr
	...

080228b8 <malloc>:
 80228b8:	4b02      	ldr	r3, [pc, #8]	; (80228c4 <malloc+0xc>)
 80228ba:	4601      	mov	r1, r0
 80228bc:	6818      	ldr	r0, [r3, #0]
 80228be:	f000 b8bd 	b.w	8022a3c <_malloc_r>
 80228c2:	bf00      	nop
 80228c4:	20000270 	.word	0x20000270

080228c8 <free>:
 80228c8:	4b02      	ldr	r3, [pc, #8]	; (80228d4 <free+0xc>)
 80228ca:	4601      	mov	r1, r0
 80228cc:	6818      	ldr	r0, [r3, #0]
 80228ce:	f000 b849 	b.w	8022964 <_free_r>
 80228d2:	bf00      	nop
 80228d4:	20000270 	.word	0x20000270

080228d8 <memcpy>:
 80228d8:	440a      	add	r2, r1
 80228da:	4291      	cmp	r1, r2
 80228dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80228e0:	d100      	bne.n	80228e4 <memcpy+0xc>
 80228e2:	4770      	bx	lr
 80228e4:	b510      	push	{r4, lr}
 80228e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80228ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80228ee:	4291      	cmp	r1, r2
 80228f0:	d1f9      	bne.n	80228e6 <memcpy+0xe>
 80228f2:	bd10      	pop	{r4, pc}

080228f4 <memmove>:
 80228f4:	4288      	cmp	r0, r1
 80228f6:	b510      	push	{r4, lr}
 80228f8:	eb01 0402 	add.w	r4, r1, r2
 80228fc:	d902      	bls.n	8022904 <memmove+0x10>
 80228fe:	4284      	cmp	r4, r0
 8022900:	4623      	mov	r3, r4
 8022902:	d807      	bhi.n	8022914 <memmove+0x20>
 8022904:	1e43      	subs	r3, r0, #1
 8022906:	42a1      	cmp	r1, r4
 8022908:	d008      	beq.n	802291c <memmove+0x28>
 802290a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802290e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022912:	e7f8      	b.n	8022906 <memmove+0x12>
 8022914:	4402      	add	r2, r0
 8022916:	4601      	mov	r1, r0
 8022918:	428a      	cmp	r2, r1
 802291a:	d100      	bne.n	802291e <memmove+0x2a>
 802291c:	bd10      	pop	{r4, pc}
 802291e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022926:	e7f7      	b.n	8022918 <memmove+0x24>

08022928 <memset>:
 8022928:	4402      	add	r2, r0
 802292a:	4603      	mov	r3, r0
 802292c:	4293      	cmp	r3, r2
 802292e:	d100      	bne.n	8022932 <memset+0xa>
 8022930:	4770      	bx	lr
 8022932:	f803 1b01 	strb.w	r1, [r3], #1
 8022936:	e7f9      	b.n	802292c <memset+0x4>

08022938 <_calloc_r>:
 8022938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802293a:	fba1 2402 	umull	r2, r4, r1, r2
 802293e:	b94c      	cbnz	r4, 8022954 <_calloc_r+0x1c>
 8022940:	4611      	mov	r1, r2
 8022942:	9201      	str	r2, [sp, #4]
 8022944:	f000 f87a 	bl	8022a3c <_malloc_r>
 8022948:	9a01      	ldr	r2, [sp, #4]
 802294a:	4605      	mov	r5, r0
 802294c:	b930      	cbnz	r0, 802295c <_calloc_r+0x24>
 802294e:	4628      	mov	r0, r5
 8022950:	b003      	add	sp, #12
 8022952:	bd30      	pop	{r4, r5, pc}
 8022954:	220c      	movs	r2, #12
 8022956:	6002      	str	r2, [r0, #0]
 8022958:	2500      	movs	r5, #0
 802295a:	e7f8      	b.n	802294e <_calloc_r+0x16>
 802295c:	4621      	mov	r1, r4
 802295e:	f7ff ffe3 	bl	8022928 <memset>
 8022962:	e7f4      	b.n	802294e <_calloc_r+0x16>

08022964 <_free_r>:
 8022964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022966:	2900      	cmp	r1, #0
 8022968:	d044      	beq.n	80229f4 <_free_r+0x90>
 802296a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802296e:	9001      	str	r0, [sp, #4]
 8022970:	2b00      	cmp	r3, #0
 8022972:	f1a1 0404 	sub.w	r4, r1, #4
 8022976:	bfb8      	it	lt
 8022978:	18e4      	addlt	r4, r4, r3
 802297a:	f002 f8d5 	bl	8024b28 <__malloc_lock>
 802297e:	4a1e      	ldr	r2, [pc, #120]	; (80229f8 <_free_r+0x94>)
 8022980:	9801      	ldr	r0, [sp, #4]
 8022982:	6813      	ldr	r3, [r2, #0]
 8022984:	b933      	cbnz	r3, 8022994 <_free_r+0x30>
 8022986:	6063      	str	r3, [r4, #4]
 8022988:	6014      	str	r4, [r2, #0]
 802298a:	b003      	add	sp, #12
 802298c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022990:	f002 b8d0 	b.w	8024b34 <__malloc_unlock>
 8022994:	42a3      	cmp	r3, r4
 8022996:	d908      	bls.n	80229aa <_free_r+0x46>
 8022998:	6825      	ldr	r5, [r4, #0]
 802299a:	1961      	adds	r1, r4, r5
 802299c:	428b      	cmp	r3, r1
 802299e:	bf01      	itttt	eq
 80229a0:	6819      	ldreq	r1, [r3, #0]
 80229a2:	685b      	ldreq	r3, [r3, #4]
 80229a4:	1949      	addeq	r1, r1, r5
 80229a6:	6021      	streq	r1, [r4, #0]
 80229a8:	e7ed      	b.n	8022986 <_free_r+0x22>
 80229aa:	461a      	mov	r2, r3
 80229ac:	685b      	ldr	r3, [r3, #4]
 80229ae:	b10b      	cbz	r3, 80229b4 <_free_r+0x50>
 80229b0:	42a3      	cmp	r3, r4
 80229b2:	d9fa      	bls.n	80229aa <_free_r+0x46>
 80229b4:	6811      	ldr	r1, [r2, #0]
 80229b6:	1855      	adds	r5, r2, r1
 80229b8:	42a5      	cmp	r5, r4
 80229ba:	d10b      	bne.n	80229d4 <_free_r+0x70>
 80229bc:	6824      	ldr	r4, [r4, #0]
 80229be:	4421      	add	r1, r4
 80229c0:	1854      	adds	r4, r2, r1
 80229c2:	42a3      	cmp	r3, r4
 80229c4:	6011      	str	r1, [r2, #0]
 80229c6:	d1e0      	bne.n	802298a <_free_r+0x26>
 80229c8:	681c      	ldr	r4, [r3, #0]
 80229ca:	685b      	ldr	r3, [r3, #4]
 80229cc:	6053      	str	r3, [r2, #4]
 80229ce:	4421      	add	r1, r4
 80229d0:	6011      	str	r1, [r2, #0]
 80229d2:	e7da      	b.n	802298a <_free_r+0x26>
 80229d4:	d902      	bls.n	80229dc <_free_r+0x78>
 80229d6:	230c      	movs	r3, #12
 80229d8:	6003      	str	r3, [r0, #0]
 80229da:	e7d6      	b.n	802298a <_free_r+0x26>
 80229dc:	6825      	ldr	r5, [r4, #0]
 80229de:	1961      	adds	r1, r4, r5
 80229e0:	428b      	cmp	r3, r1
 80229e2:	bf04      	itt	eq
 80229e4:	6819      	ldreq	r1, [r3, #0]
 80229e6:	685b      	ldreq	r3, [r3, #4]
 80229e8:	6063      	str	r3, [r4, #4]
 80229ea:	bf04      	itt	eq
 80229ec:	1949      	addeq	r1, r1, r5
 80229ee:	6021      	streq	r1, [r4, #0]
 80229f0:	6054      	str	r4, [r2, #4]
 80229f2:	e7ca      	b.n	802298a <_free_r+0x26>
 80229f4:	b003      	add	sp, #12
 80229f6:	bd30      	pop	{r4, r5, pc}
 80229f8:	20002624 	.word	0x20002624

080229fc <sbrk_aligned>:
 80229fc:	b570      	push	{r4, r5, r6, lr}
 80229fe:	4e0e      	ldr	r6, [pc, #56]	; (8022a38 <sbrk_aligned+0x3c>)
 8022a00:	460c      	mov	r4, r1
 8022a02:	6831      	ldr	r1, [r6, #0]
 8022a04:	4605      	mov	r5, r0
 8022a06:	b911      	cbnz	r1, 8022a0e <sbrk_aligned+0x12>
 8022a08:	f000 fb7a 	bl	8023100 <_sbrk_r>
 8022a0c:	6030      	str	r0, [r6, #0]
 8022a0e:	4621      	mov	r1, r4
 8022a10:	4628      	mov	r0, r5
 8022a12:	f000 fb75 	bl	8023100 <_sbrk_r>
 8022a16:	1c43      	adds	r3, r0, #1
 8022a18:	d00a      	beq.n	8022a30 <sbrk_aligned+0x34>
 8022a1a:	1cc4      	adds	r4, r0, #3
 8022a1c:	f024 0403 	bic.w	r4, r4, #3
 8022a20:	42a0      	cmp	r0, r4
 8022a22:	d007      	beq.n	8022a34 <sbrk_aligned+0x38>
 8022a24:	1a21      	subs	r1, r4, r0
 8022a26:	4628      	mov	r0, r5
 8022a28:	f000 fb6a 	bl	8023100 <_sbrk_r>
 8022a2c:	3001      	adds	r0, #1
 8022a2e:	d101      	bne.n	8022a34 <sbrk_aligned+0x38>
 8022a30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8022a34:	4620      	mov	r0, r4
 8022a36:	bd70      	pop	{r4, r5, r6, pc}
 8022a38:	20002628 	.word	0x20002628

08022a3c <_malloc_r>:
 8022a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a40:	1ccd      	adds	r5, r1, #3
 8022a42:	f025 0503 	bic.w	r5, r5, #3
 8022a46:	3508      	adds	r5, #8
 8022a48:	2d0c      	cmp	r5, #12
 8022a4a:	bf38      	it	cc
 8022a4c:	250c      	movcc	r5, #12
 8022a4e:	2d00      	cmp	r5, #0
 8022a50:	4607      	mov	r7, r0
 8022a52:	db01      	blt.n	8022a58 <_malloc_r+0x1c>
 8022a54:	42a9      	cmp	r1, r5
 8022a56:	d905      	bls.n	8022a64 <_malloc_r+0x28>
 8022a58:	230c      	movs	r3, #12
 8022a5a:	603b      	str	r3, [r7, #0]
 8022a5c:	2600      	movs	r6, #0
 8022a5e:	4630      	mov	r0, r6
 8022a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a64:	4e2e      	ldr	r6, [pc, #184]	; (8022b20 <_malloc_r+0xe4>)
 8022a66:	f002 f85f 	bl	8024b28 <__malloc_lock>
 8022a6a:	6833      	ldr	r3, [r6, #0]
 8022a6c:	461c      	mov	r4, r3
 8022a6e:	bb34      	cbnz	r4, 8022abe <_malloc_r+0x82>
 8022a70:	4629      	mov	r1, r5
 8022a72:	4638      	mov	r0, r7
 8022a74:	f7ff ffc2 	bl	80229fc <sbrk_aligned>
 8022a78:	1c43      	adds	r3, r0, #1
 8022a7a:	4604      	mov	r4, r0
 8022a7c:	d14d      	bne.n	8022b1a <_malloc_r+0xde>
 8022a7e:	6834      	ldr	r4, [r6, #0]
 8022a80:	4626      	mov	r6, r4
 8022a82:	2e00      	cmp	r6, #0
 8022a84:	d140      	bne.n	8022b08 <_malloc_r+0xcc>
 8022a86:	6823      	ldr	r3, [r4, #0]
 8022a88:	4631      	mov	r1, r6
 8022a8a:	4638      	mov	r0, r7
 8022a8c:	eb04 0803 	add.w	r8, r4, r3
 8022a90:	f000 fb36 	bl	8023100 <_sbrk_r>
 8022a94:	4580      	cmp	r8, r0
 8022a96:	d13a      	bne.n	8022b0e <_malloc_r+0xd2>
 8022a98:	6821      	ldr	r1, [r4, #0]
 8022a9a:	3503      	adds	r5, #3
 8022a9c:	1a6d      	subs	r5, r5, r1
 8022a9e:	f025 0503 	bic.w	r5, r5, #3
 8022aa2:	3508      	adds	r5, #8
 8022aa4:	2d0c      	cmp	r5, #12
 8022aa6:	bf38      	it	cc
 8022aa8:	250c      	movcc	r5, #12
 8022aaa:	4629      	mov	r1, r5
 8022aac:	4638      	mov	r0, r7
 8022aae:	f7ff ffa5 	bl	80229fc <sbrk_aligned>
 8022ab2:	3001      	adds	r0, #1
 8022ab4:	d02b      	beq.n	8022b0e <_malloc_r+0xd2>
 8022ab6:	6823      	ldr	r3, [r4, #0]
 8022ab8:	442b      	add	r3, r5
 8022aba:	6023      	str	r3, [r4, #0]
 8022abc:	e00e      	b.n	8022adc <_malloc_r+0xa0>
 8022abe:	6822      	ldr	r2, [r4, #0]
 8022ac0:	1b52      	subs	r2, r2, r5
 8022ac2:	d41e      	bmi.n	8022b02 <_malloc_r+0xc6>
 8022ac4:	2a0b      	cmp	r2, #11
 8022ac6:	d916      	bls.n	8022af6 <_malloc_r+0xba>
 8022ac8:	1961      	adds	r1, r4, r5
 8022aca:	42a3      	cmp	r3, r4
 8022acc:	6025      	str	r5, [r4, #0]
 8022ace:	bf18      	it	ne
 8022ad0:	6059      	strne	r1, [r3, #4]
 8022ad2:	6863      	ldr	r3, [r4, #4]
 8022ad4:	bf08      	it	eq
 8022ad6:	6031      	streq	r1, [r6, #0]
 8022ad8:	5162      	str	r2, [r4, r5]
 8022ada:	604b      	str	r3, [r1, #4]
 8022adc:	4638      	mov	r0, r7
 8022ade:	f104 060b 	add.w	r6, r4, #11
 8022ae2:	f002 f827 	bl	8024b34 <__malloc_unlock>
 8022ae6:	f026 0607 	bic.w	r6, r6, #7
 8022aea:	1d23      	adds	r3, r4, #4
 8022aec:	1af2      	subs	r2, r6, r3
 8022aee:	d0b6      	beq.n	8022a5e <_malloc_r+0x22>
 8022af0:	1b9b      	subs	r3, r3, r6
 8022af2:	50a3      	str	r3, [r4, r2]
 8022af4:	e7b3      	b.n	8022a5e <_malloc_r+0x22>
 8022af6:	6862      	ldr	r2, [r4, #4]
 8022af8:	42a3      	cmp	r3, r4
 8022afa:	bf0c      	ite	eq
 8022afc:	6032      	streq	r2, [r6, #0]
 8022afe:	605a      	strne	r2, [r3, #4]
 8022b00:	e7ec      	b.n	8022adc <_malloc_r+0xa0>
 8022b02:	4623      	mov	r3, r4
 8022b04:	6864      	ldr	r4, [r4, #4]
 8022b06:	e7b2      	b.n	8022a6e <_malloc_r+0x32>
 8022b08:	4634      	mov	r4, r6
 8022b0a:	6876      	ldr	r6, [r6, #4]
 8022b0c:	e7b9      	b.n	8022a82 <_malloc_r+0x46>
 8022b0e:	230c      	movs	r3, #12
 8022b10:	603b      	str	r3, [r7, #0]
 8022b12:	4638      	mov	r0, r7
 8022b14:	f002 f80e 	bl	8024b34 <__malloc_unlock>
 8022b18:	e7a1      	b.n	8022a5e <_malloc_r+0x22>
 8022b1a:	6025      	str	r5, [r4, #0]
 8022b1c:	e7de      	b.n	8022adc <_malloc_r+0xa0>
 8022b1e:	bf00      	nop
 8022b20:	20002624 	.word	0x20002624

08022b24 <__sfputc_r>:
 8022b24:	6893      	ldr	r3, [r2, #8]
 8022b26:	3b01      	subs	r3, #1
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	b410      	push	{r4}
 8022b2c:	6093      	str	r3, [r2, #8]
 8022b2e:	da08      	bge.n	8022b42 <__sfputc_r+0x1e>
 8022b30:	6994      	ldr	r4, [r2, #24]
 8022b32:	42a3      	cmp	r3, r4
 8022b34:	db01      	blt.n	8022b3a <__sfputc_r+0x16>
 8022b36:	290a      	cmp	r1, #10
 8022b38:	d103      	bne.n	8022b42 <__sfputc_r+0x1e>
 8022b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b3e:	f001 b995 	b.w	8023e6c <__swbuf_r>
 8022b42:	6813      	ldr	r3, [r2, #0]
 8022b44:	1c58      	adds	r0, r3, #1
 8022b46:	6010      	str	r0, [r2, #0]
 8022b48:	7019      	strb	r1, [r3, #0]
 8022b4a:	4608      	mov	r0, r1
 8022b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b50:	4770      	bx	lr

08022b52 <__sfputs_r>:
 8022b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b54:	4606      	mov	r6, r0
 8022b56:	460f      	mov	r7, r1
 8022b58:	4614      	mov	r4, r2
 8022b5a:	18d5      	adds	r5, r2, r3
 8022b5c:	42ac      	cmp	r4, r5
 8022b5e:	d101      	bne.n	8022b64 <__sfputs_r+0x12>
 8022b60:	2000      	movs	r0, #0
 8022b62:	e007      	b.n	8022b74 <__sfputs_r+0x22>
 8022b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b68:	463a      	mov	r2, r7
 8022b6a:	4630      	mov	r0, r6
 8022b6c:	f7ff ffda 	bl	8022b24 <__sfputc_r>
 8022b70:	1c43      	adds	r3, r0, #1
 8022b72:	d1f3      	bne.n	8022b5c <__sfputs_r+0xa>
 8022b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022b78 <_vfiprintf_r>:
 8022b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b7c:	460d      	mov	r5, r1
 8022b7e:	b09d      	sub	sp, #116	; 0x74
 8022b80:	4614      	mov	r4, r2
 8022b82:	4698      	mov	r8, r3
 8022b84:	4606      	mov	r6, r0
 8022b86:	b118      	cbz	r0, 8022b90 <_vfiprintf_r+0x18>
 8022b88:	6983      	ldr	r3, [r0, #24]
 8022b8a:	b90b      	cbnz	r3, 8022b90 <_vfiprintf_r+0x18>
 8022b8c:	f001 fb48 	bl	8024220 <__sinit>
 8022b90:	4b89      	ldr	r3, [pc, #548]	; (8022db8 <_vfiprintf_r+0x240>)
 8022b92:	429d      	cmp	r5, r3
 8022b94:	d11b      	bne.n	8022bce <_vfiprintf_r+0x56>
 8022b96:	6875      	ldr	r5, [r6, #4]
 8022b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b9a:	07d9      	lsls	r1, r3, #31
 8022b9c:	d405      	bmi.n	8022baa <_vfiprintf_r+0x32>
 8022b9e:	89ab      	ldrh	r3, [r5, #12]
 8022ba0:	059a      	lsls	r2, r3, #22
 8022ba2:	d402      	bmi.n	8022baa <_vfiprintf_r+0x32>
 8022ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022ba6:	f7ff fe84 	bl	80228b2 <__retarget_lock_acquire_recursive>
 8022baa:	89ab      	ldrh	r3, [r5, #12]
 8022bac:	071b      	lsls	r3, r3, #28
 8022bae:	d501      	bpl.n	8022bb4 <_vfiprintf_r+0x3c>
 8022bb0:	692b      	ldr	r3, [r5, #16]
 8022bb2:	b9eb      	cbnz	r3, 8022bf0 <_vfiprintf_r+0x78>
 8022bb4:	4629      	mov	r1, r5
 8022bb6:	4630      	mov	r0, r6
 8022bb8:	f001 f9aa 	bl	8023f10 <__swsetup_r>
 8022bbc:	b1c0      	cbz	r0, 8022bf0 <_vfiprintf_r+0x78>
 8022bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022bc0:	07dc      	lsls	r4, r3, #31
 8022bc2:	d50e      	bpl.n	8022be2 <_vfiprintf_r+0x6a>
 8022bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022bc8:	b01d      	add	sp, #116	; 0x74
 8022bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bce:	4b7b      	ldr	r3, [pc, #492]	; (8022dbc <_vfiprintf_r+0x244>)
 8022bd0:	429d      	cmp	r5, r3
 8022bd2:	d101      	bne.n	8022bd8 <_vfiprintf_r+0x60>
 8022bd4:	68b5      	ldr	r5, [r6, #8]
 8022bd6:	e7df      	b.n	8022b98 <_vfiprintf_r+0x20>
 8022bd8:	4b79      	ldr	r3, [pc, #484]	; (8022dc0 <_vfiprintf_r+0x248>)
 8022bda:	429d      	cmp	r5, r3
 8022bdc:	bf08      	it	eq
 8022bde:	68f5      	ldreq	r5, [r6, #12]
 8022be0:	e7da      	b.n	8022b98 <_vfiprintf_r+0x20>
 8022be2:	89ab      	ldrh	r3, [r5, #12]
 8022be4:	0598      	lsls	r0, r3, #22
 8022be6:	d4ed      	bmi.n	8022bc4 <_vfiprintf_r+0x4c>
 8022be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022bea:	f7ff fe63 	bl	80228b4 <__retarget_lock_release_recursive>
 8022bee:	e7e9      	b.n	8022bc4 <_vfiprintf_r+0x4c>
 8022bf0:	2300      	movs	r3, #0
 8022bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8022bf4:	2320      	movs	r3, #32
 8022bf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8022bfe:	2330      	movs	r3, #48	; 0x30
 8022c00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022dc4 <_vfiprintf_r+0x24c>
 8022c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022c08:	f04f 0901 	mov.w	r9, #1
 8022c0c:	4623      	mov	r3, r4
 8022c0e:	469a      	mov	sl, r3
 8022c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022c14:	b10a      	cbz	r2, 8022c1a <_vfiprintf_r+0xa2>
 8022c16:	2a25      	cmp	r2, #37	; 0x25
 8022c18:	d1f9      	bne.n	8022c0e <_vfiprintf_r+0x96>
 8022c1a:	ebba 0b04 	subs.w	fp, sl, r4
 8022c1e:	d00b      	beq.n	8022c38 <_vfiprintf_r+0xc0>
 8022c20:	465b      	mov	r3, fp
 8022c22:	4622      	mov	r2, r4
 8022c24:	4629      	mov	r1, r5
 8022c26:	4630      	mov	r0, r6
 8022c28:	f7ff ff93 	bl	8022b52 <__sfputs_r>
 8022c2c:	3001      	adds	r0, #1
 8022c2e:	f000 80aa 	beq.w	8022d86 <_vfiprintf_r+0x20e>
 8022c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c34:	445a      	add	r2, fp
 8022c36:	9209      	str	r2, [sp, #36]	; 0x24
 8022c38:	f89a 3000 	ldrb.w	r3, [sl]
 8022c3c:	2b00      	cmp	r3, #0
 8022c3e:	f000 80a2 	beq.w	8022d86 <_vfiprintf_r+0x20e>
 8022c42:	2300      	movs	r3, #0
 8022c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022c4c:	f10a 0a01 	add.w	sl, sl, #1
 8022c50:	9304      	str	r3, [sp, #16]
 8022c52:	9307      	str	r3, [sp, #28]
 8022c54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022c58:	931a      	str	r3, [sp, #104]	; 0x68
 8022c5a:	4654      	mov	r4, sl
 8022c5c:	2205      	movs	r2, #5
 8022c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c62:	4858      	ldr	r0, [pc, #352]	; (8022dc4 <_vfiprintf_r+0x24c>)
 8022c64:	f7dd fab4 	bl	80001d0 <memchr>
 8022c68:	9a04      	ldr	r2, [sp, #16]
 8022c6a:	b9d8      	cbnz	r0, 8022ca4 <_vfiprintf_r+0x12c>
 8022c6c:	06d1      	lsls	r1, r2, #27
 8022c6e:	bf44      	itt	mi
 8022c70:	2320      	movmi	r3, #32
 8022c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022c76:	0713      	lsls	r3, r2, #28
 8022c78:	bf44      	itt	mi
 8022c7a:	232b      	movmi	r3, #43	; 0x2b
 8022c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022c80:	f89a 3000 	ldrb.w	r3, [sl]
 8022c84:	2b2a      	cmp	r3, #42	; 0x2a
 8022c86:	d015      	beq.n	8022cb4 <_vfiprintf_r+0x13c>
 8022c88:	9a07      	ldr	r2, [sp, #28]
 8022c8a:	4654      	mov	r4, sl
 8022c8c:	2000      	movs	r0, #0
 8022c8e:	f04f 0c0a 	mov.w	ip, #10
 8022c92:	4621      	mov	r1, r4
 8022c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c98:	3b30      	subs	r3, #48	; 0x30
 8022c9a:	2b09      	cmp	r3, #9
 8022c9c:	d94e      	bls.n	8022d3c <_vfiprintf_r+0x1c4>
 8022c9e:	b1b0      	cbz	r0, 8022cce <_vfiprintf_r+0x156>
 8022ca0:	9207      	str	r2, [sp, #28]
 8022ca2:	e014      	b.n	8022cce <_vfiprintf_r+0x156>
 8022ca4:	eba0 0308 	sub.w	r3, r0, r8
 8022ca8:	fa09 f303 	lsl.w	r3, r9, r3
 8022cac:	4313      	orrs	r3, r2
 8022cae:	9304      	str	r3, [sp, #16]
 8022cb0:	46a2      	mov	sl, r4
 8022cb2:	e7d2      	b.n	8022c5a <_vfiprintf_r+0xe2>
 8022cb4:	9b03      	ldr	r3, [sp, #12]
 8022cb6:	1d19      	adds	r1, r3, #4
 8022cb8:	681b      	ldr	r3, [r3, #0]
 8022cba:	9103      	str	r1, [sp, #12]
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	bfbb      	ittet	lt
 8022cc0:	425b      	neglt	r3, r3
 8022cc2:	f042 0202 	orrlt.w	r2, r2, #2
 8022cc6:	9307      	strge	r3, [sp, #28]
 8022cc8:	9307      	strlt	r3, [sp, #28]
 8022cca:	bfb8      	it	lt
 8022ccc:	9204      	strlt	r2, [sp, #16]
 8022cce:	7823      	ldrb	r3, [r4, #0]
 8022cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8022cd2:	d10c      	bne.n	8022cee <_vfiprintf_r+0x176>
 8022cd4:	7863      	ldrb	r3, [r4, #1]
 8022cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8022cd8:	d135      	bne.n	8022d46 <_vfiprintf_r+0x1ce>
 8022cda:	9b03      	ldr	r3, [sp, #12]
 8022cdc:	1d1a      	adds	r2, r3, #4
 8022cde:	681b      	ldr	r3, [r3, #0]
 8022ce0:	9203      	str	r2, [sp, #12]
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	bfb8      	it	lt
 8022ce6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022cea:	3402      	adds	r4, #2
 8022cec:	9305      	str	r3, [sp, #20]
 8022cee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022dd4 <_vfiprintf_r+0x25c>
 8022cf2:	7821      	ldrb	r1, [r4, #0]
 8022cf4:	2203      	movs	r2, #3
 8022cf6:	4650      	mov	r0, sl
 8022cf8:	f7dd fa6a 	bl	80001d0 <memchr>
 8022cfc:	b140      	cbz	r0, 8022d10 <_vfiprintf_r+0x198>
 8022cfe:	2340      	movs	r3, #64	; 0x40
 8022d00:	eba0 000a 	sub.w	r0, r0, sl
 8022d04:	fa03 f000 	lsl.w	r0, r3, r0
 8022d08:	9b04      	ldr	r3, [sp, #16]
 8022d0a:	4303      	orrs	r3, r0
 8022d0c:	3401      	adds	r4, #1
 8022d0e:	9304      	str	r3, [sp, #16]
 8022d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d14:	482c      	ldr	r0, [pc, #176]	; (8022dc8 <_vfiprintf_r+0x250>)
 8022d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022d1a:	2206      	movs	r2, #6
 8022d1c:	f7dd fa58 	bl	80001d0 <memchr>
 8022d20:	2800      	cmp	r0, #0
 8022d22:	d03f      	beq.n	8022da4 <_vfiprintf_r+0x22c>
 8022d24:	4b29      	ldr	r3, [pc, #164]	; (8022dcc <_vfiprintf_r+0x254>)
 8022d26:	bb1b      	cbnz	r3, 8022d70 <_vfiprintf_r+0x1f8>
 8022d28:	9b03      	ldr	r3, [sp, #12]
 8022d2a:	3307      	adds	r3, #7
 8022d2c:	f023 0307 	bic.w	r3, r3, #7
 8022d30:	3308      	adds	r3, #8
 8022d32:	9303      	str	r3, [sp, #12]
 8022d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d36:	443b      	add	r3, r7
 8022d38:	9309      	str	r3, [sp, #36]	; 0x24
 8022d3a:	e767      	b.n	8022c0c <_vfiprintf_r+0x94>
 8022d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8022d40:	460c      	mov	r4, r1
 8022d42:	2001      	movs	r0, #1
 8022d44:	e7a5      	b.n	8022c92 <_vfiprintf_r+0x11a>
 8022d46:	2300      	movs	r3, #0
 8022d48:	3401      	adds	r4, #1
 8022d4a:	9305      	str	r3, [sp, #20]
 8022d4c:	4619      	mov	r1, r3
 8022d4e:	f04f 0c0a 	mov.w	ip, #10
 8022d52:	4620      	mov	r0, r4
 8022d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d58:	3a30      	subs	r2, #48	; 0x30
 8022d5a:	2a09      	cmp	r2, #9
 8022d5c:	d903      	bls.n	8022d66 <_vfiprintf_r+0x1ee>
 8022d5e:	2b00      	cmp	r3, #0
 8022d60:	d0c5      	beq.n	8022cee <_vfiprintf_r+0x176>
 8022d62:	9105      	str	r1, [sp, #20]
 8022d64:	e7c3      	b.n	8022cee <_vfiprintf_r+0x176>
 8022d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8022d6a:	4604      	mov	r4, r0
 8022d6c:	2301      	movs	r3, #1
 8022d6e:	e7f0      	b.n	8022d52 <_vfiprintf_r+0x1da>
 8022d70:	ab03      	add	r3, sp, #12
 8022d72:	9300      	str	r3, [sp, #0]
 8022d74:	462a      	mov	r2, r5
 8022d76:	4b16      	ldr	r3, [pc, #88]	; (8022dd0 <_vfiprintf_r+0x258>)
 8022d78:	a904      	add	r1, sp, #16
 8022d7a:	4630      	mov	r0, r6
 8022d7c:	f3af 8000 	nop.w
 8022d80:	4607      	mov	r7, r0
 8022d82:	1c78      	adds	r0, r7, #1
 8022d84:	d1d6      	bne.n	8022d34 <_vfiprintf_r+0x1bc>
 8022d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022d88:	07d9      	lsls	r1, r3, #31
 8022d8a:	d405      	bmi.n	8022d98 <_vfiprintf_r+0x220>
 8022d8c:	89ab      	ldrh	r3, [r5, #12]
 8022d8e:	059a      	lsls	r2, r3, #22
 8022d90:	d402      	bmi.n	8022d98 <_vfiprintf_r+0x220>
 8022d92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022d94:	f7ff fd8e 	bl	80228b4 <__retarget_lock_release_recursive>
 8022d98:	89ab      	ldrh	r3, [r5, #12]
 8022d9a:	065b      	lsls	r3, r3, #25
 8022d9c:	f53f af12 	bmi.w	8022bc4 <_vfiprintf_r+0x4c>
 8022da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022da2:	e711      	b.n	8022bc8 <_vfiprintf_r+0x50>
 8022da4:	ab03      	add	r3, sp, #12
 8022da6:	9300      	str	r3, [sp, #0]
 8022da8:	462a      	mov	r2, r5
 8022daa:	4b09      	ldr	r3, [pc, #36]	; (8022dd0 <_vfiprintf_r+0x258>)
 8022dac:	a904      	add	r1, sp, #16
 8022dae:	4630      	mov	r0, r6
 8022db0:	f000 f880 	bl	8022eb4 <_printf_i>
 8022db4:	e7e4      	b.n	8022d80 <_vfiprintf_r+0x208>
 8022db6:	bf00      	nop
 8022db8:	0802a66c 	.word	0x0802a66c
 8022dbc:	0802a68c 	.word	0x0802a68c
 8022dc0:	0802a64c 	.word	0x0802a64c
 8022dc4:	0802a4b8 	.word	0x0802a4b8
 8022dc8:	0802a4c2 	.word	0x0802a4c2
 8022dcc:	00000000 	.word	0x00000000
 8022dd0:	08022b53 	.word	0x08022b53
 8022dd4:	0802a4be 	.word	0x0802a4be

08022dd8 <_printf_common>:
 8022dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ddc:	4616      	mov	r6, r2
 8022dde:	4699      	mov	r9, r3
 8022de0:	688a      	ldr	r2, [r1, #8]
 8022de2:	690b      	ldr	r3, [r1, #16]
 8022de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022de8:	4293      	cmp	r3, r2
 8022dea:	bfb8      	it	lt
 8022dec:	4613      	movlt	r3, r2
 8022dee:	6033      	str	r3, [r6, #0]
 8022df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022df4:	4607      	mov	r7, r0
 8022df6:	460c      	mov	r4, r1
 8022df8:	b10a      	cbz	r2, 8022dfe <_printf_common+0x26>
 8022dfa:	3301      	adds	r3, #1
 8022dfc:	6033      	str	r3, [r6, #0]
 8022dfe:	6823      	ldr	r3, [r4, #0]
 8022e00:	0699      	lsls	r1, r3, #26
 8022e02:	bf42      	ittt	mi
 8022e04:	6833      	ldrmi	r3, [r6, #0]
 8022e06:	3302      	addmi	r3, #2
 8022e08:	6033      	strmi	r3, [r6, #0]
 8022e0a:	6825      	ldr	r5, [r4, #0]
 8022e0c:	f015 0506 	ands.w	r5, r5, #6
 8022e10:	d106      	bne.n	8022e20 <_printf_common+0x48>
 8022e12:	f104 0a19 	add.w	sl, r4, #25
 8022e16:	68e3      	ldr	r3, [r4, #12]
 8022e18:	6832      	ldr	r2, [r6, #0]
 8022e1a:	1a9b      	subs	r3, r3, r2
 8022e1c:	42ab      	cmp	r3, r5
 8022e1e:	dc26      	bgt.n	8022e6e <_printf_common+0x96>
 8022e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022e24:	1e13      	subs	r3, r2, #0
 8022e26:	6822      	ldr	r2, [r4, #0]
 8022e28:	bf18      	it	ne
 8022e2a:	2301      	movne	r3, #1
 8022e2c:	0692      	lsls	r2, r2, #26
 8022e2e:	d42b      	bmi.n	8022e88 <_printf_common+0xb0>
 8022e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022e34:	4649      	mov	r1, r9
 8022e36:	4638      	mov	r0, r7
 8022e38:	47c0      	blx	r8
 8022e3a:	3001      	adds	r0, #1
 8022e3c:	d01e      	beq.n	8022e7c <_printf_common+0xa4>
 8022e3e:	6823      	ldr	r3, [r4, #0]
 8022e40:	68e5      	ldr	r5, [r4, #12]
 8022e42:	6832      	ldr	r2, [r6, #0]
 8022e44:	f003 0306 	and.w	r3, r3, #6
 8022e48:	2b04      	cmp	r3, #4
 8022e4a:	bf08      	it	eq
 8022e4c:	1aad      	subeq	r5, r5, r2
 8022e4e:	68a3      	ldr	r3, [r4, #8]
 8022e50:	6922      	ldr	r2, [r4, #16]
 8022e52:	bf0c      	ite	eq
 8022e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022e58:	2500      	movne	r5, #0
 8022e5a:	4293      	cmp	r3, r2
 8022e5c:	bfc4      	itt	gt
 8022e5e:	1a9b      	subgt	r3, r3, r2
 8022e60:	18ed      	addgt	r5, r5, r3
 8022e62:	2600      	movs	r6, #0
 8022e64:	341a      	adds	r4, #26
 8022e66:	42b5      	cmp	r5, r6
 8022e68:	d11a      	bne.n	8022ea0 <_printf_common+0xc8>
 8022e6a:	2000      	movs	r0, #0
 8022e6c:	e008      	b.n	8022e80 <_printf_common+0xa8>
 8022e6e:	2301      	movs	r3, #1
 8022e70:	4652      	mov	r2, sl
 8022e72:	4649      	mov	r1, r9
 8022e74:	4638      	mov	r0, r7
 8022e76:	47c0      	blx	r8
 8022e78:	3001      	adds	r0, #1
 8022e7a:	d103      	bne.n	8022e84 <_printf_common+0xac>
 8022e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e84:	3501      	adds	r5, #1
 8022e86:	e7c6      	b.n	8022e16 <_printf_common+0x3e>
 8022e88:	18e1      	adds	r1, r4, r3
 8022e8a:	1c5a      	adds	r2, r3, #1
 8022e8c:	2030      	movs	r0, #48	; 0x30
 8022e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022e92:	4422      	add	r2, r4
 8022e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022e9c:	3302      	adds	r3, #2
 8022e9e:	e7c7      	b.n	8022e30 <_printf_common+0x58>
 8022ea0:	2301      	movs	r3, #1
 8022ea2:	4622      	mov	r2, r4
 8022ea4:	4649      	mov	r1, r9
 8022ea6:	4638      	mov	r0, r7
 8022ea8:	47c0      	blx	r8
 8022eaa:	3001      	adds	r0, #1
 8022eac:	d0e6      	beq.n	8022e7c <_printf_common+0xa4>
 8022eae:	3601      	adds	r6, #1
 8022eb0:	e7d9      	b.n	8022e66 <_printf_common+0x8e>
	...

08022eb4 <_printf_i>:
 8022eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022eb8:	7e0f      	ldrb	r7, [r1, #24]
 8022eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022ebc:	2f78      	cmp	r7, #120	; 0x78
 8022ebe:	4691      	mov	r9, r2
 8022ec0:	4680      	mov	r8, r0
 8022ec2:	460c      	mov	r4, r1
 8022ec4:	469a      	mov	sl, r3
 8022ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022eca:	d807      	bhi.n	8022edc <_printf_i+0x28>
 8022ecc:	2f62      	cmp	r7, #98	; 0x62
 8022ece:	d80a      	bhi.n	8022ee6 <_printf_i+0x32>
 8022ed0:	2f00      	cmp	r7, #0
 8022ed2:	f000 80d8 	beq.w	8023086 <_printf_i+0x1d2>
 8022ed6:	2f58      	cmp	r7, #88	; 0x58
 8022ed8:	f000 80a3 	beq.w	8023022 <_printf_i+0x16e>
 8022edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022ee4:	e03a      	b.n	8022f5c <_printf_i+0xa8>
 8022ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022eea:	2b15      	cmp	r3, #21
 8022eec:	d8f6      	bhi.n	8022edc <_printf_i+0x28>
 8022eee:	a101      	add	r1, pc, #4	; (adr r1, 8022ef4 <_printf_i+0x40>)
 8022ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022ef4:	08022f4d 	.word	0x08022f4d
 8022ef8:	08022f61 	.word	0x08022f61
 8022efc:	08022edd 	.word	0x08022edd
 8022f00:	08022edd 	.word	0x08022edd
 8022f04:	08022edd 	.word	0x08022edd
 8022f08:	08022edd 	.word	0x08022edd
 8022f0c:	08022f61 	.word	0x08022f61
 8022f10:	08022edd 	.word	0x08022edd
 8022f14:	08022edd 	.word	0x08022edd
 8022f18:	08022edd 	.word	0x08022edd
 8022f1c:	08022edd 	.word	0x08022edd
 8022f20:	0802306d 	.word	0x0802306d
 8022f24:	08022f91 	.word	0x08022f91
 8022f28:	0802304f 	.word	0x0802304f
 8022f2c:	08022edd 	.word	0x08022edd
 8022f30:	08022edd 	.word	0x08022edd
 8022f34:	0802308f 	.word	0x0802308f
 8022f38:	08022edd 	.word	0x08022edd
 8022f3c:	08022f91 	.word	0x08022f91
 8022f40:	08022edd 	.word	0x08022edd
 8022f44:	08022edd 	.word	0x08022edd
 8022f48:	08023057 	.word	0x08023057
 8022f4c:	682b      	ldr	r3, [r5, #0]
 8022f4e:	1d1a      	adds	r2, r3, #4
 8022f50:	681b      	ldr	r3, [r3, #0]
 8022f52:	602a      	str	r2, [r5, #0]
 8022f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022f5c:	2301      	movs	r3, #1
 8022f5e:	e0a3      	b.n	80230a8 <_printf_i+0x1f4>
 8022f60:	6820      	ldr	r0, [r4, #0]
 8022f62:	6829      	ldr	r1, [r5, #0]
 8022f64:	0606      	lsls	r6, r0, #24
 8022f66:	f101 0304 	add.w	r3, r1, #4
 8022f6a:	d50a      	bpl.n	8022f82 <_printf_i+0xce>
 8022f6c:	680e      	ldr	r6, [r1, #0]
 8022f6e:	602b      	str	r3, [r5, #0]
 8022f70:	2e00      	cmp	r6, #0
 8022f72:	da03      	bge.n	8022f7c <_printf_i+0xc8>
 8022f74:	232d      	movs	r3, #45	; 0x2d
 8022f76:	4276      	negs	r6, r6
 8022f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022f7c:	485e      	ldr	r0, [pc, #376]	; (80230f8 <_printf_i+0x244>)
 8022f7e:	230a      	movs	r3, #10
 8022f80:	e019      	b.n	8022fb6 <_printf_i+0x102>
 8022f82:	680e      	ldr	r6, [r1, #0]
 8022f84:	602b      	str	r3, [r5, #0]
 8022f86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022f8a:	bf18      	it	ne
 8022f8c:	b236      	sxthne	r6, r6
 8022f8e:	e7ef      	b.n	8022f70 <_printf_i+0xbc>
 8022f90:	682b      	ldr	r3, [r5, #0]
 8022f92:	6820      	ldr	r0, [r4, #0]
 8022f94:	1d19      	adds	r1, r3, #4
 8022f96:	6029      	str	r1, [r5, #0]
 8022f98:	0601      	lsls	r1, r0, #24
 8022f9a:	d501      	bpl.n	8022fa0 <_printf_i+0xec>
 8022f9c:	681e      	ldr	r6, [r3, #0]
 8022f9e:	e002      	b.n	8022fa6 <_printf_i+0xf2>
 8022fa0:	0646      	lsls	r6, r0, #25
 8022fa2:	d5fb      	bpl.n	8022f9c <_printf_i+0xe8>
 8022fa4:	881e      	ldrh	r6, [r3, #0]
 8022fa6:	4854      	ldr	r0, [pc, #336]	; (80230f8 <_printf_i+0x244>)
 8022fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8022faa:	bf0c      	ite	eq
 8022fac:	2308      	moveq	r3, #8
 8022fae:	230a      	movne	r3, #10
 8022fb0:	2100      	movs	r1, #0
 8022fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022fb6:	6865      	ldr	r5, [r4, #4]
 8022fb8:	60a5      	str	r5, [r4, #8]
 8022fba:	2d00      	cmp	r5, #0
 8022fbc:	bfa2      	ittt	ge
 8022fbe:	6821      	ldrge	r1, [r4, #0]
 8022fc0:	f021 0104 	bicge.w	r1, r1, #4
 8022fc4:	6021      	strge	r1, [r4, #0]
 8022fc6:	b90e      	cbnz	r6, 8022fcc <_printf_i+0x118>
 8022fc8:	2d00      	cmp	r5, #0
 8022fca:	d04d      	beq.n	8023068 <_printf_i+0x1b4>
 8022fcc:	4615      	mov	r5, r2
 8022fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8022fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8022fd6:	5dc7      	ldrb	r7, [r0, r7]
 8022fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022fdc:	4637      	mov	r7, r6
 8022fde:	42bb      	cmp	r3, r7
 8022fe0:	460e      	mov	r6, r1
 8022fe2:	d9f4      	bls.n	8022fce <_printf_i+0x11a>
 8022fe4:	2b08      	cmp	r3, #8
 8022fe6:	d10b      	bne.n	8023000 <_printf_i+0x14c>
 8022fe8:	6823      	ldr	r3, [r4, #0]
 8022fea:	07de      	lsls	r6, r3, #31
 8022fec:	d508      	bpl.n	8023000 <_printf_i+0x14c>
 8022fee:	6923      	ldr	r3, [r4, #16]
 8022ff0:	6861      	ldr	r1, [r4, #4]
 8022ff2:	4299      	cmp	r1, r3
 8022ff4:	bfde      	ittt	le
 8022ff6:	2330      	movle	r3, #48	; 0x30
 8022ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022ffc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8023000:	1b52      	subs	r2, r2, r5
 8023002:	6122      	str	r2, [r4, #16]
 8023004:	f8cd a000 	str.w	sl, [sp]
 8023008:	464b      	mov	r3, r9
 802300a:	aa03      	add	r2, sp, #12
 802300c:	4621      	mov	r1, r4
 802300e:	4640      	mov	r0, r8
 8023010:	f7ff fee2 	bl	8022dd8 <_printf_common>
 8023014:	3001      	adds	r0, #1
 8023016:	d14c      	bne.n	80230b2 <_printf_i+0x1fe>
 8023018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802301c:	b004      	add	sp, #16
 802301e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023022:	4835      	ldr	r0, [pc, #212]	; (80230f8 <_printf_i+0x244>)
 8023024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023028:	6829      	ldr	r1, [r5, #0]
 802302a:	6823      	ldr	r3, [r4, #0]
 802302c:	f851 6b04 	ldr.w	r6, [r1], #4
 8023030:	6029      	str	r1, [r5, #0]
 8023032:	061d      	lsls	r5, r3, #24
 8023034:	d514      	bpl.n	8023060 <_printf_i+0x1ac>
 8023036:	07df      	lsls	r7, r3, #31
 8023038:	bf44      	itt	mi
 802303a:	f043 0320 	orrmi.w	r3, r3, #32
 802303e:	6023      	strmi	r3, [r4, #0]
 8023040:	b91e      	cbnz	r6, 802304a <_printf_i+0x196>
 8023042:	6823      	ldr	r3, [r4, #0]
 8023044:	f023 0320 	bic.w	r3, r3, #32
 8023048:	6023      	str	r3, [r4, #0]
 802304a:	2310      	movs	r3, #16
 802304c:	e7b0      	b.n	8022fb0 <_printf_i+0xfc>
 802304e:	6823      	ldr	r3, [r4, #0]
 8023050:	f043 0320 	orr.w	r3, r3, #32
 8023054:	6023      	str	r3, [r4, #0]
 8023056:	2378      	movs	r3, #120	; 0x78
 8023058:	4828      	ldr	r0, [pc, #160]	; (80230fc <_printf_i+0x248>)
 802305a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802305e:	e7e3      	b.n	8023028 <_printf_i+0x174>
 8023060:	0659      	lsls	r1, r3, #25
 8023062:	bf48      	it	mi
 8023064:	b2b6      	uxthmi	r6, r6
 8023066:	e7e6      	b.n	8023036 <_printf_i+0x182>
 8023068:	4615      	mov	r5, r2
 802306a:	e7bb      	b.n	8022fe4 <_printf_i+0x130>
 802306c:	682b      	ldr	r3, [r5, #0]
 802306e:	6826      	ldr	r6, [r4, #0]
 8023070:	6961      	ldr	r1, [r4, #20]
 8023072:	1d18      	adds	r0, r3, #4
 8023074:	6028      	str	r0, [r5, #0]
 8023076:	0635      	lsls	r5, r6, #24
 8023078:	681b      	ldr	r3, [r3, #0]
 802307a:	d501      	bpl.n	8023080 <_printf_i+0x1cc>
 802307c:	6019      	str	r1, [r3, #0]
 802307e:	e002      	b.n	8023086 <_printf_i+0x1d2>
 8023080:	0670      	lsls	r0, r6, #25
 8023082:	d5fb      	bpl.n	802307c <_printf_i+0x1c8>
 8023084:	8019      	strh	r1, [r3, #0]
 8023086:	2300      	movs	r3, #0
 8023088:	6123      	str	r3, [r4, #16]
 802308a:	4615      	mov	r5, r2
 802308c:	e7ba      	b.n	8023004 <_printf_i+0x150>
 802308e:	682b      	ldr	r3, [r5, #0]
 8023090:	1d1a      	adds	r2, r3, #4
 8023092:	602a      	str	r2, [r5, #0]
 8023094:	681d      	ldr	r5, [r3, #0]
 8023096:	6862      	ldr	r2, [r4, #4]
 8023098:	2100      	movs	r1, #0
 802309a:	4628      	mov	r0, r5
 802309c:	f7dd f898 	bl	80001d0 <memchr>
 80230a0:	b108      	cbz	r0, 80230a6 <_printf_i+0x1f2>
 80230a2:	1b40      	subs	r0, r0, r5
 80230a4:	6060      	str	r0, [r4, #4]
 80230a6:	6863      	ldr	r3, [r4, #4]
 80230a8:	6123      	str	r3, [r4, #16]
 80230aa:	2300      	movs	r3, #0
 80230ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80230b0:	e7a8      	b.n	8023004 <_printf_i+0x150>
 80230b2:	6923      	ldr	r3, [r4, #16]
 80230b4:	462a      	mov	r2, r5
 80230b6:	4649      	mov	r1, r9
 80230b8:	4640      	mov	r0, r8
 80230ba:	47d0      	blx	sl
 80230bc:	3001      	adds	r0, #1
 80230be:	d0ab      	beq.n	8023018 <_printf_i+0x164>
 80230c0:	6823      	ldr	r3, [r4, #0]
 80230c2:	079b      	lsls	r3, r3, #30
 80230c4:	d413      	bmi.n	80230ee <_printf_i+0x23a>
 80230c6:	68e0      	ldr	r0, [r4, #12]
 80230c8:	9b03      	ldr	r3, [sp, #12]
 80230ca:	4298      	cmp	r0, r3
 80230cc:	bfb8      	it	lt
 80230ce:	4618      	movlt	r0, r3
 80230d0:	e7a4      	b.n	802301c <_printf_i+0x168>
 80230d2:	2301      	movs	r3, #1
 80230d4:	4632      	mov	r2, r6
 80230d6:	4649      	mov	r1, r9
 80230d8:	4640      	mov	r0, r8
 80230da:	47d0      	blx	sl
 80230dc:	3001      	adds	r0, #1
 80230de:	d09b      	beq.n	8023018 <_printf_i+0x164>
 80230e0:	3501      	adds	r5, #1
 80230e2:	68e3      	ldr	r3, [r4, #12]
 80230e4:	9903      	ldr	r1, [sp, #12]
 80230e6:	1a5b      	subs	r3, r3, r1
 80230e8:	42ab      	cmp	r3, r5
 80230ea:	dcf2      	bgt.n	80230d2 <_printf_i+0x21e>
 80230ec:	e7eb      	b.n	80230c6 <_printf_i+0x212>
 80230ee:	2500      	movs	r5, #0
 80230f0:	f104 0619 	add.w	r6, r4, #25
 80230f4:	e7f5      	b.n	80230e2 <_printf_i+0x22e>
 80230f6:	bf00      	nop
 80230f8:	0802a4c9 	.word	0x0802a4c9
 80230fc:	0802a4da 	.word	0x0802a4da

08023100 <_sbrk_r>:
 8023100:	b538      	push	{r3, r4, r5, lr}
 8023102:	4d06      	ldr	r5, [pc, #24]	; (802311c <_sbrk_r+0x1c>)
 8023104:	2300      	movs	r3, #0
 8023106:	4604      	mov	r4, r0
 8023108:	4608      	mov	r0, r1
 802310a:	602b      	str	r3, [r5, #0]
 802310c:	f7e5 fd86 	bl	8008c1c <_sbrk>
 8023110:	1c43      	adds	r3, r0, #1
 8023112:	d102      	bne.n	802311a <_sbrk_r+0x1a>
 8023114:	682b      	ldr	r3, [r5, #0]
 8023116:	b103      	cbz	r3, 802311a <_sbrk_r+0x1a>
 8023118:	6023      	str	r3, [r4, #0]
 802311a:	bd38      	pop	{r3, r4, r5, pc}
 802311c:	2000262c 	.word	0x2000262c

08023120 <_raise_r>:
 8023120:	291f      	cmp	r1, #31
 8023122:	b538      	push	{r3, r4, r5, lr}
 8023124:	4604      	mov	r4, r0
 8023126:	460d      	mov	r5, r1
 8023128:	d904      	bls.n	8023134 <_raise_r+0x14>
 802312a:	2316      	movs	r3, #22
 802312c:	6003      	str	r3, [r0, #0]
 802312e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023132:	bd38      	pop	{r3, r4, r5, pc}
 8023134:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023136:	b112      	cbz	r2, 802313e <_raise_r+0x1e>
 8023138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802313c:	b94b      	cbnz	r3, 8023152 <_raise_r+0x32>
 802313e:	4620      	mov	r0, r4
 8023140:	f000 f830 	bl	80231a4 <_getpid_r>
 8023144:	462a      	mov	r2, r5
 8023146:	4601      	mov	r1, r0
 8023148:	4620      	mov	r0, r4
 802314a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802314e:	f000 b817 	b.w	8023180 <_kill_r>
 8023152:	2b01      	cmp	r3, #1
 8023154:	d00a      	beq.n	802316c <_raise_r+0x4c>
 8023156:	1c59      	adds	r1, r3, #1
 8023158:	d103      	bne.n	8023162 <_raise_r+0x42>
 802315a:	2316      	movs	r3, #22
 802315c:	6003      	str	r3, [r0, #0]
 802315e:	2001      	movs	r0, #1
 8023160:	e7e7      	b.n	8023132 <_raise_r+0x12>
 8023162:	2400      	movs	r4, #0
 8023164:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023168:	4628      	mov	r0, r5
 802316a:	4798      	blx	r3
 802316c:	2000      	movs	r0, #0
 802316e:	e7e0      	b.n	8023132 <_raise_r+0x12>

08023170 <raise>:
 8023170:	4b02      	ldr	r3, [pc, #8]	; (802317c <raise+0xc>)
 8023172:	4601      	mov	r1, r0
 8023174:	6818      	ldr	r0, [r3, #0]
 8023176:	f7ff bfd3 	b.w	8023120 <_raise_r>
 802317a:	bf00      	nop
 802317c:	20000270 	.word	0x20000270

08023180 <_kill_r>:
 8023180:	b538      	push	{r3, r4, r5, lr}
 8023182:	4d07      	ldr	r5, [pc, #28]	; (80231a0 <_kill_r+0x20>)
 8023184:	2300      	movs	r3, #0
 8023186:	4604      	mov	r4, r0
 8023188:	4608      	mov	r0, r1
 802318a:	4611      	mov	r1, r2
 802318c:	602b      	str	r3, [r5, #0]
 802318e:	f7e5 fcbd 	bl	8008b0c <_kill>
 8023192:	1c43      	adds	r3, r0, #1
 8023194:	d102      	bne.n	802319c <_kill_r+0x1c>
 8023196:	682b      	ldr	r3, [r5, #0]
 8023198:	b103      	cbz	r3, 802319c <_kill_r+0x1c>
 802319a:	6023      	str	r3, [r4, #0]
 802319c:	bd38      	pop	{r3, r4, r5, pc}
 802319e:	bf00      	nop
 80231a0:	2000262c 	.word	0x2000262c

080231a4 <_getpid_r>:
 80231a4:	f7e5 bcaa 	b.w	8008afc <_getpid>

080231a8 <strncmp>:
 80231a8:	b510      	push	{r4, lr}
 80231aa:	b17a      	cbz	r2, 80231cc <strncmp+0x24>
 80231ac:	4603      	mov	r3, r0
 80231ae:	3901      	subs	r1, #1
 80231b0:	1884      	adds	r4, r0, r2
 80231b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80231b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80231ba:	4290      	cmp	r0, r2
 80231bc:	d101      	bne.n	80231c2 <strncmp+0x1a>
 80231be:	42a3      	cmp	r3, r4
 80231c0:	d101      	bne.n	80231c6 <strncmp+0x1e>
 80231c2:	1a80      	subs	r0, r0, r2
 80231c4:	bd10      	pop	{r4, pc}
 80231c6:	2800      	cmp	r0, #0
 80231c8:	d1f3      	bne.n	80231b2 <strncmp+0xa>
 80231ca:	e7fa      	b.n	80231c2 <strncmp+0x1a>
 80231cc:	4610      	mov	r0, r2
 80231ce:	e7f9      	b.n	80231c4 <strncmp+0x1c>

080231d0 <sulp>:
 80231d0:	b570      	push	{r4, r5, r6, lr}
 80231d2:	4604      	mov	r4, r0
 80231d4:	460d      	mov	r5, r1
 80231d6:	ec45 4b10 	vmov	d0, r4, r5
 80231da:	4616      	mov	r6, r2
 80231dc:	f002 f822 	bl	8025224 <__ulp>
 80231e0:	ec51 0b10 	vmov	r0, r1, d0
 80231e4:	b17e      	cbz	r6, 8023206 <sulp+0x36>
 80231e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80231ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80231ee:	2b00      	cmp	r3, #0
 80231f0:	dd09      	ble.n	8023206 <sulp+0x36>
 80231f2:	051b      	lsls	r3, r3, #20
 80231f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80231f8:	2400      	movs	r4, #0
 80231fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80231fe:	4622      	mov	r2, r4
 8023200:	462b      	mov	r3, r5
 8023202:	f7dd fa03 	bl	800060c <__aeabi_dmul>
 8023206:	bd70      	pop	{r4, r5, r6, pc}

08023208 <_strtod_l>:
 8023208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802320c:	ed2d 8b02 	vpush	{d8}
 8023210:	b09d      	sub	sp, #116	; 0x74
 8023212:	461f      	mov	r7, r3
 8023214:	2300      	movs	r3, #0
 8023216:	9318      	str	r3, [sp, #96]	; 0x60
 8023218:	4ba2      	ldr	r3, [pc, #648]	; (80234a4 <_strtod_l+0x29c>)
 802321a:	9213      	str	r2, [sp, #76]	; 0x4c
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	9305      	str	r3, [sp, #20]
 8023220:	4604      	mov	r4, r0
 8023222:	4618      	mov	r0, r3
 8023224:	4688      	mov	r8, r1
 8023226:	f7dd f82d 	bl	8000284 <strlen>
 802322a:	f04f 0a00 	mov.w	sl, #0
 802322e:	4605      	mov	r5, r0
 8023230:	f04f 0b00 	mov.w	fp, #0
 8023234:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8023238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802323a:	781a      	ldrb	r2, [r3, #0]
 802323c:	2a2b      	cmp	r2, #43	; 0x2b
 802323e:	d04e      	beq.n	80232de <_strtod_l+0xd6>
 8023240:	d83b      	bhi.n	80232ba <_strtod_l+0xb2>
 8023242:	2a0d      	cmp	r2, #13
 8023244:	d834      	bhi.n	80232b0 <_strtod_l+0xa8>
 8023246:	2a08      	cmp	r2, #8
 8023248:	d834      	bhi.n	80232b4 <_strtod_l+0xac>
 802324a:	2a00      	cmp	r2, #0
 802324c:	d03e      	beq.n	80232cc <_strtod_l+0xc4>
 802324e:	2300      	movs	r3, #0
 8023250:	930a      	str	r3, [sp, #40]	; 0x28
 8023252:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8023254:	7833      	ldrb	r3, [r6, #0]
 8023256:	2b30      	cmp	r3, #48	; 0x30
 8023258:	f040 80b0 	bne.w	80233bc <_strtod_l+0x1b4>
 802325c:	7873      	ldrb	r3, [r6, #1]
 802325e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023262:	2b58      	cmp	r3, #88	; 0x58
 8023264:	d168      	bne.n	8023338 <_strtod_l+0x130>
 8023266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023268:	9301      	str	r3, [sp, #4]
 802326a:	ab18      	add	r3, sp, #96	; 0x60
 802326c:	9702      	str	r7, [sp, #8]
 802326e:	9300      	str	r3, [sp, #0]
 8023270:	4a8d      	ldr	r2, [pc, #564]	; (80234a8 <_strtod_l+0x2a0>)
 8023272:	ab19      	add	r3, sp, #100	; 0x64
 8023274:	a917      	add	r1, sp, #92	; 0x5c
 8023276:	4620      	mov	r0, r4
 8023278:	f001 f8d6 	bl	8024428 <__gethex>
 802327c:	f010 0707 	ands.w	r7, r0, #7
 8023280:	4605      	mov	r5, r0
 8023282:	d005      	beq.n	8023290 <_strtod_l+0x88>
 8023284:	2f06      	cmp	r7, #6
 8023286:	d12c      	bne.n	80232e2 <_strtod_l+0xda>
 8023288:	3601      	adds	r6, #1
 802328a:	2300      	movs	r3, #0
 802328c:	9617      	str	r6, [sp, #92]	; 0x5c
 802328e:	930a      	str	r3, [sp, #40]	; 0x28
 8023290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023292:	2b00      	cmp	r3, #0
 8023294:	f040 8590 	bne.w	8023db8 <_strtod_l+0xbb0>
 8023298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802329a:	b1eb      	cbz	r3, 80232d8 <_strtod_l+0xd0>
 802329c:	4652      	mov	r2, sl
 802329e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80232a2:	ec43 2b10 	vmov	d0, r2, r3
 80232a6:	b01d      	add	sp, #116	; 0x74
 80232a8:	ecbd 8b02 	vpop	{d8}
 80232ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b0:	2a20      	cmp	r2, #32
 80232b2:	d1cc      	bne.n	802324e <_strtod_l+0x46>
 80232b4:	3301      	adds	r3, #1
 80232b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80232b8:	e7be      	b.n	8023238 <_strtod_l+0x30>
 80232ba:	2a2d      	cmp	r2, #45	; 0x2d
 80232bc:	d1c7      	bne.n	802324e <_strtod_l+0x46>
 80232be:	2201      	movs	r2, #1
 80232c0:	920a      	str	r2, [sp, #40]	; 0x28
 80232c2:	1c5a      	adds	r2, r3, #1
 80232c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80232c6:	785b      	ldrb	r3, [r3, #1]
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	d1c2      	bne.n	8023252 <_strtod_l+0x4a>
 80232cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80232ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80232d2:	2b00      	cmp	r3, #0
 80232d4:	f040 856e 	bne.w	8023db4 <_strtod_l+0xbac>
 80232d8:	4652      	mov	r2, sl
 80232da:	465b      	mov	r3, fp
 80232dc:	e7e1      	b.n	80232a2 <_strtod_l+0x9a>
 80232de:	2200      	movs	r2, #0
 80232e0:	e7ee      	b.n	80232c0 <_strtod_l+0xb8>
 80232e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80232e4:	b13a      	cbz	r2, 80232f6 <_strtod_l+0xee>
 80232e6:	2135      	movs	r1, #53	; 0x35
 80232e8:	a81a      	add	r0, sp, #104	; 0x68
 80232ea:	f002 f8a6 	bl	802543a <__copybits>
 80232ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80232f0:	4620      	mov	r0, r4
 80232f2:	f001 fc65 	bl	8024bc0 <_Bfree>
 80232f6:	3f01      	subs	r7, #1
 80232f8:	2f04      	cmp	r7, #4
 80232fa:	d806      	bhi.n	802330a <_strtod_l+0x102>
 80232fc:	e8df f007 	tbb	[pc, r7]
 8023300:	1714030a 	.word	0x1714030a
 8023304:	0a          	.byte	0x0a
 8023305:	00          	.byte	0x00
 8023306:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 802330a:	0728      	lsls	r0, r5, #28
 802330c:	d5c0      	bpl.n	8023290 <_strtod_l+0x88>
 802330e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8023312:	e7bd      	b.n	8023290 <_strtod_l+0x88>
 8023314:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8023318:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802331a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802331e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023322:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8023326:	e7f0      	b.n	802330a <_strtod_l+0x102>
 8023328:	f8df b180 	ldr.w	fp, [pc, #384]	; 80234ac <_strtod_l+0x2a4>
 802332c:	e7ed      	b.n	802330a <_strtod_l+0x102>
 802332e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8023332:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8023336:	e7e8      	b.n	802330a <_strtod_l+0x102>
 8023338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802333a:	1c5a      	adds	r2, r3, #1
 802333c:	9217      	str	r2, [sp, #92]	; 0x5c
 802333e:	785b      	ldrb	r3, [r3, #1]
 8023340:	2b30      	cmp	r3, #48	; 0x30
 8023342:	d0f9      	beq.n	8023338 <_strtod_l+0x130>
 8023344:	2b00      	cmp	r3, #0
 8023346:	d0a3      	beq.n	8023290 <_strtod_l+0x88>
 8023348:	2301      	movs	r3, #1
 802334a:	f04f 0900 	mov.w	r9, #0
 802334e:	9304      	str	r3, [sp, #16]
 8023350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023352:	9308      	str	r3, [sp, #32]
 8023354:	f8cd 901c 	str.w	r9, [sp, #28]
 8023358:	464f      	mov	r7, r9
 802335a:	220a      	movs	r2, #10
 802335c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802335e:	7806      	ldrb	r6, [r0, #0]
 8023360:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8023364:	b2d9      	uxtb	r1, r3
 8023366:	2909      	cmp	r1, #9
 8023368:	d92a      	bls.n	80233c0 <_strtod_l+0x1b8>
 802336a:	9905      	ldr	r1, [sp, #20]
 802336c:	462a      	mov	r2, r5
 802336e:	f7ff ff1b 	bl	80231a8 <strncmp>
 8023372:	b398      	cbz	r0, 80233dc <_strtod_l+0x1d4>
 8023374:	2000      	movs	r0, #0
 8023376:	4632      	mov	r2, r6
 8023378:	463d      	mov	r5, r7
 802337a:	9005      	str	r0, [sp, #20]
 802337c:	4603      	mov	r3, r0
 802337e:	2a65      	cmp	r2, #101	; 0x65
 8023380:	d001      	beq.n	8023386 <_strtod_l+0x17e>
 8023382:	2a45      	cmp	r2, #69	; 0x45
 8023384:	d118      	bne.n	80233b8 <_strtod_l+0x1b0>
 8023386:	b91d      	cbnz	r5, 8023390 <_strtod_l+0x188>
 8023388:	9a04      	ldr	r2, [sp, #16]
 802338a:	4302      	orrs	r2, r0
 802338c:	d09e      	beq.n	80232cc <_strtod_l+0xc4>
 802338e:	2500      	movs	r5, #0
 8023390:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8023394:	f108 0201 	add.w	r2, r8, #1
 8023398:	9217      	str	r2, [sp, #92]	; 0x5c
 802339a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802339e:	2a2b      	cmp	r2, #43	; 0x2b
 80233a0:	d075      	beq.n	802348e <_strtod_l+0x286>
 80233a2:	2a2d      	cmp	r2, #45	; 0x2d
 80233a4:	d07b      	beq.n	802349e <_strtod_l+0x296>
 80233a6:	f04f 0c00 	mov.w	ip, #0
 80233aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80233ae:	2909      	cmp	r1, #9
 80233b0:	f240 8082 	bls.w	80234b8 <_strtod_l+0x2b0>
 80233b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80233b8:	2600      	movs	r6, #0
 80233ba:	e09d      	b.n	80234f8 <_strtod_l+0x2f0>
 80233bc:	2300      	movs	r3, #0
 80233be:	e7c4      	b.n	802334a <_strtod_l+0x142>
 80233c0:	2f08      	cmp	r7, #8
 80233c2:	bfd8      	it	le
 80233c4:	9907      	ldrle	r1, [sp, #28]
 80233c6:	f100 0001 	add.w	r0, r0, #1
 80233ca:	bfda      	itte	le
 80233cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80233d0:	9307      	strle	r3, [sp, #28]
 80233d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80233d6:	3701      	adds	r7, #1
 80233d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80233da:	e7bf      	b.n	802335c <_strtod_l+0x154>
 80233dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80233de:	195a      	adds	r2, r3, r5
 80233e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80233e2:	5d5a      	ldrb	r2, [r3, r5]
 80233e4:	2f00      	cmp	r7, #0
 80233e6:	d037      	beq.n	8023458 <_strtod_l+0x250>
 80233e8:	9005      	str	r0, [sp, #20]
 80233ea:	463d      	mov	r5, r7
 80233ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80233f0:	2b09      	cmp	r3, #9
 80233f2:	d912      	bls.n	802341a <_strtod_l+0x212>
 80233f4:	2301      	movs	r3, #1
 80233f6:	e7c2      	b.n	802337e <_strtod_l+0x176>
 80233f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80233fa:	1c5a      	adds	r2, r3, #1
 80233fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80233fe:	785a      	ldrb	r2, [r3, #1]
 8023400:	3001      	adds	r0, #1
 8023402:	2a30      	cmp	r2, #48	; 0x30
 8023404:	d0f8      	beq.n	80233f8 <_strtod_l+0x1f0>
 8023406:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802340a:	2b08      	cmp	r3, #8
 802340c:	f200 84d9 	bhi.w	8023dc2 <_strtod_l+0xbba>
 8023410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023412:	9005      	str	r0, [sp, #20]
 8023414:	2000      	movs	r0, #0
 8023416:	9308      	str	r3, [sp, #32]
 8023418:	4605      	mov	r5, r0
 802341a:	3a30      	subs	r2, #48	; 0x30
 802341c:	f100 0301 	add.w	r3, r0, #1
 8023420:	d014      	beq.n	802344c <_strtod_l+0x244>
 8023422:	9905      	ldr	r1, [sp, #20]
 8023424:	4419      	add	r1, r3
 8023426:	9105      	str	r1, [sp, #20]
 8023428:	462b      	mov	r3, r5
 802342a:	eb00 0e05 	add.w	lr, r0, r5
 802342e:	210a      	movs	r1, #10
 8023430:	4573      	cmp	r3, lr
 8023432:	d113      	bne.n	802345c <_strtod_l+0x254>
 8023434:	182b      	adds	r3, r5, r0
 8023436:	2b08      	cmp	r3, #8
 8023438:	f105 0501 	add.w	r5, r5, #1
 802343c:	4405      	add	r5, r0
 802343e:	dc1c      	bgt.n	802347a <_strtod_l+0x272>
 8023440:	9907      	ldr	r1, [sp, #28]
 8023442:	230a      	movs	r3, #10
 8023444:	fb03 2301 	mla	r3, r3, r1, r2
 8023448:	9307      	str	r3, [sp, #28]
 802344a:	2300      	movs	r3, #0
 802344c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802344e:	1c51      	adds	r1, r2, #1
 8023450:	9117      	str	r1, [sp, #92]	; 0x5c
 8023452:	7852      	ldrb	r2, [r2, #1]
 8023454:	4618      	mov	r0, r3
 8023456:	e7c9      	b.n	80233ec <_strtod_l+0x1e4>
 8023458:	4638      	mov	r0, r7
 802345a:	e7d2      	b.n	8023402 <_strtod_l+0x1fa>
 802345c:	2b08      	cmp	r3, #8
 802345e:	dc04      	bgt.n	802346a <_strtod_l+0x262>
 8023460:	9e07      	ldr	r6, [sp, #28]
 8023462:	434e      	muls	r6, r1
 8023464:	9607      	str	r6, [sp, #28]
 8023466:	3301      	adds	r3, #1
 8023468:	e7e2      	b.n	8023430 <_strtod_l+0x228>
 802346a:	f103 0c01 	add.w	ip, r3, #1
 802346e:	f1bc 0f10 	cmp.w	ip, #16
 8023472:	bfd8      	it	le
 8023474:	fb01 f909 	mulle.w	r9, r1, r9
 8023478:	e7f5      	b.n	8023466 <_strtod_l+0x25e>
 802347a:	2d10      	cmp	r5, #16
 802347c:	bfdc      	itt	le
 802347e:	230a      	movle	r3, #10
 8023480:	fb03 2909 	mlale	r9, r3, r9, r2
 8023484:	e7e1      	b.n	802344a <_strtod_l+0x242>
 8023486:	2300      	movs	r3, #0
 8023488:	9305      	str	r3, [sp, #20]
 802348a:	2301      	movs	r3, #1
 802348c:	e77c      	b.n	8023388 <_strtod_l+0x180>
 802348e:	f04f 0c00 	mov.w	ip, #0
 8023492:	f108 0202 	add.w	r2, r8, #2
 8023496:	9217      	str	r2, [sp, #92]	; 0x5c
 8023498:	f898 2002 	ldrb.w	r2, [r8, #2]
 802349c:	e785      	b.n	80233aa <_strtod_l+0x1a2>
 802349e:	f04f 0c01 	mov.w	ip, #1
 80234a2:	e7f6      	b.n	8023492 <_strtod_l+0x28a>
 80234a4:	0802a724 	.word	0x0802a724
 80234a8:	0802a4f8 	.word	0x0802a4f8
 80234ac:	7ff00000 	.word	0x7ff00000
 80234b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80234b2:	1c51      	adds	r1, r2, #1
 80234b4:	9117      	str	r1, [sp, #92]	; 0x5c
 80234b6:	7852      	ldrb	r2, [r2, #1]
 80234b8:	2a30      	cmp	r2, #48	; 0x30
 80234ba:	d0f9      	beq.n	80234b0 <_strtod_l+0x2a8>
 80234bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80234c0:	2908      	cmp	r1, #8
 80234c2:	f63f af79 	bhi.w	80233b8 <_strtod_l+0x1b0>
 80234c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80234ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80234cc:	9206      	str	r2, [sp, #24]
 80234ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80234d0:	1c51      	adds	r1, r2, #1
 80234d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80234d4:	7852      	ldrb	r2, [r2, #1]
 80234d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80234da:	2e09      	cmp	r6, #9
 80234dc:	d937      	bls.n	802354e <_strtod_l+0x346>
 80234de:	9e06      	ldr	r6, [sp, #24]
 80234e0:	1b89      	subs	r1, r1, r6
 80234e2:	2908      	cmp	r1, #8
 80234e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80234e8:	dc02      	bgt.n	80234f0 <_strtod_l+0x2e8>
 80234ea:	4576      	cmp	r6, lr
 80234ec:	bfa8      	it	ge
 80234ee:	4676      	movge	r6, lr
 80234f0:	f1bc 0f00 	cmp.w	ip, #0
 80234f4:	d000      	beq.n	80234f8 <_strtod_l+0x2f0>
 80234f6:	4276      	negs	r6, r6
 80234f8:	2d00      	cmp	r5, #0
 80234fa:	d14d      	bne.n	8023598 <_strtod_l+0x390>
 80234fc:	9904      	ldr	r1, [sp, #16]
 80234fe:	4301      	orrs	r1, r0
 8023500:	f47f aec6 	bne.w	8023290 <_strtod_l+0x88>
 8023504:	2b00      	cmp	r3, #0
 8023506:	f47f aee1 	bne.w	80232cc <_strtod_l+0xc4>
 802350a:	2a69      	cmp	r2, #105	; 0x69
 802350c:	d027      	beq.n	802355e <_strtod_l+0x356>
 802350e:	dc24      	bgt.n	802355a <_strtod_l+0x352>
 8023510:	2a49      	cmp	r2, #73	; 0x49
 8023512:	d024      	beq.n	802355e <_strtod_l+0x356>
 8023514:	2a4e      	cmp	r2, #78	; 0x4e
 8023516:	f47f aed9 	bne.w	80232cc <_strtod_l+0xc4>
 802351a:	499f      	ldr	r1, [pc, #636]	; (8023798 <_strtod_l+0x590>)
 802351c:	a817      	add	r0, sp, #92	; 0x5c
 802351e:	f001 f9db 	bl	80248d8 <__match>
 8023522:	2800      	cmp	r0, #0
 8023524:	f43f aed2 	beq.w	80232cc <_strtod_l+0xc4>
 8023528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802352a:	781b      	ldrb	r3, [r3, #0]
 802352c:	2b28      	cmp	r3, #40	; 0x28
 802352e:	d12d      	bne.n	802358c <_strtod_l+0x384>
 8023530:	499a      	ldr	r1, [pc, #616]	; (802379c <_strtod_l+0x594>)
 8023532:	aa1a      	add	r2, sp, #104	; 0x68
 8023534:	a817      	add	r0, sp, #92	; 0x5c
 8023536:	f001 f9e3 	bl	8024900 <__hexnan>
 802353a:	2805      	cmp	r0, #5
 802353c:	d126      	bne.n	802358c <_strtod_l+0x384>
 802353e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023540:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8023544:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8023548:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 802354c:	e6a0      	b.n	8023290 <_strtod_l+0x88>
 802354e:	210a      	movs	r1, #10
 8023550:	fb01 2e0e 	mla	lr, r1, lr, r2
 8023554:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8023558:	e7b9      	b.n	80234ce <_strtod_l+0x2c6>
 802355a:	2a6e      	cmp	r2, #110	; 0x6e
 802355c:	e7db      	b.n	8023516 <_strtod_l+0x30e>
 802355e:	4990      	ldr	r1, [pc, #576]	; (80237a0 <_strtod_l+0x598>)
 8023560:	a817      	add	r0, sp, #92	; 0x5c
 8023562:	f001 f9b9 	bl	80248d8 <__match>
 8023566:	2800      	cmp	r0, #0
 8023568:	f43f aeb0 	beq.w	80232cc <_strtod_l+0xc4>
 802356c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802356e:	498d      	ldr	r1, [pc, #564]	; (80237a4 <_strtod_l+0x59c>)
 8023570:	3b01      	subs	r3, #1
 8023572:	a817      	add	r0, sp, #92	; 0x5c
 8023574:	9317      	str	r3, [sp, #92]	; 0x5c
 8023576:	f001 f9af 	bl	80248d8 <__match>
 802357a:	b910      	cbnz	r0, 8023582 <_strtod_l+0x37a>
 802357c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802357e:	3301      	adds	r3, #1
 8023580:	9317      	str	r3, [sp, #92]	; 0x5c
 8023582:	f8df b230 	ldr.w	fp, [pc, #560]	; 80237b4 <_strtod_l+0x5ac>
 8023586:	f04f 0a00 	mov.w	sl, #0
 802358a:	e681      	b.n	8023290 <_strtod_l+0x88>
 802358c:	4886      	ldr	r0, [pc, #536]	; (80237a8 <_strtod_l+0x5a0>)
 802358e:	f7ff f87f 	bl	8022690 <nan>
 8023592:	ec5b ab10 	vmov	sl, fp, d0
 8023596:	e67b      	b.n	8023290 <_strtod_l+0x88>
 8023598:	9b05      	ldr	r3, [sp, #20]
 802359a:	9807      	ldr	r0, [sp, #28]
 802359c:	1af3      	subs	r3, r6, r3
 802359e:	2f00      	cmp	r7, #0
 80235a0:	bf08      	it	eq
 80235a2:	462f      	moveq	r7, r5
 80235a4:	2d10      	cmp	r5, #16
 80235a6:	9306      	str	r3, [sp, #24]
 80235a8:	46a8      	mov	r8, r5
 80235aa:	bfa8      	it	ge
 80235ac:	f04f 0810 	movge.w	r8, #16
 80235b0:	f7dc ffb2 	bl	8000518 <__aeabi_ui2d>
 80235b4:	2d09      	cmp	r5, #9
 80235b6:	4682      	mov	sl, r0
 80235b8:	468b      	mov	fp, r1
 80235ba:	dd13      	ble.n	80235e4 <_strtod_l+0x3dc>
 80235bc:	4b7b      	ldr	r3, [pc, #492]	; (80237ac <_strtod_l+0x5a4>)
 80235be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80235c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80235c6:	f7dd f821 	bl	800060c <__aeabi_dmul>
 80235ca:	4682      	mov	sl, r0
 80235cc:	4648      	mov	r0, r9
 80235ce:	468b      	mov	fp, r1
 80235d0:	f7dc ffa2 	bl	8000518 <__aeabi_ui2d>
 80235d4:	4602      	mov	r2, r0
 80235d6:	460b      	mov	r3, r1
 80235d8:	4650      	mov	r0, sl
 80235da:	4659      	mov	r1, fp
 80235dc:	f7dc fe60 	bl	80002a0 <__adddf3>
 80235e0:	4682      	mov	sl, r0
 80235e2:	468b      	mov	fp, r1
 80235e4:	2d0f      	cmp	r5, #15
 80235e6:	dc38      	bgt.n	802365a <_strtod_l+0x452>
 80235e8:	9b06      	ldr	r3, [sp, #24]
 80235ea:	2b00      	cmp	r3, #0
 80235ec:	f43f ae50 	beq.w	8023290 <_strtod_l+0x88>
 80235f0:	dd24      	ble.n	802363c <_strtod_l+0x434>
 80235f2:	2b16      	cmp	r3, #22
 80235f4:	dc0b      	bgt.n	802360e <_strtod_l+0x406>
 80235f6:	496d      	ldr	r1, [pc, #436]	; (80237ac <_strtod_l+0x5a4>)
 80235f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80235fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023600:	4652      	mov	r2, sl
 8023602:	465b      	mov	r3, fp
 8023604:	f7dd f802 	bl	800060c <__aeabi_dmul>
 8023608:	4682      	mov	sl, r0
 802360a:	468b      	mov	fp, r1
 802360c:	e640      	b.n	8023290 <_strtod_l+0x88>
 802360e:	9a06      	ldr	r2, [sp, #24]
 8023610:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8023614:	4293      	cmp	r3, r2
 8023616:	db20      	blt.n	802365a <_strtod_l+0x452>
 8023618:	4c64      	ldr	r4, [pc, #400]	; (80237ac <_strtod_l+0x5a4>)
 802361a:	f1c5 050f 	rsb	r5, r5, #15
 802361e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8023622:	4652      	mov	r2, sl
 8023624:	465b      	mov	r3, fp
 8023626:	e9d1 0100 	ldrd	r0, r1, [r1]
 802362a:	f7dc ffef 	bl	800060c <__aeabi_dmul>
 802362e:	9b06      	ldr	r3, [sp, #24]
 8023630:	1b5d      	subs	r5, r3, r5
 8023632:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8023636:	e9d4 2300 	ldrd	r2, r3, [r4]
 802363a:	e7e3      	b.n	8023604 <_strtod_l+0x3fc>
 802363c:	9b06      	ldr	r3, [sp, #24]
 802363e:	3316      	adds	r3, #22
 8023640:	db0b      	blt.n	802365a <_strtod_l+0x452>
 8023642:	9b05      	ldr	r3, [sp, #20]
 8023644:	1b9e      	subs	r6, r3, r6
 8023646:	4b59      	ldr	r3, [pc, #356]	; (80237ac <_strtod_l+0x5a4>)
 8023648:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 802364c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023650:	4650      	mov	r0, sl
 8023652:	4659      	mov	r1, fp
 8023654:	f7dd f904 	bl	8000860 <__aeabi_ddiv>
 8023658:	e7d6      	b.n	8023608 <_strtod_l+0x400>
 802365a:	9b06      	ldr	r3, [sp, #24]
 802365c:	eba5 0808 	sub.w	r8, r5, r8
 8023660:	4498      	add	r8, r3
 8023662:	f1b8 0f00 	cmp.w	r8, #0
 8023666:	dd74      	ble.n	8023752 <_strtod_l+0x54a>
 8023668:	f018 030f 	ands.w	r3, r8, #15
 802366c:	d00a      	beq.n	8023684 <_strtod_l+0x47c>
 802366e:	494f      	ldr	r1, [pc, #316]	; (80237ac <_strtod_l+0x5a4>)
 8023670:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023674:	4652      	mov	r2, sl
 8023676:	465b      	mov	r3, fp
 8023678:	e9d1 0100 	ldrd	r0, r1, [r1]
 802367c:	f7dc ffc6 	bl	800060c <__aeabi_dmul>
 8023680:	4682      	mov	sl, r0
 8023682:	468b      	mov	fp, r1
 8023684:	f038 080f 	bics.w	r8, r8, #15
 8023688:	d04f      	beq.n	802372a <_strtod_l+0x522>
 802368a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 802368e:	dd22      	ble.n	80236d6 <_strtod_l+0x4ce>
 8023690:	2500      	movs	r5, #0
 8023692:	462e      	mov	r6, r5
 8023694:	9507      	str	r5, [sp, #28]
 8023696:	9505      	str	r5, [sp, #20]
 8023698:	2322      	movs	r3, #34	; 0x22
 802369a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80237b4 <_strtod_l+0x5ac>
 802369e:	6023      	str	r3, [r4, #0]
 80236a0:	f04f 0a00 	mov.w	sl, #0
 80236a4:	9b07      	ldr	r3, [sp, #28]
 80236a6:	2b00      	cmp	r3, #0
 80236a8:	f43f adf2 	beq.w	8023290 <_strtod_l+0x88>
 80236ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80236ae:	4620      	mov	r0, r4
 80236b0:	f001 fa86 	bl	8024bc0 <_Bfree>
 80236b4:	9905      	ldr	r1, [sp, #20]
 80236b6:	4620      	mov	r0, r4
 80236b8:	f001 fa82 	bl	8024bc0 <_Bfree>
 80236bc:	4631      	mov	r1, r6
 80236be:	4620      	mov	r0, r4
 80236c0:	f001 fa7e 	bl	8024bc0 <_Bfree>
 80236c4:	9907      	ldr	r1, [sp, #28]
 80236c6:	4620      	mov	r0, r4
 80236c8:	f001 fa7a 	bl	8024bc0 <_Bfree>
 80236cc:	4629      	mov	r1, r5
 80236ce:	4620      	mov	r0, r4
 80236d0:	f001 fa76 	bl	8024bc0 <_Bfree>
 80236d4:	e5dc      	b.n	8023290 <_strtod_l+0x88>
 80236d6:	4b36      	ldr	r3, [pc, #216]	; (80237b0 <_strtod_l+0x5a8>)
 80236d8:	9304      	str	r3, [sp, #16]
 80236da:	2300      	movs	r3, #0
 80236dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80236e0:	4650      	mov	r0, sl
 80236e2:	4659      	mov	r1, fp
 80236e4:	4699      	mov	r9, r3
 80236e6:	f1b8 0f01 	cmp.w	r8, #1
 80236ea:	dc21      	bgt.n	8023730 <_strtod_l+0x528>
 80236ec:	b10b      	cbz	r3, 80236f2 <_strtod_l+0x4ea>
 80236ee:	4682      	mov	sl, r0
 80236f0:	468b      	mov	fp, r1
 80236f2:	4b2f      	ldr	r3, [pc, #188]	; (80237b0 <_strtod_l+0x5a8>)
 80236f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80236f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80236fc:	4652      	mov	r2, sl
 80236fe:	465b      	mov	r3, fp
 8023700:	e9d9 0100 	ldrd	r0, r1, [r9]
 8023704:	f7dc ff82 	bl	800060c <__aeabi_dmul>
 8023708:	4b2a      	ldr	r3, [pc, #168]	; (80237b4 <_strtod_l+0x5ac>)
 802370a:	460a      	mov	r2, r1
 802370c:	400b      	ands	r3, r1
 802370e:	492a      	ldr	r1, [pc, #168]	; (80237b8 <_strtod_l+0x5b0>)
 8023710:	428b      	cmp	r3, r1
 8023712:	4682      	mov	sl, r0
 8023714:	d8bc      	bhi.n	8023690 <_strtod_l+0x488>
 8023716:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802371a:	428b      	cmp	r3, r1
 802371c:	bf86      	itte	hi
 802371e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80237bc <_strtod_l+0x5b4>
 8023722:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8023726:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 802372a:	2300      	movs	r3, #0
 802372c:	9304      	str	r3, [sp, #16]
 802372e:	e084      	b.n	802383a <_strtod_l+0x632>
 8023730:	f018 0f01 	tst.w	r8, #1
 8023734:	d005      	beq.n	8023742 <_strtod_l+0x53a>
 8023736:	9b04      	ldr	r3, [sp, #16]
 8023738:	e9d3 2300 	ldrd	r2, r3, [r3]
 802373c:	f7dc ff66 	bl	800060c <__aeabi_dmul>
 8023740:	2301      	movs	r3, #1
 8023742:	9a04      	ldr	r2, [sp, #16]
 8023744:	3208      	adds	r2, #8
 8023746:	f109 0901 	add.w	r9, r9, #1
 802374a:	ea4f 0868 	mov.w	r8, r8, asr #1
 802374e:	9204      	str	r2, [sp, #16]
 8023750:	e7c9      	b.n	80236e6 <_strtod_l+0x4de>
 8023752:	d0ea      	beq.n	802372a <_strtod_l+0x522>
 8023754:	f1c8 0800 	rsb	r8, r8, #0
 8023758:	f018 020f 	ands.w	r2, r8, #15
 802375c:	d00a      	beq.n	8023774 <_strtod_l+0x56c>
 802375e:	4b13      	ldr	r3, [pc, #76]	; (80237ac <_strtod_l+0x5a4>)
 8023760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023764:	4650      	mov	r0, sl
 8023766:	4659      	mov	r1, fp
 8023768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802376c:	f7dd f878 	bl	8000860 <__aeabi_ddiv>
 8023770:	4682      	mov	sl, r0
 8023772:	468b      	mov	fp, r1
 8023774:	ea5f 1828 	movs.w	r8, r8, asr #4
 8023778:	d0d7      	beq.n	802372a <_strtod_l+0x522>
 802377a:	f1b8 0f1f 	cmp.w	r8, #31
 802377e:	dd1f      	ble.n	80237c0 <_strtod_l+0x5b8>
 8023780:	2500      	movs	r5, #0
 8023782:	462e      	mov	r6, r5
 8023784:	9507      	str	r5, [sp, #28]
 8023786:	9505      	str	r5, [sp, #20]
 8023788:	2322      	movs	r3, #34	; 0x22
 802378a:	f04f 0a00 	mov.w	sl, #0
 802378e:	f04f 0b00 	mov.w	fp, #0
 8023792:	6023      	str	r3, [r4, #0]
 8023794:	e786      	b.n	80236a4 <_strtod_l+0x49c>
 8023796:	bf00      	nop
 8023798:	0802a4f4 	.word	0x0802a4f4
 802379c:	0802a50c 	.word	0x0802a50c
 80237a0:	0802a4eb 	.word	0x0802a4eb
 80237a4:	0802a4ee 	.word	0x0802a4ee
 80237a8:	0802a4b3 	.word	0x0802a4b3
 80237ac:	0802a7d8 	.word	0x0802a7d8
 80237b0:	0802a7b0 	.word	0x0802a7b0
 80237b4:	7ff00000 	.word	0x7ff00000
 80237b8:	7ca00000 	.word	0x7ca00000
 80237bc:	7fefffff 	.word	0x7fefffff
 80237c0:	f018 0310 	ands.w	r3, r8, #16
 80237c4:	bf18      	it	ne
 80237c6:	236a      	movne	r3, #106	; 0x6a
 80237c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8023b78 <_strtod_l+0x970>
 80237cc:	9304      	str	r3, [sp, #16]
 80237ce:	4650      	mov	r0, sl
 80237d0:	4659      	mov	r1, fp
 80237d2:	2300      	movs	r3, #0
 80237d4:	f018 0f01 	tst.w	r8, #1
 80237d8:	d004      	beq.n	80237e4 <_strtod_l+0x5dc>
 80237da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80237de:	f7dc ff15 	bl	800060c <__aeabi_dmul>
 80237e2:	2301      	movs	r3, #1
 80237e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80237e8:	f109 0908 	add.w	r9, r9, #8
 80237ec:	d1f2      	bne.n	80237d4 <_strtod_l+0x5cc>
 80237ee:	b10b      	cbz	r3, 80237f4 <_strtod_l+0x5ec>
 80237f0:	4682      	mov	sl, r0
 80237f2:	468b      	mov	fp, r1
 80237f4:	9b04      	ldr	r3, [sp, #16]
 80237f6:	b1c3      	cbz	r3, 802382a <_strtod_l+0x622>
 80237f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80237fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8023800:	2b00      	cmp	r3, #0
 8023802:	4659      	mov	r1, fp
 8023804:	dd11      	ble.n	802382a <_strtod_l+0x622>
 8023806:	2b1f      	cmp	r3, #31
 8023808:	f340 8124 	ble.w	8023a54 <_strtod_l+0x84c>
 802380c:	2b34      	cmp	r3, #52	; 0x34
 802380e:	bfde      	ittt	le
 8023810:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8023814:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8023818:	fa03 f202 	lslle.w	r2, r3, r2
 802381c:	f04f 0a00 	mov.w	sl, #0
 8023820:	bfcc      	ite	gt
 8023822:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8023826:	ea02 0b01 	andle.w	fp, r2, r1
 802382a:	2200      	movs	r2, #0
 802382c:	2300      	movs	r3, #0
 802382e:	4650      	mov	r0, sl
 8023830:	4659      	mov	r1, fp
 8023832:	f7dd f953 	bl	8000adc <__aeabi_dcmpeq>
 8023836:	2800      	cmp	r0, #0
 8023838:	d1a2      	bne.n	8023780 <_strtod_l+0x578>
 802383a:	9b07      	ldr	r3, [sp, #28]
 802383c:	9300      	str	r3, [sp, #0]
 802383e:	9908      	ldr	r1, [sp, #32]
 8023840:	462b      	mov	r3, r5
 8023842:	463a      	mov	r2, r7
 8023844:	4620      	mov	r0, r4
 8023846:	f001 fa23 	bl	8024c90 <__s2b>
 802384a:	9007      	str	r0, [sp, #28]
 802384c:	2800      	cmp	r0, #0
 802384e:	f43f af1f 	beq.w	8023690 <_strtod_l+0x488>
 8023852:	9b05      	ldr	r3, [sp, #20]
 8023854:	1b9e      	subs	r6, r3, r6
 8023856:	9b06      	ldr	r3, [sp, #24]
 8023858:	2b00      	cmp	r3, #0
 802385a:	bfb4      	ite	lt
 802385c:	4633      	movlt	r3, r6
 802385e:	2300      	movge	r3, #0
 8023860:	930c      	str	r3, [sp, #48]	; 0x30
 8023862:	9b06      	ldr	r3, [sp, #24]
 8023864:	2500      	movs	r5, #0
 8023866:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802386a:	9312      	str	r3, [sp, #72]	; 0x48
 802386c:	462e      	mov	r6, r5
 802386e:	9b07      	ldr	r3, [sp, #28]
 8023870:	4620      	mov	r0, r4
 8023872:	6859      	ldr	r1, [r3, #4]
 8023874:	f001 f964 	bl	8024b40 <_Balloc>
 8023878:	9005      	str	r0, [sp, #20]
 802387a:	2800      	cmp	r0, #0
 802387c:	f43f af0c 	beq.w	8023698 <_strtod_l+0x490>
 8023880:	9b07      	ldr	r3, [sp, #28]
 8023882:	691a      	ldr	r2, [r3, #16]
 8023884:	3202      	adds	r2, #2
 8023886:	f103 010c 	add.w	r1, r3, #12
 802388a:	0092      	lsls	r2, r2, #2
 802388c:	300c      	adds	r0, #12
 802388e:	f7ff f823 	bl	80228d8 <memcpy>
 8023892:	ec4b ab10 	vmov	d0, sl, fp
 8023896:	aa1a      	add	r2, sp, #104	; 0x68
 8023898:	a919      	add	r1, sp, #100	; 0x64
 802389a:	4620      	mov	r0, r4
 802389c:	f001 fd3e 	bl	802531c <__d2b>
 80238a0:	ec4b ab18 	vmov	d8, sl, fp
 80238a4:	9018      	str	r0, [sp, #96]	; 0x60
 80238a6:	2800      	cmp	r0, #0
 80238a8:	f43f aef6 	beq.w	8023698 <_strtod_l+0x490>
 80238ac:	2101      	movs	r1, #1
 80238ae:	4620      	mov	r0, r4
 80238b0:	f001 fa88 	bl	8024dc4 <__i2b>
 80238b4:	4606      	mov	r6, r0
 80238b6:	2800      	cmp	r0, #0
 80238b8:	f43f aeee 	beq.w	8023698 <_strtod_l+0x490>
 80238bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80238be:	9904      	ldr	r1, [sp, #16]
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	bfab      	itete	ge
 80238c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80238c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80238c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80238ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80238ce:	bfac      	ite	ge
 80238d0:	eb03 0902 	addge.w	r9, r3, r2
 80238d4:	1ad7      	sublt	r7, r2, r3
 80238d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80238d8:	eba3 0801 	sub.w	r8, r3, r1
 80238dc:	4490      	add	r8, r2
 80238de:	4ba1      	ldr	r3, [pc, #644]	; (8023b64 <_strtod_l+0x95c>)
 80238e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80238e4:	4598      	cmp	r8, r3
 80238e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80238ea:	f280 80c7 	bge.w	8023a7c <_strtod_l+0x874>
 80238ee:	eba3 0308 	sub.w	r3, r3, r8
 80238f2:	2b1f      	cmp	r3, #31
 80238f4:	eba2 0203 	sub.w	r2, r2, r3
 80238f8:	f04f 0101 	mov.w	r1, #1
 80238fc:	f300 80b1 	bgt.w	8023a62 <_strtod_l+0x85a>
 8023900:	fa01 f303 	lsl.w	r3, r1, r3
 8023904:	930d      	str	r3, [sp, #52]	; 0x34
 8023906:	2300      	movs	r3, #0
 8023908:	9308      	str	r3, [sp, #32]
 802390a:	eb09 0802 	add.w	r8, r9, r2
 802390e:	9b04      	ldr	r3, [sp, #16]
 8023910:	45c1      	cmp	r9, r8
 8023912:	4417      	add	r7, r2
 8023914:	441f      	add	r7, r3
 8023916:	464b      	mov	r3, r9
 8023918:	bfa8      	it	ge
 802391a:	4643      	movge	r3, r8
 802391c:	42bb      	cmp	r3, r7
 802391e:	bfa8      	it	ge
 8023920:	463b      	movge	r3, r7
 8023922:	2b00      	cmp	r3, #0
 8023924:	bfc2      	ittt	gt
 8023926:	eba8 0803 	subgt.w	r8, r8, r3
 802392a:	1aff      	subgt	r7, r7, r3
 802392c:	eba9 0903 	subgt.w	r9, r9, r3
 8023930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023932:	2b00      	cmp	r3, #0
 8023934:	dd17      	ble.n	8023966 <_strtod_l+0x75e>
 8023936:	4631      	mov	r1, r6
 8023938:	461a      	mov	r2, r3
 802393a:	4620      	mov	r0, r4
 802393c:	f001 fb02 	bl	8024f44 <__pow5mult>
 8023940:	4606      	mov	r6, r0
 8023942:	2800      	cmp	r0, #0
 8023944:	f43f aea8 	beq.w	8023698 <_strtod_l+0x490>
 8023948:	4601      	mov	r1, r0
 802394a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802394c:	4620      	mov	r0, r4
 802394e:	f001 fa4f 	bl	8024df0 <__multiply>
 8023952:	900b      	str	r0, [sp, #44]	; 0x2c
 8023954:	2800      	cmp	r0, #0
 8023956:	f43f ae9f 	beq.w	8023698 <_strtod_l+0x490>
 802395a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802395c:	4620      	mov	r0, r4
 802395e:	f001 f92f 	bl	8024bc0 <_Bfree>
 8023962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023964:	9318      	str	r3, [sp, #96]	; 0x60
 8023966:	f1b8 0f00 	cmp.w	r8, #0
 802396a:	f300 808c 	bgt.w	8023a86 <_strtod_l+0x87e>
 802396e:	9b06      	ldr	r3, [sp, #24]
 8023970:	2b00      	cmp	r3, #0
 8023972:	dd08      	ble.n	8023986 <_strtod_l+0x77e>
 8023974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023976:	9905      	ldr	r1, [sp, #20]
 8023978:	4620      	mov	r0, r4
 802397a:	f001 fae3 	bl	8024f44 <__pow5mult>
 802397e:	9005      	str	r0, [sp, #20]
 8023980:	2800      	cmp	r0, #0
 8023982:	f43f ae89 	beq.w	8023698 <_strtod_l+0x490>
 8023986:	2f00      	cmp	r7, #0
 8023988:	dd08      	ble.n	802399c <_strtod_l+0x794>
 802398a:	9905      	ldr	r1, [sp, #20]
 802398c:	463a      	mov	r2, r7
 802398e:	4620      	mov	r0, r4
 8023990:	f001 fb32 	bl	8024ff8 <__lshift>
 8023994:	9005      	str	r0, [sp, #20]
 8023996:	2800      	cmp	r0, #0
 8023998:	f43f ae7e 	beq.w	8023698 <_strtod_l+0x490>
 802399c:	f1b9 0f00 	cmp.w	r9, #0
 80239a0:	dd08      	ble.n	80239b4 <_strtod_l+0x7ac>
 80239a2:	4631      	mov	r1, r6
 80239a4:	464a      	mov	r2, r9
 80239a6:	4620      	mov	r0, r4
 80239a8:	f001 fb26 	bl	8024ff8 <__lshift>
 80239ac:	4606      	mov	r6, r0
 80239ae:	2800      	cmp	r0, #0
 80239b0:	f43f ae72 	beq.w	8023698 <_strtod_l+0x490>
 80239b4:	9a05      	ldr	r2, [sp, #20]
 80239b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80239b8:	4620      	mov	r0, r4
 80239ba:	f001 fba9 	bl	8025110 <__mdiff>
 80239be:	4605      	mov	r5, r0
 80239c0:	2800      	cmp	r0, #0
 80239c2:	f43f ae69 	beq.w	8023698 <_strtod_l+0x490>
 80239c6:	68c3      	ldr	r3, [r0, #12]
 80239c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80239ca:	2300      	movs	r3, #0
 80239cc:	60c3      	str	r3, [r0, #12]
 80239ce:	4631      	mov	r1, r6
 80239d0:	f001 fb82 	bl	80250d8 <__mcmp>
 80239d4:	2800      	cmp	r0, #0
 80239d6:	da60      	bge.n	8023a9a <_strtod_l+0x892>
 80239d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80239da:	ea53 030a 	orrs.w	r3, r3, sl
 80239de:	f040 8082 	bne.w	8023ae6 <_strtod_l+0x8de>
 80239e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d17d      	bne.n	8023ae6 <_strtod_l+0x8de>
 80239ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80239ee:	0d1b      	lsrs	r3, r3, #20
 80239f0:	051b      	lsls	r3, r3, #20
 80239f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80239f6:	d976      	bls.n	8023ae6 <_strtod_l+0x8de>
 80239f8:	696b      	ldr	r3, [r5, #20]
 80239fa:	b913      	cbnz	r3, 8023a02 <_strtod_l+0x7fa>
 80239fc:	692b      	ldr	r3, [r5, #16]
 80239fe:	2b01      	cmp	r3, #1
 8023a00:	dd71      	ble.n	8023ae6 <_strtod_l+0x8de>
 8023a02:	4629      	mov	r1, r5
 8023a04:	2201      	movs	r2, #1
 8023a06:	4620      	mov	r0, r4
 8023a08:	f001 faf6 	bl	8024ff8 <__lshift>
 8023a0c:	4631      	mov	r1, r6
 8023a0e:	4605      	mov	r5, r0
 8023a10:	f001 fb62 	bl	80250d8 <__mcmp>
 8023a14:	2800      	cmp	r0, #0
 8023a16:	dd66      	ble.n	8023ae6 <_strtod_l+0x8de>
 8023a18:	9904      	ldr	r1, [sp, #16]
 8023a1a:	4a53      	ldr	r2, [pc, #332]	; (8023b68 <_strtod_l+0x960>)
 8023a1c:	465b      	mov	r3, fp
 8023a1e:	2900      	cmp	r1, #0
 8023a20:	f000 8081 	beq.w	8023b26 <_strtod_l+0x91e>
 8023a24:	ea02 010b 	and.w	r1, r2, fp
 8023a28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8023a2c:	dc7b      	bgt.n	8023b26 <_strtod_l+0x91e>
 8023a2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8023a32:	f77f aea9 	ble.w	8023788 <_strtod_l+0x580>
 8023a36:	4b4d      	ldr	r3, [pc, #308]	; (8023b6c <_strtod_l+0x964>)
 8023a38:	4650      	mov	r0, sl
 8023a3a:	4659      	mov	r1, fp
 8023a3c:	2200      	movs	r2, #0
 8023a3e:	f7dc fde5 	bl	800060c <__aeabi_dmul>
 8023a42:	460b      	mov	r3, r1
 8023a44:	4303      	orrs	r3, r0
 8023a46:	bf08      	it	eq
 8023a48:	2322      	moveq	r3, #34	; 0x22
 8023a4a:	4682      	mov	sl, r0
 8023a4c:	468b      	mov	fp, r1
 8023a4e:	bf08      	it	eq
 8023a50:	6023      	streq	r3, [r4, #0]
 8023a52:	e62b      	b.n	80236ac <_strtod_l+0x4a4>
 8023a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023a58:	fa02 f303 	lsl.w	r3, r2, r3
 8023a5c:	ea03 0a0a 	and.w	sl, r3, sl
 8023a60:	e6e3      	b.n	802382a <_strtod_l+0x622>
 8023a62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8023a66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8023a6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8023a6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8023a72:	fa01 f308 	lsl.w	r3, r1, r8
 8023a76:	9308      	str	r3, [sp, #32]
 8023a78:	910d      	str	r1, [sp, #52]	; 0x34
 8023a7a:	e746      	b.n	802390a <_strtod_l+0x702>
 8023a7c:	2300      	movs	r3, #0
 8023a7e:	9308      	str	r3, [sp, #32]
 8023a80:	2301      	movs	r3, #1
 8023a82:	930d      	str	r3, [sp, #52]	; 0x34
 8023a84:	e741      	b.n	802390a <_strtod_l+0x702>
 8023a86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8023a88:	4642      	mov	r2, r8
 8023a8a:	4620      	mov	r0, r4
 8023a8c:	f001 fab4 	bl	8024ff8 <__lshift>
 8023a90:	9018      	str	r0, [sp, #96]	; 0x60
 8023a92:	2800      	cmp	r0, #0
 8023a94:	f47f af6b 	bne.w	802396e <_strtod_l+0x766>
 8023a98:	e5fe      	b.n	8023698 <_strtod_l+0x490>
 8023a9a:	465f      	mov	r7, fp
 8023a9c:	d16e      	bne.n	8023b7c <_strtod_l+0x974>
 8023a9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023aa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023aa4:	b342      	cbz	r2, 8023af8 <_strtod_l+0x8f0>
 8023aa6:	4a32      	ldr	r2, [pc, #200]	; (8023b70 <_strtod_l+0x968>)
 8023aa8:	4293      	cmp	r3, r2
 8023aaa:	d128      	bne.n	8023afe <_strtod_l+0x8f6>
 8023aac:	9b04      	ldr	r3, [sp, #16]
 8023aae:	4651      	mov	r1, sl
 8023ab0:	b1eb      	cbz	r3, 8023aee <_strtod_l+0x8e6>
 8023ab2:	4b2d      	ldr	r3, [pc, #180]	; (8023b68 <_strtod_l+0x960>)
 8023ab4:	403b      	ands	r3, r7
 8023ab6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8023aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023abe:	d819      	bhi.n	8023af4 <_strtod_l+0x8ec>
 8023ac0:	0d1b      	lsrs	r3, r3, #20
 8023ac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8023ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8023aca:	4299      	cmp	r1, r3
 8023acc:	d117      	bne.n	8023afe <_strtod_l+0x8f6>
 8023ace:	4b29      	ldr	r3, [pc, #164]	; (8023b74 <_strtod_l+0x96c>)
 8023ad0:	429f      	cmp	r7, r3
 8023ad2:	d102      	bne.n	8023ada <_strtod_l+0x8d2>
 8023ad4:	3101      	adds	r1, #1
 8023ad6:	f43f addf 	beq.w	8023698 <_strtod_l+0x490>
 8023ada:	4b23      	ldr	r3, [pc, #140]	; (8023b68 <_strtod_l+0x960>)
 8023adc:	403b      	ands	r3, r7
 8023ade:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8023ae2:	f04f 0a00 	mov.w	sl, #0
 8023ae6:	9b04      	ldr	r3, [sp, #16]
 8023ae8:	2b00      	cmp	r3, #0
 8023aea:	d1a4      	bne.n	8023a36 <_strtod_l+0x82e>
 8023aec:	e5de      	b.n	80236ac <_strtod_l+0x4a4>
 8023aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023af2:	e7ea      	b.n	8023aca <_strtod_l+0x8c2>
 8023af4:	4613      	mov	r3, r2
 8023af6:	e7e8      	b.n	8023aca <_strtod_l+0x8c2>
 8023af8:	ea53 030a 	orrs.w	r3, r3, sl
 8023afc:	d08c      	beq.n	8023a18 <_strtod_l+0x810>
 8023afe:	9b08      	ldr	r3, [sp, #32]
 8023b00:	b1db      	cbz	r3, 8023b3a <_strtod_l+0x932>
 8023b02:	423b      	tst	r3, r7
 8023b04:	d0ef      	beq.n	8023ae6 <_strtod_l+0x8de>
 8023b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b08:	9a04      	ldr	r2, [sp, #16]
 8023b0a:	4650      	mov	r0, sl
 8023b0c:	4659      	mov	r1, fp
 8023b0e:	b1c3      	cbz	r3, 8023b42 <_strtod_l+0x93a>
 8023b10:	f7ff fb5e 	bl	80231d0 <sulp>
 8023b14:	4602      	mov	r2, r0
 8023b16:	460b      	mov	r3, r1
 8023b18:	ec51 0b18 	vmov	r0, r1, d8
 8023b1c:	f7dc fbc0 	bl	80002a0 <__adddf3>
 8023b20:	4682      	mov	sl, r0
 8023b22:	468b      	mov	fp, r1
 8023b24:	e7df      	b.n	8023ae6 <_strtod_l+0x8de>
 8023b26:	4013      	ands	r3, r2
 8023b28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8023b2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8023b30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8023b34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8023b38:	e7d5      	b.n	8023ae6 <_strtod_l+0x8de>
 8023b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023b3c:	ea13 0f0a 	tst.w	r3, sl
 8023b40:	e7e0      	b.n	8023b04 <_strtod_l+0x8fc>
 8023b42:	f7ff fb45 	bl	80231d0 <sulp>
 8023b46:	4602      	mov	r2, r0
 8023b48:	460b      	mov	r3, r1
 8023b4a:	ec51 0b18 	vmov	r0, r1, d8
 8023b4e:	f7dc fba5 	bl	800029c <__aeabi_dsub>
 8023b52:	2200      	movs	r2, #0
 8023b54:	2300      	movs	r3, #0
 8023b56:	4682      	mov	sl, r0
 8023b58:	468b      	mov	fp, r1
 8023b5a:	f7dc ffbf 	bl	8000adc <__aeabi_dcmpeq>
 8023b5e:	2800      	cmp	r0, #0
 8023b60:	d0c1      	beq.n	8023ae6 <_strtod_l+0x8de>
 8023b62:	e611      	b.n	8023788 <_strtod_l+0x580>
 8023b64:	fffffc02 	.word	0xfffffc02
 8023b68:	7ff00000 	.word	0x7ff00000
 8023b6c:	39500000 	.word	0x39500000
 8023b70:	000fffff 	.word	0x000fffff
 8023b74:	7fefffff 	.word	0x7fefffff
 8023b78:	0802a520 	.word	0x0802a520
 8023b7c:	4631      	mov	r1, r6
 8023b7e:	4628      	mov	r0, r5
 8023b80:	f001 fc28 	bl	80253d4 <__ratio>
 8023b84:	ec59 8b10 	vmov	r8, r9, d0
 8023b88:	ee10 0a10 	vmov	r0, s0
 8023b8c:	2200      	movs	r2, #0
 8023b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023b92:	4649      	mov	r1, r9
 8023b94:	f7dc ffb6 	bl	8000b04 <__aeabi_dcmple>
 8023b98:	2800      	cmp	r0, #0
 8023b9a:	d07a      	beq.n	8023c92 <_strtod_l+0xa8a>
 8023b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b9e:	2b00      	cmp	r3, #0
 8023ba0:	d04a      	beq.n	8023c38 <_strtod_l+0xa30>
 8023ba2:	4b95      	ldr	r3, [pc, #596]	; (8023df8 <_strtod_l+0xbf0>)
 8023ba4:	2200      	movs	r2, #0
 8023ba6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023baa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8023df8 <_strtod_l+0xbf0>
 8023bae:	f04f 0800 	mov.w	r8, #0
 8023bb2:	4b92      	ldr	r3, [pc, #584]	; (8023dfc <_strtod_l+0xbf4>)
 8023bb4:	403b      	ands	r3, r7
 8023bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8023bb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023bba:	4b91      	ldr	r3, [pc, #580]	; (8023e00 <_strtod_l+0xbf8>)
 8023bbc:	429a      	cmp	r2, r3
 8023bbe:	f040 80b0 	bne.w	8023d22 <_strtod_l+0xb1a>
 8023bc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023bc6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8023bca:	ec4b ab10 	vmov	d0, sl, fp
 8023bce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023bd2:	f001 fb27 	bl	8025224 <__ulp>
 8023bd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023bda:	ec53 2b10 	vmov	r2, r3, d0
 8023bde:	f7dc fd15 	bl	800060c <__aeabi_dmul>
 8023be2:	4652      	mov	r2, sl
 8023be4:	465b      	mov	r3, fp
 8023be6:	f7dc fb5b 	bl	80002a0 <__adddf3>
 8023bea:	460b      	mov	r3, r1
 8023bec:	4983      	ldr	r1, [pc, #524]	; (8023dfc <_strtod_l+0xbf4>)
 8023bee:	4a85      	ldr	r2, [pc, #532]	; (8023e04 <_strtod_l+0xbfc>)
 8023bf0:	4019      	ands	r1, r3
 8023bf2:	4291      	cmp	r1, r2
 8023bf4:	4682      	mov	sl, r0
 8023bf6:	d960      	bls.n	8023cba <_strtod_l+0xab2>
 8023bf8:	ee18 3a90 	vmov	r3, s17
 8023bfc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8023c00:	4293      	cmp	r3, r2
 8023c02:	d104      	bne.n	8023c0e <_strtod_l+0xa06>
 8023c04:	ee18 3a10 	vmov	r3, s16
 8023c08:	3301      	adds	r3, #1
 8023c0a:	f43f ad45 	beq.w	8023698 <_strtod_l+0x490>
 8023c0e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8023e10 <_strtod_l+0xc08>
 8023c12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8023c16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8023c18:	4620      	mov	r0, r4
 8023c1a:	f000 ffd1 	bl	8024bc0 <_Bfree>
 8023c1e:	9905      	ldr	r1, [sp, #20]
 8023c20:	4620      	mov	r0, r4
 8023c22:	f000 ffcd 	bl	8024bc0 <_Bfree>
 8023c26:	4631      	mov	r1, r6
 8023c28:	4620      	mov	r0, r4
 8023c2a:	f000 ffc9 	bl	8024bc0 <_Bfree>
 8023c2e:	4629      	mov	r1, r5
 8023c30:	4620      	mov	r0, r4
 8023c32:	f000 ffc5 	bl	8024bc0 <_Bfree>
 8023c36:	e61a      	b.n	802386e <_strtod_l+0x666>
 8023c38:	f1ba 0f00 	cmp.w	sl, #0
 8023c3c:	d11b      	bne.n	8023c76 <_strtod_l+0xa6e>
 8023c3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023c42:	b9f3      	cbnz	r3, 8023c82 <_strtod_l+0xa7a>
 8023c44:	4b6c      	ldr	r3, [pc, #432]	; (8023df8 <_strtod_l+0xbf0>)
 8023c46:	2200      	movs	r2, #0
 8023c48:	4640      	mov	r0, r8
 8023c4a:	4649      	mov	r1, r9
 8023c4c:	f7dc ff50 	bl	8000af0 <__aeabi_dcmplt>
 8023c50:	b9d0      	cbnz	r0, 8023c88 <_strtod_l+0xa80>
 8023c52:	4640      	mov	r0, r8
 8023c54:	4649      	mov	r1, r9
 8023c56:	4b6c      	ldr	r3, [pc, #432]	; (8023e08 <_strtod_l+0xc00>)
 8023c58:	2200      	movs	r2, #0
 8023c5a:	f7dc fcd7 	bl	800060c <__aeabi_dmul>
 8023c5e:	4680      	mov	r8, r0
 8023c60:	4689      	mov	r9, r1
 8023c62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023c66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8023c6a:	9315      	str	r3, [sp, #84]	; 0x54
 8023c6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8023c70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023c74:	e79d      	b.n	8023bb2 <_strtod_l+0x9aa>
 8023c76:	f1ba 0f01 	cmp.w	sl, #1
 8023c7a:	d102      	bne.n	8023c82 <_strtod_l+0xa7a>
 8023c7c:	2f00      	cmp	r7, #0
 8023c7e:	f43f ad83 	beq.w	8023788 <_strtod_l+0x580>
 8023c82:	4b62      	ldr	r3, [pc, #392]	; (8023e0c <_strtod_l+0xc04>)
 8023c84:	2200      	movs	r2, #0
 8023c86:	e78e      	b.n	8023ba6 <_strtod_l+0x99e>
 8023c88:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8023e08 <_strtod_l+0xc00>
 8023c8c:	f04f 0800 	mov.w	r8, #0
 8023c90:	e7e7      	b.n	8023c62 <_strtod_l+0xa5a>
 8023c92:	4b5d      	ldr	r3, [pc, #372]	; (8023e08 <_strtod_l+0xc00>)
 8023c94:	4640      	mov	r0, r8
 8023c96:	4649      	mov	r1, r9
 8023c98:	2200      	movs	r2, #0
 8023c9a:	f7dc fcb7 	bl	800060c <__aeabi_dmul>
 8023c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ca0:	4680      	mov	r8, r0
 8023ca2:	4689      	mov	r9, r1
 8023ca4:	b933      	cbnz	r3, 8023cb4 <_strtod_l+0xaac>
 8023ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023caa:	900e      	str	r0, [sp, #56]	; 0x38
 8023cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8023cb2:	e7dd      	b.n	8023c70 <_strtod_l+0xa68>
 8023cb4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8023cb8:	e7f9      	b.n	8023cae <_strtod_l+0xaa6>
 8023cba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8023cbe:	9b04      	ldr	r3, [sp, #16]
 8023cc0:	2b00      	cmp	r3, #0
 8023cc2:	d1a8      	bne.n	8023c16 <_strtod_l+0xa0e>
 8023cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023cc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023cca:	0d1b      	lsrs	r3, r3, #20
 8023ccc:	051b      	lsls	r3, r3, #20
 8023cce:	429a      	cmp	r2, r3
 8023cd0:	d1a1      	bne.n	8023c16 <_strtod_l+0xa0e>
 8023cd2:	4640      	mov	r0, r8
 8023cd4:	4649      	mov	r1, r9
 8023cd6:	f7dd f849 	bl	8000d6c <__aeabi_d2lz>
 8023cda:	f7dc fc69 	bl	80005b0 <__aeabi_l2d>
 8023cde:	4602      	mov	r2, r0
 8023ce0:	460b      	mov	r3, r1
 8023ce2:	4640      	mov	r0, r8
 8023ce4:	4649      	mov	r1, r9
 8023ce6:	f7dc fad9 	bl	800029c <__aeabi_dsub>
 8023cea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023cec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023cf0:	ea43 030a 	orr.w	r3, r3, sl
 8023cf4:	4313      	orrs	r3, r2
 8023cf6:	4680      	mov	r8, r0
 8023cf8:	4689      	mov	r9, r1
 8023cfa:	d055      	beq.n	8023da8 <_strtod_l+0xba0>
 8023cfc:	a336      	add	r3, pc, #216	; (adr r3, 8023dd8 <_strtod_l+0xbd0>)
 8023cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d02:	f7dc fef5 	bl	8000af0 <__aeabi_dcmplt>
 8023d06:	2800      	cmp	r0, #0
 8023d08:	f47f acd0 	bne.w	80236ac <_strtod_l+0x4a4>
 8023d0c:	a334      	add	r3, pc, #208	; (adr r3, 8023de0 <_strtod_l+0xbd8>)
 8023d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d12:	4640      	mov	r0, r8
 8023d14:	4649      	mov	r1, r9
 8023d16:	f7dc ff09 	bl	8000b2c <__aeabi_dcmpgt>
 8023d1a:	2800      	cmp	r0, #0
 8023d1c:	f43f af7b 	beq.w	8023c16 <_strtod_l+0xa0e>
 8023d20:	e4c4      	b.n	80236ac <_strtod_l+0x4a4>
 8023d22:	9b04      	ldr	r3, [sp, #16]
 8023d24:	b333      	cbz	r3, 8023d74 <_strtod_l+0xb6c>
 8023d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8023d2c:	d822      	bhi.n	8023d74 <_strtod_l+0xb6c>
 8023d2e:	a32e      	add	r3, pc, #184	; (adr r3, 8023de8 <_strtod_l+0xbe0>)
 8023d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d34:	4640      	mov	r0, r8
 8023d36:	4649      	mov	r1, r9
 8023d38:	f7dc fee4 	bl	8000b04 <__aeabi_dcmple>
 8023d3c:	b1a0      	cbz	r0, 8023d68 <_strtod_l+0xb60>
 8023d3e:	4649      	mov	r1, r9
 8023d40:	4640      	mov	r0, r8
 8023d42:	f7dc ff3b 	bl	8000bbc <__aeabi_d2uiz>
 8023d46:	2801      	cmp	r0, #1
 8023d48:	bf38      	it	cc
 8023d4a:	2001      	movcc	r0, #1
 8023d4c:	f7dc fbe4 	bl	8000518 <__aeabi_ui2d>
 8023d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d52:	4680      	mov	r8, r0
 8023d54:	4689      	mov	r9, r1
 8023d56:	bb23      	cbnz	r3, 8023da2 <_strtod_l+0xb9a>
 8023d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023d5c:	9010      	str	r0, [sp, #64]	; 0x40
 8023d5e:	9311      	str	r3, [sp, #68]	; 0x44
 8023d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8023d64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023d6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8023d70:	1a9b      	subs	r3, r3, r2
 8023d72:	9309      	str	r3, [sp, #36]	; 0x24
 8023d74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023d78:	eeb0 0a48 	vmov.f32	s0, s16
 8023d7c:	eef0 0a68 	vmov.f32	s1, s17
 8023d80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023d84:	f001 fa4e 	bl	8025224 <__ulp>
 8023d88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023d8c:	ec53 2b10 	vmov	r2, r3, d0
 8023d90:	f7dc fc3c 	bl	800060c <__aeabi_dmul>
 8023d94:	ec53 2b18 	vmov	r2, r3, d8
 8023d98:	f7dc fa82 	bl	80002a0 <__adddf3>
 8023d9c:	4682      	mov	sl, r0
 8023d9e:	468b      	mov	fp, r1
 8023da0:	e78d      	b.n	8023cbe <_strtod_l+0xab6>
 8023da2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8023da6:	e7db      	b.n	8023d60 <_strtod_l+0xb58>
 8023da8:	a311      	add	r3, pc, #68	; (adr r3, 8023df0 <_strtod_l+0xbe8>)
 8023daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dae:	f7dc fe9f 	bl	8000af0 <__aeabi_dcmplt>
 8023db2:	e7b2      	b.n	8023d1a <_strtod_l+0xb12>
 8023db4:	2300      	movs	r3, #0
 8023db6:	930a      	str	r3, [sp, #40]	; 0x28
 8023db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023dba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023dbc:	6013      	str	r3, [r2, #0]
 8023dbe:	f7ff ba6b 	b.w	8023298 <_strtod_l+0x90>
 8023dc2:	2a65      	cmp	r2, #101	; 0x65
 8023dc4:	f43f ab5f 	beq.w	8023486 <_strtod_l+0x27e>
 8023dc8:	2a45      	cmp	r2, #69	; 0x45
 8023dca:	f43f ab5c 	beq.w	8023486 <_strtod_l+0x27e>
 8023dce:	2301      	movs	r3, #1
 8023dd0:	f7ff bb94 	b.w	80234fc <_strtod_l+0x2f4>
 8023dd4:	f3af 8000 	nop.w
 8023dd8:	94a03595 	.word	0x94a03595
 8023ddc:	3fdfffff 	.word	0x3fdfffff
 8023de0:	35afe535 	.word	0x35afe535
 8023de4:	3fe00000 	.word	0x3fe00000
 8023de8:	ffc00000 	.word	0xffc00000
 8023dec:	41dfffff 	.word	0x41dfffff
 8023df0:	94a03595 	.word	0x94a03595
 8023df4:	3fcfffff 	.word	0x3fcfffff
 8023df8:	3ff00000 	.word	0x3ff00000
 8023dfc:	7ff00000 	.word	0x7ff00000
 8023e00:	7fe00000 	.word	0x7fe00000
 8023e04:	7c9fffff 	.word	0x7c9fffff
 8023e08:	3fe00000 	.word	0x3fe00000
 8023e0c:	bff00000 	.word	0xbff00000
 8023e10:	7fefffff 	.word	0x7fefffff

08023e14 <strtod>:
 8023e14:	460a      	mov	r2, r1
 8023e16:	4601      	mov	r1, r0
 8023e18:	4802      	ldr	r0, [pc, #8]	; (8023e24 <strtod+0x10>)
 8023e1a:	4b03      	ldr	r3, [pc, #12]	; (8023e28 <strtod+0x14>)
 8023e1c:	6800      	ldr	r0, [r0, #0]
 8023e1e:	f7ff b9f3 	b.w	8023208 <_strtod_l>
 8023e22:	bf00      	nop
 8023e24:	20000270 	.word	0x20000270
 8023e28:	200002d8 	.word	0x200002d8

08023e2c <_vsiprintf_r>:
 8023e2c:	b500      	push	{lr}
 8023e2e:	b09b      	sub	sp, #108	; 0x6c
 8023e30:	9100      	str	r1, [sp, #0]
 8023e32:	9104      	str	r1, [sp, #16]
 8023e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023e38:	9105      	str	r1, [sp, #20]
 8023e3a:	9102      	str	r1, [sp, #8]
 8023e3c:	4905      	ldr	r1, [pc, #20]	; (8023e54 <_vsiprintf_r+0x28>)
 8023e3e:	9103      	str	r1, [sp, #12]
 8023e40:	4669      	mov	r1, sp
 8023e42:	f001 fbc9 	bl	80255d8 <_svfiprintf_r>
 8023e46:	9b00      	ldr	r3, [sp, #0]
 8023e48:	2200      	movs	r2, #0
 8023e4a:	701a      	strb	r2, [r3, #0]
 8023e4c:	b01b      	add	sp, #108	; 0x6c
 8023e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023e52:	bf00      	nop
 8023e54:	ffff0208 	.word	0xffff0208

08023e58 <vsiprintf>:
 8023e58:	4613      	mov	r3, r2
 8023e5a:	460a      	mov	r2, r1
 8023e5c:	4601      	mov	r1, r0
 8023e5e:	4802      	ldr	r0, [pc, #8]	; (8023e68 <vsiprintf+0x10>)
 8023e60:	6800      	ldr	r0, [r0, #0]
 8023e62:	f7ff bfe3 	b.w	8023e2c <_vsiprintf_r>
 8023e66:	bf00      	nop
 8023e68:	20000270 	.word	0x20000270

08023e6c <__swbuf_r>:
 8023e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e6e:	460e      	mov	r6, r1
 8023e70:	4614      	mov	r4, r2
 8023e72:	4605      	mov	r5, r0
 8023e74:	b118      	cbz	r0, 8023e7e <__swbuf_r+0x12>
 8023e76:	6983      	ldr	r3, [r0, #24]
 8023e78:	b90b      	cbnz	r3, 8023e7e <__swbuf_r+0x12>
 8023e7a:	f000 f9d1 	bl	8024220 <__sinit>
 8023e7e:	4b21      	ldr	r3, [pc, #132]	; (8023f04 <__swbuf_r+0x98>)
 8023e80:	429c      	cmp	r4, r3
 8023e82:	d12b      	bne.n	8023edc <__swbuf_r+0x70>
 8023e84:	686c      	ldr	r4, [r5, #4]
 8023e86:	69a3      	ldr	r3, [r4, #24]
 8023e88:	60a3      	str	r3, [r4, #8]
 8023e8a:	89a3      	ldrh	r3, [r4, #12]
 8023e8c:	071a      	lsls	r2, r3, #28
 8023e8e:	d52f      	bpl.n	8023ef0 <__swbuf_r+0x84>
 8023e90:	6923      	ldr	r3, [r4, #16]
 8023e92:	b36b      	cbz	r3, 8023ef0 <__swbuf_r+0x84>
 8023e94:	6923      	ldr	r3, [r4, #16]
 8023e96:	6820      	ldr	r0, [r4, #0]
 8023e98:	1ac0      	subs	r0, r0, r3
 8023e9a:	6963      	ldr	r3, [r4, #20]
 8023e9c:	b2f6      	uxtb	r6, r6
 8023e9e:	4283      	cmp	r3, r0
 8023ea0:	4637      	mov	r7, r6
 8023ea2:	dc04      	bgt.n	8023eae <__swbuf_r+0x42>
 8023ea4:	4621      	mov	r1, r4
 8023ea6:	4628      	mov	r0, r5
 8023ea8:	f000 f926 	bl	80240f8 <_fflush_r>
 8023eac:	bb30      	cbnz	r0, 8023efc <__swbuf_r+0x90>
 8023eae:	68a3      	ldr	r3, [r4, #8]
 8023eb0:	3b01      	subs	r3, #1
 8023eb2:	60a3      	str	r3, [r4, #8]
 8023eb4:	6823      	ldr	r3, [r4, #0]
 8023eb6:	1c5a      	adds	r2, r3, #1
 8023eb8:	6022      	str	r2, [r4, #0]
 8023eba:	701e      	strb	r6, [r3, #0]
 8023ebc:	6963      	ldr	r3, [r4, #20]
 8023ebe:	3001      	adds	r0, #1
 8023ec0:	4283      	cmp	r3, r0
 8023ec2:	d004      	beq.n	8023ece <__swbuf_r+0x62>
 8023ec4:	89a3      	ldrh	r3, [r4, #12]
 8023ec6:	07db      	lsls	r3, r3, #31
 8023ec8:	d506      	bpl.n	8023ed8 <__swbuf_r+0x6c>
 8023eca:	2e0a      	cmp	r6, #10
 8023ecc:	d104      	bne.n	8023ed8 <__swbuf_r+0x6c>
 8023ece:	4621      	mov	r1, r4
 8023ed0:	4628      	mov	r0, r5
 8023ed2:	f000 f911 	bl	80240f8 <_fflush_r>
 8023ed6:	b988      	cbnz	r0, 8023efc <__swbuf_r+0x90>
 8023ed8:	4638      	mov	r0, r7
 8023eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023edc:	4b0a      	ldr	r3, [pc, #40]	; (8023f08 <__swbuf_r+0x9c>)
 8023ede:	429c      	cmp	r4, r3
 8023ee0:	d101      	bne.n	8023ee6 <__swbuf_r+0x7a>
 8023ee2:	68ac      	ldr	r4, [r5, #8]
 8023ee4:	e7cf      	b.n	8023e86 <__swbuf_r+0x1a>
 8023ee6:	4b09      	ldr	r3, [pc, #36]	; (8023f0c <__swbuf_r+0xa0>)
 8023ee8:	429c      	cmp	r4, r3
 8023eea:	bf08      	it	eq
 8023eec:	68ec      	ldreq	r4, [r5, #12]
 8023eee:	e7ca      	b.n	8023e86 <__swbuf_r+0x1a>
 8023ef0:	4621      	mov	r1, r4
 8023ef2:	4628      	mov	r0, r5
 8023ef4:	f000 f80c 	bl	8023f10 <__swsetup_r>
 8023ef8:	2800      	cmp	r0, #0
 8023efa:	d0cb      	beq.n	8023e94 <__swbuf_r+0x28>
 8023efc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8023f00:	e7ea      	b.n	8023ed8 <__swbuf_r+0x6c>
 8023f02:	bf00      	nop
 8023f04:	0802a66c 	.word	0x0802a66c
 8023f08:	0802a68c 	.word	0x0802a68c
 8023f0c:	0802a64c 	.word	0x0802a64c

08023f10 <__swsetup_r>:
 8023f10:	4b32      	ldr	r3, [pc, #200]	; (8023fdc <__swsetup_r+0xcc>)
 8023f12:	b570      	push	{r4, r5, r6, lr}
 8023f14:	681d      	ldr	r5, [r3, #0]
 8023f16:	4606      	mov	r6, r0
 8023f18:	460c      	mov	r4, r1
 8023f1a:	b125      	cbz	r5, 8023f26 <__swsetup_r+0x16>
 8023f1c:	69ab      	ldr	r3, [r5, #24]
 8023f1e:	b913      	cbnz	r3, 8023f26 <__swsetup_r+0x16>
 8023f20:	4628      	mov	r0, r5
 8023f22:	f000 f97d 	bl	8024220 <__sinit>
 8023f26:	4b2e      	ldr	r3, [pc, #184]	; (8023fe0 <__swsetup_r+0xd0>)
 8023f28:	429c      	cmp	r4, r3
 8023f2a:	d10f      	bne.n	8023f4c <__swsetup_r+0x3c>
 8023f2c:	686c      	ldr	r4, [r5, #4]
 8023f2e:	89a3      	ldrh	r3, [r4, #12]
 8023f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023f34:	0719      	lsls	r1, r3, #28
 8023f36:	d42c      	bmi.n	8023f92 <__swsetup_r+0x82>
 8023f38:	06dd      	lsls	r5, r3, #27
 8023f3a:	d411      	bmi.n	8023f60 <__swsetup_r+0x50>
 8023f3c:	2309      	movs	r3, #9
 8023f3e:	6033      	str	r3, [r6, #0]
 8023f40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023f44:	81a3      	strh	r3, [r4, #12]
 8023f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023f4a:	e03e      	b.n	8023fca <__swsetup_r+0xba>
 8023f4c:	4b25      	ldr	r3, [pc, #148]	; (8023fe4 <__swsetup_r+0xd4>)
 8023f4e:	429c      	cmp	r4, r3
 8023f50:	d101      	bne.n	8023f56 <__swsetup_r+0x46>
 8023f52:	68ac      	ldr	r4, [r5, #8]
 8023f54:	e7eb      	b.n	8023f2e <__swsetup_r+0x1e>
 8023f56:	4b24      	ldr	r3, [pc, #144]	; (8023fe8 <__swsetup_r+0xd8>)
 8023f58:	429c      	cmp	r4, r3
 8023f5a:	bf08      	it	eq
 8023f5c:	68ec      	ldreq	r4, [r5, #12]
 8023f5e:	e7e6      	b.n	8023f2e <__swsetup_r+0x1e>
 8023f60:	0758      	lsls	r0, r3, #29
 8023f62:	d512      	bpl.n	8023f8a <__swsetup_r+0x7a>
 8023f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023f66:	b141      	cbz	r1, 8023f7a <__swsetup_r+0x6a>
 8023f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023f6c:	4299      	cmp	r1, r3
 8023f6e:	d002      	beq.n	8023f76 <__swsetup_r+0x66>
 8023f70:	4630      	mov	r0, r6
 8023f72:	f7fe fcf7 	bl	8022964 <_free_r>
 8023f76:	2300      	movs	r3, #0
 8023f78:	6363      	str	r3, [r4, #52]	; 0x34
 8023f7a:	89a3      	ldrh	r3, [r4, #12]
 8023f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023f80:	81a3      	strh	r3, [r4, #12]
 8023f82:	2300      	movs	r3, #0
 8023f84:	6063      	str	r3, [r4, #4]
 8023f86:	6923      	ldr	r3, [r4, #16]
 8023f88:	6023      	str	r3, [r4, #0]
 8023f8a:	89a3      	ldrh	r3, [r4, #12]
 8023f8c:	f043 0308 	orr.w	r3, r3, #8
 8023f90:	81a3      	strh	r3, [r4, #12]
 8023f92:	6923      	ldr	r3, [r4, #16]
 8023f94:	b94b      	cbnz	r3, 8023faa <__swsetup_r+0x9a>
 8023f96:	89a3      	ldrh	r3, [r4, #12]
 8023f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023fa0:	d003      	beq.n	8023faa <__swsetup_r+0x9a>
 8023fa2:	4621      	mov	r1, r4
 8023fa4:	4630      	mov	r0, r6
 8023fa6:	f000 fd6d 	bl	8024a84 <__smakebuf_r>
 8023faa:	89a0      	ldrh	r0, [r4, #12]
 8023fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023fb0:	f010 0301 	ands.w	r3, r0, #1
 8023fb4:	d00a      	beq.n	8023fcc <__swsetup_r+0xbc>
 8023fb6:	2300      	movs	r3, #0
 8023fb8:	60a3      	str	r3, [r4, #8]
 8023fba:	6963      	ldr	r3, [r4, #20]
 8023fbc:	425b      	negs	r3, r3
 8023fbe:	61a3      	str	r3, [r4, #24]
 8023fc0:	6923      	ldr	r3, [r4, #16]
 8023fc2:	b943      	cbnz	r3, 8023fd6 <__swsetup_r+0xc6>
 8023fc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023fc8:	d1ba      	bne.n	8023f40 <__swsetup_r+0x30>
 8023fca:	bd70      	pop	{r4, r5, r6, pc}
 8023fcc:	0781      	lsls	r1, r0, #30
 8023fce:	bf58      	it	pl
 8023fd0:	6963      	ldrpl	r3, [r4, #20]
 8023fd2:	60a3      	str	r3, [r4, #8]
 8023fd4:	e7f4      	b.n	8023fc0 <__swsetup_r+0xb0>
 8023fd6:	2000      	movs	r0, #0
 8023fd8:	e7f7      	b.n	8023fca <__swsetup_r+0xba>
 8023fda:	bf00      	nop
 8023fdc:	20000270 	.word	0x20000270
 8023fe0:	0802a66c 	.word	0x0802a66c
 8023fe4:	0802a68c 	.word	0x0802a68c
 8023fe8:	0802a64c 	.word	0x0802a64c

08023fec <__sflush_r>:
 8023fec:	898a      	ldrh	r2, [r1, #12]
 8023fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ff2:	4605      	mov	r5, r0
 8023ff4:	0710      	lsls	r0, r2, #28
 8023ff6:	460c      	mov	r4, r1
 8023ff8:	d458      	bmi.n	80240ac <__sflush_r+0xc0>
 8023ffa:	684b      	ldr	r3, [r1, #4]
 8023ffc:	2b00      	cmp	r3, #0
 8023ffe:	dc05      	bgt.n	802400c <__sflush_r+0x20>
 8024000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024002:	2b00      	cmp	r3, #0
 8024004:	dc02      	bgt.n	802400c <__sflush_r+0x20>
 8024006:	2000      	movs	r0, #0
 8024008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802400c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802400e:	2e00      	cmp	r6, #0
 8024010:	d0f9      	beq.n	8024006 <__sflush_r+0x1a>
 8024012:	2300      	movs	r3, #0
 8024014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024018:	682f      	ldr	r7, [r5, #0]
 802401a:	602b      	str	r3, [r5, #0]
 802401c:	d032      	beq.n	8024084 <__sflush_r+0x98>
 802401e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024020:	89a3      	ldrh	r3, [r4, #12]
 8024022:	075a      	lsls	r2, r3, #29
 8024024:	d505      	bpl.n	8024032 <__sflush_r+0x46>
 8024026:	6863      	ldr	r3, [r4, #4]
 8024028:	1ac0      	subs	r0, r0, r3
 802402a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802402c:	b10b      	cbz	r3, 8024032 <__sflush_r+0x46>
 802402e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024030:	1ac0      	subs	r0, r0, r3
 8024032:	2300      	movs	r3, #0
 8024034:	4602      	mov	r2, r0
 8024036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024038:	6a21      	ldr	r1, [r4, #32]
 802403a:	4628      	mov	r0, r5
 802403c:	47b0      	blx	r6
 802403e:	1c43      	adds	r3, r0, #1
 8024040:	89a3      	ldrh	r3, [r4, #12]
 8024042:	d106      	bne.n	8024052 <__sflush_r+0x66>
 8024044:	6829      	ldr	r1, [r5, #0]
 8024046:	291d      	cmp	r1, #29
 8024048:	d82c      	bhi.n	80240a4 <__sflush_r+0xb8>
 802404a:	4a2a      	ldr	r2, [pc, #168]	; (80240f4 <__sflush_r+0x108>)
 802404c:	40ca      	lsrs	r2, r1
 802404e:	07d6      	lsls	r6, r2, #31
 8024050:	d528      	bpl.n	80240a4 <__sflush_r+0xb8>
 8024052:	2200      	movs	r2, #0
 8024054:	6062      	str	r2, [r4, #4]
 8024056:	04d9      	lsls	r1, r3, #19
 8024058:	6922      	ldr	r2, [r4, #16]
 802405a:	6022      	str	r2, [r4, #0]
 802405c:	d504      	bpl.n	8024068 <__sflush_r+0x7c>
 802405e:	1c42      	adds	r2, r0, #1
 8024060:	d101      	bne.n	8024066 <__sflush_r+0x7a>
 8024062:	682b      	ldr	r3, [r5, #0]
 8024064:	b903      	cbnz	r3, 8024068 <__sflush_r+0x7c>
 8024066:	6560      	str	r0, [r4, #84]	; 0x54
 8024068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802406a:	602f      	str	r7, [r5, #0]
 802406c:	2900      	cmp	r1, #0
 802406e:	d0ca      	beq.n	8024006 <__sflush_r+0x1a>
 8024070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024074:	4299      	cmp	r1, r3
 8024076:	d002      	beq.n	802407e <__sflush_r+0x92>
 8024078:	4628      	mov	r0, r5
 802407a:	f7fe fc73 	bl	8022964 <_free_r>
 802407e:	2000      	movs	r0, #0
 8024080:	6360      	str	r0, [r4, #52]	; 0x34
 8024082:	e7c1      	b.n	8024008 <__sflush_r+0x1c>
 8024084:	6a21      	ldr	r1, [r4, #32]
 8024086:	2301      	movs	r3, #1
 8024088:	4628      	mov	r0, r5
 802408a:	47b0      	blx	r6
 802408c:	1c41      	adds	r1, r0, #1
 802408e:	d1c7      	bne.n	8024020 <__sflush_r+0x34>
 8024090:	682b      	ldr	r3, [r5, #0]
 8024092:	2b00      	cmp	r3, #0
 8024094:	d0c4      	beq.n	8024020 <__sflush_r+0x34>
 8024096:	2b1d      	cmp	r3, #29
 8024098:	d001      	beq.n	802409e <__sflush_r+0xb2>
 802409a:	2b16      	cmp	r3, #22
 802409c:	d101      	bne.n	80240a2 <__sflush_r+0xb6>
 802409e:	602f      	str	r7, [r5, #0]
 80240a0:	e7b1      	b.n	8024006 <__sflush_r+0x1a>
 80240a2:	89a3      	ldrh	r3, [r4, #12]
 80240a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80240a8:	81a3      	strh	r3, [r4, #12]
 80240aa:	e7ad      	b.n	8024008 <__sflush_r+0x1c>
 80240ac:	690f      	ldr	r7, [r1, #16]
 80240ae:	2f00      	cmp	r7, #0
 80240b0:	d0a9      	beq.n	8024006 <__sflush_r+0x1a>
 80240b2:	0793      	lsls	r3, r2, #30
 80240b4:	680e      	ldr	r6, [r1, #0]
 80240b6:	bf08      	it	eq
 80240b8:	694b      	ldreq	r3, [r1, #20]
 80240ba:	600f      	str	r7, [r1, #0]
 80240bc:	bf18      	it	ne
 80240be:	2300      	movne	r3, #0
 80240c0:	eba6 0807 	sub.w	r8, r6, r7
 80240c4:	608b      	str	r3, [r1, #8]
 80240c6:	f1b8 0f00 	cmp.w	r8, #0
 80240ca:	dd9c      	ble.n	8024006 <__sflush_r+0x1a>
 80240cc:	6a21      	ldr	r1, [r4, #32]
 80240ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80240d0:	4643      	mov	r3, r8
 80240d2:	463a      	mov	r2, r7
 80240d4:	4628      	mov	r0, r5
 80240d6:	47b0      	blx	r6
 80240d8:	2800      	cmp	r0, #0
 80240da:	dc06      	bgt.n	80240ea <__sflush_r+0xfe>
 80240dc:	89a3      	ldrh	r3, [r4, #12]
 80240de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80240e2:	81a3      	strh	r3, [r4, #12]
 80240e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80240e8:	e78e      	b.n	8024008 <__sflush_r+0x1c>
 80240ea:	4407      	add	r7, r0
 80240ec:	eba8 0800 	sub.w	r8, r8, r0
 80240f0:	e7e9      	b.n	80240c6 <__sflush_r+0xda>
 80240f2:	bf00      	nop
 80240f4:	20400001 	.word	0x20400001

080240f8 <_fflush_r>:
 80240f8:	b538      	push	{r3, r4, r5, lr}
 80240fa:	690b      	ldr	r3, [r1, #16]
 80240fc:	4605      	mov	r5, r0
 80240fe:	460c      	mov	r4, r1
 8024100:	b913      	cbnz	r3, 8024108 <_fflush_r+0x10>
 8024102:	2500      	movs	r5, #0
 8024104:	4628      	mov	r0, r5
 8024106:	bd38      	pop	{r3, r4, r5, pc}
 8024108:	b118      	cbz	r0, 8024112 <_fflush_r+0x1a>
 802410a:	6983      	ldr	r3, [r0, #24]
 802410c:	b90b      	cbnz	r3, 8024112 <_fflush_r+0x1a>
 802410e:	f000 f887 	bl	8024220 <__sinit>
 8024112:	4b14      	ldr	r3, [pc, #80]	; (8024164 <_fflush_r+0x6c>)
 8024114:	429c      	cmp	r4, r3
 8024116:	d11b      	bne.n	8024150 <_fflush_r+0x58>
 8024118:	686c      	ldr	r4, [r5, #4]
 802411a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802411e:	2b00      	cmp	r3, #0
 8024120:	d0ef      	beq.n	8024102 <_fflush_r+0xa>
 8024122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024124:	07d0      	lsls	r0, r2, #31
 8024126:	d404      	bmi.n	8024132 <_fflush_r+0x3a>
 8024128:	0599      	lsls	r1, r3, #22
 802412a:	d402      	bmi.n	8024132 <_fflush_r+0x3a>
 802412c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802412e:	f7fe fbc0 	bl	80228b2 <__retarget_lock_acquire_recursive>
 8024132:	4628      	mov	r0, r5
 8024134:	4621      	mov	r1, r4
 8024136:	f7ff ff59 	bl	8023fec <__sflush_r>
 802413a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802413c:	07da      	lsls	r2, r3, #31
 802413e:	4605      	mov	r5, r0
 8024140:	d4e0      	bmi.n	8024104 <_fflush_r+0xc>
 8024142:	89a3      	ldrh	r3, [r4, #12]
 8024144:	059b      	lsls	r3, r3, #22
 8024146:	d4dd      	bmi.n	8024104 <_fflush_r+0xc>
 8024148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802414a:	f7fe fbb3 	bl	80228b4 <__retarget_lock_release_recursive>
 802414e:	e7d9      	b.n	8024104 <_fflush_r+0xc>
 8024150:	4b05      	ldr	r3, [pc, #20]	; (8024168 <_fflush_r+0x70>)
 8024152:	429c      	cmp	r4, r3
 8024154:	d101      	bne.n	802415a <_fflush_r+0x62>
 8024156:	68ac      	ldr	r4, [r5, #8]
 8024158:	e7df      	b.n	802411a <_fflush_r+0x22>
 802415a:	4b04      	ldr	r3, [pc, #16]	; (802416c <_fflush_r+0x74>)
 802415c:	429c      	cmp	r4, r3
 802415e:	bf08      	it	eq
 8024160:	68ec      	ldreq	r4, [r5, #12]
 8024162:	e7da      	b.n	802411a <_fflush_r+0x22>
 8024164:	0802a66c 	.word	0x0802a66c
 8024168:	0802a68c 	.word	0x0802a68c
 802416c:	0802a64c 	.word	0x0802a64c

08024170 <std>:
 8024170:	2300      	movs	r3, #0
 8024172:	b510      	push	{r4, lr}
 8024174:	4604      	mov	r4, r0
 8024176:	e9c0 3300 	strd	r3, r3, [r0]
 802417a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802417e:	6083      	str	r3, [r0, #8]
 8024180:	8181      	strh	r1, [r0, #12]
 8024182:	6643      	str	r3, [r0, #100]	; 0x64
 8024184:	81c2      	strh	r2, [r0, #14]
 8024186:	6183      	str	r3, [r0, #24]
 8024188:	4619      	mov	r1, r3
 802418a:	2208      	movs	r2, #8
 802418c:	305c      	adds	r0, #92	; 0x5c
 802418e:	f7fe fbcb 	bl	8022928 <memset>
 8024192:	4b05      	ldr	r3, [pc, #20]	; (80241a8 <std+0x38>)
 8024194:	6263      	str	r3, [r4, #36]	; 0x24
 8024196:	4b05      	ldr	r3, [pc, #20]	; (80241ac <std+0x3c>)
 8024198:	62a3      	str	r3, [r4, #40]	; 0x28
 802419a:	4b05      	ldr	r3, [pc, #20]	; (80241b0 <std+0x40>)
 802419c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802419e:	4b05      	ldr	r3, [pc, #20]	; (80241b4 <std+0x44>)
 80241a0:	6224      	str	r4, [r4, #32]
 80241a2:	6323      	str	r3, [r4, #48]	; 0x30
 80241a4:	bd10      	pop	{r4, pc}
 80241a6:	bf00      	nop
 80241a8:	080257d9 	.word	0x080257d9
 80241ac:	080257fb 	.word	0x080257fb
 80241b0:	08025833 	.word	0x08025833
 80241b4:	08025857 	.word	0x08025857

080241b8 <_cleanup_r>:
 80241b8:	4901      	ldr	r1, [pc, #4]	; (80241c0 <_cleanup_r+0x8>)
 80241ba:	f000 b8af 	b.w	802431c <_fwalk_reent>
 80241be:	bf00      	nop
 80241c0:	080240f9 	.word	0x080240f9

080241c4 <__sfmoreglue>:
 80241c4:	b570      	push	{r4, r5, r6, lr}
 80241c6:	2268      	movs	r2, #104	; 0x68
 80241c8:	1e4d      	subs	r5, r1, #1
 80241ca:	4355      	muls	r5, r2
 80241cc:	460e      	mov	r6, r1
 80241ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80241d2:	f7fe fc33 	bl	8022a3c <_malloc_r>
 80241d6:	4604      	mov	r4, r0
 80241d8:	b140      	cbz	r0, 80241ec <__sfmoreglue+0x28>
 80241da:	2100      	movs	r1, #0
 80241dc:	e9c0 1600 	strd	r1, r6, [r0]
 80241e0:	300c      	adds	r0, #12
 80241e2:	60a0      	str	r0, [r4, #8]
 80241e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80241e8:	f7fe fb9e 	bl	8022928 <memset>
 80241ec:	4620      	mov	r0, r4
 80241ee:	bd70      	pop	{r4, r5, r6, pc}

080241f0 <__sfp_lock_acquire>:
 80241f0:	4801      	ldr	r0, [pc, #4]	; (80241f8 <__sfp_lock_acquire+0x8>)
 80241f2:	f7fe bb5e 	b.w	80228b2 <__retarget_lock_acquire_recursive>
 80241f6:	bf00      	nop
 80241f8:	20002621 	.word	0x20002621

080241fc <__sfp_lock_release>:
 80241fc:	4801      	ldr	r0, [pc, #4]	; (8024204 <__sfp_lock_release+0x8>)
 80241fe:	f7fe bb59 	b.w	80228b4 <__retarget_lock_release_recursive>
 8024202:	bf00      	nop
 8024204:	20002621 	.word	0x20002621

08024208 <__sinit_lock_acquire>:
 8024208:	4801      	ldr	r0, [pc, #4]	; (8024210 <__sinit_lock_acquire+0x8>)
 802420a:	f7fe bb52 	b.w	80228b2 <__retarget_lock_acquire_recursive>
 802420e:	bf00      	nop
 8024210:	20002622 	.word	0x20002622

08024214 <__sinit_lock_release>:
 8024214:	4801      	ldr	r0, [pc, #4]	; (802421c <__sinit_lock_release+0x8>)
 8024216:	f7fe bb4d 	b.w	80228b4 <__retarget_lock_release_recursive>
 802421a:	bf00      	nop
 802421c:	20002622 	.word	0x20002622

08024220 <__sinit>:
 8024220:	b510      	push	{r4, lr}
 8024222:	4604      	mov	r4, r0
 8024224:	f7ff fff0 	bl	8024208 <__sinit_lock_acquire>
 8024228:	69a3      	ldr	r3, [r4, #24]
 802422a:	b11b      	cbz	r3, 8024234 <__sinit+0x14>
 802422c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024230:	f7ff bff0 	b.w	8024214 <__sinit_lock_release>
 8024234:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8024238:	6523      	str	r3, [r4, #80]	; 0x50
 802423a:	4b13      	ldr	r3, [pc, #76]	; (8024288 <__sinit+0x68>)
 802423c:	4a13      	ldr	r2, [pc, #76]	; (802428c <__sinit+0x6c>)
 802423e:	681b      	ldr	r3, [r3, #0]
 8024240:	62a2      	str	r2, [r4, #40]	; 0x28
 8024242:	42a3      	cmp	r3, r4
 8024244:	bf04      	itt	eq
 8024246:	2301      	moveq	r3, #1
 8024248:	61a3      	streq	r3, [r4, #24]
 802424a:	4620      	mov	r0, r4
 802424c:	f000 f820 	bl	8024290 <__sfp>
 8024250:	6060      	str	r0, [r4, #4]
 8024252:	4620      	mov	r0, r4
 8024254:	f000 f81c 	bl	8024290 <__sfp>
 8024258:	60a0      	str	r0, [r4, #8]
 802425a:	4620      	mov	r0, r4
 802425c:	f000 f818 	bl	8024290 <__sfp>
 8024260:	2200      	movs	r2, #0
 8024262:	60e0      	str	r0, [r4, #12]
 8024264:	2104      	movs	r1, #4
 8024266:	6860      	ldr	r0, [r4, #4]
 8024268:	f7ff ff82 	bl	8024170 <std>
 802426c:	68a0      	ldr	r0, [r4, #8]
 802426e:	2201      	movs	r2, #1
 8024270:	2109      	movs	r1, #9
 8024272:	f7ff ff7d 	bl	8024170 <std>
 8024276:	68e0      	ldr	r0, [r4, #12]
 8024278:	2202      	movs	r2, #2
 802427a:	2112      	movs	r1, #18
 802427c:	f7ff ff78 	bl	8024170 <std>
 8024280:	2301      	movs	r3, #1
 8024282:	61a3      	str	r3, [r4, #24]
 8024284:	e7d2      	b.n	802422c <__sinit+0xc>
 8024286:	bf00      	nop
 8024288:	0802a4b4 	.word	0x0802a4b4
 802428c:	080241b9 	.word	0x080241b9

08024290 <__sfp>:
 8024290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024292:	4607      	mov	r7, r0
 8024294:	f7ff ffac 	bl	80241f0 <__sfp_lock_acquire>
 8024298:	4b1e      	ldr	r3, [pc, #120]	; (8024314 <__sfp+0x84>)
 802429a:	681e      	ldr	r6, [r3, #0]
 802429c:	69b3      	ldr	r3, [r6, #24]
 802429e:	b913      	cbnz	r3, 80242a6 <__sfp+0x16>
 80242a0:	4630      	mov	r0, r6
 80242a2:	f7ff ffbd 	bl	8024220 <__sinit>
 80242a6:	3648      	adds	r6, #72	; 0x48
 80242a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80242ac:	3b01      	subs	r3, #1
 80242ae:	d503      	bpl.n	80242b8 <__sfp+0x28>
 80242b0:	6833      	ldr	r3, [r6, #0]
 80242b2:	b30b      	cbz	r3, 80242f8 <__sfp+0x68>
 80242b4:	6836      	ldr	r6, [r6, #0]
 80242b6:	e7f7      	b.n	80242a8 <__sfp+0x18>
 80242b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80242bc:	b9d5      	cbnz	r5, 80242f4 <__sfp+0x64>
 80242be:	4b16      	ldr	r3, [pc, #88]	; (8024318 <__sfp+0x88>)
 80242c0:	60e3      	str	r3, [r4, #12]
 80242c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80242c6:	6665      	str	r5, [r4, #100]	; 0x64
 80242c8:	f7fe faf2 	bl	80228b0 <__retarget_lock_init_recursive>
 80242cc:	f7ff ff96 	bl	80241fc <__sfp_lock_release>
 80242d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80242d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80242d8:	6025      	str	r5, [r4, #0]
 80242da:	61a5      	str	r5, [r4, #24]
 80242dc:	2208      	movs	r2, #8
 80242de:	4629      	mov	r1, r5
 80242e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80242e4:	f7fe fb20 	bl	8022928 <memset>
 80242e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80242ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80242f0:	4620      	mov	r0, r4
 80242f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80242f4:	3468      	adds	r4, #104	; 0x68
 80242f6:	e7d9      	b.n	80242ac <__sfp+0x1c>
 80242f8:	2104      	movs	r1, #4
 80242fa:	4638      	mov	r0, r7
 80242fc:	f7ff ff62 	bl	80241c4 <__sfmoreglue>
 8024300:	4604      	mov	r4, r0
 8024302:	6030      	str	r0, [r6, #0]
 8024304:	2800      	cmp	r0, #0
 8024306:	d1d5      	bne.n	80242b4 <__sfp+0x24>
 8024308:	f7ff ff78 	bl	80241fc <__sfp_lock_release>
 802430c:	230c      	movs	r3, #12
 802430e:	603b      	str	r3, [r7, #0]
 8024310:	e7ee      	b.n	80242f0 <__sfp+0x60>
 8024312:	bf00      	nop
 8024314:	0802a4b4 	.word	0x0802a4b4
 8024318:	ffff0001 	.word	0xffff0001

0802431c <_fwalk_reent>:
 802431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024320:	4606      	mov	r6, r0
 8024322:	4688      	mov	r8, r1
 8024324:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024328:	2700      	movs	r7, #0
 802432a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802432e:	f1b9 0901 	subs.w	r9, r9, #1
 8024332:	d505      	bpl.n	8024340 <_fwalk_reent+0x24>
 8024334:	6824      	ldr	r4, [r4, #0]
 8024336:	2c00      	cmp	r4, #0
 8024338:	d1f7      	bne.n	802432a <_fwalk_reent+0xe>
 802433a:	4638      	mov	r0, r7
 802433c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024340:	89ab      	ldrh	r3, [r5, #12]
 8024342:	2b01      	cmp	r3, #1
 8024344:	d907      	bls.n	8024356 <_fwalk_reent+0x3a>
 8024346:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802434a:	3301      	adds	r3, #1
 802434c:	d003      	beq.n	8024356 <_fwalk_reent+0x3a>
 802434e:	4629      	mov	r1, r5
 8024350:	4630      	mov	r0, r6
 8024352:	47c0      	blx	r8
 8024354:	4307      	orrs	r7, r0
 8024356:	3568      	adds	r5, #104	; 0x68
 8024358:	e7e9      	b.n	802432e <_fwalk_reent+0x12>

0802435a <rshift>:
 802435a:	6903      	ldr	r3, [r0, #16]
 802435c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8024360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024364:	ea4f 1261 	mov.w	r2, r1, asr #5
 8024368:	f100 0414 	add.w	r4, r0, #20
 802436c:	dd45      	ble.n	80243fa <rshift+0xa0>
 802436e:	f011 011f 	ands.w	r1, r1, #31
 8024372:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8024376:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802437a:	d10c      	bne.n	8024396 <rshift+0x3c>
 802437c:	f100 0710 	add.w	r7, r0, #16
 8024380:	4629      	mov	r1, r5
 8024382:	42b1      	cmp	r1, r6
 8024384:	d334      	bcc.n	80243f0 <rshift+0x96>
 8024386:	1a9b      	subs	r3, r3, r2
 8024388:	009b      	lsls	r3, r3, #2
 802438a:	1eea      	subs	r2, r5, #3
 802438c:	4296      	cmp	r6, r2
 802438e:	bf38      	it	cc
 8024390:	2300      	movcc	r3, #0
 8024392:	4423      	add	r3, r4
 8024394:	e015      	b.n	80243c2 <rshift+0x68>
 8024396:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802439a:	f1c1 0820 	rsb	r8, r1, #32
 802439e:	40cf      	lsrs	r7, r1
 80243a0:	f105 0e04 	add.w	lr, r5, #4
 80243a4:	46a1      	mov	r9, r4
 80243a6:	4576      	cmp	r6, lr
 80243a8:	46f4      	mov	ip, lr
 80243aa:	d815      	bhi.n	80243d8 <rshift+0x7e>
 80243ac:	1a9a      	subs	r2, r3, r2
 80243ae:	0092      	lsls	r2, r2, #2
 80243b0:	3a04      	subs	r2, #4
 80243b2:	3501      	adds	r5, #1
 80243b4:	42ae      	cmp	r6, r5
 80243b6:	bf38      	it	cc
 80243b8:	2200      	movcc	r2, #0
 80243ba:	18a3      	adds	r3, r4, r2
 80243bc:	50a7      	str	r7, [r4, r2]
 80243be:	b107      	cbz	r7, 80243c2 <rshift+0x68>
 80243c0:	3304      	adds	r3, #4
 80243c2:	1b1a      	subs	r2, r3, r4
 80243c4:	42a3      	cmp	r3, r4
 80243c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80243ca:	bf08      	it	eq
 80243cc:	2300      	moveq	r3, #0
 80243ce:	6102      	str	r2, [r0, #16]
 80243d0:	bf08      	it	eq
 80243d2:	6143      	streq	r3, [r0, #20]
 80243d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80243d8:	f8dc c000 	ldr.w	ip, [ip]
 80243dc:	fa0c fc08 	lsl.w	ip, ip, r8
 80243e0:	ea4c 0707 	orr.w	r7, ip, r7
 80243e4:	f849 7b04 	str.w	r7, [r9], #4
 80243e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80243ec:	40cf      	lsrs	r7, r1
 80243ee:	e7da      	b.n	80243a6 <rshift+0x4c>
 80243f0:	f851 cb04 	ldr.w	ip, [r1], #4
 80243f4:	f847 cf04 	str.w	ip, [r7, #4]!
 80243f8:	e7c3      	b.n	8024382 <rshift+0x28>
 80243fa:	4623      	mov	r3, r4
 80243fc:	e7e1      	b.n	80243c2 <rshift+0x68>

080243fe <__hexdig_fun>:
 80243fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8024402:	2b09      	cmp	r3, #9
 8024404:	d802      	bhi.n	802440c <__hexdig_fun+0xe>
 8024406:	3820      	subs	r0, #32
 8024408:	b2c0      	uxtb	r0, r0
 802440a:	4770      	bx	lr
 802440c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8024410:	2b05      	cmp	r3, #5
 8024412:	d801      	bhi.n	8024418 <__hexdig_fun+0x1a>
 8024414:	3847      	subs	r0, #71	; 0x47
 8024416:	e7f7      	b.n	8024408 <__hexdig_fun+0xa>
 8024418:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802441c:	2b05      	cmp	r3, #5
 802441e:	d801      	bhi.n	8024424 <__hexdig_fun+0x26>
 8024420:	3827      	subs	r0, #39	; 0x27
 8024422:	e7f1      	b.n	8024408 <__hexdig_fun+0xa>
 8024424:	2000      	movs	r0, #0
 8024426:	4770      	bx	lr

08024428 <__gethex>:
 8024428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802442c:	ed2d 8b02 	vpush	{d8}
 8024430:	b089      	sub	sp, #36	; 0x24
 8024432:	ee08 0a10 	vmov	s16, r0
 8024436:	9304      	str	r3, [sp, #16]
 8024438:	4bb4      	ldr	r3, [pc, #720]	; (802470c <__gethex+0x2e4>)
 802443a:	681b      	ldr	r3, [r3, #0]
 802443c:	9301      	str	r3, [sp, #4]
 802443e:	4618      	mov	r0, r3
 8024440:	468b      	mov	fp, r1
 8024442:	4690      	mov	r8, r2
 8024444:	f7db ff1e 	bl	8000284 <strlen>
 8024448:	9b01      	ldr	r3, [sp, #4]
 802444a:	f8db 2000 	ldr.w	r2, [fp]
 802444e:	4403      	add	r3, r0
 8024450:	4682      	mov	sl, r0
 8024452:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8024456:	9305      	str	r3, [sp, #20]
 8024458:	1c93      	adds	r3, r2, #2
 802445a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802445e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8024462:	32fe      	adds	r2, #254	; 0xfe
 8024464:	18d1      	adds	r1, r2, r3
 8024466:	461f      	mov	r7, r3
 8024468:	f813 0b01 	ldrb.w	r0, [r3], #1
 802446c:	9100      	str	r1, [sp, #0]
 802446e:	2830      	cmp	r0, #48	; 0x30
 8024470:	d0f8      	beq.n	8024464 <__gethex+0x3c>
 8024472:	f7ff ffc4 	bl	80243fe <__hexdig_fun>
 8024476:	4604      	mov	r4, r0
 8024478:	2800      	cmp	r0, #0
 802447a:	d13a      	bne.n	80244f2 <__gethex+0xca>
 802447c:	9901      	ldr	r1, [sp, #4]
 802447e:	4652      	mov	r2, sl
 8024480:	4638      	mov	r0, r7
 8024482:	f7fe fe91 	bl	80231a8 <strncmp>
 8024486:	4605      	mov	r5, r0
 8024488:	2800      	cmp	r0, #0
 802448a:	d168      	bne.n	802455e <__gethex+0x136>
 802448c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8024490:	eb07 060a 	add.w	r6, r7, sl
 8024494:	f7ff ffb3 	bl	80243fe <__hexdig_fun>
 8024498:	2800      	cmp	r0, #0
 802449a:	d062      	beq.n	8024562 <__gethex+0x13a>
 802449c:	4633      	mov	r3, r6
 802449e:	7818      	ldrb	r0, [r3, #0]
 80244a0:	2830      	cmp	r0, #48	; 0x30
 80244a2:	461f      	mov	r7, r3
 80244a4:	f103 0301 	add.w	r3, r3, #1
 80244a8:	d0f9      	beq.n	802449e <__gethex+0x76>
 80244aa:	f7ff ffa8 	bl	80243fe <__hexdig_fun>
 80244ae:	2301      	movs	r3, #1
 80244b0:	fab0 f480 	clz	r4, r0
 80244b4:	0964      	lsrs	r4, r4, #5
 80244b6:	4635      	mov	r5, r6
 80244b8:	9300      	str	r3, [sp, #0]
 80244ba:	463a      	mov	r2, r7
 80244bc:	4616      	mov	r6, r2
 80244be:	3201      	adds	r2, #1
 80244c0:	7830      	ldrb	r0, [r6, #0]
 80244c2:	f7ff ff9c 	bl	80243fe <__hexdig_fun>
 80244c6:	2800      	cmp	r0, #0
 80244c8:	d1f8      	bne.n	80244bc <__gethex+0x94>
 80244ca:	9901      	ldr	r1, [sp, #4]
 80244cc:	4652      	mov	r2, sl
 80244ce:	4630      	mov	r0, r6
 80244d0:	f7fe fe6a 	bl	80231a8 <strncmp>
 80244d4:	b980      	cbnz	r0, 80244f8 <__gethex+0xd0>
 80244d6:	b94d      	cbnz	r5, 80244ec <__gethex+0xc4>
 80244d8:	eb06 050a 	add.w	r5, r6, sl
 80244dc:	462a      	mov	r2, r5
 80244de:	4616      	mov	r6, r2
 80244e0:	3201      	adds	r2, #1
 80244e2:	7830      	ldrb	r0, [r6, #0]
 80244e4:	f7ff ff8b 	bl	80243fe <__hexdig_fun>
 80244e8:	2800      	cmp	r0, #0
 80244ea:	d1f8      	bne.n	80244de <__gethex+0xb6>
 80244ec:	1bad      	subs	r5, r5, r6
 80244ee:	00ad      	lsls	r5, r5, #2
 80244f0:	e004      	b.n	80244fc <__gethex+0xd4>
 80244f2:	2400      	movs	r4, #0
 80244f4:	4625      	mov	r5, r4
 80244f6:	e7e0      	b.n	80244ba <__gethex+0x92>
 80244f8:	2d00      	cmp	r5, #0
 80244fa:	d1f7      	bne.n	80244ec <__gethex+0xc4>
 80244fc:	7833      	ldrb	r3, [r6, #0]
 80244fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8024502:	2b50      	cmp	r3, #80	; 0x50
 8024504:	d13b      	bne.n	802457e <__gethex+0x156>
 8024506:	7873      	ldrb	r3, [r6, #1]
 8024508:	2b2b      	cmp	r3, #43	; 0x2b
 802450a:	d02c      	beq.n	8024566 <__gethex+0x13e>
 802450c:	2b2d      	cmp	r3, #45	; 0x2d
 802450e:	d02e      	beq.n	802456e <__gethex+0x146>
 8024510:	1c71      	adds	r1, r6, #1
 8024512:	f04f 0900 	mov.w	r9, #0
 8024516:	7808      	ldrb	r0, [r1, #0]
 8024518:	f7ff ff71 	bl	80243fe <__hexdig_fun>
 802451c:	1e43      	subs	r3, r0, #1
 802451e:	b2db      	uxtb	r3, r3
 8024520:	2b18      	cmp	r3, #24
 8024522:	d82c      	bhi.n	802457e <__gethex+0x156>
 8024524:	f1a0 0210 	sub.w	r2, r0, #16
 8024528:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802452c:	f7ff ff67 	bl	80243fe <__hexdig_fun>
 8024530:	1e43      	subs	r3, r0, #1
 8024532:	b2db      	uxtb	r3, r3
 8024534:	2b18      	cmp	r3, #24
 8024536:	d91d      	bls.n	8024574 <__gethex+0x14c>
 8024538:	f1b9 0f00 	cmp.w	r9, #0
 802453c:	d000      	beq.n	8024540 <__gethex+0x118>
 802453e:	4252      	negs	r2, r2
 8024540:	4415      	add	r5, r2
 8024542:	f8cb 1000 	str.w	r1, [fp]
 8024546:	b1e4      	cbz	r4, 8024582 <__gethex+0x15a>
 8024548:	9b00      	ldr	r3, [sp, #0]
 802454a:	2b00      	cmp	r3, #0
 802454c:	bf14      	ite	ne
 802454e:	2700      	movne	r7, #0
 8024550:	2706      	moveq	r7, #6
 8024552:	4638      	mov	r0, r7
 8024554:	b009      	add	sp, #36	; 0x24
 8024556:	ecbd 8b02 	vpop	{d8}
 802455a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802455e:	463e      	mov	r6, r7
 8024560:	4625      	mov	r5, r4
 8024562:	2401      	movs	r4, #1
 8024564:	e7ca      	b.n	80244fc <__gethex+0xd4>
 8024566:	f04f 0900 	mov.w	r9, #0
 802456a:	1cb1      	adds	r1, r6, #2
 802456c:	e7d3      	b.n	8024516 <__gethex+0xee>
 802456e:	f04f 0901 	mov.w	r9, #1
 8024572:	e7fa      	b.n	802456a <__gethex+0x142>
 8024574:	230a      	movs	r3, #10
 8024576:	fb03 0202 	mla	r2, r3, r2, r0
 802457a:	3a10      	subs	r2, #16
 802457c:	e7d4      	b.n	8024528 <__gethex+0x100>
 802457e:	4631      	mov	r1, r6
 8024580:	e7df      	b.n	8024542 <__gethex+0x11a>
 8024582:	1bf3      	subs	r3, r6, r7
 8024584:	3b01      	subs	r3, #1
 8024586:	4621      	mov	r1, r4
 8024588:	2b07      	cmp	r3, #7
 802458a:	dc0b      	bgt.n	80245a4 <__gethex+0x17c>
 802458c:	ee18 0a10 	vmov	r0, s16
 8024590:	f000 fad6 	bl	8024b40 <_Balloc>
 8024594:	4604      	mov	r4, r0
 8024596:	b940      	cbnz	r0, 80245aa <__gethex+0x182>
 8024598:	4b5d      	ldr	r3, [pc, #372]	; (8024710 <__gethex+0x2e8>)
 802459a:	4602      	mov	r2, r0
 802459c:	21de      	movs	r1, #222	; 0xde
 802459e:	485d      	ldr	r0, [pc, #372]	; (8024714 <__gethex+0x2ec>)
 80245a0:	f7fe f920 	bl	80227e4 <__assert_func>
 80245a4:	3101      	adds	r1, #1
 80245a6:	105b      	asrs	r3, r3, #1
 80245a8:	e7ee      	b.n	8024588 <__gethex+0x160>
 80245aa:	f100 0914 	add.w	r9, r0, #20
 80245ae:	f04f 0b00 	mov.w	fp, #0
 80245b2:	f1ca 0301 	rsb	r3, sl, #1
 80245b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80245ba:	f8cd b000 	str.w	fp, [sp]
 80245be:	9306      	str	r3, [sp, #24]
 80245c0:	42b7      	cmp	r7, r6
 80245c2:	d340      	bcc.n	8024646 <__gethex+0x21e>
 80245c4:	9802      	ldr	r0, [sp, #8]
 80245c6:	9b00      	ldr	r3, [sp, #0]
 80245c8:	f840 3b04 	str.w	r3, [r0], #4
 80245cc:	eba0 0009 	sub.w	r0, r0, r9
 80245d0:	1080      	asrs	r0, r0, #2
 80245d2:	0146      	lsls	r6, r0, #5
 80245d4:	6120      	str	r0, [r4, #16]
 80245d6:	4618      	mov	r0, r3
 80245d8:	f000 fba4 	bl	8024d24 <__hi0bits>
 80245dc:	1a30      	subs	r0, r6, r0
 80245de:	f8d8 6000 	ldr.w	r6, [r8]
 80245e2:	42b0      	cmp	r0, r6
 80245e4:	dd63      	ble.n	80246ae <__gethex+0x286>
 80245e6:	1b87      	subs	r7, r0, r6
 80245e8:	4639      	mov	r1, r7
 80245ea:	4620      	mov	r0, r4
 80245ec:	f000 ff48 	bl	8025480 <__any_on>
 80245f0:	4682      	mov	sl, r0
 80245f2:	b1a8      	cbz	r0, 8024620 <__gethex+0x1f8>
 80245f4:	1e7b      	subs	r3, r7, #1
 80245f6:	1159      	asrs	r1, r3, #5
 80245f8:	f003 021f 	and.w	r2, r3, #31
 80245fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8024600:	f04f 0a01 	mov.w	sl, #1
 8024604:	fa0a f202 	lsl.w	r2, sl, r2
 8024608:	420a      	tst	r2, r1
 802460a:	d009      	beq.n	8024620 <__gethex+0x1f8>
 802460c:	4553      	cmp	r3, sl
 802460e:	dd05      	ble.n	802461c <__gethex+0x1f4>
 8024610:	1eb9      	subs	r1, r7, #2
 8024612:	4620      	mov	r0, r4
 8024614:	f000 ff34 	bl	8025480 <__any_on>
 8024618:	2800      	cmp	r0, #0
 802461a:	d145      	bne.n	80246a8 <__gethex+0x280>
 802461c:	f04f 0a02 	mov.w	sl, #2
 8024620:	4639      	mov	r1, r7
 8024622:	4620      	mov	r0, r4
 8024624:	f7ff fe99 	bl	802435a <rshift>
 8024628:	443d      	add	r5, r7
 802462a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802462e:	42ab      	cmp	r3, r5
 8024630:	da4c      	bge.n	80246cc <__gethex+0x2a4>
 8024632:	ee18 0a10 	vmov	r0, s16
 8024636:	4621      	mov	r1, r4
 8024638:	f000 fac2 	bl	8024bc0 <_Bfree>
 802463c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802463e:	2300      	movs	r3, #0
 8024640:	6013      	str	r3, [r2, #0]
 8024642:	27a3      	movs	r7, #163	; 0xa3
 8024644:	e785      	b.n	8024552 <__gethex+0x12a>
 8024646:	1e73      	subs	r3, r6, #1
 8024648:	9a05      	ldr	r2, [sp, #20]
 802464a:	9303      	str	r3, [sp, #12]
 802464c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8024650:	4293      	cmp	r3, r2
 8024652:	d019      	beq.n	8024688 <__gethex+0x260>
 8024654:	f1bb 0f20 	cmp.w	fp, #32
 8024658:	d107      	bne.n	802466a <__gethex+0x242>
 802465a:	9b02      	ldr	r3, [sp, #8]
 802465c:	9a00      	ldr	r2, [sp, #0]
 802465e:	f843 2b04 	str.w	r2, [r3], #4
 8024662:	9302      	str	r3, [sp, #8]
 8024664:	2300      	movs	r3, #0
 8024666:	9300      	str	r3, [sp, #0]
 8024668:	469b      	mov	fp, r3
 802466a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802466e:	f7ff fec6 	bl	80243fe <__hexdig_fun>
 8024672:	9b00      	ldr	r3, [sp, #0]
 8024674:	f000 000f 	and.w	r0, r0, #15
 8024678:	fa00 f00b 	lsl.w	r0, r0, fp
 802467c:	4303      	orrs	r3, r0
 802467e:	9300      	str	r3, [sp, #0]
 8024680:	f10b 0b04 	add.w	fp, fp, #4
 8024684:	9b03      	ldr	r3, [sp, #12]
 8024686:	e00d      	b.n	80246a4 <__gethex+0x27c>
 8024688:	9b03      	ldr	r3, [sp, #12]
 802468a:	9a06      	ldr	r2, [sp, #24]
 802468c:	4413      	add	r3, r2
 802468e:	42bb      	cmp	r3, r7
 8024690:	d3e0      	bcc.n	8024654 <__gethex+0x22c>
 8024692:	4618      	mov	r0, r3
 8024694:	9901      	ldr	r1, [sp, #4]
 8024696:	9307      	str	r3, [sp, #28]
 8024698:	4652      	mov	r2, sl
 802469a:	f7fe fd85 	bl	80231a8 <strncmp>
 802469e:	9b07      	ldr	r3, [sp, #28]
 80246a0:	2800      	cmp	r0, #0
 80246a2:	d1d7      	bne.n	8024654 <__gethex+0x22c>
 80246a4:	461e      	mov	r6, r3
 80246a6:	e78b      	b.n	80245c0 <__gethex+0x198>
 80246a8:	f04f 0a03 	mov.w	sl, #3
 80246ac:	e7b8      	b.n	8024620 <__gethex+0x1f8>
 80246ae:	da0a      	bge.n	80246c6 <__gethex+0x29e>
 80246b0:	1a37      	subs	r7, r6, r0
 80246b2:	4621      	mov	r1, r4
 80246b4:	ee18 0a10 	vmov	r0, s16
 80246b8:	463a      	mov	r2, r7
 80246ba:	f000 fc9d 	bl	8024ff8 <__lshift>
 80246be:	1bed      	subs	r5, r5, r7
 80246c0:	4604      	mov	r4, r0
 80246c2:	f100 0914 	add.w	r9, r0, #20
 80246c6:	f04f 0a00 	mov.w	sl, #0
 80246ca:	e7ae      	b.n	802462a <__gethex+0x202>
 80246cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80246d0:	42a8      	cmp	r0, r5
 80246d2:	dd72      	ble.n	80247ba <__gethex+0x392>
 80246d4:	1b45      	subs	r5, r0, r5
 80246d6:	42ae      	cmp	r6, r5
 80246d8:	dc36      	bgt.n	8024748 <__gethex+0x320>
 80246da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80246de:	2b02      	cmp	r3, #2
 80246e0:	d02a      	beq.n	8024738 <__gethex+0x310>
 80246e2:	2b03      	cmp	r3, #3
 80246e4:	d02c      	beq.n	8024740 <__gethex+0x318>
 80246e6:	2b01      	cmp	r3, #1
 80246e8:	d11c      	bne.n	8024724 <__gethex+0x2fc>
 80246ea:	42ae      	cmp	r6, r5
 80246ec:	d11a      	bne.n	8024724 <__gethex+0x2fc>
 80246ee:	2e01      	cmp	r6, #1
 80246f0:	d112      	bne.n	8024718 <__gethex+0x2f0>
 80246f2:	9a04      	ldr	r2, [sp, #16]
 80246f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80246f8:	6013      	str	r3, [r2, #0]
 80246fa:	2301      	movs	r3, #1
 80246fc:	6123      	str	r3, [r4, #16]
 80246fe:	f8c9 3000 	str.w	r3, [r9]
 8024702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024704:	2762      	movs	r7, #98	; 0x62
 8024706:	601c      	str	r4, [r3, #0]
 8024708:	e723      	b.n	8024552 <__gethex+0x12a>
 802470a:	bf00      	nop
 802470c:	0802a724 	.word	0x0802a724
 8024710:	0802a6ac 	.word	0x0802a6ac
 8024714:	0802a6bd 	.word	0x0802a6bd
 8024718:	1e71      	subs	r1, r6, #1
 802471a:	4620      	mov	r0, r4
 802471c:	f000 feb0 	bl	8025480 <__any_on>
 8024720:	2800      	cmp	r0, #0
 8024722:	d1e6      	bne.n	80246f2 <__gethex+0x2ca>
 8024724:	ee18 0a10 	vmov	r0, s16
 8024728:	4621      	mov	r1, r4
 802472a:	f000 fa49 	bl	8024bc0 <_Bfree>
 802472e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024730:	2300      	movs	r3, #0
 8024732:	6013      	str	r3, [r2, #0]
 8024734:	2750      	movs	r7, #80	; 0x50
 8024736:	e70c      	b.n	8024552 <__gethex+0x12a>
 8024738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802473a:	2b00      	cmp	r3, #0
 802473c:	d1f2      	bne.n	8024724 <__gethex+0x2fc>
 802473e:	e7d8      	b.n	80246f2 <__gethex+0x2ca>
 8024740:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024742:	2b00      	cmp	r3, #0
 8024744:	d1d5      	bne.n	80246f2 <__gethex+0x2ca>
 8024746:	e7ed      	b.n	8024724 <__gethex+0x2fc>
 8024748:	1e6f      	subs	r7, r5, #1
 802474a:	f1ba 0f00 	cmp.w	sl, #0
 802474e:	d131      	bne.n	80247b4 <__gethex+0x38c>
 8024750:	b127      	cbz	r7, 802475c <__gethex+0x334>
 8024752:	4639      	mov	r1, r7
 8024754:	4620      	mov	r0, r4
 8024756:	f000 fe93 	bl	8025480 <__any_on>
 802475a:	4682      	mov	sl, r0
 802475c:	117b      	asrs	r3, r7, #5
 802475e:	2101      	movs	r1, #1
 8024760:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8024764:	f007 071f 	and.w	r7, r7, #31
 8024768:	fa01 f707 	lsl.w	r7, r1, r7
 802476c:	421f      	tst	r7, r3
 802476e:	4629      	mov	r1, r5
 8024770:	4620      	mov	r0, r4
 8024772:	bf18      	it	ne
 8024774:	f04a 0a02 	orrne.w	sl, sl, #2
 8024778:	1b76      	subs	r6, r6, r5
 802477a:	f7ff fdee 	bl	802435a <rshift>
 802477e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8024782:	2702      	movs	r7, #2
 8024784:	f1ba 0f00 	cmp.w	sl, #0
 8024788:	d048      	beq.n	802481c <__gethex+0x3f4>
 802478a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802478e:	2b02      	cmp	r3, #2
 8024790:	d015      	beq.n	80247be <__gethex+0x396>
 8024792:	2b03      	cmp	r3, #3
 8024794:	d017      	beq.n	80247c6 <__gethex+0x39e>
 8024796:	2b01      	cmp	r3, #1
 8024798:	d109      	bne.n	80247ae <__gethex+0x386>
 802479a:	f01a 0f02 	tst.w	sl, #2
 802479e:	d006      	beq.n	80247ae <__gethex+0x386>
 80247a0:	f8d9 0000 	ldr.w	r0, [r9]
 80247a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80247a8:	f01a 0f01 	tst.w	sl, #1
 80247ac:	d10e      	bne.n	80247cc <__gethex+0x3a4>
 80247ae:	f047 0710 	orr.w	r7, r7, #16
 80247b2:	e033      	b.n	802481c <__gethex+0x3f4>
 80247b4:	f04f 0a01 	mov.w	sl, #1
 80247b8:	e7d0      	b.n	802475c <__gethex+0x334>
 80247ba:	2701      	movs	r7, #1
 80247bc:	e7e2      	b.n	8024784 <__gethex+0x35c>
 80247be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80247c0:	f1c3 0301 	rsb	r3, r3, #1
 80247c4:	9315      	str	r3, [sp, #84]	; 0x54
 80247c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80247c8:	2b00      	cmp	r3, #0
 80247ca:	d0f0      	beq.n	80247ae <__gethex+0x386>
 80247cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80247d0:	f104 0314 	add.w	r3, r4, #20
 80247d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80247d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80247dc:	f04f 0c00 	mov.w	ip, #0
 80247e0:	4618      	mov	r0, r3
 80247e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80247e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80247ea:	d01c      	beq.n	8024826 <__gethex+0x3fe>
 80247ec:	3201      	adds	r2, #1
 80247ee:	6002      	str	r2, [r0, #0]
 80247f0:	2f02      	cmp	r7, #2
 80247f2:	f104 0314 	add.w	r3, r4, #20
 80247f6:	d13f      	bne.n	8024878 <__gethex+0x450>
 80247f8:	f8d8 2000 	ldr.w	r2, [r8]
 80247fc:	3a01      	subs	r2, #1
 80247fe:	42b2      	cmp	r2, r6
 8024800:	d10a      	bne.n	8024818 <__gethex+0x3f0>
 8024802:	1171      	asrs	r1, r6, #5
 8024804:	2201      	movs	r2, #1
 8024806:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802480a:	f006 061f 	and.w	r6, r6, #31
 802480e:	fa02 f606 	lsl.w	r6, r2, r6
 8024812:	421e      	tst	r6, r3
 8024814:	bf18      	it	ne
 8024816:	4617      	movne	r7, r2
 8024818:	f047 0720 	orr.w	r7, r7, #32
 802481c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802481e:	601c      	str	r4, [r3, #0]
 8024820:	9b04      	ldr	r3, [sp, #16]
 8024822:	601d      	str	r5, [r3, #0]
 8024824:	e695      	b.n	8024552 <__gethex+0x12a>
 8024826:	4299      	cmp	r1, r3
 8024828:	f843 cc04 	str.w	ip, [r3, #-4]
 802482c:	d8d8      	bhi.n	80247e0 <__gethex+0x3b8>
 802482e:	68a3      	ldr	r3, [r4, #8]
 8024830:	459b      	cmp	fp, r3
 8024832:	db19      	blt.n	8024868 <__gethex+0x440>
 8024834:	6861      	ldr	r1, [r4, #4]
 8024836:	ee18 0a10 	vmov	r0, s16
 802483a:	3101      	adds	r1, #1
 802483c:	f000 f980 	bl	8024b40 <_Balloc>
 8024840:	4681      	mov	r9, r0
 8024842:	b918      	cbnz	r0, 802484c <__gethex+0x424>
 8024844:	4b1a      	ldr	r3, [pc, #104]	; (80248b0 <__gethex+0x488>)
 8024846:	4602      	mov	r2, r0
 8024848:	2184      	movs	r1, #132	; 0x84
 802484a:	e6a8      	b.n	802459e <__gethex+0x176>
 802484c:	6922      	ldr	r2, [r4, #16]
 802484e:	3202      	adds	r2, #2
 8024850:	f104 010c 	add.w	r1, r4, #12
 8024854:	0092      	lsls	r2, r2, #2
 8024856:	300c      	adds	r0, #12
 8024858:	f7fe f83e 	bl	80228d8 <memcpy>
 802485c:	4621      	mov	r1, r4
 802485e:	ee18 0a10 	vmov	r0, s16
 8024862:	f000 f9ad 	bl	8024bc0 <_Bfree>
 8024866:	464c      	mov	r4, r9
 8024868:	6923      	ldr	r3, [r4, #16]
 802486a:	1c5a      	adds	r2, r3, #1
 802486c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8024870:	6122      	str	r2, [r4, #16]
 8024872:	2201      	movs	r2, #1
 8024874:	615a      	str	r2, [r3, #20]
 8024876:	e7bb      	b.n	80247f0 <__gethex+0x3c8>
 8024878:	6922      	ldr	r2, [r4, #16]
 802487a:	455a      	cmp	r2, fp
 802487c:	dd0b      	ble.n	8024896 <__gethex+0x46e>
 802487e:	2101      	movs	r1, #1
 8024880:	4620      	mov	r0, r4
 8024882:	f7ff fd6a 	bl	802435a <rshift>
 8024886:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802488a:	3501      	adds	r5, #1
 802488c:	42ab      	cmp	r3, r5
 802488e:	f6ff aed0 	blt.w	8024632 <__gethex+0x20a>
 8024892:	2701      	movs	r7, #1
 8024894:	e7c0      	b.n	8024818 <__gethex+0x3f0>
 8024896:	f016 061f 	ands.w	r6, r6, #31
 802489a:	d0fa      	beq.n	8024892 <__gethex+0x46a>
 802489c:	4453      	add	r3, sl
 802489e:	f1c6 0620 	rsb	r6, r6, #32
 80248a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80248a6:	f000 fa3d 	bl	8024d24 <__hi0bits>
 80248aa:	42b0      	cmp	r0, r6
 80248ac:	dbe7      	blt.n	802487e <__gethex+0x456>
 80248ae:	e7f0      	b.n	8024892 <__gethex+0x46a>
 80248b0:	0802a6ac 	.word	0x0802a6ac

080248b4 <L_shift>:
 80248b4:	f1c2 0208 	rsb	r2, r2, #8
 80248b8:	0092      	lsls	r2, r2, #2
 80248ba:	b570      	push	{r4, r5, r6, lr}
 80248bc:	f1c2 0620 	rsb	r6, r2, #32
 80248c0:	6843      	ldr	r3, [r0, #4]
 80248c2:	6804      	ldr	r4, [r0, #0]
 80248c4:	fa03 f506 	lsl.w	r5, r3, r6
 80248c8:	432c      	orrs	r4, r5
 80248ca:	40d3      	lsrs	r3, r2
 80248cc:	6004      	str	r4, [r0, #0]
 80248ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80248d2:	4288      	cmp	r0, r1
 80248d4:	d3f4      	bcc.n	80248c0 <L_shift+0xc>
 80248d6:	bd70      	pop	{r4, r5, r6, pc}

080248d8 <__match>:
 80248d8:	b530      	push	{r4, r5, lr}
 80248da:	6803      	ldr	r3, [r0, #0]
 80248dc:	3301      	adds	r3, #1
 80248de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80248e2:	b914      	cbnz	r4, 80248ea <__match+0x12>
 80248e4:	6003      	str	r3, [r0, #0]
 80248e6:	2001      	movs	r0, #1
 80248e8:	bd30      	pop	{r4, r5, pc}
 80248ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80248ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80248f2:	2d19      	cmp	r5, #25
 80248f4:	bf98      	it	ls
 80248f6:	3220      	addls	r2, #32
 80248f8:	42a2      	cmp	r2, r4
 80248fa:	d0f0      	beq.n	80248de <__match+0x6>
 80248fc:	2000      	movs	r0, #0
 80248fe:	e7f3      	b.n	80248e8 <__match+0x10>

08024900 <__hexnan>:
 8024900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024904:	680b      	ldr	r3, [r1, #0]
 8024906:	115e      	asrs	r6, r3, #5
 8024908:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802490c:	f013 031f 	ands.w	r3, r3, #31
 8024910:	b087      	sub	sp, #28
 8024912:	bf18      	it	ne
 8024914:	3604      	addne	r6, #4
 8024916:	2500      	movs	r5, #0
 8024918:	1f37      	subs	r7, r6, #4
 802491a:	4690      	mov	r8, r2
 802491c:	6802      	ldr	r2, [r0, #0]
 802491e:	9301      	str	r3, [sp, #4]
 8024920:	4682      	mov	sl, r0
 8024922:	f846 5c04 	str.w	r5, [r6, #-4]
 8024926:	46b9      	mov	r9, r7
 8024928:	463c      	mov	r4, r7
 802492a:	9502      	str	r5, [sp, #8]
 802492c:	46ab      	mov	fp, r5
 802492e:	7851      	ldrb	r1, [r2, #1]
 8024930:	1c53      	adds	r3, r2, #1
 8024932:	9303      	str	r3, [sp, #12]
 8024934:	b341      	cbz	r1, 8024988 <__hexnan+0x88>
 8024936:	4608      	mov	r0, r1
 8024938:	9205      	str	r2, [sp, #20]
 802493a:	9104      	str	r1, [sp, #16]
 802493c:	f7ff fd5f 	bl	80243fe <__hexdig_fun>
 8024940:	2800      	cmp	r0, #0
 8024942:	d14f      	bne.n	80249e4 <__hexnan+0xe4>
 8024944:	9904      	ldr	r1, [sp, #16]
 8024946:	9a05      	ldr	r2, [sp, #20]
 8024948:	2920      	cmp	r1, #32
 802494a:	d818      	bhi.n	802497e <__hexnan+0x7e>
 802494c:	9b02      	ldr	r3, [sp, #8]
 802494e:	459b      	cmp	fp, r3
 8024950:	dd13      	ble.n	802497a <__hexnan+0x7a>
 8024952:	454c      	cmp	r4, r9
 8024954:	d206      	bcs.n	8024964 <__hexnan+0x64>
 8024956:	2d07      	cmp	r5, #7
 8024958:	dc04      	bgt.n	8024964 <__hexnan+0x64>
 802495a:	462a      	mov	r2, r5
 802495c:	4649      	mov	r1, r9
 802495e:	4620      	mov	r0, r4
 8024960:	f7ff ffa8 	bl	80248b4 <L_shift>
 8024964:	4544      	cmp	r4, r8
 8024966:	d950      	bls.n	8024a0a <__hexnan+0x10a>
 8024968:	2300      	movs	r3, #0
 802496a:	f1a4 0904 	sub.w	r9, r4, #4
 802496e:	f844 3c04 	str.w	r3, [r4, #-4]
 8024972:	f8cd b008 	str.w	fp, [sp, #8]
 8024976:	464c      	mov	r4, r9
 8024978:	461d      	mov	r5, r3
 802497a:	9a03      	ldr	r2, [sp, #12]
 802497c:	e7d7      	b.n	802492e <__hexnan+0x2e>
 802497e:	2929      	cmp	r1, #41	; 0x29
 8024980:	d156      	bne.n	8024a30 <__hexnan+0x130>
 8024982:	3202      	adds	r2, #2
 8024984:	f8ca 2000 	str.w	r2, [sl]
 8024988:	f1bb 0f00 	cmp.w	fp, #0
 802498c:	d050      	beq.n	8024a30 <__hexnan+0x130>
 802498e:	454c      	cmp	r4, r9
 8024990:	d206      	bcs.n	80249a0 <__hexnan+0xa0>
 8024992:	2d07      	cmp	r5, #7
 8024994:	dc04      	bgt.n	80249a0 <__hexnan+0xa0>
 8024996:	462a      	mov	r2, r5
 8024998:	4649      	mov	r1, r9
 802499a:	4620      	mov	r0, r4
 802499c:	f7ff ff8a 	bl	80248b4 <L_shift>
 80249a0:	4544      	cmp	r4, r8
 80249a2:	d934      	bls.n	8024a0e <__hexnan+0x10e>
 80249a4:	f1a8 0204 	sub.w	r2, r8, #4
 80249a8:	4623      	mov	r3, r4
 80249aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80249ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80249b2:	429f      	cmp	r7, r3
 80249b4:	d2f9      	bcs.n	80249aa <__hexnan+0xaa>
 80249b6:	1b3b      	subs	r3, r7, r4
 80249b8:	f023 0303 	bic.w	r3, r3, #3
 80249bc:	3304      	adds	r3, #4
 80249be:	3401      	adds	r4, #1
 80249c0:	3e03      	subs	r6, #3
 80249c2:	42b4      	cmp	r4, r6
 80249c4:	bf88      	it	hi
 80249c6:	2304      	movhi	r3, #4
 80249c8:	4443      	add	r3, r8
 80249ca:	2200      	movs	r2, #0
 80249cc:	f843 2b04 	str.w	r2, [r3], #4
 80249d0:	429f      	cmp	r7, r3
 80249d2:	d2fb      	bcs.n	80249cc <__hexnan+0xcc>
 80249d4:	683b      	ldr	r3, [r7, #0]
 80249d6:	b91b      	cbnz	r3, 80249e0 <__hexnan+0xe0>
 80249d8:	4547      	cmp	r7, r8
 80249da:	d127      	bne.n	8024a2c <__hexnan+0x12c>
 80249dc:	2301      	movs	r3, #1
 80249de:	603b      	str	r3, [r7, #0]
 80249e0:	2005      	movs	r0, #5
 80249e2:	e026      	b.n	8024a32 <__hexnan+0x132>
 80249e4:	3501      	adds	r5, #1
 80249e6:	2d08      	cmp	r5, #8
 80249e8:	f10b 0b01 	add.w	fp, fp, #1
 80249ec:	dd06      	ble.n	80249fc <__hexnan+0xfc>
 80249ee:	4544      	cmp	r4, r8
 80249f0:	d9c3      	bls.n	802497a <__hexnan+0x7a>
 80249f2:	2300      	movs	r3, #0
 80249f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80249f8:	2501      	movs	r5, #1
 80249fa:	3c04      	subs	r4, #4
 80249fc:	6822      	ldr	r2, [r4, #0]
 80249fe:	f000 000f 	and.w	r0, r0, #15
 8024a02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8024a06:	6022      	str	r2, [r4, #0]
 8024a08:	e7b7      	b.n	802497a <__hexnan+0x7a>
 8024a0a:	2508      	movs	r5, #8
 8024a0c:	e7b5      	b.n	802497a <__hexnan+0x7a>
 8024a0e:	9b01      	ldr	r3, [sp, #4]
 8024a10:	2b00      	cmp	r3, #0
 8024a12:	d0df      	beq.n	80249d4 <__hexnan+0xd4>
 8024a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024a18:	f1c3 0320 	rsb	r3, r3, #32
 8024a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8024a20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8024a24:	401a      	ands	r2, r3
 8024a26:	f846 2c04 	str.w	r2, [r6, #-4]
 8024a2a:	e7d3      	b.n	80249d4 <__hexnan+0xd4>
 8024a2c:	3f04      	subs	r7, #4
 8024a2e:	e7d1      	b.n	80249d4 <__hexnan+0xd4>
 8024a30:	2004      	movs	r0, #4
 8024a32:	b007      	add	sp, #28
 8024a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a38 <__swhatbuf_r>:
 8024a38:	b570      	push	{r4, r5, r6, lr}
 8024a3a:	460e      	mov	r6, r1
 8024a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a40:	2900      	cmp	r1, #0
 8024a42:	b096      	sub	sp, #88	; 0x58
 8024a44:	4614      	mov	r4, r2
 8024a46:	461d      	mov	r5, r3
 8024a48:	da08      	bge.n	8024a5c <__swhatbuf_r+0x24>
 8024a4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024a4e:	2200      	movs	r2, #0
 8024a50:	602a      	str	r2, [r5, #0]
 8024a52:	061a      	lsls	r2, r3, #24
 8024a54:	d410      	bmi.n	8024a78 <__swhatbuf_r+0x40>
 8024a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024a5a:	e00e      	b.n	8024a7a <__swhatbuf_r+0x42>
 8024a5c:	466a      	mov	r2, sp
 8024a5e:	f000 ff2d 	bl	80258bc <_fstat_r>
 8024a62:	2800      	cmp	r0, #0
 8024a64:	dbf1      	blt.n	8024a4a <__swhatbuf_r+0x12>
 8024a66:	9a01      	ldr	r2, [sp, #4]
 8024a68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024a6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024a70:	425a      	negs	r2, r3
 8024a72:	415a      	adcs	r2, r3
 8024a74:	602a      	str	r2, [r5, #0]
 8024a76:	e7ee      	b.n	8024a56 <__swhatbuf_r+0x1e>
 8024a78:	2340      	movs	r3, #64	; 0x40
 8024a7a:	2000      	movs	r0, #0
 8024a7c:	6023      	str	r3, [r4, #0]
 8024a7e:	b016      	add	sp, #88	; 0x58
 8024a80:	bd70      	pop	{r4, r5, r6, pc}
	...

08024a84 <__smakebuf_r>:
 8024a84:	898b      	ldrh	r3, [r1, #12]
 8024a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024a88:	079d      	lsls	r5, r3, #30
 8024a8a:	4606      	mov	r6, r0
 8024a8c:	460c      	mov	r4, r1
 8024a8e:	d507      	bpl.n	8024aa0 <__smakebuf_r+0x1c>
 8024a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024a94:	6023      	str	r3, [r4, #0]
 8024a96:	6123      	str	r3, [r4, #16]
 8024a98:	2301      	movs	r3, #1
 8024a9a:	6163      	str	r3, [r4, #20]
 8024a9c:	b002      	add	sp, #8
 8024a9e:	bd70      	pop	{r4, r5, r6, pc}
 8024aa0:	ab01      	add	r3, sp, #4
 8024aa2:	466a      	mov	r2, sp
 8024aa4:	f7ff ffc8 	bl	8024a38 <__swhatbuf_r>
 8024aa8:	9900      	ldr	r1, [sp, #0]
 8024aaa:	4605      	mov	r5, r0
 8024aac:	4630      	mov	r0, r6
 8024aae:	f7fd ffc5 	bl	8022a3c <_malloc_r>
 8024ab2:	b948      	cbnz	r0, 8024ac8 <__smakebuf_r+0x44>
 8024ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ab8:	059a      	lsls	r2, r3, #22
 8024aba:	d4ef      	bmi.n	8024a9c <__smakebuf_r+0x18>
 8024abc:	f023 0303 	bic.w	r3, r3, #3
 8024ac0:	f043 0302 	orr.w	r3, r3, #2
 8024ac4:	81a3      	strh	r3, [r4, #12]
 8024ac6:	e7e3      	b.n	8024a90 <__smakebuf_r+0xc>
 8024ac8:	4b0d      	ldr	r3, [pc, #52]	; (8024b00 <__smakebuf_r+0x7c>)
 8024aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8024acc:	89a3      	ldrh	r3, [r4, #12]
 8024ace:	6020      	str	r0, [r4, #0]
 8024ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024ad4:	81a3      	strh	r3, [r4, #12]
 8024ad6:	9b00      	ldr	r3, [sp, #0]
 8024ad8:	6163      	str	r3, [r4, #20]
 8024ada:	9b01      	ldr	r3, [sp, #4]
 8024adc:	6120      	str	r0, [r4, #16]
 8024ade:	b15b      	cbz	r3, 8024af8 <__smakebuf_r+0x74>
 8024ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024ae4:	4630      	mov	r0, r6
 8024ae6:	f000 fefb 	bl	80258e0 <_isatty_r>
 8024aea:	b128      	cbz	r0, 8024af8 <__smakebuf_r+0x74>
 8024aec:	89a3      	ldrh	r3, [r4, #12]
 8024aee:	f023 0303 	bic.w	r3, r3, #3
 8024af2:	f043 0301 	orr.w	r3, r3, #1
 8024af6:	81a3      	strh	r3, [r4, #12]
 8024af8:	89a0      	ldrh	r0, [r4, #12]
 8024afa:	4305      	orrs	r5, r0
 8024afc:	81a5      	strh	r5, [r4, #12]
 8024afe:	e7cd      	b.n	8024a9c <__smakebuf_r+0x18>
 8024b00:	080241b9 	.word	0x080241b9

08024b04 <__ascii_mbtowc>:
 8024b04:	b082      	sub	sp, #8
 8024b06:	b901      	cbnz	r1, 8024b0a <__ascii_mbtowc+0x6>
 8024b08:	a901      	add	r1, sp, #4
 8024b0a:	b142      	cbz	r2, 8024b1e <__ascii_mbtowc+0x1a>
 8024b0c:	b14b      	cbz	r3, 8024b22 <__ascii_mbtowc+0x1e>
 8024b0e:	7813      	ldrb	r3, [r2, #0]
 8024b10:	600b      	str	r3, [r1, #0]
 8024b12:	7812      	ldrb	r2, [r2, #0]
 8024b14:	1e10      	subs	r0, r2, #0
 8024b16:	bf18      	it	ne
 8024b18:	2001      	movne	r0, #1
 8024b1a:	b002      	add	sp, #8
 8024b1c:	4770      	bx	lr
 8024b1e:	4610      	mov	r0, r2
 8024b20:	e7fb      	b.n	8024b1a <__ascii_mbtowc+0x16>
 8024b22:	f06f 0001 	mvn.w	r0, #1
 8024b26:	e7f8      	b.n	8024b1a <__ascii_mbtowc+0x16>

08024b28 <__malloc_lock>:
 8024b28:	4801      	ldr	r0, [pc, #4]	; (8024b30 <__malloc_lock+0x8>)
 8024b2a:	f7fd bec2 	b.w	80228b2 <__retarget_lock_acquire_recursive>
 8024b2e:	bf00      	nop
 8024b30:	20002620 	.word	0x20002620

08024b34 <__malloc_unlock>:
 8024b34:	4801      	ldr	r0, [pc, #4]	; (8024b3c <__malloc_unlock+0x8>)
 8024b36:	f7fd bebd 	b.w	80228b4 <__retarget_lock_release_recursive>
 8024b3a:	bf00      	nop
 8024b3c:	20002620 	.word	0x20002620

08024b40 <_Balloc>:
 8024b40:	b570      	push	{r4, r5, r6, lr}
 8024b42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024b44:	4604      	mov	r4, r0
 8024b46:	460d      	mov	r5, r1
 8024b48:	b976      	cbnz	r6, 8024b68 <_Balloc+0x28>
 8024b4a:	2010      	movs	r0, #16
 8024b4c:	f7fd feb4 	bl	80228b8 <malloc>
 8024b50:	4602      	mov	r2, r0
 8024b52:	6260      	str	r0, [r4, #36]	; 0x24
 8024b54:	b920      	cbnz	r0, 8024b60 <_Balloc+0x20>
 8024b56:	4b18      	ldr	r3, [pc, #96]	; (8024bb8 <_Balloc+0x78>)
 8024b58:	4818      	ldr	r0, [pc, #96]	; (8024bbc <_Balloc+0x7c>)
 8024b5a:	2166      	movs	r1, #102	; 0x66
 8024b5c:	f7fd fe42 	bl	80227e4 <__assert_func>
 8024b60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024b64:	6006      	str	r6, [r0, #0]
 8024b66:	60c6      	str	r6, [r0, #12]
 8024b68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8024b6a:	68f3      	ldr	r3, [r6, #12]
 8024b6c:	b183      	cbz	r3, 8024b90 <_Balloc+0x50>
 8024b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024b70:	68db      	ldr	r3, [r3, #12]
 8024b72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8024b76:	b9b8      	cbnz	r0, 8024ba8 <_Balloc+0x68>
 8024b78:	2101      	movs	r1, #1
 8024b7a:	fa01 f605 	lsl.w	r6, r1, r5
 8024b7e:	1d72      	adds	r2, r6, #5
 8024b80:	0092      	lsls	r2, r2, #2
 8024b82:	4620      	mov	r0, r4
 8024b84:	f7fd fed8 	bl	8022938 <_calloc_r>
 8024b88:	b160      	cbz	r0, 8024ba4 <_Balloc+0x64>
 8024b8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8024b8e:	e00e      	b.n	8024bae <_Balloc+0x6e>
 8024b90:	2221      	movs	r2, #33	; 0x21
 8024b92:	2104      	movs	r1, #4
 8024b94:	4620      	mov	r0, r4
 8024b96:	f7fd fecf 	bl	8022938 <_calloc_r>
 8024b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024b9c:	60f0      	str	r0, [r6, #12]
 8024b9e:	68db      	ldr	r3, [r3, #12]
 8024ba0:	2b00      	cmp	r3, #0
 8024ba2:	d1e4      	bne.n	8024b6e <_Balloc+0x2e>
 8024ba4:	2000      	movs	r0, #0
 8024ba6:	bd70      	pop	{r4, r5, r6, pc}
 8024ba8:	6802      	ldr	r2, [r0, #0]
 8024baa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024bae:	2300      	movs	r3, #0
 8024bb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024bb4:	e7f7      	b.n	8024ba6 <_Balloc+0x66>
 8024bb6:	bf00      	nop
 8024bb8:	0802a738 	.word	0x0802a738
 8024bbc:	0802a74f 	.word	0x0802a74f

08024bc0 <_Bfree>:
 8024bc0:	b570      	push	{r4, r5, r6, lr}
 8024bc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024bc4:	4605      	mov	r5, r0
 8024bc6:	460c      	mov	r4, r1
 8024bc8:	b976      	cbnz	r6, 8024be8 <_Bfree+0x28>
 8024bca:	2010      	movs	r0, #16
 8024bcc:	f7fd fe74 	bl	80228b8 <malloc>
 8024bd0:	4602      	mov	r2, r0
 8024bd2:	6268      	str	r0, [r5, #36]	; 0x24
 8024bd4:	b920      	cbnz	r0, 8024be0 <_Bfree+0x20>
 8024bd6:	4b09      	ldr	r3, [pc, #36]	; (8024bfc <_Bfree+0x3c>)
 8024bd8:	4809      	ldr	r0, [pc, #36]	; (8024c00 <_Bfree+0x40>)
 8024bda:	218a      	movs	r1, #138	; 0x8a
 8024bdc:	f7fd fe02 	bl	80227e4 <__assert_func>
 8024be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024be4:	6006      	str	r6, [r0, #0]
 8024be6:	60c6      	str	r6, [r0, #12]
 8024be8:	b13c      	cbz	r4, 8024bfa <_Bfree+0x3a>
 8024bea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8024bec:	6862      	ldr	r2, [r4, #4]
 8024bee:	68db      	ldr	r3, [r3, #12]
 8024bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024bf4:	6021      	str	r1, [r4, #0]
 8024bf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8024bfa:	bd70      	pop	{r4, r5, r6, pc}
 8024bfc:	0802a738 	.word	0x0802a738
 8024c00:	0802a74f 	.word	0x0802a74f

08024c04 <__multadd>:
 8024c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c08:	690d      	ldr	r5, [r1, #16]
 8024c0a:	4607      	mov	r7, r0
 8024c0c:	460c      	mov	r4, r1
 8024c0e:	461e      	mov	r6, r3
 8024c10:	f101 0c14 	add.w	ip, r1, #20
 8024c14:	2000      	movs	r0, #0
 8024c16:	f8dc 3000 	ldr.w	r3, [ip]
 8024c1a:	b299      	uxth	r1, r3
 8024c1c:	fb02 6101 	mla	r1, r2, r1, r6
 8024c20:	0c1e      	lsrs	r6, r3, #16
 8024c22:	0c0b      	lsrs	r3, r1, #16
 8024c24:	fb02 3306 	mla	r3, r2, r6, r3
 8024c28:	b289      	uxth	r1, r1
 8024c2a:	3001      	adds	r0, #1
 8024c2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024c30:	4285      	cmp	r5, r0
 8024c32:	f84c 1b04 	str.w	r1, [ip], #4
 8024c36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8024c3a:	dcec      	bgt.n	8024c16 <__multadd+0x12>
 8024c3c:	b30e      	cbz	r6, 8024c82 <__multadd+0x7e>
 8024c3e:	68a3      	ldr	r3, [r4, #8]
 8024c40:	42ab      	cmp	r3, r5
 8024c42:	dc19      	bgt.n	8024c78 <__multadd+0x74>
 8024c44:	6861      	ldr	r1, [r4, #4]
 8024c46:	4638      	mov	r0, r7
 8024c48:	3101      	adds	r1, #1
 8024c4a:	f7ff ff79 	bl	8024b40 <_Balloc>
 8024c4e:	4680      	mov	r8, r0
 8024c50:	b928      	cbnz	r0, 8024c5e <__multadd+0x5a>
 8024c52:	4602      	mov	r2, r0
 8024c54:	4b0c      	ldr	r3, [pc, #48]	; (8024c88 <__multadd+0x84>)
 8024c56:	480d      	ldr	r0, [pc, #52]	; (8024c8c <__multadd+0x88>)
 8024c58:	21b5      	movs	r1, #181	; 0xb5
 8024c5a:	f7fd fdc3 	bl	80227e4 <__assert_func>
 8024c5e:	6922      	ldr	r2, [r4, #16]
 8024c60:	3202      	adds	r2, #2
 8024c62:	f104 010c 	add.w	r1, r4, #12
 8024c66:	0092      	lsls	r2, r2, #2
 8024c68:	300c      	adds	r0, #12
 8024c6a:	f7fd fe35 	bl	80228d8 <memcpy>
 8024c6e:	4621      	mov	r1, r4
 8024c70:	4638      	mov	r0, r7
 8024c72:	f7ff ffa5 	bl	8024bc0 <_Bfree>
 8024c76:	4644      	mov	r4, r8
 8024c78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8024c7c:	3501      	adds	r5, #1
 8024c7e:	615e      	str	r6, [r3, #20]
 8024c80:	6125      	str	r5, [r4, #16]
 8024c82:	4620      	mov	r0, r4
 8024c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c88:	0802a6ac 	.word	0x0802a6ac
 8024c8c:	0802a74f 	.word	0x0802a74f

08024c90 <__s2b>:
 8024c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024c94:	460c      	mov	r4, r1
 8024c96:	4615      	mov	r5, r2
 8024c98:	461f      	mov	r7, r3
 8024c9a:	2209      	movs	r2, #9
 8024c9c:	3308      	adds	r3, #8
 8024c9e:	4606      	mov	r6, r0
 8024ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8024ca4:	2100      	movs	r1, #0
 8024ca6:	2201      	movs	r2, #1
 8024ca8:	429a      	cmp	r2, r3
 8024caa:	db09      	blt.n	8024cc0 <__s2b+0x30>
 8024cac:	4630      	mov	r0, r6
 8024cae:	f7ff ff47 	bl	8024b40 <_Balloc>
 8024cb2:	b940      	cbnz	r0, 8024cc6 <__s2b+0x36>
 8024cb4:	4602      	mov	r2, r0
 8024cb6:	4b19      	ldr	r3, [pc, #100]	; (8024d1c <__s2b+0x8c>)
 8024cb8:	4819      	ldr	r0, [pc, #100]	; (8024d20 <__s2b+0x90>)
 8024cba:	21ce      	movs	r1, #206	; 0xce
 8024cbc:	f7fd fd92 	bl	80227e4 <__assert_func>
 8024cc0:	0052      	lsls	r2, r2, #1
 8024cc2:	3101      	adds	r1, #1
 8024cc4:	e7f0      	b.n	8024ca8 <__s2b+0x18>
 8024cc6:	9b08      	ldr	r3, [sp, #32]
 8024cc8:	6143      	str	r3, [r0, #20]
 8024cca:	2d09      	cmp	r5, #9
 8024ccc:	f04f 0301 	mov.w	r3, #1
 8024cd0:	6103      	str	r3, [r0, #16]
 8024cd2:	dd16      	ble.n	8024d02 <__s2b+0x72>
 8024cd4:	f104 0909 	add.w	r9, r4, #9
 8024cd8:	46c8      	mov	r8, r9
 8024cda:	442c      	add	r4, r5
 8024cdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8024ce0:	4601      	mov	r1, r0
 8024ce2:	3b30      	subs	r3, #48	; 0x30
 8024ce4:	220a      	movs	r2, #10
 8024ce6:	4630      	mov	r0, r6
 8024ce8:	f7ff ff8c 	bl	8024c04 <__multadd>
 8024cec:	45a0      	cmp	r8, r4
 8024cee:	d1f5      	bne.n	8024cdc <__s2b+0x4c>
 8024cf0:	f1a5 0408 	sub.w	r4, r5, #8
 8024cf4:	444c      	add	r4, r9
 8024cf6:	1b2d      	subs	r5, r5, r4
 8024cf8:	1963      	adds	r3, r4, r5
 8024cfa:	42bb      	cmp	r3, r7
 8024cfc:	db04      	blt.n	8024d08 <__s2b+0x78>
 8024cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024d02:	340a      	adds	r4, #10
 8024d04:	2509      	movs	r5, #9
 8024d06:	e7f6      	b.n	8024cf6 <__s2b+0x66>
 8024d08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024d0c:	4601      	mov	r1, r0
 8024d0e:	3b30      	subs	r3, #48	; 0x30
 8024d10:	220a      	movs	r2, #10
 8024d12:	4630      	mov	r0, r6
 8024d14:	f7ff ff76 	bl	8024c04 <__multadd>
 8024d18:	e7ee      	b.n	8024cf8 <__s2b+0x68>
 8024d1a:	bf00      	nop
 8024d1c:	0802a6ac 	.word	0x0802a6ac
 8024d20:	0802a74f 	.word	0x0802a74f

08024d24 <__hi0bits>:
 8024d24:	0c03      	lsrs	r3, r0, #16
 8024d26:	041b      	lsls	r3, r3, #16
 8024d28:	b9d3      	cbnz	r3, 8024d60 <__hi0bits+0x3c>
 8024d2a:	0400      	lsls	r0, r0, #16
 8024d2c:	2310      	movs	r3, #16
 8024d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8024d32:	bf04      	itt	eq
 8024d34:	0200      	lsleq	r0, r0, #8
 8024d36:	3308      	addeq	r3, #8
 8024d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8024d3c:	bf04      	itt	eq
 8024d3e:	0100      	lsleq	r0, r0, #4
 8024d40:	3304      	addeq	r3, #4
 8024d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8024d46:	bf04      	itt	eq
 8024d48:	0080      	lsleq	r0, r0, #2
 8024d4a:	3302      	addeq	r3, #2
 8024d4c:	2800      	cmp	r0, #0
 8024d4e:	db05      	blt.n	8024d5c <__hi0bits+0x38>
 8024d50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8024d54:	f103 0301 	add.w	r3, r3, #1
 8024d58:	bf08      	it	eq
 8024d5a:	2320      	moveq	r3, #32
 8024d5c:	4618      	mov	r0, r3
 8024d5e:	4770      	bx	lr
 8024d60:	2300      	movs	r3, #0
 8024d62:	e7e4      	b.n	8024d2e <__hi0bits+0xa>

08024d64 <__lo0bits>:
 8024d64:	6803      	ldr	r3, [r0, #0]
 8024d66:	f013 0207 	ands.w	r2, r3, #7
 8024d6a:	4601      	mov	r1, r0
 8024d6c:	d00b      	beq.n	8024d86 <__lo0bits+0x22>
 8024d6e:	07da      	lsls	r2, r3, #31
 8024d70:	d423      	bmi.n	8024dba <__lo0bits+0x56>
 8024d72:	0798      	lsls	r0, r3, #30
 8024d74:	bf49      	itett	mi
 8024d76:	085b      	lsrmi	r3, r3, #1
 8024d78:	089b      	lsrpl	r3, r3, #2
 8024d7a:	2001      	movmi	r0, #1
 8024d7c:	600b      	strmi	r3, [r1, #0]
 8024d7e:	bf5c      	itt	pl
 8024d80:	600b      	strpl	r3, [r1, #0]
 8024d82:	2002      	movpl	r0, #2
 8024d84:	4770      	bx	lr
 8024d86:	b298      	uxth	r0, r3
 8024d88:	b9a8      	cbnz	r0, 8024db6 <__lo0bits+0x52>
 8024d8a:	0c1b      	lsrs	r3, r3, #16
 8024d8c:	2010      	movs	r0, #16
 8024d8e:	b2da      	uxtb	r2, r3
 8024d90:	b90a      	cbnz	r2, 8024d96 <__lo0bits+0x32>
 8024d92:	3008      	adds	r0, #8
 8024d94:	0a1b      	lsrs	r3, r3, #8
 8024d96:	071a      	lsls	r2, r3, #28
 8024d98:	bf04      	itt	eq
 8024d9a:	091b      	lsreq	r3, r3, #4
 8024d9c:	3004      	addeq	r0, #4
 8024d9e:	079a      	lsls	r2, r3, #30
 8024da0:	bf04      	itt	eq
 8024da2:	089b      	lsreq	r3, r3, #2
 8024da4:	3002      	addeq	r0, #2
 8024da6:	07da      	lsls	r2, r3, #31
 8024da8:	d403      	bmi.n	8024db2 <__lo0bits+0x4e>
 8024daa:	085b      	lsrs	r3, r3, #1
 8024dac:	f100 0001 	add.w	r0, r0, #1
 8024db0:	d005      	beq.n	8024dbe <__lo0bits+0x5a>
 8024db2:	600b      	str	r3, [r1, #0]
 8024db4:	4770      	bx	lr
 8024db6:	4610      	mov	r0, r2
 8024db8:	e7e9      	b.n	8024d8e <__lo0bits+0x2a>
 8024dba:	2000      	movs	r0, #0
 8024dbc:	4770      	bx	lr
 8024dbe:	2020      	movs	r0, #32
 8024dc0:	4770      	bx	lr
	...

08024dc4 <__i2b>:
 8024dc4:	b510      	push	{r4, lr}
 8024dc6:	460c      	mov	r4, r1
 8024dc8:	2101      	movs	r1, #1
 8024dca:	f7ff feb9 	bl	8024b40 <_Balloc>
 8024dce:	4602      	mov	r2, r0
 8024dd0:	b928      	cbnz	r0, 8024dde <__i2b+0x1a>
 8024dd2:	4b05      	ldr	r3, [pc, #20]	; (8024de8 <__i2b+0x24>)
 8024dd4:	4805      	ldr	r0, [pc, #20]	; (8024dec <__i2b+0x28>)
 8024dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8024dda:	f7fd fd03 	bl	80227e4 <__assert_func>
 8024dde:	2301      	movs	r3, #1
 8024de0:	6144      	str	r4, [r0, #20]
 8024de2:	6103      	str	r3, [r0, #16]
 8024de4:	bd10      	pop	{r4, pc}
 8024de6:	bf00      	nop
 8024de8:	0802a6ac 	.word	0x0802a6ac
 8024dec:	0802a74f 	.word	0x0802a74f

08024df0 <__multiply>:
 8024df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024df4:	4691      	mov	r9, r2
 8024df6:	690a      	ldr	r2, [r1, #16]
 8024df8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8024dfc:	429a      	cmp	r2, r3
 8024dfe:	bfb8      	it	lt
 8024e00:	460b      	movlt	r3, r1
 8024e02:	460c      	mov	r4, r1
 8024e04:	bfbc      	itt	lt
 8024e06:	464c      	movlt	r4, r9
 8024e08:	4699      	movlt	r9, r3
 8024e0a:	6927      	ldr	r7, [r4, #16]
 8024e0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8024e10:	68a3      	ldr	r3, [r4, #8]
 8024e12:	6861      	ldr	r1, [r4, #4]
 8024e14:	eb07 060a 	add.w	r6, r7, sl
 8024e18:	42b3      	cmp	r3, r6
 8024e1a:	b085      	sub	sp, #20
 8024e1c:	bfb8      	it	lt
 8024e1e:	3101      	addlt	r1, #1
 8024e20:	f7ff fe8e 	bl	8024b40 <_Balloc>
 8024e24:	b930      	cbnz	r0, 8024e34 <__multiply+0x44>
 8024e26:	4602      	mov	r2, r0
 8024e28:	4b44      	ldr	r3, [pc, #272]	; (8024f3c <__multiply+0x14c>)
 8024e2a:	4845      	ldr	r0, [pc, #276]	; (8024f40 <__multiply+0x150>)
 8024e2c:	f240 115d 	movw	r1, #349	; 0x15d
 8024e30:	f7fd fcd8 	bl	80227e4 <__assert_func>
 8024e34:	f100 0514 	add.w	r5, r0, #20
 8024e38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8024e3c:	462b      	mov	r3, r5
 8024e3e:	2200      	movs	r2, #0
 8024e40:	4543      	cmp	r3, r8
 8024e42:	d321      	bcc.n	8024e88 <__multiply+0x98>
 8024e44:	f104 0314 	add.w	r3, r4, #20
 8024e48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8024e4c:	f109 0314 	add.w	r3, r9, #20
 8024e50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8024e54:	9202      	str	r2, [sp, #8]
 8024e56:	1b3a      	subs	r2, r7, r4
 8024e58:	3a15      	subs	r2, #21
 8024e5a:	f022 0203 	bic.w	r2, r2, #3
 8024e5e:	3204      	adds	r2, #4
 8024e60:	f104 0115 	add.w	r1, r4, #21
 8024e64:	428f      	cmp	r7, r1
 8024e66:	bf38      	it	cc
 8024e68:	2204      	movcc	r2, #4
 8024e6a:	9201      	str	r2, [sp, #4]
 8024e6c:	9a02      	ldr	r2, [sp, #8]
 8024e6e:	9303      	str	r3, [sp, #12]
 8024e70:	429a      	cmp	r2, r3
 8024e72:	d80c      	bhi.n	8024e8e <__multiply+0x9e>
 8024e74:	2e00      	cmp	r6, #0
 8024e76:	dd03      	ble.n	8024e80 <__multiply+0x90>
 8024e78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8024e7c:	2b00      	cmp	r3, #0
 8024e7e:	d05a      	beq.n	8024f36 <__multiply+0x146>
 8024e80:	6106      	str	r6, [r0, #16]
 8024e82:	b005      	add	sp, #20
 8024e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e88:	f843 2b04 	str.w	r2, [r3], #4
 8024e8c:	e7d8      	b.n	8024e40 <__multiply+0x50>
 8024e8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8024e92:	f1ba 0f00 	cmp.w	sl, #0
 8024e96:	d024      	beq.n	8024ee2 <__multiply+0xf2>
 8024e98:	f104 0e14 	add.w	lr, r4, #20
 8024e9c:	46a9      	mov	r9, r5
 8024e9e:	f04f 0c00 	mov.w	ip, #0
 8024ea2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8024ea6:	f8d9 1000 	ldr.w	r1, [r9]
 8024eaa:	fa1f fb82 	uxth.w	fp, r2
 8024eae:	b289      	uxth	r1, r1
 8024eb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8024eb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8024eb8:	f8d9 2000 	ldr.w	r2, [r9]
 8024ebc:	4461      	add	r1, ip
 8024ebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8024ec2:	fb0a c20b 	mla	r2, sl, fp, ip
 8024ec6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8024eca:	b289      	uxth	r1, r1
 8024ecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8024ed0:	4577      	cmp	r7, lr
 8024ed2:	f849 1b04 	str.w	r1, [r9], #4
 8024ed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8024eda:	d8e2      	bhi.n	8024ea2 <__multiply+0xb2>
 8024edc:	9a01      	ldr	r2, [sp, #4]
 8024ede:	f845 c002 	str.w	ip, [r5, r2]
 8024ee2:	9a03      	ldr	r2, [sp, #12]
 8024ee4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8024ee8:	3304      	adds	r3, #4
 8024eea:	f1b9 0f00 	cmp.w	r9, #0
 8024eee:	d020      	beq.n	8024f32 <__multiply+0x142>
 8024ef0:	6829      	ldr	r1, [r5, #0]
 8024ef2:	f104 0c14 	add.w	ip, r4, #20
 8024ef6:	46ae      	mov	lr, r5
 8024ef8:	f04f 0a00 	mov.w	sl, #0
 8024efc:	f8bc b000 	ldrh.w	fp, [ip]
 8024f00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8024f04:	fb09 220b 	mla	r2, r9, fp, r2
 8024f08:	4492      	add	sl, r2
 8024f0a:	b289      	uxth	r1, r1
 8024f0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8024f10:	f84e 1b04 	str.w	r1, [lr], #4
 8024f14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8024f18:	f8be 1000 	ldrh.w	r1, [lr]
 8024f1c:	0c12      	lsrs	r2, r2, #16
 8024f1e:	fb09 1102 	mla	r1, r9, r2, r1
 8024f22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8024f26:	4567      	cmp	r7, ip
 8024f28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8024f2c:	d8e6      	bhi.n	8024efc <__multiply+0x10c>
 8024f2e:	9a01      	ldr	r2, [sp, #4]
 8024f30:	50a9      	str	r1, [r5, r2]
 8024f32:	3504      	adds	r5, #4
 8024f34:	e79a      	b.n	8024e6c <__multiply+0x7c>
 8024f36:	3e01      	subs	r6, #1
 8024f38:	e79c      	b.n	8024e74 <__multiply+0x84>
 8024f3a:	bf00      	nop
 8024f3c:	0802a6ac 	.word	0x0802a6ac
 8024f40:	0802a74f 	.word	0x0802a74f

08024f44 <__pow5mult>:
 8024f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024f48:	4615      	mov	r5, r2
 8024f4a:	f012 0203 	ands.w	r2, r2, #3
 8024f4e:	4606      	mov	r6, r0
 8024f50:	460f      	mov	r7, r1
 8024f52:	d007      	beq.n	8024f64 <__pow5mult+0x20>
 8024f54:	4c25      	ldr	r4, [pc, #148]	; (8024fec <__pow5mult+0xa8>)
 8024f56:	3a01      	subs	r2, #1
 8024f58:	2300      	movs	r3, #0
 8024f5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024f5e:	f7ff fe51 	bl	8024c04 <__multadd>
 8024f62:	4607      	mov	r7, r0
 8024f64:	10ad      	asrs	r5, r5, #2
 8024f66:	d03d      	beq.n	8024fe4 <__pow5mult+0xa0>
 8024f68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8024f6a:	b97c      	cbnz	r4, 8024f8c <__pow5mult+0x48>
 8024f6c:	2010      	movs	r0, #16
 8024f6e:	f7fd fca3 	bl	80228b8 <malloc>
 8024f72:	4602      	mov	r2, r0
 8024f74:	6270      	str	r0, [r6, #36]	; 0x24
 8024f76:	b928      	cbnz	r0, 8024f84 <__pow5mult+0x40>
 8024f78:	4b1d      	ldr	r3, [pc, #116]	; (8024ff0 <__pow5mult+0xac>)
 8024f7a:	481e      	ldr	r0, [pc, #120]	; (8024ff4 <__pow5mult+0xb0>)
 8024f7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8024f80:	f7fd fc30 	bl	80227e4 <__assert_func>
 8024f84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024f88:	6004      	str	r4, [r0, #0]
 8024f8a:	60c4      	str	r4, [r0, #12]
 8024f8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8024f90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024f94:	b94c      	cbnz	r4, 8024faa <__pow5mult+0x66>
 8024f96:	f240 2171 	movw	r1, #625	; 0x271
 8024f9a:	4630      	mov	r0, r6
 8024f9c:	f7ff ff12 	bl	8024dc4 <__i2b>
 8024fa0:	2300      	movs	r3, #0
 8024fa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8024fa6:	4604      	mov	r4, r0
 8024fa8:	6003      	str	r3, [r0, #0]
 8024faa:	f04f 0900 	mov.w	r9, #0
 8024fae:	07eb      	lsls	r3, r5, #31
 8024fb0:	d50a      	bpl.n	8024fc8 <__pow5mult+0x84>
 8024fb2:	4639      	mov	r1, r7
 8024fb4:	4622      	mov	r2, r4
 8024fb6:	4630      	mov	r0, r6
 8024fb8:	f7ff ff1a 	bl	8024df0 <__multiply>
 8024fbc:	4639      	mov	r1, r7
 8024fbe:	4680      	mov	r8, r0
 8024fc0:	4630      	mov	r0, r6
 8024fc2:	f7ff fdfd 	bl	8024bc0 <_Bfree>
 8024fc6:	4647      	mov	r7, r8
 8024fc8:	106d      	asrs	r5, r5, #1
 8024fca:	d00b      	beq.n	8024fe4 <__pow5mult+0xa0>
 8024fcc:	6820      	ldr	r0, [r4, #0]
 8024fce:	b938      	cbnz	r0, 8024fe0 <__pow5mult+0x9c>
 8024fd0:	4622      	mov	r2, r4
 8024fd2:	4621      	mov	r1, r4
 8024fd4:	4630      	mov	r0, r6
 8024fd6:	f7ff ff0b 	bl	8024df0 <__multiply>
 8024fda:	6020      	str	r0, [r4, #0]
 8024fdc:	f8c0 9000 	str.w	r9, [r0]
 8024fe0:	4604      	mov	r4, r0
 8024fe2:	e7e4      	b.n	8024fae <__pow5mult+0x6a>
 8024fe4:	4638      	mov	r0, r7
 8024fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024fea:	bf00      	nop
 8024fec:	0802a8a0 	.word	0x0802a8a0
 8024ff0:	0802a738 	.word	0x0802a738
 8024ff4:	0802a74f 	.word	0x0802a74f

08024ff8 <__lshift>:
 8024ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ffc:	460c      	mov	r4, r1
 8024ffe:	6849      	ldr	r1, [r1, #4]
 8025000:	6923      	ldr	r3, [r4, #16]
 8025002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8025006:	68a3      	ldr	r3, [r4, #8]
 8025008:	4607      	mov	r7, r0
 802500a:	4691      	mov	r9, r2
 802500c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8025010:	f108 0601 	add.w	r6, r8, #1
 8025014:	42b3      	cmp	r3, r6
 8025016:	db0b      	blt.n	8025030 <__lshift+0x38>
 8025018:	4638      	mov	r0, r7
 802501a:	f7ff fd91 	bl	8024b40 <_Balloc>
 802501e:	4605      	mov	r5, r0
 8025020:	b948      	cbnz	r0, 8025036 <__lshift+0x3e>
 8025022:	4602      	mov	r2, r0
 8025024:	4b2a      	ldr	r3, [pc, #168]	; (80250d0 <__lshift+0xd8>)
 8025026:	482b      	ldr	r0, [pc, #172]	; (80250d4 <__lshift+0xdc>)
 8025028:	f240 11d9 	movw	r1, #473	; 0x1d9
 802502c:	f7fd fbda 	bl	80227e4 <__assert_func>
 8025030:	3101      	adds	r1, #1
 8025032:	005b      	lsls	r3, r3, #1
 8025034:	e7ee      	b.n	8025014 <__lshift+0x1c>
 8025036:	2300      	movs	r3, #0
 8025038:	f100 0114 	add.w	r1, r0, #20
 802503c:	f100 0210 	add.w	r2, r0, #16
 8025040:	4618      	mov	r0, r3
 8025042:	4553      	cmp	r3, sl
 8025044:	db37      	blt.n	80250b6 <__lshift+0xbe>
 8025046:	6920      	ldr	r0, [r4, #16]
 8025048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802504c:	f104 0314 	add.w	r3, r4, #20
 8025050:	f019 091f 	ands.w	r9, r9, #31
 8025054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8025058:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802505c:	d02f      	beq.n	80250be <__lshift+0xc6>
 802505e:	f1c9 0e20 	rsb	lr, r9, #32
 8025062:	468a      	mov	sl, r1
 8025064:	f04f 0c00 	mov.w	ip, #0
 8025068:	681a      	ldr	r2, [r3, #0]
 802506a:	fa02 f209 	lsl.w	r2, r2, r9
 802506e:	ea42 020c 	orr.w	r2, r2, ip
 8025072:	f84a 2b04 	str.w	r2, [sl], #4
 8025076:	f853 2b04 	ldr.w	r2, [r3], #4
 802507a:	4298      	cmp	r0, r3
 802507c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8025080:	d8f2      	bhi.n	8025068 <__lshift+0x70>
 8025082:	1b03      	subs	r3, r0, r4
 8025084:	3b15      	subs	r3, #21
 8025086:	f023 0303 	bic.w	r3, r3, #3
 802508a:	3304      	adds	r3, #4
 802508c:	f104 0215 	add.w	r2, r4, #21
 8025090:	4290      	cmp	r0, r2
 8025092:	bf38      	it	cc
 8025094:	2304      	movcc	r3, #4
 8025096:	f841 c003 	str.w	ip, [r1, r3]
 802509a:	f1bc 0f00 	cmp.w	ip, #0
 802509e:	d001      	beq.n	80250a4 <__lshift+0xac>
 80250a0:	f108 0602 	add.w	r6, r8, #2
 80250a4:	3e01      	subs	r6, #1
 80250a6:	4638      	mov	r0, r7
 80250a8:	612e      	str	r6, [r5, #16]
 80250aa:	4621      	mov	r1, r4
 80250ac:	f7ff fd88 	bl	8024bc0 <_Bfree>
 80250b0:	4628      	mov	r0, r5
 80250b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80250b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80250ba:	3301      	adds	r3, #1
 80250bc:	e7c1      	b.n	8025042 <__lshift+0x4a>
 80250be:	3904      	subs	r1, #4
 80250c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80250c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80250c8:	4298      	cmp	r0, r3
 80250ca:	d8f9      	bhi.n	80250c0 <__lshift+0xc8>
 80250cc:	e7ea      	b.n	80250a4 <__lshift+0xac>
 80250ce:	bf00      	nop
 80250d0:	0802a6ac 	.word	0x0802a6ac
 80250d4:	0802a74f 	.word	0x0802a74f

080250d8 <__mcmp>:
 80250d8:	b530      	push	{r4, r5, lr}
 80250da:	6902      	ldr	r2, [r0, #16]
 80250dc:	690c      	ldr	r4, [r1, #16]
 80250de:	1b12      	subs	r2, r2, r4
 80250e0:	d10e      	bne.n	8025100 <__mcmp+0x28>
 80250e2:	f100 0314 	add.w	r3, r0, #20
 80250e6:	3114      	adds	r1, #20
 80250e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80250ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80250f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80250f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80250f8:	42a5      	cmp	r5, r4
 80250fa:	d003      	beq.n	8025104 <__mcmp+0x2c>
 80250fc:	d305      	bcc.n	802510a <__mcmp+0x32>
 80250fe:	2201      	movs	r2, #1
 8025100:	4610      	mov	r0, r2
 8025102:	bd30      	pop	{r4, r5, pc}
 8025104:	4283      	cmp	r3, r0
 8025106:	d3f3      	bcc.n	80250f0 <__mcmp+0x18>
 8025108:	e7fa      	b.n	8025100 <__mcmp+0x28>
 802510a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802510e:	e7f7      	b.n	8025100 <__mcmp+0x28>

08025110 <__mdiff>:
 8025110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025114:	460c      	mov	r4, r1
 8025116:	4606      	mov	r6, r0
 8025118:	4611      	mov	r1, r2
 802511a:	4620      	mov	r0, r4
 802511c:	4690      	mov	r8, r2
 802511e:	f7ff ffdb 	bl	80250d8 <__mcmp>
 8025122:	1e05      	subs	r5, r0, #0
 8025124:	d110      	bne.n	8025148 <__mdiff+0x38>
 8025126:	4629      	mov	r1, r5
 8025128:	4630      	mov	r0, r6
 802512a:	f7ff fd09 	bl	8024b40 <_Balloc>
 802512e:	b930      	cbnz	r0, 802513e <__mdiff+0x2e>
 8025130:	4b3a      	ldr	r3, [pc, #232]	; (802521c <__mdiff+0x10c>)
 8025132:	4602      	mov	r2, r0
 8025134:	f240 2132 	movw	r1, #562	; 0x232
 8025138:	4839      	ldr	r0, [pc, #228]	; (8025220 <__mdiff+0x110>)
 802513a:	f7fd fb53 	bl	80227e4 <__assert_func>
 802513e:	2301      	movs	r3, #1
 8025140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8025144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025148:	bfa4      	itt	ge
 802514a:	4643      	movge	r3, r8
 802514c:	46a0      	movge	r8, r4
 802514e:	4630      	mov	r0, r6
 8025150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8025154:	bfa6      	itte	ge
 8025156:	461c      	movge	r4, r3
 8025158:	2500      	movge	r5, #0
 802515a:	2501      	movlt	r5, #1
 802515c:	f7ff fcf0 	bl	8024b40 <_Balloc>
 8025160:	b920      	cbnz	r0, 802516c <__mdiff+0x5c>
 8025162:	4b2e      	ldr	r3, [pc, #184]	; (802521c <__mdiff+0x10c>)
 8025164:	4602      	mov	r2, r0
 8025166:	f44f 7110 	mov.w	r1, #576	; 0x240
 802516a:	e7e5      	b.n	8025138 <__mdiff+0x28>
 802516c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8025170:	6926      	ldr	r6, [r4, #16]
 8025172:	60c5      	str	r5, [r0, #12]
 8025174:	f104 0914 	add.w	r9, r4, #20
 8025178:	f108 0514 	add.w	r5, r8, #20
 802517c:	f100 0e14 	add.w	lr, r0, #20
 8025180:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8025184:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8025188:	f108 0210 	add.w	r2, r8, #16
 802518c:	46f2      	mov	sl, lr
 802518e:	2100      	movs	r1, #0
 8025190:	f859 3b04 	ldr.w	r3, [r9], #4
 8025194:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8025198:	fa1f f883 	uxth.w	r8, r3
 802519c:	fa11 f18b 	uxtah	r1, r1, fp
 80251a0:	0c1b      	lsrs	r3, r3, #16
 80251a2:	eba1 0808 	sub.w	r8, r1, r8
 80251a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80251aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80251ae:	fa1f f888 	uxth.w	r8, r8
 80251b2:	1419      	asrs	r1, r3, #16
 80251b4:	454e      	cmp	r6, r9
 80251b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80251ba:	f84a 3b04 	str.w	r3, [sl], #4
 80251be:	d8e7      	bhi.n	8025190 <__mdiff+0x80>
 80251c0:	1b33      	subs	r3, r6, r4
 80251c2:	3b15      	subs	r3, #21
 80251c4:	f023 0303 	bic.w	r3, r3, #3
 80251c8:	3304      	adds	r3, #4
 80251ca:	3415      	adds	r4, #21
 80251cc:	42a6      	cmp	r6, r4
 80251ce:	bf38      	it	cc
 80251d0:	2304      	movcc	r3, #4
 80251d2:	441d      	add	r5, r3
 80251d4:	4473      	add	r3, lr
 80251d6:	469e      	mov	lr, r3
 80251d8:	462e      	mov	r6, r5
 80251da:	4566      	cmp	r6, ip
 80251dc:	d30e      	bcc.n	80251fc <__mdiff+0xec>
 80251de:	f10c 0203 	add.w	r2, ip, #3
 80251e2:	1b52      	subs	r2, r2, r5
 80251e4:	f022 0203 	bic.w	r2, r2, #3
 80251e8:	3d03      	subs	r5, #3
 80251ea:	45ac      	cmp	ip, r5
 80251ec:	bf38      	it	cc
 80251ee:	2200      	movcc	r2, #0
 80251f0:	441a      	add	r2, r3
 80251f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80251f6:	b17b      	cbz	r3, 8025218 <__mdiff+0x108>
 80251f8:	6107      	str	r7, [r0, #16]
 80251fa:	e7a3      	b.n	8025144 <__mdiff+0x34>
 80251fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8025200:	fa11 f288 	uxtah	r2, r1, r8
 8025204:	1414      	asrs	r4, r2, #16
 8025206:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802520a:	b292      	uxth	r2, r2
 802520c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8025210:	f84e 2b04 	str.w	r2, [lr], #4
 8025214:	1421      	asrs	r1, r4, #16
 8025216:	e7e0      	b.n	80251da <__mdiff+0xca>
 8025218:	3f01      	subs	r7, #1
 802521a:	e7ea      	b.n	80251f2 <__mdiff+0xe2>
 802521c:	0802a6ac 	.word	0x0802a6ac
 8025220:	0802a74f 	.word	0x0802a74f

08025224 <__ulp>:
 8025224:	b082      	sub	sp, #8
 8025226:	ed8d 0b00 	vstr	d0, [sp]
 802522a:	9b01      	ldr	r3, [sp, #4]
 802522c:	4912      	ldr	r1, [pc, #72]	; (8025278 <__ulp+0x54>)
 802522e:	4019      	ands	r1, r3
 8025230:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8025234:	2900      	cmp	r1, #0
 8025236:	dd05      	ble.n	8025244 <__ulp+0x20>
 8025238:	2200      	movs	r2, #0
 802523a:	460b      	mov	r3, r1
 802523c:	ec43 2b10 	vmov	d0, r2, r3
 8025240:	b002      	add	sp, #8
 8025242:	4770      	bx	lr
 8025244:	4249      	negs	r1, r1
 8025246:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802524a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802524e:	f04f 0200 	mov.w	r2, #0
 8025252:	f04f 0300 	mov.w	r3, #0
 8025256:	da04      	bge.n	8025262 <__ulp+0x3e>
 8025258:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802525c:	fa41 f300 	asr.w	r3, r1, r0
 8025260:	e7ec      	b.n	802523c <__ulp+0x18>
 8025262:	f1a0 0114 	sub.w	r1, r0, #20
 8025266:	291e      	cmp	r1, #30
 8025268:	bfda      	itte	le
 802526a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802526e:	fa20 f101 	lsrle.w	r1, r0, r1
 8025272:	2101      	movgt	r1, #1
 8025274:	460a      	mov	r2, r1
 8025276:	e7e1      	b.n	802523c <__ulp+0x18>
 8025278:	7ff00000 	.word	0x7ff00000

0802527c <__b2d>:
 802527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802527e:	6905      	ldr	r5, [r0, #16]
 8025280:	f100 0714 	add.w	r7, r0, #20
 8025284:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8025288:	1f2e      	subs	r6, r5, #4
 802528a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802528e:	4620      	mov	r0, r4
 8025290:	f7ff fd48 	bl	8024d24 <__hi0bits>
 8025294:	f1c0 0320 	rsb	r3, r0, #32
 8025298:	280a      	cmp	r0, #10
 802529a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8025318 <__b2d+0x9c>
 802529e:	600b      	str	r3, [r1, #0]
 80252a0:	dc14      	bgt.n	80252cc <__b2d+0x50>
 80252a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80252a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80252aa:	42b7      	cmp	r7, r6
 80252ac:	ea41 030c 	orr.w	r3, r1, ip
 80252b0:	bf34      	ite	cc
 80252b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80252b6:	2100      	movcs	r1, #0
 80252b8:	3015      	adds	r0, #21
 80252ba:	fa04 f000 	lsl.w	r0, r4, r0
 80252be:	fa21 f10e 	lsr.w	r1, r1, lr
 80252c2:	ea40 0201 	orr.w	r2, r0, r1
 80252c6:	ec43 2b10 	vmov	d0, r2, r3
 80252ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80252cc:	42b7      	cmp	r7, r6
 80252ce:	bf3a      	itte	cc
 80252d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80252d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80252d8:	2100      	movcs	r1, #0
 80252da:	380b      	subs	r0, #11
 80252dc:	d017      	beq.n	802530e <__b2d+0x92>
 80252de:	f1c0 0c20 	rsb	ip, r0, #32
 80252e2:	fa04 f500 	lsl.w	r5, r4, r0
 80252e6:	42be      	cmp	r6, r7
 80252e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80252ec:	ea45 0504 	orr.w	r5, r5, r4
 80252f0:	bf8c      	ite	hi
 80252f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80252f6:	2400      	movls	r4, #0
 80252f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80252fc:	fa01 f000 	lsl.w	r0, r1, r0
 8025300:	fa24 f40c 	lsr.w	r4, r4, ip
 8025304:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8025308:	ea40 0204 	orr.w	r2, r0, r4
 802530c:	e7db      	b.n	80252c6 <__b2d+0x4a>
 802530e:	ea44 030c 	orr.w	r3, r4, ip
 8025312:	460a      	mov	r2, r1
 8025314:	e7d7      	b.n	80252c6 <__b2d+0x4a>
 8025316:	bf00      	nop
 8025318:	3ff00000 	.word	0x3ff00000

0802531c <__d2b>:
 802531c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025320:	4689      	mov	r9, r1
 8025322:	2101      	movs	r1, #1
 8025324:	ec57 6b10 	vmov	r6, r7, d0
 8025328:	4690      	mov	r8, r2
 802532a:	f7ff fc09 	bl	8024b40 <_Balloc>
 802532e:	4604      	mov	r4, r0
 8025330:	b930      	cbnz	r0, 8025340 <__d2b+0x24>
 8025332:	4602      	mov	r2, r0
 8025334:	4b25      	ldr	r3, [pc, #148]	; (80253cc <__d2b+0xb0>)
 8025336:	4826      	ldr	r0, [pc, #152]	; (80253d0 <__d2b+0xb4>)
 8025338:	f240 310a 	movw	r1, #778	; 0x30a
 802533c:	f7fd fa52 	bl	80227e4 <__assert_func>
 8025340:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8025344:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8025348:	bb35      	cbnz	r5, 8025398 <__d2b+0x7c>
 802534a:	2e00      	cmp	r6, #0
 802534c:	9301      	str	r3, [sp, #4]
 802534e:	d028      	beq.n	80253a2 <__d2b+0x86>
 8025350:	4668      	mov	r0, sp
 8025352:	9600      	str	r6, [sp, #0]
 8025354:	f7ff fd06 	bl	8024d64 <__lo0bits>
 8025358:	9900      	ldr	r1, [sp, #0]
 802535a:	b300      	cbz	r0, 802539e <__d2b+0x82>
 802535c:	9a01      	ldr	r2, [sp, #4]
 802535e:	f1c0 0320 	rsb	r3, r0, #32
 8025362:	fa02 f303 	lsl.w	r3, r2, r3
 8025366:	430b      	orrs	r3, r1
 8025368:	40c2      	lsrs	r2, r0
 802536a:	6163      	str	r3, [r4, #20]
 802536c:	9201      	str	r2, [sp, #4]
 802536e:	9b01      	ldr	r3, [sp, #4]
 8025370:	61a3      	str	r3, [r4, #24]
 8025372:	2b00      	cmp	r3, #0
 8025374:	bf14      	ite	ne
 8025376:	2202      	movne	r2, #2
 8025378:	2201      	moveq	r2, #1
 802537a:	6122      	str	r2, [r4, #16]
 802537c:	b1d5      	cbz	r5, 80253b4 <__d2b+0x98>
 802537e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8025382:	4405      	add	r5, r0
 8025384:	f8c9 5000 	str.w	r5, [r9]
 8025388:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802538c:	f8c8 0000 	str.w	r0, [r8]
 8025390:	4620      	mov	r0, r4
 8025392:	b003      	add	sp, #12
 8025394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802539c:	e7d5      	b.n	802534a <__d2b+0x2e>
 802539e:	6161      	str	r1, [r4, #20]
 80253a0:	e7e5      	b.n	802536e <__d2b+0x52>
 80253a2:	a801      	add	r0, sp, #4
 80253a4:	f7ff fcde 	bl	8024d64 <__lo0bits>
 80253a8:	9b01      	ldr	r3, [sp, #4]
 80253aa:	6163      	str	r3, [r4, #20]
 80253ac:	2201      	movs	r2, #1
 80253ae:	6122      	str	r2, [r4, #16]
 80253b0:	3020      	adds	r0, #32
 80253b2:	e7e3      	b.n	802537c <__d2b+0x60>
 80253b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80253b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80253bc:	f8c9 0000 	str.w	r0, [r9]
 80253c0:	6918      	ldr	r0, [r3, #16]
 80253c2:	f7ff fcaf 	bl	8024d24 <__hi0bits>
 80253c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80253ca:	e7df      	b.n	802538c <__d2b+0x70>
 80253cc:	0802a6ac 	.word	0x0802a6ac
 80253d0:	0802a74f 	.word	0x0802a74f

080253d4 <__ratio>:
 80253d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253d8:	4688      	mov	r8, r1
 80253da:	4669      	mov	r1, sp
 80253dc:	4681      	mov	r9, r0
 80253de:	f7ff ff4d 	bl	802527c <__b2d>
 80253e2:	a901      	add	r1, sp, #4
 80253e4:	4640      	mov	r0, r8
 80253e6:	ec55 4b10 	vmov	r4, r5, d0
 80253ea:	f7ff ff47 	bl	802527c <__b2d>
 80253ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80253f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80253f6:	eba3 0c02 	sub.w	ip, r3, r2
 80253fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80253fe:	1a9b      	subs	r3, r3, r2
 8025400:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8025404:	ec51 0b10 	vmov	r0, r1, d0
 8025408:	2b00      	cmp	r3, #0
 802540a:	bfd6      	itet	le
 802540c:	460a      	movle	r2, r1
 802540e:	462a      	movgt	r2, r5
 8025410:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8025414:	468b      	mov	fp, r1
 8025416:	462f      	mov	r7, r5
 8025418:	bfd4      	ite	le
 802541a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802541e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8025422:	4620      	mov	r0, r4
 8025424:	ee10 2a10 	vmov	r2, s0
 8025428:	465b      	mov	r3, fp
 802542a:	4639      	mov	r1, r7
 802542c:	f7db fa18 	bl	8000860 <__aeabi_ddiv>
 8025430:	ec41 0b10 	vmov	d0, r0, r1
 8025434:	b003      	add	sp, #12
 8025436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802543a <__copybits>:
 802543a:	3901      	subs	r1, #1
 802543c:	b570      	push	{r4, r5, r6, lr}
 802543e:	1149      	asrs	r1, r1, #5
 8025440:	6914      	ldr	r4, [r2, #16]
 8025442:	3101      	adds	r1, #1
 8025444:	f102 0314 	add.w	r3, r2, #20
 8025448:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802544c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025450:	1f05      	subs	r5, r0, #4
 8025452:	42a3      	cmp	r3, r4
 8025454:	d30c      	bcc.n	8025470 <__copybits+0x36>
 8025456:	1aa3      	subs	r3, r4, r2
 8025458:	3b11      	subs	r3, #17
 802545a:	f023 0303 	bic.w	r3, r3, #3
 802545e:	3211      	adds	r2, #17
 8025460:	42a2      	cmp	r2, r4
 8025462:	bf88      	it	hi
 8025464:	2300      	movhi	r3, #0
 8025466:	4418      	add	r0, r3
 8025468:	2300      	movs	r3, #0
 802546a:	4288      	cmp	r0, r1
 802546c:	d305      	bcc.n	802547a <__copybits+0x40>
 802546e:	bd70      	pop	{r4, r5, r6, pc}
 8025470:	f853 6b04 	ldr.w	r6, [r3], #4
 8025474:	f845 6f04 	str.w	r6, [r5, #4]!
 8025478:	e7eb      	b.n	8025452 <__copybits+0x18>
 802547a:	f840 3b04 	str.w	r3, [r0], #4
 802547e:	e7f4      	b.n	802546a <__copybits+0x30>

08025480 <__any_on>:
 8025480:	f100 0214 	add.w	r2, r0, #20
 8025484:	6900      	ldr	r0, [r0, #16]
 8025486:	114b      	asrs	r3, r1, #5
 8025488:	4298      	cmp	r0, r3
 802548a:	b510      	push	{r4, lr}
 802548c:	db11      	blt.n	80254b2 <__any_on+0x32>
 802548e:	dd0a      	ble.n	80254a6 <__any_on+0x26>
 8025490:	f011 011f 	ands.w	r1, r1, #31
 8025494:	d007      	beq.n	80254a6 <__any_on+0x26>
 8025496:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802549a:	fa24 f001 	lsr.w	r0, r4, r1
 802549e:	fa00 f101 	lsl.w	r1, r0, r1
 80254a2:	428c      	cmp	r4, r1
 80254a4:	d10b      	bne.n	80254be <__any_on+0x3e>
 80254a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80254aa:	4293      	cmp	r3, r2
 80254ac:	d803      	bhi.n	80254b6 <__any_on+0x36>
 80254ae:	2000      	movs	r0, #0
 80254b0:	bd10      	pop	{r4, pc}
 80254b2:	4603      	mov	r3, r0
 80254b4:	e7f7      	b.n	80254a6 <__any_on+0x26>
 80254b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80254ba:	2900      	cmp	r1, #0
 80254bc:	d0f5      	beq.n	80254aa <__any_on+0x2a>
 80254be:	2001      	movs	r0, #1
 80254c0:	e7f6      	b.n	80254b0 <__any_on+0x30>

080254c2 <_realloc_r>:
 80254c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254c6:	4680      	mov	r8, r0
 80254c8:	4614      	mov	r4, r2
 80254ca:	460e      	mov	r6, r1
 80254cc:	b921      	cbnz	r1, 80254d8 <_realloc_r+0x16>
 80254ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80254d2:	4611      	mov	r1, r2
 80254d4:	f7fd bab2 	b.w	8022a3c <_malloc_r>
 80254d8:	b92a      	cbnz	r2, 80254e6 <_realloc_r+0x24>
 80254da:	f7fd fa43 	bl	8022964 <_free_r>
 80254de:	4625      	mov	r5, r4
 80254e0:	4628      	mov	r0, r5
 80254e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254e6:	f000 fa1d 	bl	8025924 <_malloc_usable_size_r>
 80254ea:	4284      	cmp	r4, r0
 80254ec:	4607      	mov	r7, r0
 80254ee:	d802      	bhi.n	80254f6 <_realloc_r+0x34>
 80254f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80254f4:	d812      	bhi.n	802551c <_realloc_r+0x5a>
 80254f6:	4621      	mov	r1, r4
 80254f8:	4640      	mov	r0, r8
 80254fa:	f7fd fa9f 	bl	8022a3c <_malloc_r>
 80254fe:	4605      	mov	r5, r0
 8025500:	2800      	cmp	r0, #0
 8025502:	d0ed      	beq.n	80254e0 <_realloc_r+0x1e>
 8025504:	42bc      	cmp	r4, r7
 8025506:	4622      	mov	r2, r4
 8025508:	4631      	mov	r1, r6
 802550a:	bf28      	it	cs
 802550c:	463a      	movcs	r2, r7
 802550e:	f7fd f9e3 	bl	80228d8 <memcpy>
 8025512:	4631      	mov	r1, r6
 8025514:	4640      	mov	r0, r8
 8025516:	f7fd fa25 	bl	8022964 <_free_r>
 802551a:	e7e1      	b.n	80254e0 <_realloc_r+0x1e>
 802551c:	4635      	mov	r5, r6
 802551e:	e7df      	b.n	80254e0 <_realloc_r+0x1e>

08025520 <__ssputs_r>:
 8025520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025524:	688e      	ldr	r6, [r1, #8]
 8025526:	429e      	cmp	r6, r3
 8025528:	4682      	mov	sl, r0
 802552a:	460c      	mov	r4, r1
 802552c:	4690      	mov	r8, r2
 802552e:	461f      	mov	r7, r3
 8025530:	d838      	bhi.n	80255a4 <__ssputs_r+0x84>
 8025532:	898a      	ldrh	r2, [r1, #12]
 8025534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025538:	d032      	beq.n	80255a0 <__ssputs_r+0x80>
 802553a:	6825      	ldr	r5, [r4, #0]
 802553c:	6909      	ldr	r1, [r1, #16]
 802553e:	eba5 0901 	sub.w	r9, r5, r1
 8025542:	6965      	ldr	r5, [r4, #20]
 8025544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802554c:	3301      	adds	r3, #1
 802554e:	444b      	add	r3, r9
 8025550:	106d      	asrs	r5, r5, #1
 8025552:	429d      	cmp	r5, r3
 8025554:	bf38      	it	cc
 8025556:	461d      	movcc	r5, r3
 8025558:	0553      	lsls	r3, r2, #21
 802555a:	d531      	bpl.n	80255c0 <__ssputs_r+0xa0>
 802555c:	4629      	mov	r1, r5
 802555e:	f7fd fa6d 	bl	8022a3c <_malloc_r>
 8025562:	4606      	mov	r6, r0
 8025564:	b950      	cbnz	r0, 802557c <__ssputs_r+0x5c>
 8025566:	230c      	movs	r3, #12
 8025568:	f8ca 3000 	str.w	r3, [sl]
 802556c:	89a3      	ldrh	r3, [r4, #12]
 802556e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025572:	81a3      	strh	r3, [r4, #12]
 8025574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802557c:	6921      	ldr	r1, [r4, #16]
 802557e:	464a      	mov	r2, r9
 8025580:	f7fd f9aa 	bl	80228d8 <memcpy>
 8025584:	89a3      	ldrh	r3, [r4, #12]
 8025586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802558a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802558e:	81a3      	strh	r3, [r4, #12]
 8025590:	6126      	str	r6, [r4, #16]
 8025592:	6165      	str	r5, [r4, #20]
 8025594:	444e      	add	r6, r9
 8025596:	eba5 0509 	sub.w	r5, r5, r9
 802559a:	6026      	str	r6, [r4, #0]
 802559c:	60a5      	str	r5, [r4, #8]
 802559e:	463e      	mov	r6, r7
 80255a0:	42be      	cmp	r6, r7
 80255a2:	d900      	bls.n	80255a6 <__ssputs_r+0x86>
 80255a4:	463e      	mov	r6, r7
 80255a6:	6820      	ldr	r0, [r4, #0]
 80255a8:	4632      	mov	r2, r6
 80255aa:	4641      	mov	r1, r8
 80255ac:	f7fd f9a2 	bl	80228f4 <memmove>
 80255b0:	68a3      	ldr	r3, [r4, #8]
 80255b2:	1b9b      	subs	r3, r3, r6
 80255b4:	60a3      	str	r3, [r4, #8]
 80255b6:	6823      	ldr	r3, [r4, #0]
 80255b8:	4433      	add	r3, r6
 80255ba:	6023      	str	r3, [r4, #0]
 80255bc:	2000      	movs	r0, #0
 80255be:	e7db      	b.n	8025578 <__ssputs_r+0x58>
 80255c0:	462a      	mov	r2, r5
 80255c2:	f7ff ff7e 	bl	80254c2 <_realloc_r>
 80255c6:	4606      	mov	r6, r0
 80255c8:	2800      	cmp	r0, #0
 80255ca:	d1e1      	bne.n	8025590 <__ssputs_r+0x70>
 80255cc:	6921      	ldr	r1, [r4, #16]
 80255ce:	4650      	mov	r0, sl
 80255d0:	f7fd f9c8 	bl	8022964 <_free_r>
 80255d4:	e7c7      	b.n	8025566 <__ssputs_r+0x46>
	...

080255d8 <_svfiprintf_r>:
 80255d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255dc:	4698      	mov	r8, r3
 80255de:	898b      	ldrh	r3, [r1, #12]
 80255e0:	061b      	lsls	r3, r3, #24
 80255e2:	b09d      	sub	sp, #116	; 0x74
 80255e4:	4607      	mov	r7, r0
 80255e6:	460d      	mov	r5, r1
 80255e8:	4614      	mov	r4, r2
 80255ea:	d50e      	bpl.n	802560a <_svfiprintf_r+0x32>
 80255ec:	690b      	ldr	r3, [r1, #16]
 80255ee:	b963      	cbnz	r3, 802560a <_svfiprintf_r+0x32>
 80255f0:	2140      	movs	r1, #64	; 0x40
 80255f2:	f7fd fa23 	bl	8022a3c <_malloc_r>
 80255f6:	6028      	str	r0, [r5, #0]
 80255f8:	6128      	str	r0, [r5, #16]
 80255fa:	b920      	cbnz	r0, 8025606 <_svfiprintf_r+0x2e>
 80255fc:	230c      	movs	r3, #12
 80255fe:	603b      	str	r3, [r7, #0]
 8025600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025604:	e0d1      	b.n	80257aa <_svfiprintf_r+0x1d2>
 8025606:	2340      	movs	r3, #64	; 0x40
 8025608:	616b      	str	r3, [r5, #20]
 802560a:	2300      	movs	r3, #0
 802560c:	9309      	str	r3, [sp, #36]	; 0x24
 802560e:	2320      	movs	r3, #32
 8025610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025614:	f8cd 800c 	str.w	r8, [sp, #12]
 8025618:	2330      	movs	r3, #48	; 0x30
 802561a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80257c4 <_svfiprintf_r+0x1ec>
 802561e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025622:	f04f 0901 	mov.w	r9, #1
 8025626:	4623      	mov	r3, r4
 8025628:	469a      	mov	sl, r3
 802562a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802562e:	b10a      	cbz	r2, 8025634 <_svfiprintf_r+0x5c>
 8025630:	2a25      	cmp	r2, #37	; 0x25
 8025632:	d1f9      	bne.n	8025628 <_svfiprintf_r+0x50>
 8025634:	ebba 0b04 	subs.w	fp, sl, r4
 8025638:	d00b      	beq.n	8025652 <_svfiprintf_r+0x7a>
 802563a:	465b      	mov	r3, fp
 802563c:	4622      	mov	r2, r4
 802563e:	4629      	mov	r1, r5
 8025640:	4638      	mov	r0, r7
 8025642:	f7ff ff6d 	bl	8025520 <__ssputs_r>
 8025646:	3001      	adds	r0, #1
 8025648:	f000 80aa 	beq.w	80257a0 <_svfiprintf_r+0x1c8>
 802564c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802564e:	445a      	add	r2, fp
 8025650:	9209      	str	r2, [sp, #36]	; 0x24
 8025652:	f89a 3000 	ldrb.w	r3, [sl]
 8025656:	2b00      	cmp	r3, #0
 8025658:	f000 80a2 	beq.w	80257a0 <_svfiprintf_r+0x1c8>
 802565c:	2300      	movs	r3, #0
 802565e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025666:	f10a 0a01 	add.w	sl, sl, #1
 802566a:	9304      	str	r3, [sp, #16]
 802566c:	9307      	str	r3, [sp, #28]
 802566e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025672:	931a      	str	r3, [sp, #104]	; 0x68
 8025674:	4654      	mov	r4, sl
 8025676:	2205      	movs	r2, #5
 8025678:	f814 1b01 	ldrb.w	r1, [r4], #1
 802567c:	4851      	ldr	r0, [pc, #324]	; (80257c4 <_svfiprintf_r+0x1ec>)
 802567e:	f7da fda7 	bl	80001d0 <memchr>
 8025682:	9a04      	ldr	r2, [sp, #16]
 8025684:	b9d8      	cbnz	r0, 80256be <_svfiprintf_r+0xe6>
 8025686:	06d0      	lsls	r0, r2, #27
 8025688:	bf44      	itt	mi
 802568a:	2320      	movmi	r3, #32
 802568c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025690:	0711      	lsls	r1, r2, #28
 8025692:	bf44      	itt	mi
 8025694:	232b      	movmi	r3, #43	; 0x2b
 8025696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802569a:	f89a 3000 	ldrb.w	r3, [sl]
 802569e:	2b2a      	cmp	r3, #42	; 0x2a
 80256a0:	d015      	beq.n	80256ce <_svfiprintf_r+0xf6>
 80256a2:	9a07      	ldr	r2, [sp, #28]
 80256a4:	4654      	mov	r4, sl
 80256a6:	2000      	movs	r0, #0
 80256a8:	f04f 0c0a 	mov.w	ip, #10
 80256ac:	4621      	mov	r1, r4
 80256ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80256b2:	3b30      	subs	r3, #48	; 0x30
 80256b4:	2b09      	cmp	r3, #9
 80256b6:	d94e      	bls.n	8025756 <_svfiprintf_r+0x17e>
 80256b8:	b1b0      	cbz	r0, 80256e8 <_svfiprintf_r+0x110>
 80256ba:	9207      	str	r2, [sp, #28]
 80256bc:	e014      	b.n	80256e8 <_svfiprintf_r+0x110>
 80256be:	eba0 0308 	sub.w	r3, r0, r8
 80256c2:	fa09 f303 	lsl.w	r3, r9, r3
 80256c6:	4313      	orrs	r3, r2
 80256c8:	9304      	str	r3, [sp, #16]
 80256ca:	46a2      	mov	sl, r4
 80256cc:	e7d2      	b.n	8025674 <_svfiprintf_r+0x9c>
 80256ce:	9b03      	ldr	r3, [sp, #12]
 80256d0:	1d19      	adds	r1, r3, #4
 80256d2:	681b      	ldr	r3, [r3, #0]
 80256d4:	9103      	str	r1, [sp, #12]
 80256d6:	2b00      	cmp	r3, #0
 80256d8:	bfbb      	ittet	lt
 80256da:	425b      	neglt	r3, r3
 80256dc:	f042 0202 	orrlt.w	r2, r2, #2
 80256e0:	9307      	strge	r3, [sp, #28]
 80256e2:	9307      	strlt	r3, [sp, #28]
 80256e4:	bfb8      	it	lt
 80256e6:	9204      	strlt	r2, [sp, #16]
 80256e8:	7823      	ldrb	r3, [r4, #0]
 80256ea:	2b2e      	cmp	r3, #46	; 0x2e
 80256ec:	d10c      	bne.n	8025708 <_svfiprintf_r+0x130>
 80256ee:	7863      	ldrb	r3, [r4, #1]
 80256f0:	2b2a      	cmp	r3, #42	; 0x2a
 80256f2:	d135      	bne.n	8025760 <_svfiprintf_r+0x188>
 80256f4:	9b03      	ldr	r3, [sp, #12]
 80256f6:	1d1a      	adds	r2, r3, #4
 80256f8:	681b      	ldr	r3, [r3, #0]
 80256fa:	9203      	str	r2, [sp, #12]
 80256fc:	2b00      	cmp	r3, #0
 80256fe:	bfb8      	it	lt
 8025700:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8025704:	3402      	adds	r4, #2
 8025706:	9305      	str	r3, [sp, #20]
 8025708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80257d4 <_svfiprintf_r+0x1fc>
 802570c:	7821      	ldrb	r1, [r4, #0]
 802570e:	2203      	movs	r2, #3
 8025710:	4650      	mov	r0, sl
 8025712:	f7da fd5d 	bl	80001d0 <memchr>
 8025716:	b140      	cbz	r0, 802572a <_svfiprintf_r+0x152>
 8025718:	2340      	movs	r3, #64	; 0x40
 802571a:	eba0 000a 	sub.w	r0, r0, sl
 802571e:	fa03 f000 	lsl.w	r0, r3, r0
 8025722:	9b04      	ldr	r3, [sp, #16]
 8025724:	4303      	orrs	r3, r0
 8025726:	3401      	adds	r4, #1
 8025728:	9304      	str	r3, [sp, #16]
 802572a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802572e:	4826      	ldr	r0, [pc, #152]	; (80257c8 <_svfiprintf_r+0x1f0>)
 8025730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025734:	2206      	movs	r2, #6
 8025736:	f7da fd4b 	bl	80001d0 <memchr>
 802573a:	2800      	cmp	r0, #0
 802573c:	d038      	beq.n	80257b0 <_svfiprintf_r+0x1d8>
 802573e:	4b23      	ldr	r3, [pc, #140]	; (80257cc <_svfiprintf_r+0x1f4>)
 8025740:	bb1b      	cbnz	r3, 802578a <_svfiprintf_r+0x1b2>
 8025742:	9b03      	ldr	r3, [sp, #12]
 8025744:	3307      	adds	r3, #7
 8025746:	f023 0307 	bic.w	r3, r3, #7
 802574a:	3308      	adds	r3, #8
 802574c:	9303      	str	r3, [sp, #12]
 802574e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025750:	4433      	add	r3, r6
 8025752:	9309      	str	r3, [sp, #36]	; 0x24
 8025754:	e767      	b.n	8025626 <_svfiprintf_r+0x4e>
 8025756:	fb0c 3202 	mla	r2, ip, r2, r3
 802575a:	460c      	mov	r4, r1
 802575c:	2001      	movs	r0, #1
 802575e:	e7a5      	b.n	80256ac <_svfiprintf_r+0xd4>
 8025760:	2300      	movs	r3, #0
 8025762:	3401      	adds	r4, #1
 8025764:	9305      	str	r3, [sp, #20]
 8025766:	4619      	mov	r1, r3
 8025768:	f04f 0c0a 	mov.w	ip, #10
 802576c:	4620      	mov	r0, r4
 802576e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025772:	3a30      	subs	r2, #48	; 0x30
 8025774:	2a09      	cmp	r2, #9
 8025776:	d903      	bls.n	8025780 <_svfiprintf_r+0x1a8>
 8025778:	2b00      	cmp	r3, #0
 802577a:	d0c5      	beq.n	8025708 <_svfiprintf_r+0x130>
 802577c:	9105      	str	r1, [sp, #20]
 802577e:	e7c3      	b.n	8025708 <_svfiprintf_r+0x130>
 8025780:	fb0c 2101 	mla	r1, ip, r1, r2
 8025784:	4604      	mov	r4, r0
 8025786:	2301      	movs	r3, #1
 8025788:	e7f0      	b.n	802576c <_svfiprintf_r+0x194>
 802578a:	ab03      	add	r3, sp, #12
 802578c:	9300      	str	r3, [sp, #0]
 802578e:	462a      	mov	r2, r5
 8025790:	4b0f      	ldr	r3, [pc, #60]	; (80257d0 <_svfiprintf_r+0x1f8>)
 8025792:	a904      	add	r1, sp, #16
 8025794:	4638      	mov	r0, r7
 8025796:	f3af 8000 	nop.w
 802579a:	1c42      	adds	r2, r0, #1
 802579c:	4606      	mov	r6, r0
 802579e:	d1d6      	bne.n	802574e <_svfiprintf_r+0x176>
 80257a0:	89ab      	ldrh	r3, [r5, #12]
 80257a2:	065b      	lsls	r3, r3, #25
 80257a4:	f53f af2c 	bmi.w	8025600 <_svfiprintf_r+0x28>
 80257a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80257aa:	b01d      	add	sp, #116	; 0x74
 80257ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257b0:	ab03      	add	r3, sp, #12
 80257b2:	9300      	str	r3, [sp, #0]
 80257b4:	462a      	mov	r2, r5
 80257b6:	4b06      	ldr	r3, [pc, #24]	; (80257d0 <_svfiprintf_r+0x1f8>)
 80257b8:	a904      	add	r1, sp, #16
 80257ba:	4638      	mov	r0, r7
 80257bc:	f7fd fb7a 	bl	8022eb4 <_printf_i>
 80257c0:	e7eb      	b.n	802579a <_svfiprintf_r+0x1c2>
 80257c2:	bf00      	nop
 80257c4:	0802a4b8 	.word	0x0802a4b8
 80257c8:	0802a4c2 	.word	0x0802a4c2
 80257cc:	00000000 	.word	0x00000000
 80257d0:	08025521 	.word	0x08025521
 80257d4:	0802a4be 	.word	0x0802a4be

080257d8 <__sread>:
 80257d8:	b510      	push	{r4, lr}
 80257da:	460c      	mov	r4, r1
 80257dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80257e0:	f000 f8a8 	bl	8025934 <_read_r>
 80257e4:	2800      	cmp	r0, #0
 80257e6:	bfab      	itete	ge
 80257e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80257ea:	89a3      	ldrhlt	r3, [r4, #12]
 80257ec:	181b      	addge	r3, r3, r0
 80257ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80257f2:	bfac      	ite	ge
 80257f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80257f6:	81a3      	strhlt	r3, [r4, #12]
 80257f8:	bd10      	pop	{r4, pc}

080257fa <__swrite>:
 80257fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80257fe:	461f      	mov	r7, r3
 8025800:	898b      	ldrh	r3, [r1, #12]
 8025802:	05db      	lsls	r3, r3, #23
 8025804:	4605      	mov	r5, r0
 8025806:	460c      	mov	r4, r1
 8025808:	4616      	mov	r6, r2
 802580a:	d505      	bpl.n	8025818 <__swrite+0x1e>
 802580c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025810:	2302      	movs	r3, #2
 8025812:	2200      	movs	r2, #0
 8025814:	f000 f874 	bl	8025900 <_lseek_r>
 8025818:	89a3      	ldrh	r3, [r4, #12]
 802581a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802581e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025822:	81a3      	strh	r3, [r4, #12]
 8025824:	4632      	mov	r2, r6
 8025826:	463b      	mov	r3, r7
 8025828:	4628      	mov	r0, r5
 802582a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802582e:	f000 b823 	b.w	8025878 <_write_r>

08025832 <__sseek>:
 8025832:	b510      	push	{r4, lr}
 8025834:	460c      	mov	r4, r1
 8025836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802583a:	f000 f861 	bl	8025900 <_lseek_r>
 802583e:	1c43      	adds	r3, r0, #1
 8025840:	89a3      	ldrh	r3, [r4, #12]
 8025842:	bf15      	itete	ne
 8025844:	6560      	strne	r0, [r4, #84]	; 0x54
 8025846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802584a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802584e:	81a3      	strheq	r3, [r4, #12]
 8025850:	bf18      	it	ne
 8025852:	81a3      	strhne	r3, [r4, #12]
 8025854:	bd10      	pop	{r4, pc}

08025856 <__sclose>:
 8025856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802585a:	f000 b81f 	b.w	802589c <_close_r>

0802585e <__ascii_wctomb>:
 802585e:	b149      	cbz	r1, 8025874 <__ascii_wctomb+0x16>
 8025860:	2aff      	cmp	r2, #255	; 0xff
 8025862:	bf85      	ittet	hi
 8025864:	238a      	movhi	r3, #138	; 0x8a
 8025866:	6003      	strhi	r3, [r0, #0]
 8025868:	700a      	strbls	r2, [r1, #0]
 802586a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802586e:	bf98      	it	ls
 8025870:	2001      	movls	r0, #1
 8025872:	4770      	bx	lr
 8025874:	4608      	mov	r0, r1
 8025876:	4770      	bx	lr

08025878 <_write_r>:
 8025878:	b538      	push	{r3, r4, r5, lr}
 802587a:	4d07      	ldr	r5, [pc, #28]	; (8025898 <_write_r+0x20>)
 802587c:	4604      	mov	r4, r0
 802587e:	4608      	mov	r0, r1
 8025880:	4611      	mov	r1, r2
 8025882:	2200      	movs	r2, #0
 8025884:	602a      	str	r2, [r5, #0]
 8025886:	461a      	mov	r2, r3
 8025888:	f7e3 f977 	bl	8008b7a <_write>
 802588c:	1c43      	adds	r3, r0, #1
 802588e:	d102      	bne.n	8025896 <_write_r+0x1e>
 8025890:	682b      	ldr	r3, [r5, #0]
 8025892:	b103      	cbz	r3, 8025896 <_write_r+0x1e>
 8025894:	6023      	str	r3, [r4, #0]
 8025896:	bd38      	pop	{r3, r4, r5, pc}
 8025898:	2000262c 	.word	0x2000262c

0802589c <_close_r>:
 802589c:	b538      	push	{r3, r4, r5, lr}
 802589e:	4d06      	ldr	r5, [pc, #24]	; (80258b8 <_close_r+0x1c>)
 80258a0:	2300      	movs	r3, #0
 80258a2:	4604      	mov	r4, r0
 80258a4:	4608      	mov	r0, r1
 80258a6:	602b      	str	r3, [r5, #0]
 80258a8:	f7e3 f983 	bl	8008bb2 <_close>
 80258ac:	1c43      	adds	r3, r0, #1
 80258ae:	d102      	bne.n	80258b6 <_close_r+0x1a>
 80258b0:	682b      	ldr	r3, [r5, #0]
 80258b2:	b103      	cbz	r3, 80258b6 <_close_r+0x1a>
 80258b4:	6023      	str	r3, [r4, #0]
 80258b6:	bd38      	pop	{r3, r4, r5, pc}
 80258b8:	2000262c 	.word	0x2000262c

080258bc <_fstat_r>:
 80258bc:	b538      	push	{r3, r4, r5, lr}
 80258be:	4d07      	ldr	r5, [pc, #28]	; (80258dc <_fstat_r+0x20>)
 80258c0:	2300      	movs	r3, #0
 80258c2:	4604      	mov	r4, r0
 80258c4:	4608      	mov	r0, r1
 80258c6:	4611      	mov	r1, r2
 80258c8:	602b      	str	r3, [r5, #0]
 80258ca:	f7e3 f97e 	bl	8008bca <_fstat>
 80258ce:	1c43      	adds	r3, r0, #1
 80258d0:	d102      	bne.n	80258d8 <_fstat_r+0x1c>
 80258d2:	682b      	ldr	r3, [r5, #0]
 80258d4:	b103      	cbz	r3, 80258d8 <_fstat_r+0x1c>
 80258d6:	6023      	str	r3, [r4, #0]
 80258d8:	bd38      	pop	{r3, r4, r5, pc}
 80258da:	bf00      	nop
 80258dc:	2000262c 	.word	0x2000262c

080258e0 <_isatty_r>:
 80258e0:	b538      	push	{r3, r4, r5, lr}
 80258e2:	4d06      	ldr	r5, [pc, #24]	; (80258fc <_isatty_r+0x1c>)
 80258e4:	2300      	movs	r3, #0
 80258e6:	4604      	mov	r4, r0
 80258e8:	4608      	mov	r0, r1
 80258ea:	602b      	str	r3, [r5, #0]
 80258ec:	f7e3 f97d 	bl	8008bea <_isatty>
 80258f0:	1c43      	adds	r3, r0, #1
 80258f2:	d102      	bne.n	80258fa <_isatty_r+0x1a>
 80258f4:	682b      	ldr	r3, [r5, #0]
 80258f6:	b103      	cbz	r3, 80258fa <_isatty_r+0x1a>
 80258f8:	6023      	str	r3, [r4, #0]
 80258fa:	bd38      	pop	{r3, r4, r5, pc}
 80258fc:	2000262c 	.word	0x2000262c

08025900 <_lseek_r>:
 8025900:	b538      	push	{r3, r4, r5, lr}
 8025902:	4d07      	ldr	r5, [pc, #28]	; (8025920 <_lseek_r+0x20>)
 8025904:	4604      	mov	r4, r0
 8025906:	4608      	mov	r0, r1
 8025908:	4611      	mov	r1, r2
 802590a:	2200      	movs	r2, #0
 802590c:	602a      	str	r2, [r5, #0]
 802590e:	461a      	mov	r2, r3
 8025910:	f7e3 f976 	bl	8008c00 <_lseek>
 8025914:	1c43      	adds	r3, r0, #1
 8025916:	d102      	bne.n	802591e <_lseek_r+0x1e>
 8025918:	682b      	ldr	r3, [r5, #0]
 802591a:	b103      	cbz	r3, 802591e <_lseek_r+0x1e>
 802591c:	6023      	str	r3, [r4, #0]
 802591e:	bd38      	pop	{r3, r4, r5, pc}
 8025920:	2000262c 	.word	0x2000262c

08025924 <_malloc_usable_size_r>:
 8025924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025928:	1f18      	subs	r0, r3, #4
 802592a:	2b00      	cmp	r3, #0
 802592c:	bfbc      	itt	lt
 802592e:	580b      	ldrlt	r3, [r1, r0]
 8025930:	18c0      	addlt	r0, r0, r3
 8025932:	4770      	bx	lr

08025934 <_read_r>:
 8025934:	b538      	push	{r3, r4, r5, lr}
 8025936:	4d07      	ldr	r5, [pc, #28]	; (8025954 <_read_r+0x20>)
 8025938:	4604      	mov	r4, r0
 802593a:	4608      	mov	r0, r1
 802593c:	4611      	mov	r1, r2
 802593e:	2200      	movs	r2, #0
 8025940:	602a      	str	r2, [r5, #0]
 8025942:	461a      	mov	r2, r3
 8025944:	f7e3 f8fc 	bl	8008b40 <_read>
 8025948:	1c43      	adds	r3, r0, #1
 802594a:	d102      	bne.n	8025952 <_read_r+0x1e>
 802594c:	682b      	ldr	r3, [r5, #0]
 802594e:	b103      	cbz	r3, 8025952 <_read_r+0x1e>
 8025950:	6023      	str	r3, [r4, #0]
 8025952:	bd38      	pop	{r3, r4, r5, pc}
 8025954:	2000262c 	.word	0x2000262c

08025958 <_init>:
 8025958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802595a:	bf00      	nop
 802595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802595e:	bc08      	pop	{r3}
 8025960:	469e      	mov	lr, r3
 8025962:	4770      	bx	lr

08025964 <_fini>:
 8025964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025966:	bf00      	nop
 8025968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802596a:	bc08      	pop	{r3}
 802596c:	469e      	mov	lr, r3
 802596e:	4770      	bx	lr
